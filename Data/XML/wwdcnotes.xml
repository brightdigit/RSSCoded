<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>WWDC NOTES</title><description>Open-source and community-driven effort to collect notes for all Apple's WWDC videos. ❤️</description><link>https://www.wwdcnotes.com</link><language>en</language><lastBuildDate>Mon, 21 Jun 2021 20:22:43 +0700</lastBuildDate><pubDate>Mon, 21 Jun 2021 20:22:43 +0700</pubDate><ttl>250</ttl><atom:link href="https://www.wwdcnotes.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10019</guid><title>Discover concurrency in SwiftUI</title><description>Discover how you can use Swift’s concurrency features to build even better SwiftUI apps. We’ll show you how concurrent workflows interact with your ObservableObjects, and explore how you can use them directly in your SwiftUI views and models. Find out how to use await to make your app run smoothly on the SwiftUI runloop, and learn how to fetch remote images quickly with the AsyncImage API. And we'll take you through the process of enabling additional asynchronous flows in your custom views.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10019</link><pubDate>Mon, 21 Jun 2021 20:11:58 +0700</pubDate><content:encoded><![CDATA[<h2>ObservableObject + @MainActor</h2><p>Imagine a view with the following class as a dependency:</p><pre><code><span class="keyword">class</span> Photos: <span class="type">ObservableObject</span> { 
  <span class="keyword">@Published var</span> items: [<span class="type">SpacePhoto</span>] = [] 

  <span class="keyword">func</span> updateItems() { 
    <span class="keyword">let</span> fetched = <span class="comment">/* fetch new items */</span> 
    items = fetched 
  }
}
</code></pre><p>When we assign to <code>items</code> (second row in <code>updateItems()</code>):</p><ol><li>an <code>objectWillChange</code> event will trigger</li><li>then the new data will be stored in <code>items</code>'s storage</li></ol><p>When SwiftUI receives an <code>objectWillChange</code> event:</p><ol><li>it takes a snapshot of the object (<strong>before</strong> its storage is updated).</li><li>once the storage is updated, SwiftUI compares the previous snapshot with the current value</li><li>if the values are different, SwiftUI will update the view (and all other views depending on this <code>Photos</code> object)</li></ol><p>This flow works great as long as we are on the main thread/loop. If we assign to <code>items</code> in another thread, both SwiftUI snapshots might be taken before the <code>items</code> storage is actually updated, meaning that the snapshot comparison will find unchanged values, thus not updating our views.</p><p>New in Swift 5.5, we can declare our <code>ObservableObject</code> class with swift's <code>@MainActor</code> attribute and, instead of asynchronous callbacks, use the new <code>await</code> syntax to makes sure all operations are executed in the main thread.</p><h2>New SwiftUI features</h2><ul><li><a href="https://developer.apple.com/documentation/swiftui/emptyview/task(_:)"><code>task(_:)</code></a> is a new view modifier that lets you run a task for the view lifetime<ul><li>it starts when the view appears (similar to <code>onAppear</code>)</li><li>it gets cancelled the the view disappears (similar to <code>onDisappear</code>)</li></ul></li></ul><ul><li>use <a href="https://developer.apple.com/documentation/swiftui/asyncimage"><code>AsyncImage</code></a> to asynchronously load and display an image</li></ul><pre><code><span class="type">AsyncImage</span>(url: photo.<span class="property">url</span>) { image <span class="keyword">in</span>
  image
    .<span class="call">resizable</span>()
    .<span class="call">aspectRatio</span>(contentMode: .<span class="dotAccess">fill</span>)
} placeholder: {
  <span class="type">ProgressView</span>()
}
.<span class="call">frame</span>(minWidth: <span class="number">0</span>, minHeight: <span class="number">400</span>)
</code></pre><ul><li>use <a href="https://developer.apple.com/documentation/swiftui/view/refreshable(action:)"><code>refreshable(action:)</code></a> to add pull to refresh capabilities in your views<ul><li>as the <code>action</code> parameter expects an <code>async</code> closure, the refresh indicator stays visible for the duration of the awaited operation</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10048</guid><title>Principles of great widgets</title><description>Explore the foundations of great widgets by keeping them relevant and customizable. Learn how to keep widgets up to date with timeline entries and TimelineReloadPolicies. Discover how to adapt your widget to different presentation environments and physical location. And lastly, find out how to create customizable widgets that someone can personalize to their liking.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10048</link><pubDate>Mon, 21 Jun 2021 12:46:38 +0700</pubDate><content:encoded><![CDATA[<ul><li>provide as many timeline future entries as possible (when it makes sense for your app)</li><li>support as many sizes as you possible, so that users have choice when placing their widgets</li></ul><h2>Widgets relevance</h2><ul><li>Time</li><li>Presentation</li><li>Location</li></ul><h2>Widgets reloads</h2><ul><li>Individual background reload budgets</li><li>Budget updates throughout the day</li><li>Influenced by viewing habits</li><li>Variable update cadence per widget</li><li>Updates are withheld until new budget is available</li><li>A frequently viewed widget can be expected to receive 40-70 background updates per day</li><li>Reloads are on the order of minutes/hours, not seconds</li></ul><h3>Ways the widget will refresh</h3><table><thead><tr><th></th><th>Budgeted</th><th>Free</th></tr></thead><tbody><tr><td><code>TimelineReloadPolicy</code> API</td><td>✅</td><td>❌</td></tr><tr><td><code>WidgetCenter</code> reload API</td><td>✅</td><td>✅</td></tr><tr><td>Significant location changes</td><td>❌</td><td>✅</td></tr><tr><td>System updates</td><td>❌</td><td>✅</td></tr></tbody></table><ul><li><code>TimelineReloadPolicy</code> API<ul><li>Scheduled background updates <code>atEnd</code> <code>afterDate:</code> <code>never</code></li><li>informs the system when you’d like to automatically refresh your widget in the background</li></ul></li></ul><ul><li><code>WidgetCenter</code> API<ul><li>Event-based triggers <code>.reloatTimelines(ofKind:)</code> <code>.reloadAllTimelines</code></li><li>free when:<ul><li>the reload occurs when the host app is in the foreground</li><li>the user is in a current session, like Navigation or Now Playing audio</li></ul></li></ul></li></ul><ul><li>Significant location changes<ul><li>budget-free update when the system detects a significant location change</li><li>this free refresh occurs when the user views your widget (not when the location changes)</li></ul></li></ul><ul><li>System updates<ul><li>when a big change in the system happen:<ul><li>the user changes an Accessibility preference like dynamic text or bold text</li><li>language or region change</li><li>iCloud or App Store account change</li><li>significant time change</li><li>and more</li></ul></li></ul></li></ul><h2>TimelineReloadPolicy</h2><ul><li><code>atEnd</code><ul><li>marks your widget eligible to be refreshed when the current timeline last entry becomes relevant</li><li>recommended if your widget already has content that extends beyond the life of its current timeline</li><li>not recommended for single-entry timeline, as the system would choose a reload time for you</li><li>not recommended for data that loses accuracy over time (e.g. weather)</li><li>Apple apps using <code>atEnd</code> policy: Reminders, Calendar, Photos, Tips, and more</li></ul></li></ul><ul><li><code>afterDate</code><ul><li>marks your widget eligible to be refreshed after the date you specify</li><li>recommended for widgets showing unpredictable data (that can change unpredictably/unexpectedly)</li><li>recommended for widgets showing data whose accuracy or relevance changes periodically</li><li>Apple apps using <code>afterDate</code> policy: Stocks, Weather, News, Mail, and more</li><li>be cautious of:<ul><li>very frequent reloads (you risk to consume all refresh budget)</li><li>setting a date where new data will be available</li><li>(if backend data driven) to not overload your servers (add jitter to the data, use caching servers)</li></ul></li></ul></li></ul><ul><li><code>never</code><ul><li>it never refreshes automatically</li><li>recommended for content that:<ul><li>only changes through user interaction</li><li>doesn't change</li><li>gated on conditional access</li></ul></li></ul></li></ul><ul><li><ul><li>Use <code>WidgetCenter</code> API to refresh from foreground application or events</li><li>Apple apps using <code>never</code> policy: TV, notes, music, podcast, contacts, and more</li></ul></li></ul><h2>Appearance</h2><h3>Full privacy redactions</h3><ul><li>Individual views may now be automatically masked in privacy-sensitive environments</li><li>new <a href="https://developer.apple.com/documentation/swiftui/view/privacysensitive(_:)"><code>privacySensitive(_:)</code></a> view modifier: when the user is not authenticated, the view will automatically be masked/redacted</li></ul><h3>default-data-protection entitlement</h3><p>If your app leverages complete data protection that can’t be accessed while an iOS device is passcode locked (e.g. Health data), you can now tell WidgetKit to:</p><ul><li>replace your active timeline content with your placeholder content when the device is passcode locked for a full redaction of content</li><li>withhold updates while the device is passcode locked</li></ul><p>Adopt the entitlement <code>com.apple.developer.default-data-protection</code> with value <code>NSFileProtectionComplete</code> to opt in into this behavior</p><h2>Location</h2><p>If you'd like to use user location in your widget:</p><ol><li>add <code>NSWidgetUsesLocation</code> with <code>true</code> value in your <code>Info.plist</code></li><li>use <code>CLLocationManager</code> from your <code>TimelineProvider</code> in your widget extension<ul><li>use the lowest resolution possible (for faster location resolution and less battery usage)</li><li>use <code>isAuthorizedForWidgetUpdates</code> to check whether the widget can get the user location</li></ul></li></ol><h3>Widget location permission</h3><p>Based on app permission:</p><ul><li>never: ❌</li><li>ask next time ("allow once"): ❌</li><li>while using app: only when the widget’s container app is in the foreground or other situations that would consider the app to be in-use, like being in a navigation session</li><li>while using app or widgets: same as "while using app", plus the widget can receive location up to 15 minutes after it was last viewed</li><li>always: ✅</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10212</guid><title>Analyze HTTP traffic in Instruments </title><description>Learn to use the Instruments Network template to record and analyze your app's HTTP traffic. We'll show you how to explore and visualize the behavior of sessions, tasks, and individual HTTP requests to ensure data is transmitted efficiently and respects people's privacy.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10212</link><pubDate>Thu, 17 Jun 2021 11:03:24 +0700</pubDate><content:encoded><![CDATA[<h2>Track hierarchy</h2><ul><li>HTTP Traffic instruments<ul><li>Number of active tasks</li></ul></li></ul><ul><li>Process<ul><li>Debuggable process and background tasks daemon</li></ul></li></ul><ul><li>Session<ul><li>One track per <code>URLSession</code> object</li><li>Individual task intervals</li><li>Configurable session name:</li></ul></li></ul><pre><code><span class="keyword">let</span> session = <span class="type">URLSession</span>(configuration: .<span class="dotAccess">default</span>)
session.<span class="property">sessionDescription</span> = <span class="string">"Main Session"</span>
</code></pre><ul><li>Domain<ul><li>Only task that requested in the domain</li></ul></li><li>More detail about tasks<ul><li>Individual transactions</li><li>Transaction states</li></ul></li></ul><h2>Task timing</h2><ul><li>Structural timing from start till the end</li></ul><pre><code><span class="keyword">let</span> task = session.<span class="call">dataTask</span>(with: url) {
	<span class="comment">/* handle result */ // 👈🏻 Complete event triggers here</span>
}

task.<span class="call">resume</span>() <span class="comment">// 👈🏻 Resume event triggers here</span>
</code></pre><h2>Task Identifier</h2><ul><li>Ability to read the <a href="https://developer.apple.com/documentation/foundation/nsurlsessiontask/1411231-taskidentifier">task identifier</a> for clarity</li></ul><pre><code><span class="keyword">let</span> task = session.<span class="call">dataTask</span>(with: url) {
	<span class="comment">/* handle result */</span>
}
task.<span class="property">taskDescription</span> = <span class="string">"Load Thumbnail"</span>
task.<span class="call">resume</span>()
task.<span class="property">taskIdentifier</span> <span class="comment">// 👈🏻 this identifier will be shown in instruments</span>
</code></pre><h2>Task Error</h2><ul><li>Ability to distinguish error and success with color</li></ul><h2>Transactions</h2><ul><li>Request + response pair being handled by the URL Loading system</li><li>Contains all the HTTP Layer information</li><li>URL, Http version, connection, cache info</li><li>Request + Response header</li><li>Request + Response body</li><li>And more</li></ul><h2>Transaction states</h2><ul><li>Multiple states to add information for distinction between each block</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10212/8.png" alt="States"/><h2>Instrument</h2><ul><li>Focus on the task description</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10212/11.png" alt="Focus on the task description"/><ul><li>Expand the task description</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10212/12.png" alt="Expand task description"/><ul><li>Filter by connection</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10212/13.png" alt="Filter task"/><ul><li>Identify the http task issues (Ex: Staircase problem)</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10212/14.png" alt="Problem"/><ul><li>Identify the request (Ex: wrong expiration date of cookie)</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10212/15.png" alt="Problem 1"/><ul><li>Identify the backtrace (Ex: cached response)</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10212/16.png" alt="Problem 2"/><ul><li>Filter the session (Ex: Found an issue with the data that sent to server)</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10212/17.png" alt="Problem 3"/><ul><li>Export the report to .har extension</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10212/18.png" alt="Export"/><ul><li>Output</li></ul><ul><li>Save and export report to .har to analyse issues</li><li>.har is a JSON structure</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10212/19.png" alt="JSON"/><h2>Next Steps</h2><ul><li>Target app today to detect problems</li><li>Name your URL Session and URLSessionTask for easier debugging</li><li>Adopt latest networking protocols</li><li>Audit your app requests to check if can send less information</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10102</guid><title>Meet the Location Button</title><description>Meet CLLocationButton: a secure interface element that provides an easy, low-friction way to grant your app location access only when and where it is needed. Learn how you can add CLLocationButton to new or existing code, how to customize it within interface legibility guidelines, how to recognize and address customization failures, and how it interacts with iOS’s traditional prompt-based Location Services authorization.

To get the most out of this session, we recommend basic familiarity with the Core Location API.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10102</link><pubDate>Wed, 16 Jun 2021 16:09:14 +0700</pubDate><content:encoded><![CDATA[<ul><li>New quick authorization button:<ul><li><a href="https://developer.apple.com/documentation/corelocationui/cllocationbutton"><code>CLLocationButton</code></a> for UIKit</li><li><a href="https://developer.apple.com/documentation/corelocationui/locationbutton"><code>LocationButton</code></a> for SwiftUI</li></ul></li></ul><ul><li>these buttons give your app Allow-Once authorization, without prompting user authorization every time it's tapped</li><li>available on watchOS, iOS, macOS with Catalyst, and iPad apps on Mac</li></ul><h2>Customization</h2><h3>(UIKit) CLLocationButton</h3><p>This is a UIButton with customizable parameters:</p><ul><li><code>CLLocationButtonIcon</code> to set the type of the arrow</li><li><code>CLLocationLabel</code> to set the label of the button</li><li><code>cornerRadius</code> to set the roundness of the button</li><li><code>fontSize</code> to set the size of the label</li></ul><h3>(SwiftUI) LocationButton</h3><pre><code><span class="type">LocationButton</span>(.<span class="dotAccess">currentLocation</span>) { 
  <span class="comment">// do something on button press...</span>
}
.<span class="call">foregroundColor</span>(.<span class="dotAccess">white</span>)
.<span class="call">cornerRadius</span>(<span class="number">15.0</span>)
.<span class="call">labelStyle</span>(.<span class="dotAccess">titleAndIcon</span>)
.<span class="call">symbolVariant</span>(.<span class="dotAccess">fill</span>)
.<span class="call">tint</span>(.<span class="dotAccess">blue</span>)
</code></pre><h3>Warning</h3><p>Note that not all customization are possible, Xcode will warn you with log messages when the minimum requirements are not met, for example:</p><pre><code>#locationButton rendering failed due to inappropriate sizes 
#locationButton rendering failed due to <span class="type">Insufficient Alpha</span>
#locationButton rendering failed due to contrastRatio between tintColor and backgroundColor insufficient 
</code></pre><h2>Prompt</h2><ul><li>If your app already have any kind of location authorization, then the button will work right away</li><li>If your app doesn't have any permission yet, tapping the location button will trigger a one-time prompt (which won't be shown again when tapped again), see below</li><li>this same prompt is shown if the user previously denied your app location permission access</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10102/oneTimePrompt.png"/>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10023</guid><title>Direct and reflect focus in SwiftUI</title><description>With device input — as with all things in life — where you put focus matters. Discover how you can move focus in your app with SwiftUI, programmatically dismiss the keyboard, and build large navigation targets from small views. Together, these APIs can help you simplify your app’s interface and make it more powerful for people to find what they need.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10023</link><pubDate>Tue, 15 Jun 2021 14:58:11 +0700</pubDate><content:encoded><![CDATA[<ul><li>Focus is the system that lets your app take input from keyboards, remotes, game controllers, accessible switch controls, and other sources that -- unlike touch inputs -- are not tied to specific screen coordinates</li><li>the focus view is often drawn with special embellishments, making it easy for people to predict where their input will be directed</li></ul><h2>Focus state API</h2><ul><li>new <a href="https://developer.apple.com/documentation/SwiftUI/FocusState"><code>@FocusState</code></a> property wrapper, which controls the placement of the app focus</li><li>new <a href="https://developer.apple.com/documentation/swiftui/view/focused(_:)"><code>focused(_:)</code></a> and <a href="https://developer.apple.com/documentation/swiftui/view/focused(_:equals:)"><code>focused(_:equals:)</code></a> view modifiers, which bind the view focus state to the given state value</li></ul><pre><code><span class="keyword">struct</span> LoginForm {
  <span class="keyword">enum</span> Field: <span class="type">Hashable</span> {
    <span class="keyword">case</span> username
    <span class="keyword">case</span> password
  }

  <span class="keyword">@State private var</span> username = <span class="string">""</span>
  <span class="keyword">@State private var</span> password = <span class="string">""</span>
  <span class="keyword">@FocusState private var</span> focusedField: <span class="type">Field</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Form</span> {
      <span class="type">TextField</span>(<span class="string">"Username"</span>, text: $username)
        .<span class="call">focused</span>($focusedField, equals: .<span class="dotAccess">username</span>)

      <span class="type">SecureField</span>(<span class="string">"Password"</span>, text: $password)
        .<span class="call">focused</span>($focusedField, equals: .<span class="dotAccess">password</span>)

      <span class="type">Button</span>(<span class="string">"Sign In"</span>, action: onSignInTap)
    }
  }

  <span class="comment">/// Puts the focus on one of the text fields if their data is missing.</span>
  <span class="keyword">func</span> onSignInTap() {
    <span class="keyword">if</span> username.<span class="property">isEmpty</span> {
      focusedField = .<span class="dotAccess">username</span>
    } <span class="keyword">else if</span> password.<span class="property">isEmpty</span> {
      focusedField = .<span class="dotAccess">password</span>
    } <span class="keyword">else</span> {
      <span class="call">handleLogin</span>(username, password)
    }
  }
}
</code></pre><ul><li>Note that the FocusState value is optional (<code>Field?</code> in the example): <code>nil</code> is used for cases where focus is in an unrelated part of the screen.</li></ul><h2>Focus sections</h2><ul><li><code>FocusState</code>s are not just for text fields, but can also be used to navigate the focus of the app (think browsing tvOS)</li><li>new <code>focusSection()</code> view modifier, which tells SwiftUi that this view is capable of accepting focus if it contains any focusable subviews</li><li>this is used (in tvOS) to navigate between different/separate focus sections of the screen</li></ul><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
      <span class="type">VStack</span>) {
         ...
      }
      .<span class="call">focusSection</span>()

      <span class="type">VStack</span> {
        ...
      }
      .<span class="call">focusSection</span>()
    }
  }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10254</guid><title>Swift concurrency: Behind the scenes</title><description>Dive into the details of Swift concurrency and discover how Swift provides greater safety from data races and thread explosion while simultaneously improving performance. We’ll explore how Swift tasks differ from Grand Central Dispatch, how the new cooperative threading model works, and how to ensure the best performance for your apps.

To get the most out of this session, we recommend first watching “Meet async/await in Swift,” “Explore structured concurrency in Swift,” and “Protect mutable state with Swift actors.”</description><link>https://www.wwdcnotes.com/notes/wwdc21/10254</link><pubDate>Tue, 15 Jun 2021 14:35:16 +0700</pubDate><content:encoded><![CDATA[<p>Meet async / await, explore structured concurrency, protect mutable state with actors should be watched first.</p><h2>Threading model</h2><p>Compares GCD to Swift. It’s not built on top of GCD. It’s a whole new thread pool.</p><p>GCD is very eager to bring up threads whenever we kick off work on queues. When a queue blocks its thread, a new thread will be spawned to handle work.</p><p>This means that the system can overcommit with more threads than there are CPU cores. This is also called Thread explosion and can lead to memory and performance issues.</p><p>There’s a lot of scheduling overhead during threads. There will likely be a ton of context switching which in turn will make the CPU run less efficiently.</p><p>Swift concurrency was designed to be more efficient than GCD.</p><p>The goal is to have no more threads than CPU cores. Instead, there are continuations that can be blocked. Instead of having the CPU context switch, the thread does this. It’s as simple as a method call so the overhead is much, much lower.</p><p>To make this happen, the language has to be able to guarantee that threads do not block through language features:</p><ul><li><code>await</code> and non-blocking of threads</li><li>Tracking of dependencies in Swift task model</li></ul><p>Swift’s <code>await</code> does not block a thread like GCD’s <code>sync</code> does.</p><p>Every thread has a stack that keeps track of function calls. There are several stack frames. One for each function call. When a function returns, its stack frame is popped.</p><p>When an async function is called with <code>await</code>, it’s tracked as an async frame on the heap. The async frames keep track of state that’s needed when the awaited function returns. When another function is called, the topmost stack frame on the thread is replaced. Because async frames are stored on the heap, they can be put back on a thread and resumed. Async frames will be put back on the stack as needed. Calling sync code in an async fuck will add frames to the thread’s stack.</p><p>The block of code that runs after the <code>await</code> is called a continuation When execution should resume, the continuation is put back on a thread’s stack.</p><p>Interesting stuff, try to find out more and properly understand this.</p><p>Async work is modeled with tasks. Tasks can have child tasks. Tasks can only await other tasks in swifts. Awaited tasks are either continuations or child tasks.</p><p>Threads can track these task dependencies and they’ll know how to suspend tasks and schedule other work until the task can be resumed.</p><p>A cooperative thread pool is the default executor for Swift. The number of threads is limited to the number of CPU cores. Threads will always make forward progress and avoids thread explosion and excessive task switching.</p><p>Where with GCD you needed to be mindful of the number of queues you use, Swift concurrency ensures that you don’t have to worry about this anymore.</p><p>Concurrency always comes with a cost. It takes additional memory allocation and logic in the Swift runtime. Concurrency should only be used when its cost outweighs the cost of managing it.</p><p>For example, reading for user defaults is a super small task that should not be spawned into its own async task unless needed.</p><p>Measure performance to understand when you need concurrency.</p><p><code>await</code> explicitly breaks atomicity because in the time between your await and calling the continuation, things might change. You should never hold locks across <code>await</code>. Thread specific data is also not preserved across <code>await</code> because you might resume on a different thread than the one you were suspended on.</p><p>The Swift language upholds the runtime contract that threads can always make forward progress. You have to make sure you don’t break this contract so the thread pool can do its best work.</p><ul><li>Use primitives like await, actors, and task groups so the compiler can enforce the contract.</li><li>Locks can be used in sync code with caution. There’s no compiler support but does not break the contract as long as the thread is not fully blocked (for too long)</li><li>Semaphores and <code>NSCondition</code> are not safe to use. They hide dependency information from the runtime so it cannot schedule work correctly which might result in blocking.</li></ul><p>Don’t use unsafe primitives to wait across task boundaries. Like for example using a semaphore in an async context. This is not save.</p><p>The <code>LIBDISPATCH_COOPERATIVE_POOL_STRICT=1</code> environment variable will run the app under a debug runtime that enforces forward progress for thread.</p><h2>Synchronization with Actors</h2><p>Actors synchronize access to their state through mutual exclusion.</p><p>When using <code>DispatchQueue.sync</code>, a current thread can be reused when there’s no contention. When there is, <code>DispatchQueue.sync</code> is blocking and new threads are spawned.</p><p>When you use <code>DispatchQueue.async</code>, you’re non-blocking under contention, but a new thread is <em>always</em> spawned.</p><p>Swift Actors always reuse threads and are non-blocking. If the thread is free, code is run. If not, function is suspended and run later.</p><p>Serial queues can be replaced with actors to manage access.</p><p>When you switch between different actors, you are thread hopping. An actor can be suspended and threads can easily hop from a running actor to a currently suspended actor. The runtime can handle this by creating work items for the thread without spawning a new thread.</p><p>Actor work items can remain pending until an in progress work item is completed.</p><p>Actors are designed to allow the system to prioritize work.</p><p>Actor reentrancy means that an actor might have pending work when it schedules and executes new work items. This can happen if a task is awaiting something, and this other thing awaits something on the actor.</p><p>The main actor runs on the main thread. The main thread is separated from the rest of the threads in the cooperative pol.</p><p>When you hop on and off the main actor often, you force hopping from and to the mean thread. This is expensive. If this happens it’s better to bundle work and run a bigger task to update UI from the main actor. For that reason, it’s not advised to jump onto an actor and away from the main actor for small bits of work (often).</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10058</guid><title>Meet AsyncSequence</title><description>Iterating over a sequence of values over time is now as easy as writing a “for” loop. Find out how the new AsyncSequence protocol enables a natural, simple syntax for iterating over anything from notifications to bytes being streamed from a server. We'll also show you how to adapt existing code to provide asynchronous sequences of your own.

To get the most out of this session, we recommend first watching “Meet async/await in Swift.”</description><link>https://www.wwdcnotes.com/notes/wwdc21/10058</link><pubDate>Tue, 15 Jun 2021 14:32:46 +0700</pubDate><content:encoded><![CDATA[<p>Map, filter, reduce, dropFirst all work in async sequences:</p><pre><code><span class="keyword">for try</span> await someThing <span class="keyword">in</span> async.<span class="call">dropFirst</span>() {
}
</code></pre><p>For example.</p><p>AsyncSequence suspends on each element and receives values asynchronously from the iterator. AsyncSequences either complete with success or stop when an error is thrown.</p><p>Implementing an AsyncSequence follows all the rules that a normal sequence follows. Its <code>next()</code> returns <code>nil</code> when it’s completed for example.</p><p>An async iterator also consumes its underlying collection.</p><p>Things like <code>break</code> and <code>continue</code> work in async sequences too.</p><p>You can cancel an iteration by holding on to its <code>Task.Handle</code> when you wrap it in <code>async</code>:</p><pre><code><span class="keyword">let</span> handle = <span class="call">async</span> {
  <span class="keyword">for</span> await thing <span class="keyword">in</span> list {
    <span class="comment">// ...</span>
  }
}

handle.<span class="call">cancel</span>()
</code></pre><p>Reading files from a URL is commonly done async. You can use <code>URL.lines</code> for this. It works for network and local resources.</p><p><code>URLSession</code> has a <code>bytes(_:)</code> function to enable roughly the same but with more control.</p><p>NotificationCenter notifications can be awaited too. You can even await one notification:</p><pre><code><span class="comment">// listens for 1 notification only</span>
<span class="keyword">let</span> center = <span class="type">NotificationCenter</span>.<span class="property">default</span>
<span class="keyword">let</span> notification = await center.<span class="call">notifications</span>(named: .<span class="dotAccess">SomeNotification</span>).<span class="call">first</span> { notification <span class="keyword">in</span> 
  <span class="call">print</span>(notification)
}
</code></pre><p>Callbacks that are called multiple times, and some delegates are good candidates for async sequences.</p><p>Start / stop / handle pattern is a good candidate. Sounds similar to location managers.</p><pre><code><span class="keyword">let</span> stream = <span class="type">AsyncStream</span>(<span class="type">Output</span>.<span class="keyword">self</span>) { continuation <span class="keyword">in 
  let</span> object = <span class="type">SomeObject</span>()
  object.<span class="property">handler</span> = { element <span class="keyword">in</span> 
    continuation.<span class="call">yield</span>(element)
  }

  object.<span class="property">onTermination</span> = { <span class="keyword">_ in</span> 
    object.<span class="call">stop</span>()
  }
  
  <span class="comment">// starts producing values</span>
  object.<span class="call">start</span>()
}
</code></pre><p><code>AsyncStream</code> is the easiest way to create your own asynchronous sequences. They also handle buffering (not sure what that means in this case).</p><p>There’s also a throwing version: <code>AsyncThrowingStream</code>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10095</guid><title>Use async/await with URLSession</title><description>Discover how you can adopt Swift concurrency in URLSession using async/await and AsyncSequence, and how you can apply Swift concurrency concepts to improve your networking code.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10095</link><pubDate>Tue, 15 Jun 2021 14:32:13 +0700</pubDate><content:encoded><![CDATA[<p>Async await code make your code linear, so it’s much easier to read.</p><p>A simple network call might have multiple contexts. The task is created on whatever queue you’re on. The callback is executed on the session’s delegate queue. And the task it self runs on the task’s queue.</p><p>With sync it’s easier to reason about code. It all follows the same linear pattern.</p><p><code>await URLSession.shared.data(_:)</code> suspends execution with blocking.</p><p>We can handle errors by throwing when appropriate.</p><p>In addition to <code>data(_:)</code> we can also <code>upload(_:)</code> and <code>download(_:)</code>.</p><p>Downloads are written to a file. You need to move or delete this file if needed by hand.</p><p>You can obtain a task handle to support cancellation. The concurrency task is not related to the data task so it may not cancel it.</p><p>You can receive an endpoint’s response body as an async sequence of bytes with <code>bytes(_:)</code>.</p><p><code>URLSession.AsyncBytes</code> is an <code>AsyncSequence</code> that we can iterate over to process data in real time.</p><p>We can use <code>bytes.lines</code> to get the response line by line rather than byte by byte. We can process these lines one by one.</p><p>FileHandle also has support for async sequences.</p><p>URLSession is built on delegate methods to handle challenges. Since we no longer have access to talks, we can pass explicit delegates to async data tasks to handle things like authentication challenges and download progress.</p><p>The delegate you pass to a task is retained strongly by the task until the task fails or completes.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10132</guid><title>Meet async/await in Swift</title><description>Swift now supports asynchronous functions — a pattern commonly known as async/await. Discover how the new syntax can make your code easier to read and understand. Learn what happens when a function suspends, and find out how to adapt existing completion handlers to asynchronous functions.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10132</link><pubDate>Tue, 15 Jun 2021 14:31:10 +0700</pubDate><content:encoded><![CDATA[<p>There are tons of async await compatible functions built-in into the SDK. Often with an async version and completion handler based function.</p><p>Sync code blocks threads, async code doesn’t</p><p>When writing async code with completion handlers you unblock threads but it’s easy to not call your completion handlers. For example when you use a <code>guard let</code> and only return in the <code>else</code> clause. Swift can’t enforce this in the compiler which can lead to subtle bugs.</p><p>You can’t throw errors from completion handlers. We usually use <code>Result</code> for this. This adds “ceremony” to our code which isn’t ideal.</p><p>Futures can help clean up a callback based flow. But while it’s better and you can’t forget to call completion handlers with that, it’s still not ideal.</p><p>Async functions fix this. An async function is suffixed with <code>async</code>:</p><pre><code><span class="keyword">func</span> doSomething() async
</code></pre><p>The keyword appears before the return type and before <code>throws</code>:</p><pre><code><span class="keyword">func</span> doSomething() async <span class="keyword">throws</span> -&gt; <span class="type">ReturnType</span>
</code></pre><p>Calling an async function and retrieving its result uses <code>await</code>:</p><pre><code><span class="keyword">let</span> result = await <span class="call">doSomething</span>()
</code></pre><p>If the method throws, you use <code>try await</code>:</p><pre><code><span class="keyword">let</span> result = <span class="keyword">try</span> await <span class="call">doSomething</span>()
</code></pre><p>On the line after your async call, the result of <code>doSomething()</code> is available. It was produced without blocking the current thread; execution of your code is paused and the thread is freed up where you write <code>await</code>.</p><p>Not having to nest completion closures, call completion handlers, and forward errors makes code much simpler. Errors can be thrown so you don’t need <code>Result</code>.</p><p>In addition to functions, properties and initializers can also be async.</p><pre><code><span class="keyword">var</span> property: <span class="type">Type</span>? {
  <span class="keyword">get</span> async {
    <span class="keyword">return</span> await <span class="keyword">self</span>.<span class="call">computeProperty</span>()
  }
}
</code></pre><p>If the getter can throw, add <code>throws</code> after the async:</p><pre><code><span class="keyword">var</span> property: <span class="type">Type</span>? {
  <span class="keyword">get</span> async <span class="keyword">throws</span> {
    <span class="keyword">return</span> await <span class="keyword">self</span>.<span class="call">computeProperty</span>()
  }
}
</code></pre><p>We can also use asynchronous sequences. These sequences generate their values asynchronously. We use them like this:</p><pre><code><span class="keyword">for</span> await value <span class="keyword">in</span> list {
  <span class="keyword">let</span> transformed = await <span class="call">transform</span>(value)
  <span class="comment">// use transformed</span>
}
</code></pre><p>There’s a specific session on “Meet AsyncSequence”. There’s also a specific session on Swift’s Structured Concurrency that explains running tasks in parallel for example.</p><p>Normal functions calls start, do work, return something. When you call a function, your “source” function gives up control to the called version which will in turn give control back when it’s done. This chain always keeps control of the thread.</p><p>In an async function, the function can suspend and allow the system to decide whether it will give control back to the async function by resuming it, or it might let somebody else do work on the thread until it makes sense for the async function to get control back.</p><p>Marking something as async or with await doesn’t guarantee that your function <em>will</em> suspend. Just that it <em>might</em> suspend. Or rather, will suspend if needed.</p><p>The await keyword signals to the developer that the state of your app can change dramatically while a function is suspended and the thread that the function is on is free to do other work. Swift does not guarantee which thread it will resume your function on. This is an implementation detail that you shouldn’t care about.</p><p>Since an async function can suspend, you have to call it from an async context to account for this suspension. Await marks where execution might be suspended. While a function is suspended, other work can be done on the thread (not guaranteed).</p><p>XCTest has support for <code>async</code> out of the box. No more need for expectation.</p><p>You can test async code by marking the test as <code>async</code> and calling your async work like you would normally, asserting that no errors are thrown for example.</p><p>Calling asynchronous code from a SwiftUI view (or non-async context) is done by calling the <code>async</code> task function:</p><pre><code><span class="call">async</span> {
  <span class="comment">// call async code</span>
}
</code></pre><p>This makes it easy to call out into async code from a non-async place.</p><p>To learn more:</p><ul><li>Explore structured concurrency in Swift</li><li>Discover concurrency in SwiftUI</li></ul><p>Getting started is easiest by starting small with some built-in Apple APIs that were converted to be async.</p><p>A common pattern to update is one where you have a completion handler. The Swift compiler automatically provides async versions of imported Objective-C code that takes a completion handler.</p><p>Some delegate methods take a completion handler that developers must call to communicate an async result. Similar to functions that developers call, these delegate methods are now also async which means we can return values from them or throw errors rather than having to call a completion handler.</p><p>There are several sessions about this. The Core Data async/await one is an example of this.</p><p><code>NSAsynchronousFetchRequest</code> fetches objects asynchronously, making it a good candidate to integrate with async/await. This API works with a completion handler.</p><p>We can wrap custom async work through continuations. A continuation is used to suspend a function, and resume it when appropriate. We do so through <code>withCheckedThrowingContinuation</code>. If you want a non-throwing version, <code>withThrowingContinuation</code>. You can await a call to these functions to provide a suspension point.</p><p>Then you can do whatever you need and call <code>resume(throwing:):</code> or <code>resume(returning:)</code> to resume the code again after having done the work you needed to do.</p><p>You must always call resume once. If there are code paths where you don’t call <code>resume</code>, Swift will tell you. Calling <code>resume</code> more than once is a problem and ensures that your code crashes if this happens.</p><p>You can store a checked continuation on a class. You can then resume (and nil out) a continuation when needed. This can be used for await a delegate’s response to an action.</p><p>Swift concurrency: Behind the scenes explains more about these suspend/resume cycle.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10134</guid><title>Explore structured concurrency in Swift</title><description>When you have code that needs to run at the same time as other code, it’s important to choose the right tool for the job. We'll take you through the different kinds of concurrent tasks you can create in Swift, show you how to create groups of tasks, and find out how to cancel tasks in progress. We'll also provide guidance on when you may want to use unstructured tasks.

To get the most out of this session, we first recommend watching “Meet async/await in Swift.”</description><link>https://www.wwdcnotes.com/notes/wwdc21/10134</link><pubDate>Tue, 15 Jun 2021 14:30:38 +0700</pubDate><content:encoded><![CDATA[<p>Structured programming uses a static scope. This makes it very easy to reason about code and its flow. Essentially making it trivial to understand what your code does by reading it from top to bottom.</p><p>Asynchronous and concurrent code do not follow this structured way of programming; it can’t be read from top to bottom.</p><p>Asynchronous functions don’t return values because the values aren’t ready at the end of the function scope. This means that the function will communicate results back through a closure at a later time.</p><p>It also means that we don’t use structured programming for error handling (no throws for example).</p><p>We need nesting if we want to use the produced results for another asynchronous operation.</p><p>An async function doesn’t take a completion handler and is instead marked with <code>async</code>, and it returns a value.</p><p>By using <code>await</code> to call async code we don’t have to nest in order to use results from an async function, and we can throw errors instead of passing them to a completion handler.</p><p>This brings us much closer to structured programming.</p><p>Tasks are a new feature in Swift and they are new in Swift. A task provides an execution context in which we can write asynchronous code. Each task runs concurrently with other tasks. They will run in parallel when appropriate.</p><p>Due to deep integration the compiler can help prevent bugs.</p><h2>Async let task</h2><p>An <code>async let</code> task is the easiest kind of task.</p><p>When writing <code>let thing = something()</code>, <code>something()</code> is evaluated first and its result is assigned to <code>let thing</code>.</p><p>If <code>something()</code> is <code>async</code>, you need it to run first and then assign to <code>let thing</code>. You can do this by marking <code>let thing</code> as <code>async</code>:</p><pre><code>async <span class="keyword">let</span> thing = <span class="call">something</span>()
</code></pre><p>When evaluating this, a child task is created. At the same time, <code>let thing</code> is assigned a placeholder. The parent task continues running until at some point we want to use <code>thing</code>. We need to mark this point with <code>await</code>:</p><pre><code>async <span class="keyword">let</span> thing = <span class="call">something</span>()

<span class="comment">// some stuff</span>

<span class="call">makeUseOf</span>(await thing)
</code></pre><p>At this point, the parent context will suspend and await the completion of the child task which will fulfill the placeholder. If the async function can throw, you must prefix with <code>try await</code> instead.</p><p>When calling multiple async functions in one scope, you can write this:</p><pre><code><span class="keyword">func</span> performAsyncJob() async <span class="keyword">throws</span> -&gt; <span class="type">Output</span> {
  <span class="keyword">let</span> (data, <span class="keyword">_</span>) = <span class="keyword">try</span> await <span class="call">fetchData</span>()
  <span class="keyword">let</span> (meta, <span class="keyword">_</span>) = <span class="keyword">try</span> await <span class="call">meta</span>()

  <span class="keyword">return</span> <span class="type">Output</span>(data, meta)
}
</code></pre><p>This will first run (and await the output of) <code>fetchData</code>, and <code>meta</code> is run after.</p><p>After <code>meta</code> is done, we return <code>Output</code>.</p><p>If the two <code>await</code> lines don’t depend on each other, we can run then concurrently by using <code>async let</code>:</p><pre><code><span class="keyword">func</span> performAsyncJob() async <span class="keyword">throws</span> -&gt; <span class="type">Output</span> {
  async <span class="keyword">let</span> (data, <span class="keyword">_</span>) = <span class="call">fetchData</span>()
  async <span class="keyword">let</span> (meta, <span class="keyword">_</span>) = <span class="call">meta</span>()

  <span class="keyword">return</span> <span class="type">Output</span>(<span class="keyword">try</span> await data, <span class="keyword">try</span> await meta)
}
</code></pre><p>This will not suspend the parent task until the <code>await</code> is encountered, and both tasks will be running concurrently.</p><p>A parent task can spawn one or more child tasks. A parent task can only complete its work if its child tasks have completed their work. If one of the child tasks throws an error, the parent task should immediately exit. If there are multiple child tasks running, the parent will mark any in-flight tasks as cancelled before exiting. Marking a task as cancelled does not stop the task; it’ll just tell the task that its output is no longer needed; the task must handle its cancellation. If a task has any child tasks when cancelled, its child tasks will be automatically marked as cancelled too.</p><p>A parent task will only finish when all of its child tasks are marked as finished,</p><p>This guarantee of always finishing tasks (either successfully, through cancellation, or by throwing an error) is fundamental to concurrency in Swift.</p><p>Cancellation in Swift tasks is cooperative. The task is not stopped when cancelled. A task must check its own cancellation status at reasonable times, whether it’s actually async or not. This means you should design your tasks with cancellation in mind; especially if they are long-running. You should always aim to stop execution as soon as possible when a task is cancelled.</p><p>You can do this with <code>try Task.checkCancellation()</code>. This will check the cancellation status for the current task and throws an error if/when it is. If it’s more appropriate you can also use <code>Task.isCancelled</code>. When your task is cancelled you can throw an error which is what <code>Task.checkCancellation()</code> does. But you can also return an empty result, or a partial result. Make sure you document this explicitly so callers of your function know what to expect.</p><h2>Group task</h2><p>In the talk a structure like this is shown:</p><pre><code><span class="keyword">func</span> fetchSeveralThings(for ids: [<span class="type">String</span>]) async <span class="keyword">throws</span> -&gt; [<span class="type">String</span>: <span class="type">Output</span>] {
  <span class="keyword">var</span> output = [<span class="type">String</span>: <span class="type">Output</span>]()
  <span class="keyword">for</span> id <span class="keyword">in</span> ids {
    output[id] = <span class="keyword">try</span> await <span class="call">performAsyncJob</span>()
  }
  <span class="keyword">return</span> output
}

<span class="keyword">func</span> performAsyncJob() async <span class="keyword">throws</span> -&gt; <span class="type">Output</span> {
  async <span class="keyword">let</span> (data, <span class="keyword">_</span>) = <span class="call">fetchData</span>()
  async <span class="keyword">let</span> (meta, <span class="keyword">_</span>) = <span class="call">meta</span>()

  <span class="keyword">return</span> <span class="type">Output</span>(<span class="keyword">try</span> await data, <span class="keyword">try</span> await meta)
}
</code></pre><p>For every id, one task with two child tasks is spawned. <code>await performAsyncJob</code> is the parent, and <code>fetchData</code> and <code>meta</code> create the child tasks. In the for loop, we only have one active task at a time since we <code>await performAsyncJob</code> in the loop. This means that Swift can make certain guarantees about our concurrency. It knows exactly how many tasks are active at a time.</p><p>We can use a task group to have multiple calls to <code>performAsyncJob</code> active. Tasks that are created in a group cannot escape the scope of their group.</p><p>You create a task group through the <code>withThrowingTaskGroup(of: Type.self)</code> function. This function takes a closure that receives a group object. You add new tasks to the group by calling using on the group:</p><pre><code><span class="keyword">func</span> fetchSeveralThings(for ids: [<span class="type">String</span>]) async <span class="keyword">throws</span> -&gt; [<span class="type">String</span>: <span class="type">Output</span>] {
  <span class="keyword">var</span> output = [<span class="type">String</span>: <span class="type">Output</span>]()
  <span class="keyword">try</span> await <span class="call">withThrowingTaskGroup</span>(of: <span class="type">Void</span>.<span class="keyword">self</span>) { group <span class="keyword">in 
    for</span> id <span class="keyword">in</span> ids {
      group.<span class="call">async</span> {
        output[id] = <span class="keyword">try</span> await <span class="call">performAsyncJob</span>()
      }
    }
  }
  
  <span class="keyword">return</span> output
}
</code></pre><p>Child tasks start immediately when they’re added to the group.</p><p>By the end of the closure, the <code>group</code> goes out of scope and all added child tasks are awaited.</p><p>This means that that there’s one task in <code>fetchSeveralThings</code>. This task has a child task for each <code>id</code> in the list. And each child task has several tasks of its own.</p><p>The code above would have a compiler error due to a data race on <code>output</code>. It’s being mutated by several concurrently running tasks. Data races are common in concurrent code. Dictionaries are not concurrency-proof; they should only be mutated one by one.</p><p>Task creation takes a <code>@Sendable</code> closure and it cannot capture mutable variables. Sendable closures should only capture value types, actors, or classes that implement synchronization.</p><p>The Protect mutable state with Swift actors provides more info.</p><p>To fix the problem, child tasks can return a value instead of mutating the dictionary directly:</p><pre><code><span class="keyword">func</span> fetchSeveralThings(for ids: [<span class="type">String</span>]) async <span class="keyword">throws</span> -&gt; [<span class="type">String</span>: <span class="type">Output</span>] {
  <span class="keyword">var</span> output = [<span class="type">String</span>: <span class="type">Output</span>]()
  <span class="keyword">try</span> await <span class="call">withThrowingTaskGroup</span>(of: (<span class="type">String</span>, <span class="type">Output</span>).<span class="keyword">self</span>) { group <span class="keyword">in 
    for</span> id <span class="keyword">in</span> ids {
      group.<span class="call">async</span> {
        <span class="keyword">return</span> (id, <span class="keyword">try</span> await <span class="call">performAsyncJob</span>())
      }
    }

    <span class="keyword">for try</span> await (id, result) <span class="keyword">in</span> group {
      output[id] = result
    }
  }
  
  <span class="keyword">return</span> output
}
</code></pre><p>This <code>for try await</code> loop runs sequentially so the <code>output</code> dictionary is mutated one step at a time.</p><p>Async sequences are covered more in the Meet AsyncSequence session.</p><p>While task groups are a form of structured concurrency, the task tree rules work slightly differently.</p><p>When one of the child tasks in the group fails with an error (and it throws), this will cancel all other child task just like you’d expect since it’s the same as <code>async let</code>. The main difference is that when the group goes out of scope its tasks aren’t cancelled. You can call <code>cancelAll</code> on the group before exiting the closure that’s used to populate the task.</p><h2>Unstructured tasks</h2><p>Structured concurrency has a clear hierarchy and defined rules. Sometimes there are situations where you need unstructured concurrency; without a structured context.</p><p>For example, you might need to launch something async from a not yet async context. This means you don’t have a task yet. Other times, tasks might live beyond the confines of a single scope. This would be common when implementing delegate methods with concurrency.</p><h3>Async tasks</h3><p>Imagine a collection view delegate method where you want to fetch something async for your cell.</p><p>This would not work</p><pre><code><span class="comment">// shortened</span>
<span class="keyword">func</span> cellForRowAt() {
  <span class="keyword">let</span> ids = <span class="call">getIds</span>(for: item) <span class="comment">// item is passed to cellForRowAt</span>
  <span class="keyword">let</span> content = await <span class="call">getContent</span>(for: ids)
  cell.<span class="property">content</span> = content
}
</code></pre><p>So we need to launch an unstructured task</p><pre><code><span class="comment">// shortened</span>
<span class="keyword">func</span> willDisplayCellForItem() {
  <span class="keyword">let</span> ids = <span class="call">getIds</span>(for: item) <span class="comment">// item is passed to willDisplayCellForItem</span>
  <span class="call">async</span> {
	  <span class="keyword">let</span> content = await <span class="call">getContent</span>(for: ids)
	  cell.<span class="property">content</span> = content
	}
}
</code></pre><p>The <code>async</code> function runs code asynchronously on the current actor. To make this the main actor you can annotate a class with <code>@MainActor</code></p><pre><code><span class="keyword">@MainActor
class</span> CollectionDelegate {
  <span class="comment">// code</span>
}
</code></pre><ul><li>An unstructured task will inherit actor isolation and priority of the origin context</li><li>Lifetime is not confined to a scope</li><li>Can be launched anywhere</li><li>Must be manually cancelled or awaited</li></ul><p><strong>SIDENOTE</strong> all async work is done in a task. Always.</p><p>Cancellations and errors do not automatically propagate when using an unstructured task.</p><p>We can put tasks in a dictionary to keep track of them:</p><pre><code><span class="keyword">@MainActor
class</span> CollectionDelegate {
  <span class="keyword">var</span> tasks = [<span class="type">IndexPath</span>: <span class="type">Task</span>.<span class="type">Handle</span>&lt;<span class="type">Void</span>, <span class="type">Never</span>&gt;]()

  <span class="keyword">func</span> willDisplayCellForItem() {
    <span class="keyword">let</span> ids = <span class="call">getIds</span>(for: item) <span class="comment">// item is passed to willDisplayCellForItem</span>
    tasks[item] = <span class="call">async</span> {
      <span class="keyword">defer</span> { tasks[item] = <span class="keyword">nil</span> }

	    <span class="keyword">let</span> content = await <span class="call">getContent</span>(for: ids)
  	    cell.<span class="property">content</span> = content
	  }
  }
}
</code></pre><p>Storing the task allows you to cancel it. Should be removed if the task finished. Defer can do this. This way we don’t cancel anything.</p><p>Because we run on the main actor (<code>async</code> inherits the actor), we know that we don’t have a data race on <code>tasks</code>. Only one operation will mutate (or read) it at a time.</p><p>We can use <code>tasks[item]?.cancel()</code> in <code>didEndDisplay</code> to cancel the task manually.</p><h3>Detached tasks</h3><p>Sometimes you want to not inherit any actor information and run a task completely on its own. This can be done with a detached task. They work the same as async tasks but they don’t run in the same context as they’re crated in. You can pass parameters for priority.</p><p>Imagine caching the result of <code>getContent</code> in the code. This can be detached from the main actor.</p><pre><code><span class="keyword">@MainActor
class</span> CollectionDelegate {
  <span class="keyword">var</span> tasks = [<span class="type">IndexPath</span>: <span class="type">Task</span>.<span class="type">Handle</span>&lt;<span class="type">Void</span>, <span class="type">Never</span>&gt;]()

  <span class="keyword">func</span> willDisplayCellForItem() {
    <span class="keyword">let</span> ids = <span class="call">getIds</span>(for: item) <span class="comment">// item is passed to willDisplayCellForItem</span>
    tasks[item] = <span class="call">async</span> {
      <span class="keyword">defer</span> { tasks[item] = <span class="keyword">nil</span> }

	    <span class="keyword">let</span> content = await <span class="call">getContent</span>(for: ids)
      
      <span class="call">asyncDetached</span>(priority: .<span class="dotAccess">background</span>) {
        <span class="call">writeToCache</span>(content)
      }
      
  	    cell.<span class="property">content</span> = content
	  }
  }
}
</code></pre><p>This task will run on its own actor and takes a low priority since it’s not super important to do it as soon as possible.</p><p>In a detached task you can create a task group. This would allow you to run a bunch of async work concurrently, and to cancel this work easily by cancelling the detached task since the detached task would be a parent task for all child tasks.</p><pre><code><span class="call">asyncDetached</span>(priority: .<span class="dotAccess">background</span>) {
  <span class="call">withTaskGroup</span>(of: <span class="type">Void</span>.<span class="keyword">self</span>) { group <span class="keyword">in</span> 
    group.<span class="call">async</span> { <span class="call">writeToCache</span>(content) }
    group.<span class="call">async</span> { ... }
    group.<span class="call">async</span> { ... }
  }
}
</code></pre><p>Since the detached task is a background task, the priority also applies to all of its child tasks.</p><table><thead><tr><th></th><th>Launched by</th><th>Launchable from</th><th>Lifetime</th><th>Cancellation</th><th>Inherits from origin</th></tr></thead><tbody><tr><td>async-let tasks</td><td><code>async let x</code></td><td><code>async</code> functions</td><td>scoped to statement</td><td>automatic</td><td>priority, task-local values</td></tr><tr><td>Group tasks</td><td><code>group.async</code></td><td><code>withTaskGroup</code></td><td>scoped to task group</td><td>automatic</td><td>priority, task-local values</td></tr><tr><td>Unstructured tasks</td><td><code>async</code></td><td>anywhere</td><td>unscoped</td><td>via <code>Task.Handle</code></td><td>priority, task-local values, actor</td></tr><tr><td>Detached tasks</td><td><code>asyncDetached</code></td><td>anywhere</td><td>unscoped</td><td>via <code>Task.Handle</code></td><td>nothing</td></tr></tbody></table><p>Tasks are just part of Swift concurrency. They integrate with the rest of this large feature.</p><p>Tasks integrate with the OS and have low overhead. The behind the scene sessions provides more info.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10133</guid><title>Protect mutable state with Swift actors</title><description>Data races occur when two separate threads concurrently access the same mutable state. They are trivial to construct, but are notoriously hard to debug.

Discover how you can stop these data races in their tracks with Swift actors, which help synchronize access to data in your code. Discover how actors work and how to share values between them. Learn about how actor isolation affects protocol conformances. And finally, meet the main actor, a new way of ensuring that your code always runs on the main thread when needed.

To get the most out of this session, we recommend first watching “Meet async/await in Swift.”</description><link>https://www.wwdcnotes.com/notes/wwdc21/10133</link><pubDate>Tue, 15 Jun 2021 14:29:12 +0700</pubDate><content:encoded><![CDATA[<p>Data races make concurrency hard. They occur when two threads access the same data and at least one of them is a write. It’s trivial to write a data race, but it’s really hard to debug.</p><p>Data races aren’t always clear, aren’t always reproducible, and might not always manifest in the same way.</p><p>Shared mutable state is needed for a data race to occur. Value types don’t suffer from data races due to the way they work; they’re copied.</p><p>When you pass an array around, copies are created. This is due to array’s value semantics.</p><p>Even an object that’s a value type can be captured in a racy way. When you mutate a value type in a concurrent code block, Swift will show a compiler error since you’re about to write a data race.</p><p>Shared mutable state requires synchronization. Existing methods are:</p><ul><li>Atomics</li><li>Locks</li><li>Serial dispatch queues</li></ul><p>All three require the developer to carefully use these tools.</p><h2>Actors</h2><p>Actors are introduced to eliminate this problem. Actors isolate their state from the rest of the program. This means that all access to state has. To go through the actor. An actor ensures mutually-exclusive access to state.</p><p>What’s nice is that you cannot forget to synchronize an actor.</p><p>Actors can do similar things to structs, enums, and classes. They are reference types and their unique characteristic is in how they synchronize and isolate data.</p><pre><code>actor <span class="type">Counter</span> {
  <span class="keyword">var</span> value = <span class="number">0</span>
  <span class="keyword">func</span> increment() -&gt; <span class="type">Int</span> {
    value = value + <span class="number">1</span>
    <span class="keyword">return</span> value
  }
}
</code></pre><p>In this code, the actor will ensure that <code>value</code> is never read / mutated concurrently.</p><pre><code><span class="keyword">let</span> counter = <span class="type">Counter</span>()

<span class="call">asyncDetached</span> {
  <span class="call">print</span>(await counter.<span class="call">increment</span>())
}

<span class="call">asyncDetached</span> {
  <span class="call">print</span>(await counter.<span class="call">increment</span>())
}
</code></pre><p>This code does not cause a data race even though we have no idea how/when these detached tasks run. They might run after each other or at the same time. The actor will ensure we don’t have a data race on <code>value</code>.</p><p>Interacting with actors is done asynchronously. The actor might have your calling code wait for a while to free its resources and avoid data races.</p><p>Extensions on an actor can access an actor’s state because it’s considered internal to the actor. You can access an actor’s state synchronously from within the actor. In other words, within an actor, your code is uninterrupted and you don’t need to worry about suspensions.</p><h2>Actor reentrancy</h2><p>There is an important exception to this though. When a function on an actor runs it’s not interrupted, unless you have an <code>wait</code> within the function. If you <code>await</code> in an actor function, the function is suspended.</p><p>Consider this code:</p><pre><code>actor <span class="type">ImageDownloader</span> {
  <span class="keyword">private var</span> cache: [<span class="type">URL</span>: <span class="type">Image</span>] = [:]

  <span class="keyword">func</span> image(from url: <span class="type">URL</span>) async <span class="keyword">throws</span> -&gt; <span class="type">Image</span>? {
    <span class="keyword">if let</span> cached = cache[url] {
      <span class="keyword">return</span> cached
    }

    <span class="keyword">let</span> image = <span class="keyword">try</span> await <span class="call">download</span>(from: url)

    cache[url] = image
    <span class="keyword">return</span> image
  }
}
</code></pre><p>If you call this code, no data races for <code>cache</code> can occur. But if you call this method twice for the same url, here’s what happens:</p><ul><li>CALL1 sees that no image is cached for <code>url</code></li><li>CALL1 starts download,</li><li>CALL1 suspends</li><li>CALL2 sees that no image is cached for <code>url</code></li><li>CALL2 starts download,</li><li>CALL2 suspends</li><li>CALL1’s call to download completes and CALL1 resumes</li><li>CALL1 caches image</li><li>CALL2’s call to download completes and CALL2 resumes</li><li>CALL2 overrides image with new version of image for same URL</li></ul><p>While an actor’s function is suspended, the underlying data can be changed by another call to that function.</p><p>One workaround here would be to not overwrite the image when it’s re-downloaded:</p><pre><code>cache[url] = cache[url, default: image]
</code></pre><p>Video mentions code associated with the video for a better solution; not found.</p><p>Ideally, all mutations in an actor are synchronous. You should expect that state is changed after you’ve used an await in your actor code. Any assumptions should be checked after an <code>await</code>.</p><h2>Actor isolation</h2><p>Protocol conformances must respect actor isolation.</p><p>For example</p><pre><code><span class="keyword">extension</span> <span class="type">SomeActor</span>: <span class="type">Hashable</span> {
  <span class="keyword">func</span> hash(into hasher: <span class="keyword">inout</span> <span class="type">Hasher</span>) {
    hasher.<span class="call">combine</span>(someProperty)
  }
}
</code></pre><p>This will throw a compiler error. <code>hash(into:)</code> is an instance method on <code>SomeActor</code> which means that it must be called with <code>async</code> since the actor might run the function call at a later time if the actor is already busy.</p><p>However, <code>Hashable</code> requires <code>hash(into:)</code> to be synchronous. This is a problem because for an actor to guarantee isolation, we can’t call it synchronously.</p><p>To work around this, we can use <code>nonisolated</code>:</p><pre><code><span class="keyword">extension</span> <span class="type">SomeActor</span>: <span class="type">Hashable</span> {
  nonisolated <span class="keyword">func</span> hash(into hasher: <span class="keyword">inout</span> <span class="type">Hasher</span>) {
    hasher.<span class="call">combine</span>(someProperty)
  }
}
</code></pre><p>This will make it so that the function is not isolated anymore. As long as <code>someProperty</code> is immutable, this will work. We know that <code>someProperty</code> can’t be mutated so reading it without isolation shouldn’t be a problem. After all, a data race is only a data race if one of the accesses mutates state.</p><p>If <code>someProperty</code> is mutable though, we’d still get a compiler error because we don’t know who else might access <code>someProperty</code> (and potentially mutate it).</p><p>Closures can be isolated to the actor.</p><pre><code><span class="keyword">extension</span> <span class="type">SomeActor</span> {
  <span class="keyword">func</span> doSomething() {
    <span class="keyword">self</span>.<span class="property">someList</span>.<span class="call">map</span> { item <span class="keyword">in 
      return self</span>.<span class="call">infoFor</span>(item)
    }
  }
}
</code></pre><p><code>infoFor</code> is defined on <code>SomeActor</code> but we don’t need to <code>await self.infoFor</code> because we know this closure never leaves the scope of the actor. Map’s closure isn’t escaping so we’re always actor isolated.</p><pre><code><span class="keyword">extension</span> <span class="type">SomeActor</span> {
  <span class="keyword">func</span> runLater() {
    <span class="call">asyncDetached</span> {
      await <span class="call">doSomething</span>()
    }
  }
}
</code></pre><p>In this example, the closure isn’t run immediately within the scope of the actor since it’s detached. This means we must <code>await doSomething() </code> since we’re no longer actor isolated.</p><p>If an actor owns a reference type that might be exposed to the outside of an actor, we have a potential for a data race. This isn’t a problem for value types. However, it is a problem for classes since the actor will hold a reference to an instance of a reference type. If this references is (safely) passed outside of the scope of the actor, this non-actor scope might cause a data race on that reference type instance.</p><p>Objects that can be safely shared concurrently are called <code>Sendable</code> types.</p><p>If you copy a something from one place to the other and each can modify it without issue, that object is sendable.</p><ul><li>Value types are sendable because they’re copied</li><li>Actors are sendable because they isolate state</li><li>Immutable classes can be sendable. These are classes with only <code>let</code> properties</li><li>Internally synchronized classes can be sendable</li><li>Functions aren’t always sendable. They are if they are <code>@Sendable</code></li></ul><p>Sendable describes a common but not universal property of type.</p><p>Swift will enforce Sendable at compile time so you’ll know when you’re at risk of leaking non-Sendable information.</p><p><code>Sendable</code> is a protocol that you can have classes conform to. Swift will automatically check correctness for you from that point. Something is <code>Sendable</code> if all of its properties are <code>Sendable</code>, similar to <code>Decodable</code>’s synthesized properties.</p><p>Sendable objects with generics must have the generic be <code>Sendanle</code> too. You can add conditional conformance to objects based on generics being <code>Sendable</code> for example.</p><p>Making objects <code>Sendable</code> if you need them in a concurrent situation is a great way to have Swift help you out when you might have a data race.</p><p><code>@Sendable</code> function types conform to <code>Sendable</code></p><p><code>Sendable</code> closures cannot have mutable captures, must capture <code>Sendable</code> types only, and can’t be both sync and actor isolated.</p><p><code>asyncDetached</code> takes a sendable closure.</p><pre><code><span class="keyword">var</span> c = <span class="type">Counter</span>()
<span class="call">asyncDetached</span> {
  c.<span class="call">increment</span>()
}
</code></pre><p>This doesn’t work because <code>c</code> is not <code>Sendable</code></p><h2>Main actor</h2><p>The main thread in an app is where all kinds of UI operations are performed. Whenever you interact with the UI you’re on the main thread.</p><p>Slow tasks should be performed away from the main thread so it doesn’t freeze.</p><p>Main thread is good for quick operations.</p><p><code>DispatchQueue.main.async</code> is used to dispatch onto the main queue. This is very similar to running on an actor. If you’re on the main thread you can access it safely. Just like you can safely access an actor’s state from within the actor. If you want to run something on the actor from the outside you do so async with <code>await</code>. This is similar to running code on the main queue async with <code>DispatchQueue.main.async</code>.</p><p>The Main Actor in Swift is an actor that represents the main thread.</p><p>Main actors always use the main dispatch queue as their underlying queue. It’s interchangeable with <code>DispatchQueue.main</code> from the pov of the runtime.</p><p>If you mark something with <code>@MainActor</code>, it always runs on the main actor:</p><pre><code><span class="keyword">@MainActor func</span> doSomething() {}
</code></pre><p>This code must be called async from outside of the main actor:</p><pre><code>await <span class="call">doSomething</span>()
</code></pre><p>Whole types cal be placed on the main actor with <code>@MainActor</code>:</p><pre><code><span class="keyword">@MainActor class</span> SomeClass
</code></pre><p>Opt out of running on the main actor in such a class with <code>nonisolated</code>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10002</guid><title>What's new in watchOS 8</title><description>watchOS 8 brings all-new opportunities to keep people up to date on their watch face. With new APIs for the Always-On Retina display and updating complications from bluetooth devices and background delivery of HealthKit data, it's never been easier to keep your app up to date. Learn about region-based user notifications to leverage location in your app. Explore all the new enhancements to SwiftUI and watchOS that will get you excited to build your next Watch app.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10002</link><pubDate>Tue, 15 Jun 2021 11:29:23 +0700</pubDate><content:encoded><![CDATA[<h2>Always-on display dimmed state</h2><ul><li>Supported on series 5 and 6</li><li>in watchOS 7, the always-on state showed your app’s UI blurred with the system time overlaid</li><li>when you rebuild your app with the watchOS 8 SDK, your app’s UI will now be shown in a dimmed state instead, and is immediately interactive if someone taps the UI</li><li>You can get notified of of this dimmed state via a new SwiftUI environment property <code>isLuminanceReduced</code>.</li><li>You can respond to this state by highlighting information that’s especially important, and hiding information that should stay private</li></ul><ul><li>In the watch simulator, you click the lock button in the simulator window to simulate a wrist-down event (triggering the dimmed state)</li></ul><p>Guidance:</p><ul><li>the transition from active state to the always-on state should feel seamless</li><li>don’t drastically alter the UI or reorganize information</li><li>dim non-essential information and elements, to give more prominence to the piece of information you want to stay highlighted and visible</li><li>if your UI has large elements that are filled with color or imagery, you may want to reduce those elements to be represented with a stroke or dimmed color</li><li>redact or remove sensitive information</li><li>reset animations</li><li>use SwiftUI's <code>TimelineView</code> to tell watchOS 8 that your inactive app needs to update its UI</li></ul><p>UI Updates: - Apps with an ongoing, active session (e.g. workout or audio session) can update your UI up to once per second - other apps up to once per minute - assume your app is visible longer than two minutes</p><h2>HealthKit data</h2><ul><li>background delivery of HealthKit data to Watch apps</li><li>new results come up to once per hours</li><li>if you have an active complication, up to four times per hour</li><li>all received results count against background app refresh budget</li></ul><p>Update frequency:</p><ul><li>immediate for critical data types (fall events, low blood oxygen saturation, heart rate events)</li><li>hourly or longer for other events</li></ul><h2>Bluetooth</h2><ul><li>from watchOS 4, Bluetooth devices can connect directly to Apple Watch and make use of Core Bluetooth.</li><li>from watchOS 8, Bluetooth devices can connect during background app refresh opportunities that your app’s complications get when they’re on the active watch face<ul><li>this means that your app’s complications can stay up to date with your Bluetooth device and display updated information throughout the day.</li><li>Background app refresh gives your app’s complications that are on the active watch face up to four opportunities per hour to connect and update.</li><li>these opportunities will count against your app’s overall background app refresh budget</li></ul></li></ul><p>Guidance: - connect and process your data within a very short period of time - new expiration handler on <code>WKRefreshBackgroundTask</code>, letting you know when you're about to run out of time</p><h2>Location</h2><ul><li>new in watchOS 8, region-based user notifications<ul><li>works similarly to iOS:<ul><li>deliver pre-created local notifications</li><li>"when in use" location permission required</li><li>limit the number of regions to only include important POIs near someone or locations they’ve shown explicit intent for</li></ul></li></ul></li></ul><ul><li>new Location button, for one-time location authorization without going through authorization prompts each time it’s tapped</li></ul><ul><li>always-on altimeter API, no need location access</li></ul><h2>More enhancements</h2><ul><li>respiratory rate API</li><li>assistive touch</li><li>large accessibility text size</li><li>(Xcode 12.5+) Unit testing and UI testing</li><li>Large titles</li><li>text input improvements:<ul><li>Scribble or Dictation preference is preserved per app</li><li>quick access to changing between input types while entering text</li><li>SwiftUI's <code>.searchable</code> API</li><li>Swipe actions on <code>List</code></li><li>Buttons improvements:</li><li>new roles parameter to let the system know how to present and handle specific button types (e.g. destructive buttons)</li><li>new <code>controlProminence</code> view modifier, which will give those buttons an additional haptic when tapped.</li><li>SwiftUI <code>Canvas</code> for rich programmatic drawing</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10288</guid><title>Explore the SF Symbols 3 app</title><description>Tour the latest updates to the SF Symbols app — our interactive library for iconography. Learn how you can use the library to design accessible and inclusive apps that look incredible: We’ll take you through changes to the app and symbols search, explore previewing and custom symbol management, and help you integrate symbols into your interface designs. It's recommended you watch "What's new in SF Symbols" from WWDC21 before watching this video.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10288</link><pubDate>Mon, 14 Jun 2021 23:20:21 +0700</pubDate><content:encoded><![CDATA[<h2>Overview</h2><ul><li>create your own libraries by dragging SF Symbols in your library names in your <code>Library</code> section in the sidebar</li><li>you can also select and drag multiple symbols at once</li><li>selecting any symbol will bring up the <code>information inspector</code> which:<ul><li>tells us OS availability/deprecation</li><li>shows its current and previous names</li><li>previews symbol variants and localization<ul><li>all these variants are automatically handled by the system</li><li>it's possible to specify a particular localization in Xcode using suffixes like <code>.ar</code> (for Arabic) or <code>.zh</code> (for Chinese)</li></ul></li></ul></li></ul><ul><li>beside the <code>information inspector</code> we also have the <code>rendering inspector</code>, which allows us to preview each symbols in various rendering (monochrome, hierarchical, palette, multicolor)</li></ul><h2>How to create a custom symbol</h2><ol><li>pick one symbol to dupliace</li><li><code>File &gt; Duplicate as Custom Symbol</code></li><li>Export the <code>.svg</code> template file and change it in your design app</li><li>drag the updated <code>.svg</code> template into the app and the new symbol will be available</li></ol><ul><li>SF Symbols app now supports copying images of symbols to place in your software<ol><li>pick your symbol rendering</li><li><code>Edit &gt; Copy Image</code> (or press Option-Command-C)</li><li>paste in your software</li></ol></li></ul><ul><li>You can also choose <code>Edit &gt; Copy Image As...</code> to control:<ul><li>the format of the copied image (either PNG or SVG format)</li><li>point size</li><li>pixel scale</li><li>these settings above will be preserved until you change them again</li></ul></li></ul><ul><li>use the <code>Export Symbol...</code> for transferring custom symbols into Xcode</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10349</guid><title>SF Symbols in SwiftUI</title><description>Discover how you can incorporate SF Symbols into your SwiftUI app. We’ll explore basic techniques for presenting symbols, customizing their size, and showing different variants. We’ll also take you through the latest updates to symbol colorization and help you pick the right tool for your app’s needs.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10349</link><pubDate>Mon, 14 Jun 2021 22:55:16 +0700</pubDate><content:encoded><![CDATA[<h2>How to use them</h2><ul><li>via <code>Image</code>s, e.g. <code>Image(systemName: "heart")</code></li><li>via <code>Label</code>s, e.g. <code>Label("Heart", systemImage: "heart")</code><ul><li>a <code>Label</code> is a general description of this text + image pairing and will adapt its behavior to the context where it's shown: sometimes the image will be shown first, sometimes second, sometimes the text is hidden</li><li>via <code>Text</code> string interpolation:</li></ul></li></ul><pre><code><span class="type">Text</span>(<span class="string">"""
    Thalia, Paul, and
    3 others</span> \(<span class="type">Image</span>(systemName: "chevron.<span class="property">forward"</span>))
<span class="string">"""</span>)
</code></pre><h2>Accessibility</h2><ul><li><code>Label</code> is great for accessibility, as the <code>Label</code>'s <code>text</code> will be read</li><li>for <code>Image</code>s:<ul><li>sometimes SwiftUI provides a label based on a system symbol's content</li><li>you can use <code>accessibilityLabel("description")</code> to provide that information</li><li>for custom symbols, you can provide a localization string for the symbol name (or use the <code>accessibilityLabel</code> modifier above)</li></ul></li></ul><h2>Style</h2><ul><li>By default SwiftUI uses the Monochrome rendering, which default to black or white in light mode or dark mode.</li><li>You can set the <code>foregroundStyle(_:)</code> to a specific color, or to more semantic values, like the current tint or secondary style:</li></ul><pre><code><span class="type">Label</span>(<span class="string">"Heart"</span>, systemImage: <span class="string">"heart"</span>)

<span class="type">Label</span>(<span class="string">"Heart"</span>, systemImage: <span class="string">"heart"</span>)
    .<span class="call">foregroundStyle</span>(.<span class="dotAccess">red</span>)

<span class="type">Label</span>(<span class="string">"Heart"</span>, systemImage: <span class="string">"heart"</span>)
    .<span class="call">foregroundStyle</span>(.<span class="dotAccess">tint</span>)

<span class="type">Label</span>(<span class="string">"Heart"</span>, systemImage: <span class="string">"heart"</span>)
    .<span class="call">foregroundStyle</span>(.<span class="dotAccess">secondary</span>)
</code></pre><ul><li>You can change both text and font size<ul><li>if you use text style, like <code>.body</code> or <code>.caption</code> then the text and symbol will scale with dynamic type</li><li>if you choose a fixed size, then they stay constant</li></ul></li></ul><pre><code><span class="type">Label</span>(<span class="string">"Heart"</span>, systemImage: <span class="string">"heart"</span>)
    .<span class="call">font</span>(.<span class="dotAccess">body</span>)

<span class="type">Label</span>(<span class="string">"Heart"</span>, systemImage: <span class="string">"heart"</span>)
    .<span class="call">font</span>(.<span class="dotAccess">caption</span>)

<span class="type">Label</span>(<span class="string">"Heart"</span>, systemImage: <span class="string">"heart"</span>)
    .<span class="call">font</span>(.<span class="call">system</span>(size: <span class="number">10</span>))
</code></pre><ul><li>you can change just he <code>Label</code> image by using the <code>imageScale(_:)</code> view modifier:</li></ul><pre><code><span class="type">Label</span>(<span class="string">"Heart"</span>, systemImage: <span class="string">"heart"</span>)
    .<span class="call">imageScale</span>(.<span class="dotAccess">large</span>)

<span class="type">Label</span>(<span class="string">"Heart"</span>, systemImage: <span class="string">"heart"</span>)
    .<span class="call">imageScale</span>(.<span class="dotAccess">medium</span>)

<span class="type">Label</span>(<span class="string">"Heart"</span>, systemImage: <span class="string">"heart"</span>)
    .<span class="call">imageScale</span>(.<span class="dotAccess">small</span>)
</code></pre><ul><li>variants (NEW) - if we use the base symbol, <code>Label</code> will automatically pick the right variant, like <code>outlined</code> or <code>fill</code>, based on the context (e.g. a <code>TabView</code>)</li></ul><ul><li>new <code>symbolVariant(_:)</code> view modifier to set the variant to use</li></ul><pre><code><span class="type">List</span> {
    <span class="type">Label</span>(<span class="string">"Ace of Hearts"</span>, systemImage: <span class="string">"suit.heart"</span>)
    <span class="type">Label</span>(<span class="string">"Ace of Spades"</span>, systemImage: <span class="string">"suit.spade"</span>)
    <span class="type">Label</span>(<span class="string">"Ace of Diamonds"</span>, systemImage: <span class="string">"suit.diamond"</span>)
    <span class="type">Label</span>(<span class="string">"Ace of Clubs"</span>, systemImage: <span class="string">"suit.club"</span>)
    <span class="type">Label</span>(<span class="string">"Queen of Hearts"</span>, image: <span class="string">"queen.heart"</span>)
}
.<span class="call">symbolVariant</span>(.<span class="dotAccess">fill</span>)
</code></pre><ul><li>rendering modes<ul><li>monochrome - to have a constant tint on the whole symbol</li><li>multicolor - to show colors for what each symbol represents<ul><li>If a symbol doesn't have a multicolor representation, it will fall back to the monochrome rendering mode</li></ul></li><li>hierarchical - uses the current foreground style to apply a single color to the symbol, but also adds multiple levels of opacity, to emphasize the key elements of the symbol</li><li>palette - allows maximum control over the coloring of the layers of a symbol</li></ul></li></ul><ul><li>new <code>symbolRenderingMode(_:)</code> to pick which rendering our symbols should use</li><li>use <a href="https://developer.apple.com/documentation/swiftui/view/foregroundstyle(_:)"><code>foregroundStyle(_:)</code></a> to use the palette rendering<ul><li>you can specify up to three styles to control each level of the symbol (one for each level of the hierarchy)</li><li>when you declare only two styles, e.g. <code>.foregroundStyle(.white, .black)</code>, the second color will be applied to both secondary and tertiary levels</li><li>you can apply any <code>ShapeStyle</code> with <code>foregroundStyle(_:)</code>, not just color: e.g. <code>.regularMaterial</code> to blur the background behind a symbol, <code>.secondary</code> to get a vibrant effect in front of blurs ...)</li></ul></li></ul><pre><code><span class="type">Button</span>(action: {}) {
    <span class="type">Image</span>(systemName: <span class="string">"arrow.uturn.backward"</span>)
}
.<span class="call">symbolVariant</span>(.<span class="dotAccess">circle</span>.<span class="property">fill</span>)
.<span class="call">foregroundStyle</span>(.<span class="dotAccess">white</span>, .<span class="dotAccess">yellow</span>, .<span class="dotAccess">red</span>)

<span class="type">Button</span>(action: {}) {
    <span class="type">Image</span>(systemName: <span class="string">"arrow.uturn.backward"</span>)
}
.<span class="call">symbolVariant</span>(.<span class="dotAccess">circle</span>.<span class="property">fill</span>)
.<span class="call">foregroundStyle</span>(.<span class="dotAccess">white</span>, .<span class="dotAccess">red</span>)

<span class="type">Button</span>(action: {}) {
    <span class="type">Image</span>(systemName: <span class="string">"arrow.uturn.backward"</span>)
}
.<span class="call">symbolVariant</span>(.<span class="dotAccess">circle</span>.<span class="property">fill</span>)
.<span class="call">foregroundStyle</span>(.<span class="dotAccess">white</span>, .<span class="dotAccess">secondary</span>)

<span class="type">Button</span>(action: {}) {
    <span class="type">Image</span>(systemName: <span class="string">"arrow.uturn.backward"</span>)
}
.<span class="call">symbolVariant</span>(.<span class="dotAccess">circle</span>.<span class="property">fill</span>)
.<span class="call">foregroundStyle</span>(.<span class="dotAccess">red</span>, .<span class="dotAccess">regularMaterial</span>)
</code></pre><ul><li>Use the SF Symbols app to preview your SF Symbols customization</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10097</guid><title>What’s new in SF Symbols</title><description>Explore the latest updates to SF Symbols, Apple’s iconography library. Designed to integrate seamlessly with San Francisco — the system font for Apple platforms — SF Symbols can help you create beautiful and consistent iconography for your app while supporting accessibility features like Dynamic Type and Bold Text. Discover the latest additions to the SF Symbols library, localization enhancements, and how you can more easily customize the color of a symbol to integrate it within your app’s own color palette. We’ll also show you how you can design and annotate custom symbols to support Monochrome, Hierarchical, Palette, and Multicolor rendering modes.

To get the most out of this session, we recommend first watching “SF Symbols 2” from WWDC20.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10097</link><pubDate>Mon, 14 Jun 2021 22:10:37 +0700</pubDate><content:encoded><![CDATA[<h2>Symbol variants</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10097/variants.png"/><p>A symbol is defined as a representation of a symbolic value that is used for the purpose of communication. A symbol with the same representation can come in many different forms:</p><ul><li>outlined - default in case of no context</li><li>filled - default for example in tab bars</li><li>slash - convey the functions of removing or displaying an item as inactive or unavailable</li><li>enclosing variants - which are symbols contained inside a shape like a circle, square, or rectangle</li></ul><p>What to use where:</p><ul><li>A filled symbol in swipe actions and iOS tab bars give a consistent appearance and level of emphasis, giving better control in areas that indicate selection when defined with an accent color</li><li>A symbol inside a circle with a filled variant provides better legibility at small sizes</li><li>An outlined, or default variant, of a symbol is great for Toolbars, Navigation Bars, Lists and other places in the UI where symbols are presented alongside text or where symbols need to display a uniform appearance.</li></ul><h2>New symbols</h2><ul><li>600 new symbols:<ul><li>new Apple products (AirPods, homePods, ..)</li><li>video game controllers symbols</li><li>health-related</li><li>and more</li></ul></li></ul><h2>Localization</h2><p>All localized symbols and script variants adapt automatically based on the user's device language, including right-to-left writing systems.</p><ul><li>new symbols for Arabic, Hebrew, and Devanagari</li><li>included new variants for Thai, Chinese, Japanese, and Korean</li></ul><h2>Anatomy of a symbol</h2><ul><li>Symbols hierarchy<ul><li>Every symbol groups its enclosed vectors of a path like layers</li><li>With annotations/layers, we can quickly identify a primary, secondary, and even tertiary layer of a symbol structure</li><li>Some symbols have all the (three) hierarchy levels.</li><li>Shapes that don't touch or have a gap between the first and second element of a symbol are considered secondary</li><li>Shapes that do touch and are encapsulated inside one another, become tertiary</li></ul></li></ul><h2>Rendering modes</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc21/10097/rendering.png"/><p>Four rendering modes:</p><ol><li>Hierarchical (NEW)<ul><li>uses a single color with varying opacities that add visual hierarchy to a symbol</li><li>creating depth and emphasis while allowing a single hue to drive the overall aesthetic</li><li>when multiple symbols that share common shapes are presented alongside one another, this rendering mode emphasizes the differences between them, intending to make the symbols more legible and recognizable.</li></ul></li></ol><ol start="2"><li>Palette (NEW)<ul><li>lets us define one color and opacity per hierarchy level</li><li>if a three-layers symbol only has two colors applied, the tertiary layer will use the same style as the secondary one</li></ul></li></ol><ol start="3"><li>Multicolor<ul><li>rendering mode that represents the intrinsic or native color of a symbol</li><li>many symbols feature this intrinsic color palette which is what's rendered by default</li><li>when customized, each color can be assigned an arbitrary one</li><li>A symbol can be:<ul><li>fully colored</li><li>partially colored, which means that part of a symbol will have the Multicolor feature, while the other will rely on an accent color</li><li>monochrome if it doesn't contain any Multicolor information</li></ul></li></ul></li></ol><ol start="4"><li>Monochrome<ul><li>most unified and consistent rendering mode</li><li>color and opacity is applied consistently in the whole symbol, no hierarchies</li></ul></li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10176</guid><title>Craft search experiences in SwiftUI</title><description>Discover how you can help people quickly find specific content within your apps. Learn how to use SwiftUI’s .searchable modifier in conjunction with other views to best incorporate search for your app. And we’ll show you how to elevate your implementation by providing search suggestions to help people understand the types of searches they can perform.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10176</link><pubDate>Sat, 12 Jun 2021 18:59:32 +0700</pubDate><content:encoded><![CDATA[<ul><li>New <a href="https://developer.apple.com/documentation/SwiftUI/View/searchable(_:text:placement:)-1r1py"><code>searchable(...)</code></a> view modifier</li><li>available on all platforms</li><li>places the search field following each platform convention (you don't need to worry about, mostly)</li></ul><p>Example:</p><pre><code><span class="type">NavigationView</span> {
  <span class="type">WeatherList</span>(text: $text) {
    <span class="type">ForEach</span>(data) { item <span class="keyword">in</span>
      <span class="type">WeatherCell</span>(item)
    }
  }
}
.<span class="call">searchable</span>(text: $text)
</code></pre><ul><li><code>searchable(...)</code> takes the configured search field and passes that down, through the environment, for other views to use in the best way for each platform</li><li>if no (sub)views use the configured search field, the <code>searchable(...)</code> provides a default implementation of rendering the search field in the toolbar</li></ul><ul><li><code>searchable(...)</code> sets up a new <code>isSearching</code> environment property, that you can use to dynamically change the view being displayed, based on whether a user is actively searching for example:</li></ul><pre><code><span class="keyword">struct</span> WeatherList: <span class="type">View</span> {
  <span class="keyword">@Binding var</span> text: <span class="type">String</span>
  
  <span class="keyword">@Environment</span>(\.<span class="property">isSearching</span>) <span class="keyword">private var</span> isSearching: <span class="type">Bool</span>
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">WeatherCitiesList</span>()
      .<span class="call">overlay</span> {
        <span class="keyword">if</span> isSearching &amp;&amp; !text.<span class="property">isEmpty</span> {
          <span class="type">WeatherSearchResults</span>()
        }
      }
  }
}
</code></pre><ul><li>some <code>searchable(...)</code> overloads also accept a <code>suggestions</code> parameter, which is a view builder that produces content that populates a list of suggestions</li><li>SwiftUI looks at this <code>suggestions</code> view builder and will present it based on whether there are any suggestions to display</li></ul><pre><code><span class="keyword">struct</span> ColorsContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">""</span>
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">Sidebar</span>()
      <span class="type">DetailView</span>()
    }
    .<span class="call">searchable</span>(text: $text) {
       <span class="type">ForEach</span>(suggestions) { suggestion <span class="keyword">in</span>
        <span class="type">ColorsSuggestionLabel</span>(suggestion)
          .<span class="call">searchCompletion</span>(suggestion.<span class="property">text</span>)
      }
    }
  }
}
</code></pre><ul><li><a href="https://developer.apple.com/documentation/swiftui/view/searchcompletion(_:) "><code>searchCompletion(_:)</code></a> replaced the need for you to wrap each suggestion with a button that replaces your <code>$text</code> binding</li><li>use <a href="https://developer.apple.com/documentation/swiftui/view/onsubmit(of:_:)"><code>onSubmit(of:_:)</code></a> to get notified when the user hits return from the search field</li></ul><pre><code><span class="type">ContentView</span>()
  .<span class="call">searchable</span>(text: $text) {
    <span class="type">MySearchSuggestions</span>()
  }
  .<span class="call">onSubmit</span>(of: .<span class="dotAccess">search</span>) {
    <span class="call">fetchResults</span>()
  }
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10021</guid><title>Add rich graphics to your SwiftUI app</title><description>Learn how you can bring your graphics to life with SwiftUI. We’ll begin by working with safe areas, including the keyboard safe area, and learn how to design beautiful, edge-to-edge graphics that won’t underlap the on-screen keyboard. We’ll also explore the materials and vibrancy you can use in SwiftUI to create easily customizable backgrounds and controls, and go over graphics APIs like drawingGroup and the all new canvas. With these tools, it’s simpler than ever to design fully interactive and interruptible animations and graphics in SwiftUI.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10021</link><pubDate>Sat, 12 Jun 2021 17:41:06 +0700</pubDate><content:encoded><![CDATA[<h2>Safe area</h2><ul><li>By default, SwiftUI positions your content within the safe area, avoiding anything that would obscure or clip your view, like the Home indicator or any bars that are being shown.</li><li>The safe area is represented as a region that is inset from the outermost full area where a view is shown.</li></ul><h2>Background/Foreground view modifiers</h2><p><code>.background()</code> view modifier has new overloads with new behaviors:</p><ul><li>previous <code>.background()</code> view modifiers were applied with the same bounds to the view they were called on.</li><li>to make previous <code>.background()</code> effects go beyond the safe area, we had to call <code>.ignoreSafeArea()</code> on the background content, e.g. <code>.background { Color.red.ignoresSafeArea() }</code></li><li>the new background modifier gives you this behavior automatically by default</li></ul><ul><li>the new overloads can accept:<ul><li>a specific style, like <code>Color</code>, <code>Gradient</code>, or the new materials (think UIKit's <code>UIVibrancyEffect</code>)</li><li>a shape, to clip the background to a specific shape (when we use this, the background no longer goes beyond the safe area)</li></ul></li></ul><p><a href="https://developer.apple.com/documentation/swiftui/disclosuregroup/foregroundstyle(_:)"><code>.foregroundStyle(_:)</code></a> is a new view modifier that applies styles on top of another view.</p><ul><li>similar to the new background overloads, it accepts styles</li><li>when passing a <a href="https://developer.apple.com/documentation/swiftui/foregroundstyle"><code>ForegroundStyle</code></a> between <code>.secondary</code> and <code>.quaternary</code>, the content might be shown with an effect called Vibrancy, which blends the colors behind it. This happens when you explicitly add a background with a material, or when your content is in a system component, like a sidebar, that adds the material for you.</li><li>Any given text can have a single foreground style applied to it, but multiple colors within its ranges (thanks to the new <a href="https://developer.apple.com/documentation/foundation/attributedstring">AttributedString</a> API).</li></ul><p><code>.safeAreaInset(edge:content:)</code> is a new modifier that lets us reduce the content safe area of the view is applied to.</p><ul><li>it kind of work like an overlay, where the overlay placement is now considered part of the unsafe area</li><li>for example, this allows to place views on top of <code>ScrollView</code>, and the edges of the scroll view content (not frame) will not be obscured by those views defined within <code>.safeAreaInset(edge:content:)</code></li></ul><h2>Canvas</h2><p>Previously we had the <a href="https://developer.apple.com/documentation/swiftui/view/drawinggroup(opaque:colormode:)"><code>drawingGroup(opaque:colorMode:)</code></a> view modifier:</p><ul><li>drawingGroup tells SwiftUI to combine all of the views it contains in a single layer to draw</li><li>drawingGroup works well for graphical elements, but shouldn't be used with UI controls, like text fields and lists</li></ul><p>New <code>Canvas</code> view</p><ul><li>addresses some <code>drawingGroup(opaque:colorMode:)</code> shortcoming such as bookkeeping and storage required for each view</li><li>similar to UIKit/AppKit <code>drawRect</code></li></ul><p>Example:</p><pre><code><span class="type">Canvas</span> { context, size <span class="keyword">in 
  var</span> image = context.<span class="call">resolve</span>(<span class="type">Image</span>(systemName: <span class="string">"sparkle"</span>))
  image.<span class="property">shading</span> = .<span class="call">color</span>(.<span class="dotAccess">blue</span>)
  <span class="keyword">let</span> imageSize = image.<span class="property">size</span> 
  context.<span class="property">blendMode</span> = .<span class="dotAccess">screen</span>

  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">10</span> {
    <span class="keyword">let</span> frame = <span class="type">CGRect</span>(
      x: <span class="number">0.5</span> * size.<span class="property">width</span> + <span class="type">Double</span>(i) * imageSize.<span class="property">width</span>, y: <span class="number">0.5</span> * size. <span class="property">height</span>, 
      width: imageSize.<span class="property">width</span>, height: imageSize.<span class="property">height</span>
    ) 
    <span class="keyword">var</span> innerContext = context
    innerContext.<span class="property">opacity</span> = <span class="number">0.5</span> 
    innerContext.<span class="call">fill</span>(<span class="type">Ellipse</span>().<span class="dotAccess">path</span> (in: frame), with: .<span class="dotAccess">color</span> (.<span class="dotAccess">cyan</span>))
    context.<span class="call">draw</span>(image, in: frame) 
  }
}
</code></pre><h2>TimelineView</h2><ul><li>new view letting you control exactly how something changes over time</li><li>configurable via schedules like timers and animations</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10275</guid><title>The practice of inclusive design</title><description>An inclusive app or game is not only usable by different people, but also welcomes people from diverse backgrounds and perspectives. Discover how you can design inclusive content for your interface, language, imagery, and marketing materials and support the broadest possible range of people with your app or game.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10275</link><pubDate>Sat, 12 Jun 2021 15:02:08 +0700</pubDate><content:encoded><![CDATA[<img src="https://fbernutz.github.io/images/sketchnotes/wwdc21-the-practice-of-inclusive-design.jpg" alt="Sketchnote about 'The practice of inclusive design' at WWDC21 with a lot of practical tips on how to make your app or game more inclusive. Favorite takeaways are Tell diverse stories, adopt accessibility, avoid stereotypes, there's nothing like a normal person, language is constantly evolving."/>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/101</guid><title>Keynote</title><description>The Apple Worldwide Developers Conference kicks off with exciting reveals, inspiration, and new opportunities. Join the worldwide developer community for an in-depth look at the future of Apple platforms, directly from Apple Park.</description><link>https://www.wwdcnotes.com/notes/wwdc21/101</link><pubDate>Sat, 12 Jun 2021 14:36:31 +0700</pubDate><content:encoded><![CDATA[<img src="https://fbernutz.github.io/images/sketchnotes/wwdc21-keynote.jpg" alt="Sketchnote of WWDC Keynote 2021 with announcements about iOS 15, iPadOS 15, macOS Monterey and more"/><h2>iOS 15</h2><ul><li>FaceTime<ul><li>Spacial Audio - to make it look like the audio comes from whoever is speaking</li><li>voice isolation - to filter our everything but the speaker voice</li><li>grid view - to see all calls participants at once</li><li>portrait mode - for blurring the background</li><li>links - generate FaceTime invite/links, works with any desktop/mobile browser</li><li>SharePlay<ul><li>do activities together (like watching the same movie)</li><li>share your screen</li><li>open for 3rd party developers</li></ul></li></ul></li></ul><ul><li>Messages<ul><li>improved media visualizations</li><li>shared links in messages will show up in the News.app</li><li>shared playlists in messages will show up on Music.app</li><li>shared images in messages will show up in the Photo gallery</li><li>can pin messages</li></ul></li></ul><ul><li>Notifications<ul><li>new look<ul><li>notification summary - collection of notifications delivered on user's schedule</li><li>notifications from people (direct messages and more) won't show up in the summaries</li></ul></li></ul></li></ul><ul><li>Focus<ul><li>Do not disturb status shows up in Messages.app</li><li>Focus is an advanced Do not disturb, where users can pick which apps can notify you and more</li><li>Focus is set on all user devices automatically</li></ul></li></ul><ul><li>Live Text<ul><li>live text recognition on camera.app</li><li>text recognition on photos.app</li><li>7 languages</li><li>iOS/iPadOS/maoOS</li><li>works with art, books, nature, pets, landmarks</li></ul></li></ul><ul><li>Spotlight<ul><li>searches for photos directly in spotlight</li><li>rich contacts results</li><li>rich results for VIPs as well (actors and more)</li></ul></li></ul><ul><li>Photo Memories<ul><li>better, more interactive memories</li></ul></li></ul><ul><li>Wallet.pp<ul><li>HomeKit key to get into homes/hotels</li><li>digital ids (driving license) support (US only)</li></ul></li></ul><ul><li>Weather.app<ul><li>redesigned</li><li>more data</li><li>full screen high resolution weather maps</li></ul></li></ul><ul><li>Maps.app<ul><li>new interactive globe</li><li>elevation</li><li>roads signs (cross blocks, bike lanes, ..)</li><li>3d landmarks, with light and dark mode</li><li>transit improvements</li></ul></li></ul><ul><li>AirPods<ul><li>conversation boost - AirPods act as hearing aid when somebody is talking directly to the user</li><li>announce notifications and reminders</li><li>more Find me improvements</li><li>Spatial Audio on tvOS and M1 macOS machines</li></ul></li></ul><ul><li>Translate.app<ul><li>now in iPadOS</li><li>translate things without tapping buttons</li><li>system-wide translation: select something and hit translate, even live text</li></ul></li></ul><h2>iPadOS 15</h2><ul><li>Widgets<ul><li>can be put anywhere on the screen</li></ul></li><li>new large size, exclusive to iPads</li></ul><ul><li>App Library - like in iOS 14</li><li>Can hide springboard pages - like in iOS 14</li><li>improved multitasking with iPadOS shelf and easier screen management</li></ul><ul><li>Notes<ul><li>multi user improvements: mentions, activity/history view</li><li>tags</li><li>Quick note: swipe from bottom right corner to create a quick note</li></ul></li></ul><ul><li>Swift Playgrounds<ul><li>can build entire apps</li><li>Xcode Cloud</li><li>better autocompletion</li></ul></li></ul><ul><li>Mail Privacy protection<ul><li>hides IP address and user location</li><li>hides when/if and how often an email is open</li></ul></li></ul><ul><li>App Privacy reports - new section in Settings.app that lets us download reports on user data usage</li></ul><ul><li>Siri - on device voice recognition</li></ul><ul><li>Recovery Contact - lets you add somebody that can reset your account password for you if you forget it</li><li>Digital Legacy - lets you add somebody that can inherit your info when you pass away</li></ul><ul><li>iCloud+<ul><li>Private relay - Safari's VPN - no one can see what you browse</li><li>Hide My Email - lets you sign up on services with random emails that you can get rid of if needed</li><li>HomeKit Secure Video</li><li>for free for all iCloud subscribers</li></ul></li></ul><h2>watchOS 8</h2><ul><li>Health.app<ul><li>walk steadiness tracking and alerts</li><li>share your Health data with contacts, receive alerts on health changes of other people</li><li>sleep Respiratory tracking</li></ul></li></ul><ul><li>Breath.app<ul><li>now helps you be more mindful as well</li></ul></li></ul><ul><li>New portrait mode watch face</li></ul><h2>HomeKit</h2><ul><li>use your phone/watch to enter your home/hotels</li><li>Siri can be installed in 3rd party HomeKit products</li></ul><h2>macOS 12 Monterey</h2><ul><li>Universal control - use a single mouse and keyboard to work across devices, can move files too</li><li>Airplay to Mac (even just as a speaker)</li><li>Shortcuts.app</li><li>TestFlight.app</li></ul><ul><li>Safari.app<ul><li>minimized UI</li><li>tab groups</li><li>web extensions on iOS/iPadOS</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10304</guid><title>The process of inclusive design</title><description>Discover how you can deliver inclusive apps that can foster amazing experiences for everyone who uses your software. We’ll take you through best practices for creating and empowering diverse teams and explore how inclusivity influences every stage of the design and development process.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10304</link><pubDate>Sat, 12 Jun 2021 14:35:32 +0700</pubDate><content:encoded><![CDATA[<img src="https://fbernutz.github.io/images/sketchnotes/wwdc21-the-process-of-inclusive-design.jpg" alt="Sketchnote about 'The process of inclusive design' at WWDC21 about different diversity axes, common misconcepts about inclusion and the process of building an inclusive app or game"/>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10059</guid><title>What's new in UIKit</title><description>Discover the latest updates and improvements to UIKit and learn how to build better iPadOS, iOS, and Mac Catalyst apps. We’ll take you through UI refinements, productivity updates, and API enhancements, and help you explore performance improvements and security &amp; privacy features.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10059</link><pubDate>Sat, 12 Jun 2021 14:33:32 +0700</pubDate><content:encoded><![CDATA[<img src="https://fbernutz.github.io/images/sketchnotes/wwdc21-whats-new-in-uikit.jpg" alt="Sketchnote about what’s new in UIKit at WWDC21 about improvements in productivity, UI refinements, performance, API Enhancements and security and privacy changes. My favorite changes are new half height sheets, new UIButton API and the system location button for one-time access to locations."/>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10109</guid><title>What's new in Foundation</title><description>Discover how the latest updates to Foundation can help you improve your app's localization and internationalization support. Find out about the new AttributedString, designed specifically for Swift, and learn how you can use Markdown to apply style to your localized strings. Explore the grammar agreement engine, which automatically fixes up localized strings so they match grammatical gender and pluralization. And we’ll take you through improvements to date and number formatting that simplify complex requirements while also improving performance.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10109</link><pubDate>Fri, 11 Jun 2021 22:45:05 +0700</pubDate><content:encoded><![CDATA[<img src="https://fbernutz.github.io/images/sketchnotes/wwdc21-whats-new-foundation.jpg" alt="Sketchnote about what’s new in Foundation at WWDC 2021. It shows news about internationalization and localization improvements, in detail Attributed String, Formatters and Automatic Grammar Agreement."/><h2>AttributedString</h2><ul><li>An attributed string is a combination of:<ul><li>characters</li><li>a set of ranges</li><li>a dictionary</li></ul></li></ul><ul><li>Attributed strings allow you to associate attributes, which are key-value pairs, to a specific range of a string</li></ul><ul><li>New <a href="https://developer.apple.com/documentation/foundation/attributedstring"><code>AttributedString</code></a> type<ul><li>value type, built from the ground up for Swift</li><li>same character-counting behavior as Swift <code>String</code></li><li>localizable</li><li>built with safety and security in mind</li></ul></li></ul><p>Example:</p><pre><code><span class="keyword">var</span> thanks = <span class="type">AttributedString</span>(<span class="string">"Thank you!"</span>)
thanks.<span class="property">font</span> = .<span class="dotAccess">body</span>.<span class="call">bold</span>()

<span class="keyword">var</span> website = <span class="type">AttributedString</span>(<span class="string">"Please visit our website."</span>)
website.<span class="property">font</span> = .<span class="dotAccess">body</span>.<span class="call">italic</span>()
website.<span class="property">link</span> = <span class="type">URL</span>(string: <span class="string">"http://www.example.com"</span>)

<span class="comment">// AttributeContainer - a place you can hold attributes and values on their own without the string</span>
<span class="keyword">var</span> container = <span class="type">AttributeContainer</span>()
container.<span class="property">foregroundColor</span> = .<span class="dotAccess">red</span>
container.<span class="property">underlineColor</span> = .<span class="dotAccess">primary</span>

thanks.<span class="call">mergeAttributes</span>(container)
website.<span class="call">mergeAttributes</span>(container)
</code></pre><ul><li><code>AttributedString</code> views: give us insight of the attribute string, they're Swift collections<ul><li><code>characters</code> - which provides access to the <code>String</code> instance</li><li><code>runs</code> - which provides access to the attributes<ul><li>A run is the starting location, length, and value of a particular attribute</li><li>we can also filter runs per attribute, e.g. <code>attributedString.runs[\.link]</code>, this will separate the attribute string considering solely that specific attribute, and returning <code>nil</code> when that attribute is not applied on a run</li></ul></li></ul></li></ul><p>For example, here's how to highlight all punctuation of a string:</p><pre><code><span class="keyword">var</span> message = <span class="type">AttributedString</span>(localized: <span class="string">"..."</span>) 
<span class="keyword">let</span> characterView = message.<span class="property">characters</span> 
<span class="keyword">for</span> i <span class="keyword">in</span> characterView.<span class="property">indices</span> <span class="keyword">where</span> characterView[i].isPunctuation { 
  message[i..&lt;characterView.<span class="call">index</span>(after: i)].foregroundColor = .<span class="dotAccess">orange</span>
} 
</code></pre><h3>Localization</h3><ul><li>both <code>AttributedString</code> and <code>NSAttributedString</code> are fully localizable</li><li>in Swift, we can now use string interpolation, like in SwiftUI</li></ul><pre><code><span class="type">String</span>(localized: <span class="string">"Would you like to save the document “</span>\(document)<span class="string">”?"</span>)
<span class="type">AttributedString</span>(localized: <span class="string">"Would you like to save the document “</span>\(document)<span class="string">”?"</span>)
</code></pre><ul><li>Xcode can generate your strings files from these new initializers using the compiler: Turn this on by going to your build settings, look for the localization settings, and turn on <code>Use Compiler to Extract Swift Strings</code></li></ul><h3>Markdown</h3><p><code>AttributedString</code> comes with markdown support, including links and custom attributes:</p><pre><code><span class="type">This</span> text contains [a link](http://www.<span class="property">example</span>.<span class="property">com</span>).

<span class="type">This</span> text contains ![an image](http://www.<span class="property">example</span>.<span class="property">com</span>/my_image.<span class="property">gif</span>).

<span class="type">This</span> text contains ^[a custom attribute](rainbow: 'extreme').
</code></pre><p>Here's an example of custom attribute and how to parse it:</p><pre><code><span class="comment">// Attribute scopes</span> 
<span class="keyword">extension</span> <span class="type">AttributeScopes</span> 
  <span class="keyword">struct</span> CaffeAppAttributes: <span class="type">AttributeScope</span> {
    <span class="keyword">let</span> rainbow: <span class="type">RainbowAttribute</span> 
    <span class="keyword">let</span> swiftUI: <span class="type">SwiftUIAttributes</span> 
  }
  <span class="keyword">var</span> caffeApp: <span class="type">CaffeAppAttributes</span>.<span class="type">Type</span> { <span class="type">CaffeAppAttributes</span>.<span class="keyword">self</span> } 
}

<span class="keyword">let</span> header = <span class="type">AttributedString</span>(
  localized: <span class="string">"^[Fast &amp; Delicious](rainbow: 'extreme') Food"</span>,
  including: \.<span class="property">caffeApp</span>
)
</code></pre><h2>Formatters</h2><ul><li>bran new API</li><li>no need to cache formatter anymore</li></ul><p>Date formatter example:</p><pre><code><span class="keyword">func</span> formattingDates() {
  <span class="comment">// Note: This will use your current date &amp; time plus current locale. 
  // Example output is for en_US locale.</span>
  <span class="keyword">let</span> date = <span class="type">Date</span>.<span class="property">now</span>

  <span class="keyword">let</span> formatted = date.<span class="call">formatted</span>() <span class="comment">// equivalent to date.formatted(.dateTime) 
  // example: "6/7/2021, 9:42 AM"</span>
  <span class="call">print</span>(formatted)

  <span class="keyword">let</span> onlyYearDayMonth = date.<span class="call">formatted</span>(.<span class="dotAccess">dateTime</span>.<span class="call">year</span>().<span class="call">day</span>().<span class="call">month</span>())
  <span class="comment">// example: "Jun 7, 2021"</span>
  <span class="call">print</span>(onlyYearDayMonth)

  <span class="keyword">let</span> onlyYearDayMonthWide = date.<span class="call">formatted</span>(.<span class="dotAccess">dateTime</span>.<span class="call">year</span>().<span class="call">day</span>().<span class="call">month</span>(.<span class="dotAccess">wide</span>))
  <span class="comment">// example: "June 7, 2021"</span>
  <span class="call">print</span>(onlyYearDayMonthWide)

  <span class="keyword">let</span> onlyDate = date.<span class="call">formatted</span>(date: .<span class="dotAccess">numeric</span>, time: .<span class="dotAccess">omitted</span>)
  <span class="comment">// example: "6/7/2021"</span>
  <span class="call">print</span>(onlyDate)

  <span class="keyword">let</span> onlyTime = date.<span class="call">formatted</span>(date: .<span class="dotAccess">omitted</span>, time: .<span class="dotAccess">shortened</span>)
  <span class="comment">// example: "9:42 AM"</span>
  <span class="call">print</span>(onlyTime)
}
</code></pre><ul><li>all these <code>formatted(date:)</code> parameters are called fields</li><li>fields order do not matter</li><li>all fields have a default for the shortest versions of the API</li></ul><p>Formatters work great with <code>AttributedString</code>, here's how to format a date and color just the week day of the string:</p><pre><code><span class="keyword">import</span> SwiftUI

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> date = <span class="type">Date</span>.<span class="property">now</span>
  <span class="keyword">@Environment</span>(\.<span class="property">locale</span>) <span class="keyword">var</span> locale

  <span class="keyword">var</span> dateString : <span class="type">AttributedString</span> {
    <span class="keyword">var</span> str = date.<span class="call">formatted</span>(
      .<span class="dotAccess">dateTime</span>.<span class="call">minute</span>().<span class="call">hour</span>().<span class="call">weekday</span>()
      .<span class="call">locale</span>(locale)
      .<span class="dotAccess">attributed</span>
    )

    <span class="keyword">let</span> weekday = <span class="type">AttributeContainer</span>
      .<span class="call">dateField</span>(.<span class="dotAccess">weekday</span>)

    <span class="keyword">let</span> color = <span class="type">AttributeContainer</span>
      .<span class="call">foregroundColor</span>(.<span class="dotAccess">orange</span>)

    str.<span class="call">replaceAttributes</span>(weekday, with: color)

    <span class="keyword">return</span> str
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Text</span>(<span class="string">"Next free coffee"</span>)
      <span class="type">Text</span>(dateString).<span class="call">font</span>(.<span class="dotAccess">title2</span>)
    }
    .<span class="call">multilineTextAlignment</span>(.<span class="dotAccess">center</span>)
  }
}
</code></pre><p>New way to convert strings to values via strategies:</p><pre><code><span class="keyword">func</span> parsingDates() {
  <span class="keyword">let</span> date = <span class="type">Date</span>.<span class="property">now</span>

  <span class="keyword">let</span> format = <span class="type">Date</span>.<span class="type">FormatStyle</span>().<span class="call">year</span>().<span class="call">day</span>().<span class="call">month</span>()
  <span class="keyword">let</span> formatted = date.<span class="call">formatted</span>(format)
  <span class="comment">// example: "Jun 7, 2021"</span>
  <span class="call">print</span>(formatted)

  <span class="keyword">if let</span> date = <span class="keyword">try</span>? <span class="type">Date</span>(formatted, strategy: format) {
    <span class="comment">// example: 2021-06-07 07:00:00 +0000</span>
    <span class="call">print</span>(date)
  }
}

<span class="comment">// Work with String interpolation:</span>
<span class="keyword">func</span> parsingDatesStrategies() {
  <span class="keyword">let</span> strategy = <span class="type">Date</span>.<span class="type">ParseStrategy</span>(
    format: <span class="string">"</span>\(year: .<span class="dotAccess">defaultDigits</span>)<span class="string">-</span>\(month: .<span class="dotAccess">twoDigits</span>)<span class="string">-</span>\(day: .<span class="dotAccess">twoDigits</span>)<span class="string">"</span>,
    timeZone: <span class="type">TimeZone</span>.<span class="property">current</span>)

  <span class="keyword">if let</span> date = <span class="keyword">try</span>? <span class="type">Date</span>(<span class="string">"2021-06-07"</span>, strategy: strategy) {
    <span class="comment">// date is 2021-06-07 07:00:00 +0000</span>
    <span class="call">print</span>(date)
  }
}
</code></pre><h2>Automatic Grammar Agreement</h2><p>Makes localization easy when a certain sentence need to change based on the quantity and gender of the objects, we only need to provide the singular word, Foundation will take care of plurals and more.</p><p>Example:</p><pre><code><span class="keyword">func</span> addToOrderEnglish() {
  <span class="comment">// Note: This will use your current locale. Example output is for en_US locale.</span>
  <span class="keyword">let</span> quantity = <span class="number">2</span>
  <span class="keyword">let</span> size = <span class="string">"large"</span>
  <span class="keyword">let</span> food = <span class="string">"salad"</span>

  <span class="keyword">let</span> message = <span class="type">AttributedString</span>(localized: <span class="string">"Add ^[</span>\(quantity) \(size) \(food)<span class="string">](inflect: true) to your order"</span>)
  <span class="call">print</span>(message)
}
</code></pre><p>These are all the localization strings needed:</p><pre><code><span class="comment">// MARK: en.strings</span>

<span class="string">"Add ^[%lld %@ %@](inflect: true) to your order"</span> = <span class="string">"Add ^[%lld %@ %@](inflect: true) to your order"</span>; 

<span class="string">"Pizza"</span> = <span class="string">"Pizza"</span>;
<span class="string">"Juice"</span> = <span class="string">"Juice"</span>;
<span class="string">"Salad"</span> = <span class="string">"Salad"</span>;

<span class="string">"Small"</span> = <span class="string">"Small"</span>;
<span class="string">"Large"</span> = <span class="string">"Large"</span>;

<span class="comment">// MARK: es.strings</span>

<span class="string">"Add ^[%lld %@ %@](inflect: true) to your order"</span> = <span class="string">"Añadir [%1lld %3$@ %2$@](inflect: true) a tu pedido"</span>; 

<span class="string">"Pizza"</span> = <span class="string">"Pizza"</span>;
<span class="string">"Juice"</span> = <span class="string">"Jugo"</span>;
<span class="string">"Salad"</span> = <span class="string">"Ensalada"</span>;

<span class="string">"Small"</span> = <span class="string">"Pequeño"</span>;
<span class="string">"Large"</span> = <span class="string">"Grande"</span>;
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10054</guid><title>What's new in AppKit</title><description>Explore the latest advancements in Mac app development with AppKit. We’ll show how you can enhance your app’s design with new control features and SF Symbols 3, build powerful text experiences using TextKit 2, and harness the latest Swift features in your app.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10054</link><pubDate>Fri, 11 Jun 2021 22:23:50 +0700</pubDate><content:encoded><![CDATA[<h2>Design &amp; control updates</h2><p>There are design updates for some system controls:</p><ul><li>popovers appear with an animation</li><li>sliders smoothly glide into position when clicked</li><li>smaller things like increased spacing between table sections or slightly wider toolbar buttons</li></ul><h4>Control tinting</h4><p>Individual controls like buttons, segmented controls or sliders can have a custom tint. You can set it using these properties:</p><ul><li><a href="https://developer.apple.com/documentation/appkit/nsbutton/2561000-bezelcolor"><code>NSButton.bezelColor</code></a></li><li><a href="https://developer.apple.com/documentation/appkit/nssegmentedcontrol/2561002-selectedsegmentbezelcolor"><code>NSSegmentedControl.selectedSegmentBezelColor</code></a></li><li><a href="https://developer.apple.com/documentation/appkit/nsslider/2560999-trackfillcolor"><code>NSSlider.trackFillColor</code></a></li></ul><p>These properties have been introduced in macOS Sierra for Touch Bar controls; in macOS Monterey they’re functional also for normal app controls.</p><p>This is useful for specific controls that need to have some kind of semantically meaningful color - e.g. a green “Accept Call” and a red “End Call” buttons in a video call app.</p><p>Avoid confusion with the default button if there is one in the same view, since it will also be colorful. Also, make sure to indicate purpose with more than just the color (using a clear label or an icon), since some of your users may not be able to distinguish buttons by color.</p><h4>Push buttons</h4><p>Push buttons no longer highlight using the accent color on click - they behave just like e.g. segmented controls in macOS Big Sur. This means you shouldn't make assumptions about how the highlight state looks (e.g. drawing white text over a button that should be blue when pressed, but will now be light gray).</p><p>Instead, check the interior background style <code>NSButtonCell.interiorBackgroundStyle</code>:</p><ul><li><code>.normal</code> = colorless state</li><li><code>.emphasized</code> = colorful state</li></ul><p>The old “regular square button” aka “bevel button” has now been refreshed as “Flexible push style button” and can be used as a variable height push button. It supports the same kind of configuration as a regular push button, so it can serve as a default button and can be tinted. Its corner radius and padding now match other button styles, and it can contain larger icons or multi-line text.</p><p>The vast majority of buttons should still use the standard fixed height push button - the variable height button is meant for special cases.</p><h2>Localizing keyboard shortcuts</h2><p>Some keyboard shortcuts should be localized for different keyboard layouts, because in some layouts they may be hard or impossible to type, or it may make sense to adapt them for right-to-left languages. E.g. <code>Cmd + \</code> is not possible to type on the Japanese keyboard, which doesn’t have a backslash key.</p><p>AppKit can now handle this for you. In macOS Monterey, the system automatically remaps such shortcuts to different ones that are more natural on the given keyboard layout. Also, shortcuts like <code>Cmd + [</code> and <code>Cmd + ]</code> to go back and forward will be swapped in right-to-left languages (this applies to brackets, braces, parentheses and arrow keys).</p><p>You can opt out of this behavior using:</p><ul><li><a href="https://developer.apple.com/documentation/appkit/nsmenuitem/3787555-allowsautomatickeyequivalentmirr"><code>NSMenuItem.allowsAutomaticKeyEquivalentMirroring</code></a> - for directional keys like brackets</li><li><a href="https://developer.apple.com/documentation/appkit/nsmenuitem/3787554-allowsautomatickeyequivalentloca"><code>NSMenuItem.allowsAutomaticKeyEquivalentLocalization</code></a> - turns off all key localization, including mirroring</li></ul><p>If you really don’t want to use this feature at all, you can also disable it completely in your app by implementing the <code>NSApplicationDelegate</code> method: <a href="https://developer.apple.com/documentation/appkit/nsapplicationdelegate/3787553-applicationshouldautomaticallylo/"><code>applicationShouldAutomaticallyLocalizeKeyEquivalents(_:)</code></a>.</p><h2>Update to SF Symbols</h2><p>There is a new version available - SF Symbols 3:</p><ul><li>it expands capabilities of the SF Symbols app</li><li>some symbols now have multiple layers that can be individually colored</li><li>there is an updated format for custom symbols - it allows you to annotate distinct layers within an image</li></ul><p>Big Sur had two coloring modes for symbols:</p><ul><li>traditional monochrome template style, drawing the whole symbol using one accent color</li><li>a multicolor style that uses multiple colors that are predefined in the symbol itself</li></ul><p>SF Symbols 3 in macOS Monterey adds two new rendering modes:</p><ul><li>"hierarchical" - uses a single tint color, but draws different layers of the image in an emphasized or deemphasized way (lighter or darker than the base color)</li><li>"palette" - lets you assign each layer any custom color independently</li></ul><p>APIs for the new rendering modes:</p><pre><code><span class="type">NSImage</span>.<span class="type">SymbolConfiguration</span>(hierarchicalColor: .<span class="dotAccess">red</span>)
<span class="type">NSImage</span>.<span class="type">SymbolConfiguration</span>(paletteColors: […])
<span class="type">NSImage</span>.<span class="type">SymbolConfiguration</span>.<span class="call">preferringMulticolor</span>()
</code></pre><h4>Symbol variants</h4><p>There are also new APIs for mapping between symbol variants, e.g. outline heart symbol ⭤ filled heart symbol, or variants with circles etc. This is useful e.g. when you’re building a picker control that uses outline icons for unselected states and filled variants of the same icons for the selected item.</p><p>To convert between variants, call e.g.:</p><pre><code>baseImage.<span class="call">image</span>(with: .<span class="dotAccess">fill</span>)
</code></pre><p>There are constants for each kind of symbol variant, and you can combine multiple variants together (e.g. circle + fill).</p><p>See “Design and build SF Symbols” for more info.</p><h2>TextKit 2</h2><p>macOS Monterey brings a huge update to the text system. TextKit is a great text engine with a long track record, used across all Apple systems. However, TextKit is a <em>linear</em> text layout engine, which means it typesets a block of text from the beginning to the end. There are a lot of use cases where a <em>non-linear</em> layout engine is more useful.</p><p>TextKit 2 always uses a non-linear layout system. This means it can perform layout on a more granular level, which allows it to avoid some unnecessary work. For example, when you’re looking at a middle fragment of a long document, a linear layout system needs to process all text from the beginning up to the given fragment in order to render it; a non-linear system can start at the nearest start of a paragraph.</p><p>The non-linear layout system also makes it easier to mix text with non-text elements, and improves performance for large documents.</p><p>TextKit 2 provides a lot of customization points, which allow you to extend its behavior. The new version coexists with TextKit 1, you can choose which engine to use for each view.</p><p>TextKit 2 has actually already been used in some system apps and controls in Big Sur.</p><p>See “<a href="https://developer.apple.com/videos/play/wwdc2021/10061/">Meet TextKit 2</a>” for more info.</p><h2>New Swift features</h2><p>Swift 5.5 introduces some important new features for managing concurrency: async/await and actors.</p><p>In AppKit, many asynchronous methods that return value through a completion handler now have variants that work with async/await:</p><pre><code><span class="keyword">@IBAction func</span> pickColor(<span class="keyword">_</span> sender: <span class="type">Any</span>?) {
  <span class="call">async</span> {
    <span class="keyword">guard let</span> color = await <span class="type">NSColorSampler</span>().<span class="call">sample</span>() <span class="keyword">else</span> { <span class="keyword">return</span> }
    textField.<span class="property">textColor</span> = color
  }
}
</code></pre><p>The actor model is a great fit for a UI framework like AppKit where most APIs should be called on a single main thread. The macOS SDK now has a <code>@MainActor</code> property wrapper that marks all types that have to be accessed from the main thread. Classes such as <code>NSView</code>, <code>NSView/WindowController</code>, <code>NSApplication</code>, <code>NSCell</code>, <code>NSDocument</code> etc. are now marked with <code>@MainActor</code>.</p><p>Code running in the main actor can freely call methods on other main actor types. However, code that isn’t running on the main thread needs to use async/await to run code on a <code>@MainActor</code> type. This is enforced at the compiler level, which lets you avoid common errors that happen when mixing concurrency with UI code.</p><p>See “<a href="https://developer.apple.com/videos/play/wwdc2021/10132/">Meet async/await in Swift</a>” and “<a href="https://developer.apple.com/videos/play/wwdc2021/10133">Protect mutable state with Swift actors</a>” for more info.</p><h4>AttributedString</h4><p>Swift 5.5 also adds a new value type <a href="https://developer.apple.com/documentation/foundation/attributedstring/"><code>AttributedString</code></a>. It has type-safe attributes and a more swifty API for reading &amp; writing attributes. You can easily convert between <code>AttributedString</code> and <code>NSAttributedString</code>.</p><p>See “<a href="https://developer.apple.com/videos/play/wwdc2017/212/">What’s new in Foundation</a>” for more info.</p><h4>Updating NSViews</h4><p>There is a new Swift property wrapper which should reduce boilerplate around view properties.</p><p>Let’s say we have a custom view class like this:</p><pre><code><span class="keyword">class</span> BadgeView: <span class="type">NSView</span> {
  <span class="keyword">var</span> fillColor: <span class="type">NSColor</span>
  <span class="keyword">var</span> shadow: <span class="type">NSShadow</span>
  <span class="keyword">var</span> scaling: <span class="type">NSImageScaling</span>
  …
}
</code></pre><p>These properties will usually need to have a didSet which updates properties like <a href="https://developer.apple.com/documentation/appkit/nsview/1483360-needsdisplay/"><code>needsDisplay</code></a> or <a href="https://developer.apple.com/documentation/appkit/nsview/1526912-needslayout"><code>needsLayout</code></a> when they’re modified:</p><pre><code><span class="keyword">var</span> fillColor: <span class="type">NSColor</span> {
  <span class="keyword">didSet</span> { needsDisplay = <span class="keyword">true</span> }
}
</code></pre><p>The new <code>@Invalidating</code> attribute in <a href="https://developer.apple.com/documentation/appkit/nsview"><code>NSView</code></a> lets you easily specify which other view properties should be updated when the given property is modified:</p><pre><code><span class="keyword">@Invalidating</span>(.<span class="dotAccess">display</span>) <span class="keyword">var</span> fillColor: <span class="type">NSColor</span>
</code></pre><p>Properties that can be invalidated include: display, layout, constraints, intrinsic content size, restorable state. The marked property needs to be <a href="https://developer.apple.com/documentation/swift/equatable/"><code>Equatable</code></a>, since AppKit checks if the value was actually changed before triggering a view update.</p><p>You can extend the invalidation system by conforming to <code>NSViewInvalidating</code> protocol.</p><h2>Shortcuts</h2><p>iOS Shortcuts are now available on the Mac.</p><p>Shortcuts appear in all the places where you can access services today - if your app supports services, it will also support Shortcuts. AppKit decides which shortcuts are available at the given place by checking the responder chain - it asks each responder whether it can provide or receive the type of data used by each shortcut. The types of data are represented by <a href="https://developer.apple.com/documentation/appkit/nspasteboard/pasteboardtype"><code>NSPasteboard.PasteboardType</code></a> (usually a UTI).</p><p>To support shortcuts in a given responder object, implement the method:</p><pre><code><span class="keyword">func</span> validRequestor(forSendType sendType: <span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>?,
                              returnType: <span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>?) -&gt; <span class="type">Any</span>
</code></pre><p>In that method return an instance of a type implementing <a href="https://developer.apple.com/documentation/appkit/nsservicesmenurequestor/"><code>NSServicesMenuRequestor</code></a> (usually the same object):</p><pre><code><span class="keyword">protocol</span> NSServicesMenuRequestor {
  <span class="keyword">func</span> writeSelection(to pasteboard: <span class="type">NSPasteboard</span>,
                              types: [<span class="type">NSPasteboard</span>.<span class="type">PasteboardType</span>]) -&gt; <span class="type">Bool</span>

  <span class="keyword">func</span> readSelection(from pasteboard: <span class="type">NSPasteboard</span>) -&gt; <span class="type">Bool</span>
}
</code></pre><h2>Siri Intents</h2><p>You can now use Siri Intents in a Mac app by adding an Intents Extension. You can also return an intents handler from the application delegate:</p><pre><code><span class="keyword">protocol</span> NSApplicationDelegate {
  optional <span class="keyword">func</span> application(<span class="keyword">_</span> application: <span class="type">NSApplication</span>,
                        handlerFor intent: <span class="type">INIntent</span>) -&gt; <span class="type">Any</span>?
}
</code></pre><p>The returned object should conform to an appropriate intent handler protocol, depending on the intent type.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10022</guid><title>Demystify SwiftUI</title><description>Peek behind the curtain into the core tenets of SwiftUI philosophy: Identity, Lifetime, and Dependencies. Find out about common patterns, learn the principles that drive the framework, and discover how you can use them to guarantee correctness and performance for your app.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10022</link><pubDate>Fri, 11 Jun 2021 17:15:12 +0700</pubDate><content:encoded><![CDATA[<p>Three key aspects on how SwiftUI sees your views:</p><ul><li>Identity - how SwiftUI recognizes view to be the same or distinct, across multiple updates of your app</li></ul><ul><li>Lifetime - how SwiftUI tracks the existence of views and data over time</li></ul><ul><li>Dependencies - how SwiftUI understands when your views need to be updated and why</li></ul><p>Together, these three concepts inform how SwiftUI decides what needs to change, how, and when, resulting in the dynamic user interface you see onscreen.</p><h2>View identity</h2><p>Views that share the same identity represent different states of the same conceptual UI element.</p><p>Let's take two views from two different screen states:</p><ul><li>are those views the same view in a different state?</li><li>or are those two completely distinct views?</li></ul><p>The answer changes how our interface transitions from one state to another:</p><ul><li>if they're the same view, SwiftUI will apply the new state to that view, for example by moving that view from one location to the other</li><li>if they're distinct, that means a change of state will make them transition independently, such as fading in and out</li></ul><p>Connecting views across different states is important, because that's how SwiftUI understands how to transition between them.</p><p>SwiftUI types of identity:</p><ol><li>Explicit identity - defined by using custom or data-driven identifiers</li><li>Structural identity - defined by the view type and position in the view hierarchy</li></ol><h3>Explicit identity</h3><ul><li><code>ForEach</code>'s (and <code>List</code>'s) <code>id</code> parameter is a form of explicit identity:</li></ul><pre><code><span class="type">ForEach</span>(..., id: \.<span class="property">someProperty</span>) { ... }
</code></pre><ul><li>the <code>id(_:)</code> modifier also provides a form of explicit identity:</li></ul><pre><code><span class="type">Header</span>().<span class="call">id</span>(headerIdentifier)
</code></pre><p>We don't have to explicitly identify every view, just the ones we need to refer to elsewhere in the code, for example in a <code>ScrollViewReader</code>.</p><h3>Structural identity</h3><p>Every view has an identity, even if it's not explicit:<br>SwiftUI uses the structure of your view hierarchy to generate implicit identities for your views so you don't have to.</p><p>Example:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="keyword">if</span> condition {
      viewA
    } <span class="keyword">else</span> {
      viewB
    }
  }
}
</code></pre><ul><li><code>viewA</code> is the "true" view</li><li><code>viewB</code> is the "false" view</li></ul><p>This works only if SwiftUI can statically guarantee that these views stay where they are and never swap places:<br>SwiftUI accomplishes this by looking at the type structure of your view hierarchy.</p><p><code>some View</code> is a placeholder that represents our view static composite type:<br>for the example above, the real type is <code>_ConditionalContent&lt;ViewAType, ViewBType&gt;</code>, which is what SwiftUI uses to identify the "true" and "false" view.</p><p>From SwiftUI point of view, the <code>if-else</code> statement represents two different views with distinct identities.</p><p>To make those views the same identity, we'd need to apply the condition in other ways, for example via an intert view modifier:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  sharedView
    .<span class="call">background</span>(condition ? <span class="type">Color</span>.<span class="property">green</span> : <span class="type">Color</span>.<span class="property">green</span>)
}
</code></pre><p>By default, try to preserve identity and provide more fluid transitions:<br>this also helps preserve your view's lifetime and state.</p><p><code>AnyView</code> makes it hard for SwiftUI to optimize and identify each view, avoid it as much as possible, use <code>@ViewBuilder</code> if needed.</p><h2>How view identity is related to their lifetime and state</h2><p>During its lifetime, a view can change its state, view identity connects these different state values as a single entity.</p><p>E.g.:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">ViewA</span>(value: <span class="number">1</span>)
}
</code></pre><p>later on we change the value to 2</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">ViewA</span>(value: <span class="number">2</span>)
}
</code></pre><p>When we change that value from <code>1</code> to <code>2</code>, SwiftUI will keep around a copy of the old view value to perform a comparison and know if the view has changed. After that, the old value is destroyed.</p><p>The view value is different from the view identity:</p><ul><li>View values are ephemeral and you should not rely on their lifetime</li></ul><ul><li>What you can control is their identity</li></ul><p>Over time, driven by updates, new values for the view are created (like when we moved from <code>1</code> to <code>2</code> above), but from SwiftUI's perspective, these represent the same view.</p><ul><li>lifetime of a view: duration of the identity associated with that view</li></ul><p>The state of a view is associated with its lifetime: <code>@State</code> and <code>@StateObject</code> are the persistent storage associated with your view's identity.</p><p>At the beginning of a view's identity, when it's created for the first time, SwiftUI is going to allocate storage in memory for State and StateObject using their initial values.</p><h2>How SwiftUI updates your view</h2><p>All view properties are dependencies of a view</p><pre><code><span class="keyword">struct</span> MyView: <span class="type">View</span> {
  <span class="keyword">@Binding var</span> isOn = <span class="keyword">false</span> <span class="comment">// this is a dependency</span>
  <span class="keyword">var</span> name: <span class="type">String</span>          <span class="comment">// this is a dependency</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    ...
  }
}
</code></pre><ul><li>A dependency is just an input to the view.</li><li>When a dependency changes, the view is <strong>required</strong> to produce a new body</li></ul><p>Each view has its own dependencies, multiple views can depend on the same dependency source:</p><ul><li>SwiftUI maintains a dependency graph of all these dependencies.</li><li>when any dependency changes, SwiftUI will call each view's body, producing a new body value, for all views depending on that dependency</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10018</guid><title>What's new in SwiftUI</title><description>There’s never been a better time to develop your apps with SwiftUI. Discover the latest updates to the UI framework — including lists, buttons, and text fields — and learn how these features can help you more fully adopt SwiftUI in your app. Find out how to create beautiful, visually-rich graphics using the canvas view, materials, and enhancements to symbols. Explore multi-column tables on macOS, refinements to focus and keyboard interaction, and the multi-platform search API. And we’ll show you how to take advantage of features like Swift concurrency, a brand new AttributedString, format styles, localization, and so much more.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10018</link><pubDate>Thu, 10 Jun 2021 22:59:36 +0700</pubDate><content:encoded><![CDATA[<h2>AsyncImage</h2><p>New view that automatically downloads and displays images, also has placeholder, images can be customized via modifiers as usual, can have custom behaviour for error handling.</p><pre><code><span class="type">AsyncImage</span>(url: ...) { image <span class="keyword">in</span>
  image
    .<span class="call">resizable</span>()
    .<span class="call">aspectRation</span>(contentMode: .<span class="dotAccess">fill</span>)
}
</code></pre><h2>task(_:) concurrency view modifier</h2><p><code>task(_:)</code> lets you attach an <code>async</code> task to the lifetime of your view: it will be triggered when its view appears, and will be cancelled when this view disappears.</p><pre><code><span class="type">Text</span>(displayValue)
  .<span class="call">task</span> {
    <span class="keyword">var</span> results = <span class="type">TextProcessResults</span>()
    <span class="keyword">for try</span> await line <span class="keyword">in</span> textURL.<span class="call">lines</span>() {
      results.<span class="call">accumulateResults</span>(line: line)
    }
    displayValue = results.<span class="call">textSummary</span>()
  }
</code></pre><h2>Lists &amp; Grids</h2><h3>Pull to refresh</h3><p>Pull to refresh via <a href="https://developer.apple.com/documentation/swiftui/view/refreshable(action:)"><code>refreshable(action:)</code></a> concurrency view modifier, this modifier configures a refresh action (<a href="https://developer.apple.com/documentation/swiftui/refreshaction">RefreshAction</a>) and passes down through the environment.</p><p>Use an <code>await</code> expression inside the action. SwiftUI shows a refresh indicator, which stays visible for the duration of the awaited operation.</p><pre><code><span class="type">List</span>(mailbox.<span class="property">conversations</span>) {
  <span class="type">ConversationCell</span>($0)
}
.<span class="call">refreshable</span> {
  await mailbox.<span class="call">fetch</span>()
}
</code></pre><h3>Binding</h3><p>New <code>List</code> and <code>ForEach</code> initializers allowing us to get a binding per each element:</p><pre><code><span class="keyword">struct</span> DirectionsList: <span class="type">View</span> {
  <span class="keyword">@Binding var</span> directions: [<span class="type">Direction</span>] 

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> { 
    <span class="type">List</span>($directions) { $direction <span class="keyword">in</span> 
      <span class="type">Label</span> { 
    <span class="type">TextField</span>(<span class="string">"Instructions"</span>, text: $direction.<span class="property">text</span>)
    } icon: { 
     <span class="type">DirectionsIcon</span>(direction) 
    }
  }
  }
}
</code></pre><p>This is back-ported all the way to iOS 13.</p><h3>Separator Customization</h3><ul><li><a href="https://developer.apple.com/documentation/swiftui/section/listrowseparatortint(_:edges:)"><code>listRowSeparatorTint(_:edges:)</code></a> - custom row separator colors</li><li><a href="https://developer.apple.com/documentation/swiftui/section/listsectionseparatortint(_:edges:)"><code>listSectionSeparatorTint(_:edges:)</code></a> - custom section separator colors</li><li><a href="https://developer.apple.com/documentation/swiftui/section/listrowseparator(_:edges:)"><code>listRowSeparator(_:edges:)</code></a> - can be used to hide the separators altogether</li></ul><h3>Swipe Actions</h3><p>New <a href="https://developer.apple.com/documentation/swiftui/section/swipeactions(edge:allowsfullswipe:content:)"><code>swipeActions(edge:allowsFullSwipe:content:)</code></a> view modifier to add swipe actions.</p><p>Define each action with <code>Button</code>s, use the <code>tint(_:)</code> view modifier to customize the background color (or use the button's role).</p><pre><code><span class="type">List</span>(store.<span class="property">messages</span>) { message <span class="keyword">in</span>
  <span class="type">MessageCell</span>(message: message)
  .<span class="call">swipeActions</span>(edge: .<span class="dotAccess">leading</span>) {
    <span class="type">Button</span> { store.<span class="call">toggleUnread</span>(message) } label: {
      <span class="keyword">if</span> message.<span class="property">isUnread</span> {
        <span class="type">Label</span>(<span class="string">"Read"</span>, systemImage: <span class="string">"envelope.open"</span>)
      } <span class="keyword">else</span> {
        <span class="type">Label</span>(<span class="string">"Unread"</span>, systemImage: <span class="string">"envelope.badge"</span>)
      }
    }
    .<span class="call">tint</span>(.<span class="dotAccess">yellow</span>)
  }
  .<span class="call">swipeActions</span>(edge: .<span class="dotAccess">trailing</span>) {
    <span class="type">Button</span>(role: .<span class="dotAccess">destructive</span>) {
      store.<span class="call">delete</span>(message)
    } label: {
      <span class="type">Label</span>(<span class="string">"Delete"</span>, systemImage: <span class="string">"trash"</span>)
    }
    .<span class="call">tint</span>(.<span class="dotAccess">blue</span>)
    <span class="type">Button</span> { store.<span class="call">flag</span>(message) } label: {
      <span class="type">Label</span>(<span class="string">"Flag"</span>, systemImage: <span class="string">"flag"</span>)
    }
    .<span class="call">tint</span>(.<span class="dotAccess">green</span>)
  }
  }
}
</code></pre><h3>Style Updates</h3><p>All styles now come with a new enum-like syntax:</p><pre><code><span class="type">List</span> {
  ...
}
.<span class="call">listStyle</span>(.<span class="dotAccess">grouped</span>)
</code></pre><p>instead of:</p><pre><code><span class="type">List</span> {
  ...
}
.<span class="call">listStyle</span>(<span class="type">GroupedListStyle</span>())
</code></pre><p>New (macOS-only) style, which alternates the colors of the rows:</p><pre><code><span class="type">List</span> {
  ...
}
.<span class="call">listStyle</span>(<span class="call">bordered</span>(alternatesRowBackgrounds: <span class="keyword">true</span>))
</code></pre><h2>Table (macOS-only)</h2><p>New <code>Table</code> view, supports selection, sorting, and more:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> characters = <span class="type">StoryCharacter</span>.<span class="property">previewData</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">Table</span>(characters) {
    <span class="type">TableColumn</span>(<span class="string">"􀟈"</span>) { <span class="type">CharacterIcon</span>($0) }
    .<span class="call">width</span>(<span class="number">20</span>)
    <span class="type">TableColumn</span>(<span class="string">"Villain"</span>) { <span class="type">Text</span>($0.<span class="property">isVillain</span> ? <span class="string">"Villain"</span> : <span class="string">"Hero"</span>) }
    .<span class="call">width</span>(<span class="number">40</span>)
    <span class="type">TableColumn</span>(<span class="string">"Name"</span>, value: \.<span class="property">name</span>)
    <span class="type">TableColumn</span>(<span class="string">"Powers"</span>, value: \.<span class="property">powers</span>)
  }
  }
}
</code></pre><h2>Search</h2><p>New <a href="https://developer.apple.com/documentation/SwiftUI/View/searchable(_:text:placement:)-1r1py"><code>searchable(_:text:placement:)</code></a> view modifiers, it adds a search field where more appropriate based on the context:</p><pre><code><span class="type">NavigationView</span> {
  <span class="type">List</span> {
    ...
  }
  .<span class="call">searchable</span>(...)
}
</code></pre><h2>Sharing data</h2><ul><li><code>onDrag</code> now comes with a <code>preview</code> <code>View</code> parameter, letting us customize what view to show when dragging.</li><li>new <code>importsItemProviders</code> view modifier makes a view a drop target that accepts item providers</li><li>new <code>exportsItemProviders</code> view modifier exposes our app data to external system services</li></ul><h2>SF Symbols</h2><ul><li>Two new rendering modes:<ul><li>Hierarchical - like monochrome, but automatically adds multiple levels of opacity to really emphasize the key elements of the symbol</li><li>Palette - gives more fine-grained control over individual layers color with custom fills</li></ul></li></ul><ul><li>SwiftUI automatically chooses the correct symbol variant to use based on the context, for example a symbol used in the tabbar will use the <code>.fill</code> variant.</li></ul><h2>Canvas</h2><p>New view allowing immediate-mode drawing similar to <code>drawRect</code> from UIKit or AppKit:</p><pre><code><span class="type">Canvas</span> { context, size <span class="keyword">in
  let</span> metrics = <span class="call">gridMetrics</span>(in: size)
  <span class="keyword">for</span> (index, symbol) <span class="keyword">in</span> symbols.<span class="call">enumerated</span>() {
  <span class="keyword">let</span> rect = metrics[index]
  <span class="keyword">let</span> (sRect, opacity) = rect.<span class="call">fishEyeTransform</span>(around: focalPoint)

  context.<span class="property">opacity</span> = opacity
  <span class="keyword">let</span> image = context.<span class="call">resolve</span>(symbol.<span class="property">image</span>)
  context.<span class="call">draw</span>(image, in: sRect.<span class="call">fit</span>(image.<span class="property">size</span>))
  }
}
</code></pre><p>We can use <code>TimelineView</code> to make our canvas update over time.</p><h2>Displaying sensitive data</h2><p>New modifiers that automatically redact sensitive data when the user is no longer authenticated (for when the phone is locked or similar)</p><pre><code><span class="type">Image</span>(systemName: favoriteSymbol)
  .<span class="call">font</span>(.<span class="dotAccess">title2</span>)
  .<span class="call">privacySensitive</span>(<span class="keyword">true</span>)
</code></pre><h2>Material (blur)</h2><p>New blur/vibrancy effects:</p><pre><code><span class="keyword">struct</span> ColorList: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      ...
    materialOverlay
    }
  }
  
  <span class="keyword">var</span> materialOverlay: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span> {
   <span class="type">Text</span>(<span class="string">"Symbol Browser"</span>)
    .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>.<span class="call">bold</span>())
   <span class="type">Text</span>(<span class="string">"</span>\(symbols.<span class="property">count</span>) <span class="string">symbols 🎉"</span>)
    .<span class="call">foregroundStyle</span>(.<span class="dotAccess">secondary</span>)
    .<span class="call">font</span>(.<span class="dotAccess">title2</span>.<span class="call">bold</span>())
  }
  .<span class="call">padding</span>()
  .<span class="call">background</span>(.<span class="dotAccess">ultraThinMaterial</span>, in: <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">16.0</span>))
  }
}
</code></pre><h2>Preview</h2><p>We can now preview screens in different orientations:</p><pre><code><span class="keyword">struct</span> ColorList_Previews: <span class="type">PreviewProvider</span> {
  <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">ColorList</span>()
    .<span class="call">previewInterfaceOrientation</span>(.<span class="dotAccess">portrait</span>)

  <span class="type">ColorList</span>()
    .<span class="call">previewInterfaceOrientation</span>(.<span class="dotAccess">landscapeLeft</span>)
  }
}
</code></pre><h2>Text</h2><ul><li>markdown support</li><li><a href="https://developer.apple.com/documentation/foundation/attributedstring">AttributedString</a></li><li>restrict dynamic type size of a text/view via new <a href="https://developer.apple.com/documentation/swiftui/view/dynamictypesize(_:)-1m2tf">dynamicTypeSize(_:)</a> view modifier</li><li>make text selectable or not via <a href="https://developer.apple.com/documentation/swiftui/view/textselection(_:)">textSelection(_:)</a> view modifier (macOS only)</li><li>new powerful formatters</li></ul><h2>TextFields</h2><ul><li>support for prompts, separate from its label, to let users know what kind of content a field is expecting. In macOS, the prompt will be used as the placeholder text.</li><li><code>onSubmit(_:)</code> view modifier to detect when the user submits the text (this replaces the previous <code>TextField</code>'s <code>onCommit</code> parameter</li><li><code>submitLabel(_:)</code> view modifier to customize the return key action, and to help give users a hint of what kind of action will occur when submitting a field</li></ul><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> activity: <span class="type">Activity</span> = .<span class="dotAccess">sample</span>
  <span class="keyword">@State private var</span> newAttendee = <span class="type">PersonNameComponents</span>()

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(<span class="string">"New Person"</span>, value: $newAttendee,
      format: .<span class="call">name</span>(style: .<span class="dotAccess">medium</span>)
    )
    .<span class="call">onSubmit</span> {
      activity.<span class="call">append</span>(<span class="type">Person</span>(newAttendee))
      newAttendee = <span class="type">PersonNameComponents</span>()
    }
    .<span class="call">submitLabel</span>(.<span class="dotAccess">done</span>)
  }
}
</code></pre><ul><li>keyboard toolbar support via the usual <code>toolbar(_:)</code> view modifier with new <code>.keyboard</code> placement</li></ul><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> activity: <span class="type">Activity</span> = .<span class="dotAccess">sample</span>
  <span class="keyword">@FocusState private var</span> focusedField: <span class="type">Field</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Form</span> {
      <span class="type">TextField</span>(<span class="string">"Name"</span>, text: $activity.<span class="property">name</span>, prompt: <span class="type">Text</span>(<span class="string">"New Activity"</span>))
      <span class="type">TextField</span>(<span class="string">"Location"</span>, text: $activity.<span class="property">location</span>)
      <span class="type">DatePicker</span>(<span class="string">"Date"</span>, selection: $activity.<span class="property">date</span>)
    }
    .<span class="call">toolbar</span> {
      <span class="type">ToolbarItemGroup</span>(placement: .<span class="dotAccess">keyboard</span>) {
        <span class="type">Button</span>(action: selectPreviousField) {
          <span class="type">Label</span>(<span class="string">"Previous"</span>, systemImage: <span class="string">"chevron.up"</span>)
        }
        .<span class="call">disabled</span>(!hasPreviousField)

        <span class="type">Button</span>(action: selectNextField) {
          <span class="type">Label</span>(<span class="string">"Next"</span>, systemImage: <span class="string">"chevron.down"</span>)
        }
        .<span class="call">disabled</span>(!hasNextField)
      }
    }
  }

  <span class="keyword">private func</span> selectPreviousField() {
     focusedField = focusedField.<span class="call">map</span> {
      <span class="type">Field</span>(rawValue: $0.<span class="property">rawValue</span> - <span class="number">1</span>)!
     }
  }

  <span class="keyword">private var</span> hasPreviousField: <span class="type">Bool</span> {
    <span class="keyword">if let</span> currentFocusedField = focusedField {
      <span class="keyword">return</span> currentFocusedField.<span class="property">rawValue</span> &gt; <span class="number">0</span>
    } <span class="keyword">else</span> {
      <span class="keyword">return false</span>
    }
  }

  <span class="keyword">private func</span> selectNextField() {
     focusedField = focusedField.<span class="call">map</span> {
      <span class="type">Field</span>(rawValue: $0.<span class="property">rawValue</span> + <span class="number">1</span>)!
     }
  }

  <span class="keyword">private var</span> hasNextField: <span class="type">Bool</span> {
    <span class="keyword">if let</span> currentFocusedField = focusedField {
      <span class="keyword">return</span> currentFocusedField.<span class="property">rawValue</span> &lt; <span class="type">Field</span>.<span class="property">allCases</span>.<span class="property">count</span>
    } <span class="keyword">else</span> {
      <span class="keyword">return false</span>
    }
  }
}
</code></pre><ul><li>textfield focus control via <code>@FocusState</code> property wrapper:</li></ul><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> activity: <span class="type">Activity</span> = .<span class="dotAccess">sample</span>
  <span class="keyword">@State private var</span> newAttendee = <span class="type">PersonNameComponents</span>()
  <span class="keyword">@FocusState private var</span> addAttendeeIsFocused: <span class="type">Bool</span> = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span>(alignment: .<span class="dotAccess">leading</span>) {
    <span class="type">TextField</span>(<span class="string">"New Person"</span>, value: $newAttendee, format: .<span class="call">name</span>(style: .<span class="dotAccess">medium</span>))
    .<span class="call">focused</span>($addAttendeeIsFocused)

    <span class="type">ControlGroup</span> {
    <span class="type">Button</span> {
      addAttendeeIsFocused = <span class="keyword">true</span>
    } label: {
       <span class="type">Label</span>(<span class="string">"Add Attendee"</span>, systemImage: <span class="string">"plus"</span>)
    }
    }
  }
  }
}
</code></pre><h2>Buttons</h2><ul><li>New bordered style (<code>Button("Add") {}.buttonStyle(.bordered)</code>), which supports tinting via the <code>.tint</code> view modifier</li><li>new <a href="https://developer.apple.com/documentation/swiftui/view/controlsize(_:)?changes=l_5"><code>controlSize(_:)</code></a> view modifier for different buttons appearances</li><li>new <a href="https://developer.apple.com/documentation/swiftui/view/controlprominence(_:)?changes=l_5"><code>controlProminence(_:)</code></a> to highlight importance of each button</li></ul><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Button</span>(action: addToJar) {
        <span class="type">Text</span>(<span class="string">"Add to Jar"</span>).<span class="call">frame</span>(maxWidth: <span class="number">300</span>)
      }
      .<span class="call">controlProminence</span>(.<span class="dotAccess">increased</span>)
      .<span class="call">keyboardShortcut</span>(.<span class="dotAccess">defaultAction</span>)

      <span class="type">Button</span>(action: addToWatchlist) {
        <span class="type">Text</span>(<span class="string">"Add to Watchlist"</span>).<span class="call">frame</span>(maxWidth: <span class="number">300</span>)
      }
      .<span class="call">tint</span>(.<span class="dotAccess">accentColor</span>)
    }
    .<span class="call">buttonStyle</span>(.<span class="dotAccess">bordered</span>)
    .<span class="call">controlSize</span>(.<span class="dotAccess">large</span>)
  }

  <span class="keyword">private func</span> addToJar() {}
  <span class="keyword">private func</span> addToWatchlist() {}
}
</code></pre><ul><li>New Button roles to give each button additional semantics, which SwiftUI uses to display the button accordingly:</li></ul><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> entry: <span class="type">ButtonEntry</span> = .<span class="dotAccess">sample</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">ButtonEntryCell</span>(entry)
    .<span class="call">contextMenu</span> {
    <span class="type">Section</span> {
      <span class="type">Button</span>(<span class="string">"Open"</span>) {
        <span class="comment">// ...</span>
      }
      <span class="comment">// This button will have red tint as it's destructive</span>
      <span class="type">Button</span>(<span class="string">"Delete..."</span>, role: .<span class="dotAccess">destructive</span>) {
        <span class="comment">// ...</span>
      }
    }
  }
}
</code></pre><ul><li>Buttons confirmation dialogs via <a href="https://developer.apple.com/documentation/swiftui/texteditor/confirmationDialog(_:ispresented:titlevisibility:actions:)-90mxz?changes=latest_minor"><code>confirmationDialog</code></a> view modifier:</li></ul><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> entry: <span class="type">ButtonEntry</span> = .<span class="dotAccess">sample</span>
  <span class="keyword">@State private var</span> showConfirmation: <span class="type">Bool</span> = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ButtonEntryCell</span>(entry)
      .<span class="call">contextMenu</span> {
        <span class="type">Section</span> {
          <span class="type">Button</span>(<span class="string">"Open"</span>) {
            <span class="comment">// ...</span>
          }
          <span class="type">Button</span>(<span class="string">"Delete..."</span>, role: .<span class="dotAccess">destructive</span>) {
            showConfirmation = <span class="keyword">true</span>
            <span class="comment">// ...</span>
          }
        }
      }
      .<span class="call">confirmationDialog</span>(
        <span class="string">"Are you sure you want to delete</span> \(entry.<span class="property">name</span>)<span class="string">?"</span>,
        isPresented: $showConfirmation
      ) {
        <span class="type">Button</span>(<span class="string">"Delete"</span>, role: .<span class="dotAccess">destructive</span>) {
          <span class="comment">// delete the entry</span>
        }
      } message: {
        <span class="type">Text</span>(<span class="string">"Deleting</span> \(entry.<span class="property">name</span>) <span class="string">will remove it from all of your jars."</span>)
      }
  }
}
</code></pre><h2>Menus</h2><p>More flexibility and new modifiers to control primary and secondary actions:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> buttonEntry: <span class="type">ButtonEntry</span> = .<span class="dotAccess">sample</span>
  <span class="keyword">@StateObject private var</span> jarStore = <span class="type">JarStore</span>()

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Menu</span>(<span class="string">"Add"</span>) {
      <span class="type">ForEach</span>(jarStore.<span class="property">allJars</span>) { jar <span class="keyword">in</span>
        <span class="type">Button</span>(<span class="string">"Add to</span> \(jar.<span class="property">name</span>)<span class="string">"</span>) {
         jarStore.<span class="call">add</span>(buttonEntry, to: jar)
        }
      }
    } primaryAction: {
      jarStore.<span class="call">addToDefaultJar</span>(buttonEntry)
    }
    .<span class="call">menuStyle</span>(<span class="type">BorderedButtonMenuStyle</span>())
    .
  }
}
</code></pre><h2>ControlGroup</h2><p>New view used to gather controls together (the system will display the controls at the right place with correct spacing etc):</p><pre><code><span class="type">ControlGroup</span> {
  <span class="type">Button</span>(action: archive) {
    <span class="type">Label</span>(<span class="string">"Archive"</span>, systemImage: <span class="string">"archiveBox"</span>)
  }
  <span class="type">Button</span>(action: delete) {
    <span class="type">Label</span>(<span class="string">"Delete"</span>, systemName: <span class="string">"trash"</span>)
  }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/102</guid><title>Platforms State of the Union</title><description>Take a deeper dive into the new tools, technologies, and advances across Apple platforms that will help you create even better apps.</description><link>https://www.wwdcnotes.com/notes/wwdc21/102</link><pubDate>Wed, 9 Jun 2021 17:28:40 +0700</pubDate><content:encoded><![CDATA[<img src="https://fbernutz.github.io/images/sketchnotes/wwdc21-state-of-the-union.jpg" alt="Sketchnote of WWDC 2021 Platforms State of the Union with detailed announcements about Xcode 13, Xcode Cloud, Swift, SwiftUI, Swift Playground 4, AR, Metal, Focus, Screentime API, Widgets, SharePlay and more"/><h2><a href="https://developer.apple.com/xcode-cloud/">Xcode Cloud</a></h2><ul><li>CI/CD service built into Xcode and designed for Apple developers, runs on the cloud</li><li>Everything can be done within Xcode UI, no context switching.</li><li>Integrates with any git host provider (GitHub, GitLab, ...)</li><li>Setup CI/CD in 1 minute</li><li>Configuration centralized in the cloud</li><li>Flexible and extensible</li><li>Each Xcode Cloud workflow configuration can be accessed through:<ul><li>Xcode UI</li><li>App Store Connect web UI</li><li>App Store Connect public REST API (in JSON)</li></ul></li></ul><ul><li>Automatically handles code signing, app distribution and other workflows</li><li>Review workflow results directly in Xcode</li><li>Can automatically trigger workflows via PR creation, tags, and more</li><li>We can choose environment's Xcode version, simulators (or just use Xcode Cloud's “recommended” ones), including targeting iOS beta releases (even when you’re using an earlier version of Xcode)</li><li>Helps testing more thoroughly on all platforms and in parallel</li><li>Can notify back once the flow has finished (E.g. on slack)</li><li>Can run scripts</li></ul><p>Pricing:</p><ul><li>Free limited beta (sign up <a href="https://developer.apple.com/xcode-cloud/beta/request/#!/agree">here</a>)</li><li>More on pricing/availability this fall</li></ul><h2>Code signing in the Cloud</h2><ul><li>No more keeping and update certification and provisioning profile in your machine</li><li>More insight of test flight beta testers</li><li>Crash logs from test flight testers is automatically delivered in Xcode Organizer within minutes, can contact the tester directly from Organizer crash logs.</li></ul><h2>Embedded Xcode GitFlow</h2><p>Xcode has a new <code>Source Control Changes</code> tab, for better <code>git</code> integration:</p><ul><li>Shows all branches</li><li>Shows all PRs<ul><li>PR comments Integration directly in Xcode</li><li>Full overview of activities and conversations going on on each</li><li>Live status on all workflows</li><li>Shows comments in line in the code editor</li></ul></li></ul><ul><li>In-line comparison and side-by side</li></ul><h2>Xcode Testing enhancements</h2><p>When running UI tests, we can now see all screenshots in a gallery-like mode instead of having to click through each test step ourselves. To enable it, go <code>Editor results menu &gt; Gallery View</code> (instead of the default list view)</p><img src="https://www.wwdcnotes.com/images/notes/wwdc21/102/galleryView.png"/><p>Run test repeatedly:</p><ul><li>We can run a single test multiple times automatically, this is great to check when a test is unreliable</li><li>New <a href="https://developer.apple.com/documentation/xctest/3726077-xctexpectfailure"><code>XCTExpectFailure</code></a> API. This command declares a test is unreliable: the test suite will pass even when this specific test fails, in the results there will be a reminder about this test failing.</li></ul><h2>New Xcode 13 features highlights</h2><ul><li>Memory Tracking in XCTest</li><li>watchOS Digital Crown Interaction Tests</li><li>Smarter Swift Code Completion</li><li>iPadOS Cursor Interaction Tests</li><li>VIM Key Bindings</li><li>Streamlined Project Navigator</li><li>Faster Swift Builds</li><li>Swift Documentation Compiler</li><li>Improved Swift Syntax Coloring</li><li>Project Content for Swift Playgrounds</li><li>Simplified Project Templates</li><li>Mac Scroll Performance Testing</li><li>Swift Package Manager Index</li><li>Columnar Breakpoints</li><li>SwiftUl Preview Rotations</li><li>Layered Symbols</li></ul><h2>Swift concurrency</h2><p>Swift first class support for concurrency</p><p>The <code>async</code>-<code>await</code> pattern replaces previous completion handlers pattern, we go from:</p><pre><code><span class="keyword">func</span> prepareForShow(completion: <span class="keyword">@escaping</span> (<span class="type">Result</span>&lt;<span class="type">Scene</span>, <span class="type">Error</span>&gt;) -&gt; <span class="type">Void</span>) { 
	danceCompany.<span class="call">warmUp</span>(duration: .<span class="dotAccess">minutes</span> (<span class="number">45</span>)) { result <span class="keyword">in 
		switch</span> result { 
      <span class="keyword">case</span> .<span class="dotAccess">success</span> (<span class="keyword">let</span> dancers): 
				<span class="keyword">self</span>.<span class="property">crew</span>.<span class="call">fetchStageScenery</span> { scenery <span class="keyword">in 
					self</span>.<span class="call">setStage</span>(with: scenery) { openingScene <span class="keyword">in</span> 
						dancers.<span class="call">moveToPosition</span>(in: openingScene) { result <span class="keyword">in</span> 
							<span class="call">completion</span>(result)
						}
					}
				} 
			<span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error): 
			  <span class="call">completion</span>(.<span class="dotAccess">failure</span> (error))
		}
	} 
}
</code></pre><p>to:</p><pre><code><span class="keyword">func</span> prepareForShow() async <span class="keyword">throws</span> -&gt; <span class="type">Scene</span> { 
	<span class="keyword">let</span> dancers = <span class="keyword">try</span> await danceCompany.<span class="dotAccess">warmUp</span> (duration: .<span class="dotAccess">minutes</span> (<span class="number">45</span>))
	<span class="keyword">let</span> scenery = await crew.<span class="call">fetchStageScenery</span>() 
	<span class="keyword">let</span> openingScene = <span class="call">setStage</span>(with: scenery)
	<span class="keyword">return try</span> await dancers.<span class="dotAccess">moveToPosition</span> (in: openingScene)  
}
</code></pre><p>All iOS SDKs automatically adopt async-await.</p><h3>Structured Concurrency</h3><ul><li>Concurrent child tasks</li><li>Async let to create child tasks that run in parallel with the parent</li></ul><p>In the previous example <code>scenery</code> had to wait for <code>let dancers = ...</code> to finish first, however it doesn't have to:</p><pre><code><span class="keyword">func</span> prepareForShow() async <span class="keyword">throws</span> -&gt; <span class="type">Scene</span> { 
	async <span class="keyword">let</span> dancers = danceCompany.<span class="call">warmUp</span>(duration: .<span class="dotAccess">minutes</span> (<span class="number">45</span>)) 
	async <span class="keyword">let</span> scenery = crew.<span class="call">fetchStageScenery</span>()
	<span class="keyword">let</span> openingScene = <span class="call">setStage</span>(with: await scenery)
	<span class="keyword">return try</span> await dancers. <span class="call">moveToPosition</span>(in: openingScene) 
}
</code></pre><h3>Actors</h3><ul><li>Objects that protect their own state by providing mutual exclusive access to it</li><li>Compiler will assures that async stuff is safely accessed</li><li>Automatically avoid race conditions</li><li>No need manually sync operations within actors</li></ul><p>We go from:</p><pre><code><span class="keyword">class</span> StageManager {
	<span class="keyword">var</span> stage: <span class="type">Stage</span> 
  <span class="keyword">let</span> queue = <span class="type">DispatchQueue</span>(label: <span class="string">"stage"</span>) 

  <span class="keyword">func</span> setStage(with scenery: <span class="type">Scenery</span>, completion: <span class="keyword">@escaping</span> (<span class="type">Scene</span>) -&gt; <span class="type">Void</span>) { 
  	queue.<span class="call">async</span> {
      <span class="keyword">self</span>.<span class="property">stage</span>.<span class="property">backdrop</span> = scenery.<span class="property">backdrop</span> 
      <span class="keyword">for</span> prop <span class="keyword">in</span> scenery.<span class="property">props</span> { 
      	<span class="keyword">self</span>.<span class="property">stage</span>.<span class="call">addProp</span>(prop)
    	}
    	<span class="call">completion</span>(<span class="keyword">self</span>.<span class="property">stage</span>. <span class="property">currentScene</span>) 
    }
  }
}
</code></pre><p>to:</p><pre><code>actor <span class="type">StageManager</span> {
	<span class="keyword">var</span> stage: <span class="type">Stage</span> 

  <span class="keyword">func</span> setStage(with scenery: <span class="type">Scenery</span>) -&gt; <span class="type">Scene</span> {
  	stage.<span class="property">backdrop</span> = scenery.<span class="property">backdrop</span> 
  	<span class="keyword">for</span> prop <span class="keyword">in</span> scenery.<span class="property">props</span> { 
  		stage.<span class="call">addProp</span>(prop)
		} 
		<span class="keyword">return</span> stage.<span class="property">currentScene</span> 
	}
}
</code></pre><ul><li>Actors are defined via the <code>actor</code> keyword (see above)</li><li>they're first-class constructs</li><li>no need manual sync</li></ul><ul><li>internally actors can access their states no problem, externally we use <code>await</code>:</li></ul><pre><code><span class="keyword">let</span> scene = await stateManager.<span class="call">setStage</span>(with scenery)
</code></pre><ul><li>use the <code>@MainActor</code> attribute to assures a certain function is always run in the main thread (no need for dispatch)</li></ul><pre><code><span class="keyword">@MainActor
func</span> display(scene: <span class="type">Scene</span>)
</code></pre><h2>SwiftUI</h2><ul><li>A lot more stock apps are now implemented in SwiftUI (e.g. Weather.app)</li><li>More system components use SwiftUI as well (e.g. Apple pay sheet).</li></ul><ul><li>New api for <code>List</code>s:<ul><li><code>.swipeActions</code></li><li><code>.refreshable</code> for pull to refresh</li><li><code>.searchable</code> for adding search field, supports search suggestions</li></ul></li></ul><ul><li><code>#if else</code> conditional statement in Swiftui</li></ul><p>More new SwiftUI features:</p><ul><li>Menu Primary Actions</li><li>Control Groups</li><li>Async Images</li><li>Symbol Variants</li><li>Bordered Buttons</li><li>Export</li><li>Sensitive Content Redaction</li><li>Sectioned Fetch Request</li><li>Custom Drag Previews</li><li>Disable Interactive Dismissal</li><li>Canvas</li><li>Confirmation Dialog</li><li>Inset View Layout</li><li>Async Task Management</li><li>Timeline</li><li>Detail Scenes</li><li>Accessibility Focus</li><li>Automatic Inflection</li><li>Location Button</li><li>Control Tinting</li><li>Return Key Styles</li><li>AttributedString in Text</li><li>Button Roles</li><li>Toggle Buttons</li><li>watchOS Indexed Paging</li><li>Borderless Controls</li><li>Badges Text</li><li>Field Labels</li><li>Markdown</li><li>Keyboard Accessories</li><li>Service Import</li></ul><h2>Swift Playground 4</h2><ul><li>Available later this year</li><li>Build and submit apps to App Store from Swift Playgrounds</li><li>New app project format based on Swift package</li><li>Print statements displayed on Swift Playgrounds (message bubble and console)</li></ul><h2>ARKit</h2><ul><li>RealityKit 2</li><li>Object Capture: creating 3D models in minutes via iPhone capture</li><li><code>PhotogrammetrySession</code> API</li><li>Outputs USDZ files</li><li>Many new effects for like smoke and fire</li></ul><h2>Metal</h2><p>Unified Metal graphics platform across all Apple hardware/platforms</p><ul><li>More realistic with Dynamic Libraries and Retracing API</li><li>Stochastic motion blur</li><li>Adaptive sync display</li><li>Variable refresh rate displays<ul><li>Adapt app frame rate</li><li>Adapt sync display on mac</li></ul></li></ul><ul><li>Game Control support<ul><li>Xboc series and PS5 suport</li><li>new on screen virtual game controller</li></ul></li></ul><ul><li>Selective Shader Debugger</li><li>Texture Converter Tool</li><li>Metal Debugger Timeline View</li></ul><h2>Focus</h2><ul><li>A more customizable do not disturb</li><li>A user can have multiple different types of focus modes, each with its own configuration</li><li>3rd party apps can integrate with user focus in their app</li><li>synchronizes across all platforms</li></ul><h3>Notifications</h3><ul><li>New interruption levels API:<ul><li>Passive - people will see them when they pick up their phone</li><li>Active - standard (sound + haptic)</li><li>Time sensitive - will be promptly highlighted, stay on top of screen longer, announced by Siri with AirPods</li></ul></li></ul><ul><li>Communication with people: notifications from people are personalized with the sender Avatar</li><li>Notification Summary - personalized summary of all notifications</li></ul><h2>Screen Time API</h2><p>Three new frameworks:</p><ul><li>Managed Settings</li><li>Parent Control</li><li>Device activity</li></ul><h3>Managed Settings</h3><ul><li>your app can set a number of restrictions in the following areas:<ul><li>Account (e.g. is user authorized to change password?)</li><li>Cellular</li><li>Game Center</li><li>Media</li><li>App Store (e.g. can user download new apps?)</li><li>Web Content (e.g. filter web traffic)</li><li>Application (e.g. is user authorized to use this app?)</li><li>Passcode (e.g. is the user authorized change the passcode?)</li></ul></li></ul><ul><li>Shows a restriction page (similar to screen time) with your custom actions and UI</li></ul><h2>Widget</h2><ul><li>Widgets can be put on iPad home screen</li><li>New Extra Large (nee, wide!) Widget for iPad</li><li>Smart stacks can now also suggest new widgets</li></ul><h2>Share Play API</h2><ul><li>Used to do some app activity together on a phone during a video call</li><li>New <a href="https://developer.apple.com/documentation/GroupActivities">GroupActivities</a> framework</li><li>It syncs the activity of an app among all people apps in the call: if one person stops a video, it will stop for everybody at the same timestamp. Everyone can do something and the same action will be applied on others devices</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc21/102/shareplay.png"/>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc21/10192</guid><title>What‘s new in Swift</title><description>Join us for an update on Swift. Discover the latest language advancements that make your code easier to read and write. Explore the growing number of APIs available as Swift packages. And we’ll introduce you to Swift’s async/await syntax, structured concurrency, and actors.</description><link>https://www.wwdcnotes.com/notes/wwdc21/10192</link><pubDate>Wed, 9 Jun 2021 04:45:27 +0700</pubDate><content:encoded><![CDATA[<h2>Overview</h2><p>Swift 5.5 is the best release yet, including:</p><ul><li>Async and Concurrent programming</li><li>Advances in the packages experience</li><li>New standard library packages</li><li>Features enhancing dev experience</li></ul><h2>Diversity</h2><p>❤️ The heart of the Swift Project is not the code but the community.</p><p>Diversity is a core value.</p><p>Evidence shows open source projects that have a diverse community with a wide set of perspectives helps the community thrive and the project make better decisions.</p><p><a href="https://swift.org/diversity/">Swift.org :: Diversity in Swift</a></p><p>"The mission of Diversity in Swift is to foster an inclusive Swift community by creating more pathways for a diverse group of developers, increasing the engagement and retention of those developers, and helping developers of all backgrounds establish leadership and technical expertise within the community."</p><p>Highlight a variety of voices in the community. Community groups to help those with a similar background get started.</p><h2>📦 Swift Packages</h2><p>Being able to find and use open source packages is an important part of the ecosystem. The community built <a href="https://swiftpackageindex.com">Swift Package Index</a> to help with this. 🎉🎉🎉 <strong>Aside</strong>: Thank you <a href="https://github.com/SwiftPackageIndex/SwiftPackageIndex-Server/graphs/contributors">Dave Verwer, Sven A. Schmidt. and others</a>.</p><p>In Xcode 13 and Swift 5.5, you can find packaged directly.</p><h2>📦📦📦 Swift Package Collections</h2><ul><li>Search screen in Xcode</li><li>Anyone can publish them (JSON file)</li><li>Curated list of of packages for different use cases</li><li>Searchable</li></ul><p>Example: a set of packages for a computer science class, a set for a specific problem domain, organization, etc.</p><p>Xcode comes pre-wired with a set of Apple standard packages.<br>See <a href="https://swift.org/blog/package-collections">swift.org/blog/package-collections</a> for more details.</p><h3>Apple Packages</h3><ul><li>Swift Algorithms <strong>(new)</strong></li><li>Swift Crypto</li><li>Swift Argument Parser</li><li>Swift Atomics <strong>(new)</strong></li><li>Swift Collections <strong>(new)</strong></li><li>Swift Protobuf</li><li>Swift NIO</li><li>Swift Numerics</li><li>Swift System <strong>(new)</strong></li></ul><h2>᠅ <a href="https://github.com/apple/swift-collections">Swift Collections</a></h2><p>Similar to Swift standard library types.</p><ul><li>Deque (pronounced deck)</li><li>Ordered Set</li><li>Ordered Dictionary</li></ul><p>Deque has a fast O(1) append and prepend operation</p><p>Ordered set is like an array in that it maintains order and random access but like a set because it makes sure elements are unique (and has fast lookup).</p><p>Ordered dictionary is an alternate to dictionary when order is important or you need random access to elements.</p><h2>Swift Algorithms</h2><p>Open source package of algorithms on sequence and collection types. There are already over 40 algorithms there.</p><ul><li>generating all the combinations or permutations</li><li>iterating by groups (chunks)</li><li>selecting smallest / largest / random elements from a collection</li></ul><p>There is a session about algorithms and collections and how you can use them to make your code better.</p><h2><a href="https://github.com/apple/swift-system/">Swift System</a></h2><p>Idiomatic, low-level interfaces to system calls.</p><ul><li>Strong types</li><li>Memory safety</li><li>Error handling</li><li>macOS, Linux and Windows support</li></ul><p>Supports thing like <code>FileDescriptors</code>, <code>FilePath</code>.</p><pre><code><span class="keyword">import</span> System

<span class="keyword">var</span> path: <span class="type">FilePath</span> = <span class="string">"/tmp/WWDC2021.txt"</span>
<span class="call">print</span>(path.<span class="property">lastComponent</span>)
<span class="call">print</span>(path.<span class="property">extension</span>)
path.<span class="property">extension</span> = <span class="keyword">nil</span>
path.<span class="property">extension</span> = <span class="string">"pdf"</span>
<span class="comment">// etc</span>
</code></pre><h2><a href="https://github.com/apple/swift-numerics">Swift Numerics</a></h2><p>New this year</p><ul><li><code>Float16</code> and <code>Complex&lt;Float&gt;</code></li><li>Elementary functions support for <code>Complex</code></li><li>Optimizations above the C library versions.</li></ul><h2><a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a></h2><p>Improvements this year:</p><ul><li>Code completion for Fish shell</li><li>Joined short options (<code>-Ddebug</code>)</li><li>Improved error messages</li></ul><p>Now used by Swift Package Manager in Xcode 12.5.</p><h2>Swift on Server</h2><ul><li>Static linking on Linux</li><li>Improved JSON performance</li><li>Enhanced AWS Lambda runtime library</li></ul><p>Cold start 33% faster</p><p>40% faster invocation times on AWS gateway</p><p>Uses new async/await instead of completion closures</p><h2>DocC</h2><p>Documentation compiler integrated in Xcode 13</p><ul><li>Markdown in source code</li></ul><p>There are four other sessions about this</p><ul><li>It will become open source later this year. 🥳🥳🥳</li></ul><h2>Improvements to Type Checker</h2><ul><li>Fewer expression too complex error</li><li>Array literals type checking sped up</li></ul><h2>Build Improvements</h2><ul><li>Faster incremental builds when changing imported modules</li><li>Faster startup time before launching compiles</li><li>Fewer recompilations after changing extension body.</li></ul><p>As an example, now less than a tenth of the files rebuilt after a module changes resulting in a one-third speedup. Incremental builds.</p><p>The first part of the compiler (the driver) is now written in Swift. It is now the default.</p><h2>Memory Management</h2><p>Class instances use ARC (automatic reference counting).</p><p>The compiler now uses a smarter way to track references and can eliminate retain release traffic.</p><p>Improves runtime and code size but is an compiler option "Optimize Object Lifetimes"</p><p>There is a session about this.</p><h2>Ergonomic improvements</h2><ul><li><a href="https://github.com/apple/swift-evolution/blob/be686706919cab796b47b8c528a1fa52028a8335/proposals/0284-multiple-variadic-parameters.md">SE-0284</a>: Multiple variadic parameters</li><li><a href="https://github.com/apple/swift-evolution/blob/be686706919cab796b47b8c528a1fa52028a8335/proposals/0287-implicit-member-chains.md">SE-0287</a>: Implicit member chains</li><li><a href="https://github.com/apple/swift-evolution/blob/be686706919cab796b47b8c528a1fa52028a8335/proposals/0289-result-builders.md">SE-0289</a>: Result builders</li><li><a href="https://github.com/apple/swift-evolution/blob/be686706919cab796b47b8c528a1fa52028a8335/proposals/0293-extend-property-wrappers-to-function-and-closure-parameters.md">SE-0293</a>: Property wrappers on parameters</li><li><a href="https://github.com/apple/swift-evolution/blob/be686706919cab796b47b8c528a1fa52028a8335/proposals/0295-codable-synthesis-for-enums-with-associated-values.md">SE-0295</a>: Codable synthesis for associated value enums</li><li><a href="https://github.com/apple/swift-evolution/blob/be686706919cab796b47b8c528a1fa52028a8335/proposals/0299-extend-generic-static-member-lookup.md">SE-0299</a>: Static member lookup in generic contexts</li><li><a href="https://github.com/apple/swift-evolution/blob/be686706919cab796b47b8c528a1fa52028a8335/proposals/0307-allow-interchangeable-use-of-double-cgfloat-types.md">SE-0307</a>: Interchangeable use of CGFloat and Double</li><li><a href="https://github.com/apple/swift-evolution/blob/be686706919cab796b47b8c528a1fa52028a8335/proposals/0309-unlock-existential-types-for-all-protocols.md">SE-0308</a>: #if for postfix member expressions</li></ul><p>The SE standards for Swift Evolution.</p><p>What follows is a series of examples of how these features can simplify your code.</p><ul><li>Result builders was refined over the year and now has a whole session devoted to it.</li><li>Making enums with associated values <code>Codable</code>, instead of being pages of boilerplate is now just adding <code>Codable</code> and letting the compiler do the work.</li></ul><h2>Flexible static member lookup</h2><pre><code><span class="keyword">protocol</span> Coffee { ... }
<span class="keyword">struct</span> RegularCoffee: <span class="type">Coffee</span> {}
<span class="keyword">struct</span> Cappuccino: <span class="type">Coffee</span> {}

<span class="keyword">extension</span> <span class="type">Coffee</span> <span class="keyword">where</span> <span class="type">Self</span> == <span class="type">Cappucino</span> {
  <span class="keyword">static var</span> cappucino: <span class="type">Cappucino</span> = { <span class="type">Cappucino</span>() }
}

<span class="keyword">func</span> brew&lt;CoffeeType: <span class="type">Coffee</span>&gt;(_: <span class="type">CoffeeType</span>) { ... }

<span class="call">brew</span>(.<span class="dotAccess">cappucino</span>.<span class="property">large</span>)   <span class="comment">// Beautify enum-like syntax!</span>
</code></pre><h3>Improved property wrappers</h3><p>You can use property wrappers can now be used on function (and closures) parameters.</p><h2>SwiftUI example</h2><p>The before and after is pretty remarkable!</p><p>In Swift you can pass a binding to SwiftUI <code>List</code> to get access to the projection and wrapped value.</p><p>There is a session about this.</p><p>It makes your code simpler!</p><h2>Asynchronous and Concurrent Programming</h2><ul><li>Synchronous: code statements execute one-by-one and in-order</li><li>Asynchronous: code suspends execution waiting for op to finish, then continues</li><li>Concurrent: multiple code statements executing at once</li></ul><p>Without Swift's new features you often write async code using completion handlers (closure).</p><p>Later, after the network request finishes, the callback happens. Only then can you deal with errors, which can be awkward.</p><p><code>URLSession</code>'s <code>dataTask</code> is changed to this:</p><pre><code><span class="keyword">let</span> (data, response) = <span class="keyword">try</span> await <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">data</span>(for: request)
</code></pre><p>The await will suspend the operation but <strong>not</strong> block the thread so other work can continue on that thread. This allows a small number of threads to be shared among several asynchronous processes.</p><p>The code can then continue inline making it easy to follow.</p><p>There are other sessions about this.</p><h2>Concurrency</h2><p>Concurrency builds on the async/await idea.</p><pre><code><span class="keyword">func</span> titleImage() async <span class="keyword">throws</span> -&gt; <span class="type">Image</span> {
  async <span class="keyword">let</span> background = <span class="call">renderBackground</span>()
  async <span class="keyword">let</span> foreground = <span class="call">renderForeground</span>()
  <span class="keyword">let</span> title = <span class="keyword">try</span> <span class="call">renderTitle</span>()
  <span class="keyword">return try</span> await <span class="call">merge</span>(background, foreground, title)
}
</code></pre><p>The <code>async let</code> spawns off another concurrent operation.<br>The <code>merge</code> operation has to be marked with an <code>await</code> to signal that this thread may suspend. This function <strong>will not return</strong> until the background tasks complete. Even if an error is thrown, Swift will ensure everything completes before returning.</p><p>Swift will signal unfinished tasks that an error was thrown as an optimization. The Structured concurrency in Swift session describes this in greater detail.</p><h2>Actors</h2><p>This is another concurrency construct that helps you manage shared mutable data. Here is an example that will corrupt if accessed from multiple threads:</p><pre><code><span class="keyword">class</span> Statistics {
  <span class="keyword">private var</span> counter: <span class="type">Int</span> = <span class="number">0</span>
  <span class="keyword">func</span> increment() {
    counter += <span class="number">1</span>
  }
}
</code></pre><p>The fix is simple. Change <code>class</code> to <code>actor</code>:</p><pre><code>actor <span class="type">Statistics</span> {
  <span class="keyword">private var</span> counter: <span class="type">Int</span> = <span class="number">0</span>
  <span class="keyword">func</span> increment() {
    counter += <span class="number">1</span>
  }
}
</code></pre><p>The Swift compiler prevents corruption by suspending operations until it is safe to make the change. That is why you typically need to call them with <code>await</code>.</p><p>They also work with async/await.</p><p>Actors are like classes (reference types) but allow the Swift compiler and runtime to protect against data races.</p><p>There is a full session about this.</p><h2>Future of Swift 6</h2><ul><li>async/await/actors is a basis</li><li>Swift 6 will have additional capability enable "Safe concurrency"</li><li>Make concurrent programming just as hard as normal programming</li><li>More efficiency</li></ul><p>Make Swift 6 better by telling swift.org about your experiences!</p><p>You can try a new compiler toolchain!</p><p>Participate in the forums</p><p>Participate in the mentorship program. The only requirement is a desire to improve Swift for everyone in the community.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc16/608</guid><title>What's New in GameplayKit</title><description>GameplayKit provides developers a collection of essential tools and techniques used to implement modern gameplay algorithms. Learn what's new in GameplayKit and check out advances in pathfinding, autonomous agents, and game AI, as well as many enhancements supporting GameplayKit in Xcode. Tap into new capabilities for 2D and 3D spatial partitioning, and explore noise-based procedural data generation useful for height maps, natural textures, and more.</description><link>https://www.wwdcnotes.com/notes/wwdc16/608</link><pubDate>Thu, 3 Jun 2021 11:11:31 +0700</pubDate><content:encoded><![CDATA[<p>Updates in:</p><ul><li>Pathfinding</li><li>Agents</li><li>GameAI (formerly known as MinMax AI)</li></ul><p>Three new features:</p><ul><li>Spatial partitioning</li><li>Procedural generation</li><li>Xcode integration (with the Xcode editor, not only in code!)</li></ul><h2>PathFinding</h2><p><a href="https://developer.apple.com/documentation/gameplaykit/GKMeshGraph"><code>GKMeshGraph</code></a></p><p>Instead of computing line of sight possible paths (like with <a href="https://developer.apple.com/documentation/gameplaykit/GKObstacleGraph"><code>GKObstacleGraph</code></a>), <code>GKMeshGraph</code> uses triangle mesh, where every possible point in the map is represented in one and only one triangle.</p><ul><li>Less memory intensive, faster to compute, good results (not best tho!)</li><li>Node location flexibility: triangle center, vertices, edges (it can be any of them, even combination of them). The more elements, the more compute intensive</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc16/608/PathFinding.png"/><p>￼</p><h2>Agents</h2><ul><li>3D support (<a href="https://developer.apple.com/documentation/gameplaykit/GKAgent3D"><code>GKAgent3D</code></a> and associated classes)</li><li>New Behavior composition (similar to weighted goals)</li></ul><h2>Spatial Partitioning</h2><p>Does a spacial caching of the map to answer quicker to inquiries such as:</p><ul><li>How many enemies are near the player?</li><li>Where are all items in the my world?</li><li>Which projectiles will hit player this frame?</li></ul><p>The way it works is by creating a tree out of the map, the more elements, the more the nodes.</p><p>Three possible trees:</p><ul><li>R-trees</li><li>quadtree</li><li>octrees</li></ul><p>R-tree is a tree data structure that has a number of hierarchical buckets:</p><ul><li>whenever you add an object to an R-tree, it gets fitted into one of those buckets.</li><li>when these buckets grow too large, they need to split: this is a user-configurable parameter of just how large these buckets can grow</li><li>we have a number of strategies at our disposal to decide how these buckets should split</li><li>all R-trees do is putting things in buckets</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc16/608/rtree.png"/><p>Quadtree and octrees solve the same problem, quad tree on 2D, octrees in 3D:</p><ul><li>these are tree-like data structures that have a number of levels and hierarchies</li><li>space is subdivided evenly at each level</li><li>have a max cell size associated, this controls just how deep these trees can grow and just how small those cells can get.</li><li>when you add an object to a quadtree or octree, it gets placed into the smallest cell that it fits in entirely</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc16/608/rtree-2.png"/><p>When we create a tree, we need to define the minimum size cell: e.g. no cell in this quadtree is going to be smaller than that.<br>We’re setting an hard limit on how small (and how many levels deep) our tree can go.</p><h2>Game AI</h2><p>Last year GameplayKit introduced the MinMax Strategist, this year we’re adding Monte Carlo strategist.</p><p>This new strategist doesn’t guarantee the best outcome (unlike minMax), but it’s much faster.</p><p>This year also we can create our own strategist via <a href="https://developer.apple.com/documentation/gameplaykit/GKStrategist"><code>GKStrategist</code></a>.</p><p>New <a href="https://developer.apple.com/documentation/gameplaykit/GKDecisionTree"><code>GKDecisionTree</code></a>: these are a trees that can be handmade or make the AI learn, and are useful when we have many states and the AI needs to make decisions fast.</p><h2>Procedural generation</h2><p>This is to create new worlds/textures/.. and dynamic things like that, good for games that are not static and need to continuously create new things/levels.</p><p>What procedural generation does is help us with some coherent randomness.</p><p>Plenty of different noises available, noises can be combined together.</p><h2>Xcode integration</h2><p>Previously everything was done via code, now we can use editors like we do for CoreData and SpriteKit:</p><ul><li>Entity and Components Editor</li><li>Navigation Graph Editor</li><li>Scene Outline View</li><li>State Machine Quick Look (directly from the debugger!)</li></ul><p>We can use the new callout <code>@GKInspectable</code> in our components properties to make them show up in the editor</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc15/608</guid><title>Introducing GameplayKit</title><description>GameplayKit provides a collection of essential tools and techniques used to implement gameplay logic. Get introduced to the GameplayKit framework and see how to put its capabilities to work in your own titles. Learn about managing state machines, controlling game entities, and implementing rule systems. Dive into its built-in tools for randomization, pathfinding, and advanced simulation.</description><link>https://www.wwdcnotes.com/notes/wwdc15/608</link><pubDate>Thu, 3 Jun 2021 10:47:39 +0700</pubDate><content:encoded><![CDATA[<h2>What is GameplayKit?</h2><p>GameplayKit is a high-level gameplay framework, it consists of a collection of common architectural patterns, data structures, and algorithms that enables our developers to make really great and compelling gameplay in their games.</p><p>Seven major features:</p><ul><li>Entities &amp; Components - great way to structure your game objects and game logic</li><li>State Machines - describe the statefulness in our games and the various state changes of our game objects</li><li>Agents - autonomously moving entities that are controlled by realistic behaviors and goals</li><li>Pathfinding - deals with navigation graph generation and how we move our entities between the passable areas in our game world</li><li>MinMax AI - great way to give life to our computer-controlled opponents</li><li>Random Sources</li><li>Rule Systems - great way to model discreet and fuzzy logic</li></ul><h2>Entities &amp; Components</h2><p>Image we’re building a tower defense game:<br>we have multiple entities in our game, instead of them having functionality in an inheritance sense, e.g. being a mover, being a shooter, or being targetable, they instead have components, which encapsulate singular elements of our game logic.</p><p>For example, we have a <code>MoveComponent</code> that deals with moving, a <code>ShootComponent</code> that deals with shooting, and a <code>TargetComponent</code>, bringing the meaning of being targetable.</p><p>Using components scales very well with complexity, you can have different people working in different components with no issue.</p><p>Every time we create a new entity, we can reuse components that we have already defined or create new ones.</p><p>If we need a finer control over the order or how your components update, we can use <a href="https://developer.apple.com/documentation/gameplaykit/gkcomponentsystem"><code>GKComponentSystem</code></a>: this is a collection of components from different entities, but they're all the same class type.</p><p>For example, if we want the <code>AI</code> component to always update after the <code>move</code> component, we can set so via <code>GKComponentSystem</code>.</p><blockquote><p>The components within a <code>GKComponentSystem</code> no longer update when their entities call update, it’s up to us to call update on the system instead.</p></blockquote><h2>State Machines</h2><p>Used to define the possible states of an entity, and also what transitions are possible from each state.</p><p>If we implement this manually, we might define a state as an <code>enum</code> with multiple cases, however managing each transition generates lots of boilerplate (big <code>switch</code> statements, deep <code>if-else</code> trees), and the more you use the pattern within the app, the more boilerplate we generate.</p><p>GameplayKit state machines lets us:</p><ul><li>remove that boilerplate</li><li>improve maintainability</li><li>give us the benefit of being able to reuse our states and state machines throughout our game</li></ul><p><a href="https://developer.apple.com/documentation/gameplaykit/gkstatemachine"><code>GKStateMachine</code></a> is your general purpose finite state machine. It's always in one, and only one state at any given time. It possesses (and know) all the possible states.</p><p>We call <code>enterState:</code> on our state machines to cause a state transitions (this is also how we define the initial state of the machine): under the hood, it checks if that transition is valid, and if so, makes that change.</p><blockquote><p>This is possible to control by overriding <code>isValidNextState:</code></p></blockquote><p>The state machine calls a number of call backs on the state objects.</p><h2>Agents, Goals, and Behaviors</h2><p>These are autonomously moving entities, they're controlled by realistic behaviors and goals. They have a number of physical constraints, things like masks, acceleration, and inertia.</p><p>The idea is to make our entities more naturally: e.g. if our game entities move in straight lines and take sudden turns and bump into environment obstacles, it doesn't look very real/natural. Movement in the real world has things like inertia, and mass, and acceleration. These agents help us reaching reality in our games.</p><ul><li><a href="https://developer.apple.com/documentation/gameplaykit/GKAgent"><code>GKAgent</code></a> (which is also a <a href="https://developer.apple.com/documentation/gameplaykit/GKComponent"><code>GKComponent</code></a>)</li><li><a href="https://developer.apple.com/documentation/gameplaykit/GKBehavior"><code>GKBehavior</code></a> we can add/remove goals</li><li><a href="https://developer.apple.com/documentation/gameplaykit/GKGoal"><code>GKGoal</code></a> the focus of an action</li></ul><p>An example of usage of this feature is making a racing game and defining the other drivers as agents, where the behavior is the sum of three goals: following the path (1) while also avoid obstacles (2) and do it as fast as possible (3).</p><p>We can assign different weights to each goal, so that the final behavior changes based on the weight as well.</p><p>The session has a demo for Agents/Goals/behaviors where:</p><ul><li>first a ship has to chase the mouse pointer</li><li>then the ship has to run away from it</li><li>then the ship simply wanders around</li><li>then another one with obstacles</li></ul><p>The demo always uses the same logic, but with different behavior. All movements are very natural from the ship just by using these components.</p><p>More cool demos: multiple ship chasing the pointer, with also the goal to avoid collisions.</p><h2>Pathfinding</h2><p>Find the optimal path between two nodes within a navigation graph (bidirectional, omnidirectional, or mixed).</p><ul><li><a href="https://developer.apple.com/documentation/gameplaykit/GKGraph"><code>GKGraph</code></a> - Abstract graph base class, it's a container of graph nodes.</li><li><a href="https://developer.apple.com/documentation/gameplaykit/gkgridgraph"><code>GKGridGraph</code></a> - 2D grid <code>GKGraph</code> specialization:<ul><li>automatically generates all the nodes to represent a grid of some given start position, width, and height</li><li>automatically makes the cardinal connections between the grid nodes and optionally the diagonal ones as well.</li><li>it's possible to add/remove grid spaces</li></ul></li></ul><ul><li><a href="https://developer.apple.com/documentation/gameplaykit/GKObstacleGraph"><code>GKObstacleGraph</code></a> - Pathfinding around obstacles <code>GKGraph</code> specialization:<ul><li>Under the hood, this is still a 2D graph. After defining our obstacles (and their buffer area), the framework is going to make the appropriate connections between all of our grid nodes, and it's going to correctly <em>not</em> make the ones that would violate the spatiality of our obstacles</li></ul></li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc15/608/obstacles.png"/><p>If we use SpringKit, we can easily generate obstacles from <a href="https://developer.apple.com/documentation/spritekit/sknode"><code>SKNode</code></a> bounds, physics bodies, or textures</p><pre><code><span class="comment">/* Makes obstacles from sprite textures */</span>
(<span class="type">NSArray</span>*)obstaclesFromSpriteTextures:(<span class="type">NSArray</span>*)sprites accuracy:(float)accuracy;

<span class="comment">/* Makes obstacles from node bounds */</span>
(<span class="type">NSArray</span>*)obstaclesFromNodeBounds:(<span class="type">NSArray</span>*)nodes;

<span class="comment">/* Makes obstacles from node physics bodies */</span>
(<span class="type">NSArray</span>*)obstaclesFromNodePhysicsBodies:(<span class="type">NSArray</span>*)nodes;
</code></pre><h2>MinMax AI</h2><p>Many games need equal AI opponents (mimicking a human);</p><ul><li>Can play the entire game</li><li>Play by the same rules as human players</li></ul><p>Think games such as Chess, Checkers, Tic-Tac-Toe, etc.</p><p>What MinMax AI does:</p><ul><li>Looks at player moves</li><li>Builds decision tree</li><li>Maximizes potential gain</li><li>Minimizes potential loss</li></ul><p>Features</p><ul><li>AI-controlled opponents</li><li>Suggest move for human players</li><li>Best suited for turn-based games<ul><li>Any game with discrete moves</li></ul></li></ul><ul><li>Variable difficulty<ul><li>Adjust look ahead</li><li>Select sub-optimal moves</li></ul></li></ul><p>The great thing about MinMax is that it doesn't need to know any of the details of your game. You don't need to teach it your rules and it doesn't need to know how it's implemented. This is all abstracted away. All you have to do is provide a list of players in the game, the possible moves they can make, and a score for each player that indicates the relative strength of their current position.</p><p>When you request a move from the AI, it takes all this data into account and it builds a decision tree, and returns the optimal move for you to use.</p><p>There are three key protocols that you're going to need to implement to work with the MinMax AI.</p><ul><li><a href="https://developer.apple.com/documentation/gameplaykit/GKGameModel"><code>GKGameModel</code></a> - abstract of the current game state This needs to know the current game state (if this was a chess game, it’d need to know the whole Chess board state, the current player turn, and which are the possible moves.</li></ul><ul><li><a href="https://developer.apple.com/documentation/gameplaykit/GKGameModelUpdate"><code>GKGameModelUpdate</code></a> - abstraction of a move within your game It should have all of the data you need to apply a move to your game model</li></ul><ul><li><a href="https://developer.apple.com/documentation/gameplaykit/GKGameModelPlayer"><code>GKGameModelPlayer</code></a> - abstraction of a player of the game It's used by the AI to differentiate moves from one another</li></ul><h2>Random Sources</h2><p>Different possible randomizations/distributions</p><h2>Rule Systems</h2><p>A game consists of three elements:</p><ul><li>Nouns (Properties) - Position, speed, health, equipment, etc.</li><li>Verbs (Actions that the player does) - Run, jump, use item, accelerate, etc.</li><li>Rules - How your nouns and verbs interact</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc17/604</guid><title>SceneKit: What's New</title><description>SceneKit is a fast and fully featured high-level 3D graphics framework that enables your apps and games to create immersive scenes and effects. See the latest advances in camera control and effects for simulating real camera optics including bokeh and motion blur. Learn about surface subdivision and tessellation to create smooth-looking surfaces right on the GPU starting from a coarser mesh. Check out new integration with ARKit and workflow improvements enabled by the Xcode Scene Editor.</description><link>https://www.wwdcnotes.com/notes/wwdc17/604</link><pubDate>Mon, 26 Apr 2021 11:58:28 +0700</pubDate><content:encoded><![CDATA[<h2>Camera enhancements</h2><p>Cameras follow objects with a smooth acceleration and deceleration. They also can adapt their behavior in different areas, such as moving up or down depending on the area, or remaining fixed in a certain orientation.</p><p>SceneKit is transitioning to a physically based camera API. This API allows implementation of physically plausible depths of field, as well as motion blur and screen space ambient occlusion.</p><h3>New API</h3><p>Rather than specifying <code>xFov</code> and <code>yFov</code> properties, now configure the <code>fieldOfView</code> in degrees or specify the <code>focalLength</code> and <code>sensorHeight</code> of the camera (analogous to a physical camera).</p><p>Setting <code>fieldOfView</code> adjusts <code>focalLength</code> and <code>sensorHeight</code> and vice versa.</p><p>You can also configure depth of field with <code>wantsDepthOfField</code>, <code>focusDistance</code> and <code>fStop</code>.</p><p>Depth of field also comes with automatic bokeh. Use of an HDR camera is recommended, done by setting <code>wantsHDR = true</code>. Configure the bokeh with <code>apertureBladeCount</code>.</p><p>Set motion blur with <code>motionBlurIntensity</code>. Works per object.</p><p><strong>Ambient occlusion</strong> affects how light reflects off of objects with depth where not all parts of the surface get the same amount of light. You'll see shading and shadows on the object. Set by the <code>screenSpaceAmbientOcclusion...</code> family of properties.</p><h3>Camera control</h3><p><code>SCNCameraController</code> allows you to manipulate the camera. Usually accessed with <code>SCNView.defaultCameraController</code>, but you can instantiate your own.</p><p>Use an <code>SCNCameraController</code> to allow users to manipulate the camera with tap gestures. There are different camera modes. Some focus on an object and allow rotation, others allow you to fly throughout the scene, and more.</p><h4>Camera behavior</h4><p>Use <code>SCNConstraints</code> to define camera behavior if you need something more complicated for certain games or apps. Some examples of constraints:</p><ul><li><code>SCNLookAtConstraint</code> will keep focus on an object as it moves.</li><li><code>SCNReplicatorConstraint</code> replicates the behavior of an object. For example, the default camera behavior, it'll follow the object.</li><li><code>SCNDistanceConstraint</code> will keep you within a min/max distance of an object.</li></ul><h2>Tessellation and subdivision surfaces</h2><p><strong>Tessellation</strong> lets you provide the GPU with low-resolution models which then generates models in memory that are much higher detail. SceneKit does tessellation with <code>SCNGeometryTessellator</code>.</p><h3>Shader modifiers</h3><p>Shader modifiers create custom effects during tessellation. You can use it to create waves in a body of water, for example.</p><h3>Displacement mapping</h3><p>Modifies a surface.</p><p>Height maps modify a surface with changes in the height of its vertexes. Imagine starting with a perfectly smooth surface representing land on an alien planet and then applying a height map to add hills and valleys.</p><p>Vector displacement maps are an extension of height maps that also let you modify vectors in all three dimensions. Create a 3D rock from a flat surface and add texture, for example</p><h3>Subdivision surfaces</h3><p>You can use SceneKit to start with a coarse model and refine it smoother. Like, a cube into a sphere. But not objects are uniformly smooth. Subdivision surfaces can create different angles of the surfaces in different parts of the model.</p><p>This has been available in SceneKit but is now moving to the GPU for increased performance.</p><p>Feature-adaptive subdivision is now supported. Using creases, you can make certain parts of a model smooth, and others more blocky.</p><p>Keep two things in mind if you'll be using subdivision surfaces:</p><ol><li>When loading <code>SCNScene</code> from files, make sure to specify the <code>.preserveOriginalTopology: true</code> option.</li><li>When creating <code>SCNGeometryElement</code> objects programmatically, use the <code>.polygon</code> primitive type. This is to use quads, not triangles.</li></ol><h2>Animation improvements</h2><p>New <code>SCNAnimation</code> protocol and <code>SCNAnimationPlayer</code> class that make it easy to start animations and mutate them live.</p><p>You can blend animations together, too.</p><h2>Developer tools</h2><p>A new SceneKit Instrument helps with:</p><ul><li>Understanding performance issues</li><li>Recording a trace of SceneKit's behavior</li><li>Providing accurate per-frame performance analysis</li></ul><p>SceneKit's Scene Editor also has new features, including a new Shader Modifier Editor.</p><h2>Related technologies</h2><h3>ARKit</h3><p>Support for ARKit using <code>ARSCNView</code>, a subclass of <code>SCNView</code>. Very easy to set a texture or SceneView's background to the output of an <code>AVCaptureDevice</code>.</p><p>You can have objects in an AR scene cast shadows too.</p><h3>GameplayKit</h3><p>GameplayKit components can drive SceneKit objects.</p><h3>Model I/O</h3><ul><li>Improved support for USD</li><li>Better material bridging</li><li>Support for animations</li></ul><h3>UIFocus</h3><p><code>SCNNode</code> conforms to <code>UIFocusItem</code> to let you select and focus on objects on the Apple TV using your remote.</p><h2>Rendering Additions</h2><ul><li>Support for point cloud rendering</li><li>New transparency modes</li><li>Support for cascaded shadow maps</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc18/411</guid><title>Getting to Know Swift Package Manager</title><description>The Swift Package Manager makes it possible to easily develop and distribute source code in the Swift ecosystem. Learn about its goals, design, unique features, and the opportunities it has for continued evolution.</description><link>https://www.wwdcnotes.com/notes/wwdc18/411</link><pubDate>Thu, 25 Feb 2021 17:22:11 +0700</pubDate><content:encoded><![CDATA[<p>The Swift Package Manager makes it easier to develop and distribute source code in the Swift ecosystem.</p><h2>Why a package manager in Swift?</h2><ul><li>great cross-platform tool for building your Swift code.</li><li>makes it easy to configure your code in a consistent way and run it on all of Swift's supported platforms.</li><li>includes its own complete build system, allowing you to configure your software, build it, test it, and even run it from one tool.</li><li>new standard for distributing libraries.</li></ul><h2>How to use it</h2><p>SwiftPM consists of four command tools at the top level <code>swift</code> Command:</p><ul><li><code>$ swift build</code> to build your package</li><li><code>$ swift run</code> to run your package executable products</li><li><code>$ swift test</code> to run your package tests</li><li><code>$ swift package</code> (to run various non-build operations on the package)</li></ul><h3>Create a package</h3><p>Use <code>$ swift package init</code> to create a new library package, add <code>--type executable</code> to create an executable package.</p><p>This command creates the package in the current directory, the package will be composed with:</p><ul><li>a <code>Package.swift</code> manifest file, which describes the structure of the package.</li><li>a basic <code>README.md</code></li><li>the <code>Sources</code> directory with a subfolder for our package target</li><li>the <code>Tests</code> directory where we can add unit tests</li></ul><h2>The anatomy of a package</h2><p>A package is composed by three main parts:</p><ul><li>dependencies</li><li>targets</li><li>products</li></ul><h3>Dependencies</h3><ul><li>Swift packages that you can use when developing your package features.</li><li>Each dependency provides one or more products such as libraries that your package can use.</li><li>Each dependency has a source location and it is versioned.</li></ul><h3>Targets</h3><ul><li>Basic building blocks of packages.</li><li>Describes how to build a set of source files into either a module or a test suite.</li><li>Targets can depend on other targets of the same package and on products exported from other packages, declared as dependencies.</li><li>A target can contain any C language (C, C++, ObjC) or Swift, both language families are allowed, but not in the same target (they must be separate).</li></ul><h3>Products</h3><ul><li>Products are executable to libraries and products are assembled from the build artifacts of one or more target.</li><li>Packages provide libraries for other packages by defining products.</li></ul><h2>The design of SwiftPM</h2><p>SwiftPM follows Swift's philosophy:</p><ul><li>Safe: isolated build environment</li><li>Fast: scalable to large dependency graphs</li><li>Expressive: Swift language manifest format</li></ul><h3>Building a package</h3><ul><li>SwiftPM uses <a href="https://github.com/apple/swift-llbuild"><code>llbuild</code></a> to build a package: <code>llbuild</code> is a set of libraries for building build systems, it's built around a general purpose and reusable build engine.</li><li>SwiftPM builds packages in isolation: ensures that even packages with complex requirements can be reliably built and used in different environments.</li><li>builds are sandboxed: nothing can write to arbitrary locations on the file system during the build.</li><li>No arbitrary commands or shell scripts during a build: This allows SwiftPM to fully understand any package build graph and all of its inputs and outputs to do fast, correct incremental builds.</li></ul><h3>Workflow features</h3><ul><li>Edit Mode: allows overwriting a specific package with a local copy, so that temporary edits can be made, and changes to transitive dependencies can be tested without having to forward all packages in the graph upfront.</li><li>Branch dependencies: (works only on development mode) allows your package to have dependencies targeting a branch instead of using the dependency versioning</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10083</guid><title>Integrate your app with Wind Down</title><description>Discover how you can help people get ready for a good night's sleep by surfacing your app's actions for Wind Down Shortcuts, part of the new Sleep experience. Learn more about how Wind Down works. Find out how you can build intents that expose features in your app like guided meditations, soothing audio stories, or many other categories. And explore how you can surface those features on someone's device before bedtime.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10083</link><pubDate>Wed, 24 Feb 2021 16:40:56 +0700</pubDate><content:encoded><![CDATA[<h2>Introduction</h2><p>Wind Down helps users meet their sleep goals, during Wind Down apps can offer shortcuts that:</p><ul><li>focus on the things that will let the user relax or give them some space and mindfulness after a long day.</li><li>get a heads-up on what is most important for tomorrow before going to bed.</li></ul><p>During Wind Down mode, the lock screen will show a shortcuts button to show the user favorite/suggested Wind Down shortcuts.</p><p>To create such shortcuts, either:</p><ul><li>go to the Health app's new sleep setup flow.</li><li>add any existing shortcut (from the Shortcuts.app) by going to the shortcut details view and toggle <code>Show in Sleep Mode</code>.</li></ul><p>All these shortcuts will be available in the Shortcuts.app under the <code>Sleep Mode</code> category (this category will show up only after some shortcuts have been added to it).</p><h2>Integrate Apps actions</h2><h3>Shortcut Availability</h3><p>Apps can feature shortcuts in the Wind Down setup flow so they can be run with just a few taps from the lock screen.</p><p>The main way any app can expose its Wind Down actions is through intents and user activities:<br>from iOS 14 there's a new <a href="https://developer.apple.com/documentation/sirikit/inintent">INIntent</a> (and <a href="https://developer.apple.com/documentation/foundation/nsuseractivity"><code>NSUserActivity</code></a>) <a href="https://developer.apple.com/documentation/sirikit/inintent/3552187-shortcutavailability"><code>shortcutAvailability</code></a> property which you can use to tell the system which of your app's actions should appear in the Wind Down setup.</p><p>Here are all the possible <a href="https://developer.apple.com/documentation/sirikit/inshortcutavailabilityoptions">availability options</a>:</p><ul><li>Journaling</li><li>Mindfulness</li><li>Music</li><li>Podcasts</li><li>Prepare for Tomorrow</li><li>Reading</li><li>Yoga and Stretching</li></ul><h3>Suggest or donate apps actions</h3><p>There are two things you can do to enable the system to suggest your app's actions during Wind Down setup:</p><ul><li>Suggest shortcuts to the system that you want to feature by calling <a href="https://developer.apple.com/documentation/sirikit/invoiceshortcutcenter/2994364-setshortcutsuggestions"><code>setShortcutSuggestions</code></a> on <a href="https://developer.apple.com/documentation/sirikit/invoiceshortcutcenter"><code>INVoiceShortcutCenter</code></a>.</li></ul><pre><code><span class="comment">// Suggest intent</span>

<span class="keyword">import</span> Intents

<span class="keyword">let</span> playSoundIntent = <span class="type">INPlayMediaIntent</span>()

playSoundIntent.<span class="property">shortcutAvailability</span> = .<span class="dotAccess">sleepMusic</span>
playSoundIntent.<span class="property">suggestedInvocationPhrase</span> = <span class="string">"Play sleeping songs"</span>

<span class="keyword">let</span> shortcut = <span class="type">INIShortcut</span>(intent: playSoundIntent)
<span class="type">INVoiceShortcutCenter</span>.<span class="property">shared</span>.<span class="call">setShortcutSuggestions</span>([shortcut])
</code></pre><ul><li>Donate the intents/activities the user does in the app</li></ul><pre><code><span class="comment">// Donating an intent</span>

<span class="keyword">import</span> Intents 

<span class="keyword">let</span> playSoundIntent = <span class="type">INPlayMediaIntent</span>() 

playSoundIntent.<span class="property">shortcutAvailability</span> = .<span class="dotAccess">sleepMusic</span> playSoundIntent.<span class="property">suggestedInvocationPhrase</span>= <span class="string">"Play Counting Sleepy Dinosaurs"</span> 

<span class="keyword">let</span> interaction = <span class="type">INInteraction</span> (intent: playSoundIntent, response: <span class="keyword">nil</span>) 
interaction. <span class="call">donate</span> { error 
  <span class="comment">// Handle the error</span>
}
</code></pre><pre><code><span class="comment">// Donating an user activity</span>

<span class="keyword">import</span> Intents 
<span class="keyword">import</span> UIKit 

<span class="keyword">let</span> userActivity = <span class="type">NSUserActivity</span>(activityType: <span class="string">"your.app.domain.id.playSound"</span> 

userActivity.<span class="property">isEligibleForSearch</span> = <span class="keyword">true</span>
userActivity.<span class="property">isEligibleForPrediction</span> = <span class="keyword">true</span>

userActivity.<span class="property">title</span> = <span class="string">"Play Running Water"</span>
userActivity.<span class="property">suggestedInvocationPhrase</span> = <span class="string">"Play Running Water"</span>
userActivity.<span class="property">shortcutAvailability</span> = .<span class="dotAccess">sleepMusic</span> 

viewController.<span class="property">userActivity</span> = userActivity 
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10661</guid><title>What’s new with in-app purchase</title><description>Create a great in-app purchase experience for your iPhone, iPad, Mac, and Apple Watch apps. Discover how to handle refunds, integrate new App Store server notifications, and find out how to use receipts and server notifications to manage subscriber status. We’ll also walk you through the latest updates in StoreKit, including in-app purchases on Apple Watch, Family Sharing, SKOverlay, SKAdNetwork, and more.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10661</link><pubDate>Sun, 6 Dec 2020 22:06:12 +0700</pubDate><content:encoded><![CDATA[<h2>Introduction</h2><p>Apps running locally from Xcode and distributed it through TestFligt use the Sandbox environment. Once the app is in the App Store it will use the production environment. Testing app purchases can become cumbersome but Xcode introduces StoreKit testing to ease these steps.</p><h2>StoreKit Testing</h2><p>With StoreKit testing you will be able to test your app's in-app purchases entirely locally. This is done via a new framework, <a href="https://developer.apple.com/documentation/storekittest#">StoreKit Test</a>.</p><p><strong>By default, StoreKit uses Sandbox environment</strong>, any testing in-app purchase you create will not appear until you either enable local testing within Xcode or create those in-app purchases inside App Store Connect.</p><p>To enable local testing you need to define those in-app products inside your project. To do so, create a new file of type <strong>StoreKit Configuration File</strong> template. This new file allows you to define all the necessary metadata for your in-app products. There are three types of in-app purchases you can create from the bottom left side of the screen:</p><ol><li><strong>Consumable</strong> In-App Purchase: You can buy it over and over again (lives or gems within a game).</li><li><strong>Non-Consumable</strong> In-App Purchase: Purchased once and never expire.</li><li><strong>Auto-Renewable Subscription</strong>: Users are charged periodically for access to services or content.</li></ol><p>Once your StoreKit Configuration is ready it's time to tell Xcode to use this configuration instead of the Sandbox environment when launching your app. This is done under "Edit Scheme" inside the "Scheme Editor" and under "Run Options" select the StoreKit Configuration you would like to use. Now when you relaunch your app it will use that environment.</p><p>Every change you do to your <code>.storekit</code> file is rendered automatically on your device. No need to recompile your app to see these changes.</p><p>Whenever you want to test the flow and actions of purchasing an item there's no need to log into a Sandbox account, it will use your local testing environment if selected. It will update your app's payment transaction observer just like it did on your sandbox or production environment. <strong>You will also receive a receipt that your app can verify when using local StoreKit testing</strong>. To modify or remove StoreKit transactions you can use the new StoreKit Transaction Manager, you can also simulate a refund that will update the receipt to contain a cancellation date for when the refund occurred. This new framework also supports Ask to Buy to test kid's permissions. This is enabled under the "Editor" menu and selecting "Enable Ask to Buy" on any <code>*.storekit</code> file this will be reflected on the StoreKit Transaction Manager and the StoreKit Transaction Observer will mark it to be in the <a href="https://developer.apple.com/documentation/storekit/skpaymenttransactionstate/deferred#">deferred</a> state until it's approved.</p><p>Auto Renewable Subscriptions is also supported and allows to test promotional offers and introductory offers. To reduce waiting times until these offers expire you can modify how much they're going to last. Under the "Editor" menu, select "Time Rate" to modify the time scale to test your app's renewal statuses.</p><p>A new API <a href="https://developer.apple.com/documentation/storekit/skpaymenttransactionobserver/3564804-paymentqueue#"><code>didRevokeEntitlementsForProductIdentifiers</code></a>, launched in iOS 14, allows your app to tell a user it is no longer entitled to one or more in-app purchases.</p><h2>Receipt Validation with local Xcode testing environment</h2><p>Every app transaction is reflected on the <strong>app's receipt</strong>. This is a <strong>signed proof from the App Store of every record of purchases made by the user in your app</strong>. It's <strong>stored on the device and it's updated automatically by the system</strong>. It is signed so you know it came from the App Store and was meant for your app on that device.</p><p>There are some key differences when working with the local Xcode StoreKit testing environment and the Sandbox environment for the app's receipt.</p><ol><li>They are signed with a different private key than what is used for the receipts generated in the Sandbox or production environments. Hence the need to use a different certificate when validating. Said certificate is exportable from the StoreKit configuration editor menu.</li><li><strong>The StoreKit Test Certificate is not part of a certificate chain</strong>. Apple recommends defining a debug macro to differentiate both environments within your client side verification code.</li></ol><pre><code><span class="preprocessing">#if DEBUG</span>
<span class="keyword">let</span> certificateName = <span class="string">"StoreKitTestCertificate</span>
<span class="preprocessing">#else</span>
<span class="keyword">let</span> certificateName = <span class="string">"AppleIncRootCertificate"</span>
<span class="preprocessing">#endif</span>

<span class="comment">// Verify Receipt using OpenSSL</span>

<span class="preprocessing">#if DEBUG</span>
<span class="keyword">let</span> result = <span class="type">PKCS7_verify</span>(receipt, <span class="keyword">nil</span>, store, <span class="keyword">nil</span>, <span class="keyword">nil</span>, <span class="type">PKCS7_NOCHAIN</span>)
<span class="preprocessing">#else</span>
<span class="keyword">let</span> result = <span class="type">PKCS7_verify</span>(receipt, <span class="keyword">nil</span>, store, <span class="keyword">nil</span>, <span class="keyword">nil</span>, <span class="keyword">nil</span>)
<span class="preprocessing">#endif</span>
</code></pre><h3>StoreKit Test Framework</h3><p>Introduces the ability to continuously test StoreKit automation and transactions with the following additions:</p><ol><li>Enables you in code full control of the local StoreKit test environment. All the controls that you had manually are now exposed inside your tests.</li><li>Works alongside XCTest for extending unit and UI test coverage to your in-app purchases.</li><li>Additionally, you have the ability to <a href="https://developer.apple.com/documentation/storekittest/sktestsession/3579480-disabledialogs#">disable</a> all the sheets and dialogs that would normally appear. Making your tests run to completion without waiting for user interaction. One example of this is the addition of <a href="https://developer.apple.com/documentation/storekittest/sktestsession/3579476-cleartransactions#"><code>clearTransactions()</code></a>.</li><li>Ability to trigger renewal of a subscription right away. so your tests can validate if your app's subscription features continue to work across renewals.</li><li>Test the app's handling of both successful and failed purchases, interrupted and deferred purchases, transactions that initiate outside the running of your app as well as all sort of cases related to subscriptions.</li></ol><p>When testing StoreKit flows it's important to <a href="https://developer.apple.com/documentation/storekittest/sktestsession">include</a> the StoreKit configuration file so that's referenceable by SKTestSession.</p><p>After testing everything it's essential to sign into App Store connect and set up the in-app purchases so you can test everything using the sandbox environment.</p><h2>Enhancements to the Sandbox environment</h2><ul><li>Sandbox environment uses the same information from App Store Connect as when the app it's available in the App Store.</li><li>Sandbox environment also requires an Apple ID for your test device.</li><li>In Sandbox app receipts are signed by the App Store.</li><li>Sandbox supports server-side receipt validation.</li><li>Sandbox supports App Store server notifications.</li></ul><p>You can manage and test your subscriptions inside the Sandbox configuration from Settings.app of your device where you configure your Sandbox account. Also, you can reset eligibility for introductory offers, so now there's <strong>no need to set up a new Sandbox ID each time you want to retest an introductory offer</strong>.</p><h3>App Store server notifications in the Sandbox Environment</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10661/app_store_server_notifications.png"/><blockquote><p>App Store server notifications in Sandbox Environment</p></blockquote><p>This session introduces two new notification types available in the Sandbox environment: <code>DID_CHANGE_RENEWAL_STATUS</code> &amp; <code>DID_RENEW</code></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10071</guid><title>Evaluate and optimize voice interaction for your app</title><description>Optimize your app for Siri and give people a more natural way to interact with the features of your app. We’ll compare the different Siri technologies and help you identify the right one for you and your needs, show you how to get started with building for conversational interactions, and explore best practices for making your integration truly excel.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10071</link><pubDate>Sun, 6 Dec 2020 14:50:28 +0700</pubDate><content:encoded><![CDATA[<h2>Best practices for Siri dialog</h2><ul><li>avoid jargon in your dialogue</li><li>use best practices for <em>spoken</em> English, not <em>written</em> English.</li><li>keep dialogue short</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10061</guid><title>Expand your SiriKit Media Intents to more platforms</title><description>Discover how you can enable Siri summoning for your music or audio app using SiriKit Media Intents. We’ll walk you through how to add Siri support to your music, podcast, or other audio service on more of our platforms, including HomePod and Apple TV, so people can start listening by just asking Siri. And learn about new APIs that let you support alternative results, helping people listen more quickly without leaving the Siri interface.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10061</link><pubDate>Sun, 6 Dec 2020 14:49:41 +0700</pubDate><content:encoded><![CDATA[<p>SiriKit Media Intents allow you to add a wide variety of natural language queries to your application e.g.:</p><ul><li><code>Play music on AppName</code></li><li><code>Play BandName on AppName</code></li><li><code>Play song SongName on AppName</code></li><li>etc</li></ul><h2>New platforms</h2><p>From this year, SiriKit Media Intents come to</p><ul><li>HomePod, for more check <a href="https://developer.apple.com/siri">developer.apple.com/siri</a></li><li>Apple TV</li></ul><h2>New features</h2><h3>Compact UI</h3><p>Like the rest of the system, now SiriKit Media Intents will be handled in the system compact UI when intents are handled outside the app.</p><h3>Alternatives Support</h3><p>After handling a request, in the compact UI there could be a <code>Maybe You Wanted</code> button that shows alternative songs to play instead of the current one.</p><p>This is achieved by calling</p><pre><code><span class="type">INPlayMediaMediaItemResolutionResult</span>.<span class="call">successes</span>(with: mediaItems)
</code></pre><p>instead of</p><pre><code><span class="type">INPlayMediaMediaItemResolutionResult</span>.<span class="call">success</span>(with: mediaItems[<span class="number">0</span>])
</code></pre><p>when receiving a <a href="https://developer.apple.com/documentation/sirikit/inplaymediaintenthandling/3074275-resolvemediaitems"><code>resolveMediaItems(for:with:)</code></a> call, e.g.:</p><pre><code><span class="keyword">func</span> resolveMediaItems(
  for intent: <span class="type">INPlayMediaIntent</span>, 
  with completion: <span class="keyword">@escaping</span> ([<span class="type">INPlayMediaMediaItemResolutionResult</span>]) -&gt; <span class="type">Void</span>
) {
  <span class="keyword">let</span> mediaSearch = intent.<span class="property">mediaSearch</span>
  <span class="call">resolveMediaItems</span>(for: mediaSearch) { optionalMediaItems <span class="keyword">in
    guard let</span> mediaItems = optionalMediaItems <span class="keyword">else</span> {
      <span class="keyword">return</span>
    }
    <span class="call">completion</span>(<span class="type">INPlayMediaMediaItemResolutionResult</span>.<span class="call">successes</span>(with: mediaItems))
  }
}
</code></pre><p>If the user taps on an alternative song, this will come to the app as a normal <code>INPlayMediaIntent</code>.</p><h2>Performance improvements</h2><h3>In-app intent handling</h3><ul><li>moves the intent handling in the app</li><li>no need to launch your intents extension and your app to start a background audio session (just the app will suffice now)</li><li>note that because it's launching the app this might result in a slower Siri response</li></ul><h3>App prewarming</h3><p>Currently the system will launch your app in the background for it to begin playback <strong>after</strong> handling a intent, with app prewarming the system will launch the app in the background along with the intent extension (therefore the app playback is ready to go when the intent is handled).</p><h2>Demo: ControlAudio</h2><p>ControlAudio is a demo app introduced last year that the team has updated to support this year's new feature, download it <a href="https://developer.apple.com/documentation/sirikit/media/managing_audio_with_sirikit">here</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10190</guid><title>Create quick interactions with Shortcuts on watchOS</title><description>Shortcuts are a natural fit on Apple Watch, allowing people to get things done with just a tap — even from a complication. Bring your app’s intents to the wrist: We’ll help you optimize your shortcuts performance, understand how intents can be routed from watchOS to iOS, explore the latest interaction and presentation interfaces, and examine how the Shortcuts app manages shortcuts and intents for Apple Watch.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10190</link><pubDate>Sun, 6 Dec 2020 14:47:00 +0700</pubDate><content:encoded><![CDATA[<h2>What's new in Shortcuts on Apple Watch</h2><ul><li>New Shortcuts.app</li><li>on iPhone you can maintain a Apple Watch collection of all the shortcuts that should sync to the Watch</li><li>New Shortcuts complications<ul><li>to launch the Shortcuts.app</li><li>to trigger a specific shortcut</li></ul></li></ul><h2>Running Shortcuts on the Watch</h2><p>For shortcuts based on <code>NSUserActivity</code> API, we need to open the app to handle the activity:</p><ul><li>if the app is found on the watch, the app is launched</li><li>if the app is not found, an error will be shown</li></ul><p>For shortcuts based on <code>Intent</code> API, we need to call the Intent extension:</p><ul><li>if the extension is found on the watch, the extension will be asked to handle the intent</li><li>if not, the watch will try to handle the intent <em>remotely</em>, aka in the phone:<ul><li>if the intent can be handled without launching the app, it will do so</li><li>if the intent requires to be handled in the app, an error will be shown</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc16/231</guid><title>CloudKit Best Practices</title><description>CloudKit keeps app data updated across iOS, macOS, watchOS, tvOS, and the web so you can focus on building your app. Hear best practices from the CloudKit engineering team about how to take advantage of the APIs and push notifications in order to provide your users with the best experience. Learn about the ways Apple apps use CloudKit and how you can apply the same approaches in your app.</description><link>https://www.wwdcnotes.com/notes/wwdc16/231</link><pubDate>Sun, 6 Dec 2020 00:31:37 +0700</pubDate><content:encoded><![CDATA[<h2>Short CloudKit overview</h2><p>Apple uses CloudKit in their applications, so you can be confident that it scales, because for Apple it scales to hundreds of millions of users.</p><p>CloudKit lets you focus on building your applications and not worry about building backend services for them. It provides your users automatic authentication - if the user is logged in to iCloud on their device, they don’t need to log in separately in your app.</p><p>A CloudKit container now includes 3 databases:</p><ul><li>public database - for data visible to everyone</li><li>private database - for a given user’s private data</li><li>new this year: shared database - for user data that they decided to share with others</li></ul><p>Zones:</p><ul><li>public database has 1 default zone</li><li>private database has a default zone and it can have one or more custom zones</li><li>shared database includes some number of shared zones</li></ul><p>A record always exists in a specific zone.</p><h2>Building an app with a sync feature</h2><p>A common use case (e.g. Notes app):</p><ul><li>user creates some data/records/documents on one of their devices</li><li>later, they open another device and they expect to see these documents there and be able to read/edit them</li></ul><p>The way this is implemented is that CloudKit needs to be the source of truth, and the devices should maintain a local cache of all the app data and synchronize it using CloudKit.</p><p>The recommended workflow:</p><ol><li>On app launch, fetch changes from the server</li><li>Subscribe to any future changes</li><li>Fetch changes when you receive a push</li></ol><h3>Subscriptions:</h3><p>Subscriptions let you ask the server to notify you whenever a change happens in the specified set of data. Previously you could subscribe to a specific query to a record type or to all changes in a zone.</p><p>New in iOS 10 - <a href="https://developer.apple.com/documentation/cloudkit/ckdatabasesubscription"><code>CKDatabaseSubscription</code></a> - lets you subscribe to all changes in the whole database (private or shared).</p><p>Types of subscription notifications:</p><ol><li>Silent push:</li></ol><pre><code><span class="keyword">let</span> notificationInfo = <span class="type">CKNotificationInfo</span>()

<span class="comment">// we only set this, but none of the UI related keys</span>
notificationInfo.<span class="property">shouldSendContentAvailable</span> = <span class="keyword">true</span>

<span class="comment">// do this once. no need to ask the user for push notifications permission,
// since we won't show any visible notifications</span>
application.<span class="call">registerForRemoteNotifications</span>(…)
</code></pre><ol start="2"><li>Visual notification:</li></ol><pre><code><span class="keyword">let</span> notificationInfo = <span class="type">CKNotificationInfo</span>()

<span class="comment">// set any of these</span>
notificationInfo.<span class="property">shouldBadge</span> = <span class="keyword">true</span>
notificationInfo.<span class="property">alertBody</span> = <span class="string">"alertBody"</span>
notificationInfo.<span class="property">soundName</span> = <span class="string">"default"</span>

<span class="comment">// we need to prompt the user for push notification access:</span>
application.<span class="call">registerUserNotificationSettings</span>(…)
application.<span class="call">registerForRemoteNotifications</span>(…)
</code></pre><p>Remember that push notifications can be coalesced, so you may only get one out of a series. Push notifications tell you that <em>something</em> has changed, but not necessarily every single thing that has changed.</p><h3>Creating a subscription:</h3><p>This only needs to be done the first time you launch an app - so we set a flag when we create a subscription and the next time we skip this part.</p><pre><code><span class="keyword">if</span> subscriptionIsLocallyCached { <span class="keyword">return</span> }

<span class="keyword">let</span> subscription = <span class="type">CKDatabaseSubscription</span>(subscriptionID: <span class="string">"shared-changes"</span>)

<span class="keyword">let</span> notificationInfo = <span class="type">CKNotificationInfo</span>()
notificationInfo.<span class="property">shouldSendContentAvailable</span> = <span class="keyword">true</span>
subscription.<span class="property">notificationInfo</span> = notificationInfo

<span class="keyword">let</span> operation = <span class="type">CKModifySubscriptionsOperation</span>(
    subscriptionsToSave: [subscription],
    subscriptionIDsToDelete: []
)

operation.<span class="property">modifySubscriptionsCompletionBlock</span> = { …
    <span class="keyword">if</span> error != <span class="keyword">nil</span> {
        …
    } <span class="keyword">else</span> {
        <span class="keyword">self</span>.<span class="property">subscriptionIsLocallyCached</span> = <span class="keyword">true</span>
    }
}

operation.<span class="property">qualityOfService</span> = .<span class="dotAccess">utility</span>
<span class="keyword">self</span>.<span class="property">sharedDB</span>.<span class="call">add</span>(operation)
</code></pre><h3>Listening for pushes:</h3><ul><li>turn on “Remote notifications” and “Background fetch” capabilities</li></ul><pre><code><span class="keyword">func</span> application(<span class="keyword">_</span> application: <span class="type">UIApplication</span>,
    didReceiveRemoteNotification userInfo: [<span class="type">NSObject</span>: <span class="type">AnyObject</span>],
    fetchCompletionHandler completionHandler: (<span class="type">UIBackgroundFetchResult</span>) -&gt; <span class="type">Void</span>) {

    <span class="keyword">let</span> dict = userInfo <span class="keyword">as</span>! [<span class="type">String</span>: <span class="type">NSObject</span>]
    <span class="keyword">let</span> notification = <span class="type">CKNotification</span>(fromRemoteNotificationDictionary: dict)

    <span class="keyword">if</span> notification.<span class="property">subscriptionID</span> == <span class="string">"shared-changes"</span> {
        <span class="call">fetchSharedChanges</span> {
              <span class="call">completionHandler</span>(.<span class="dotAccess">newData</span>)
        }
    }
}
</code></pre><h3>Fetching the changes:</h3><p>Steps:</p><ul><li>ask in which zones something was changed (in shared db - because there may be new zones added when a new user shares some content)</li><li>ask which records have changed in each relevant zone</li></ul><p>The server will not send you pushes about the changes you’re doing on this device, but you may receive those changes you’ve done on the list when fetching a delta download.</p><p><a href="https://developer.apple.com/documentation/cloudkit/ckfetchdatabasechangesoperation/1640473-fetchallchanges"><code>fetchAllChanges</code></a>: previously, in some operations you had to manually check for a flag that says there are more results waiting for you that you need to manually request (i.e. another page). Now, CloudKit does the paging automatically for you if <code>fetchAllChanges = true</code> (which is the default).</p><pre><code><span class="keyword">func</span> fetchSharedChanges(<span class="keyword">_</span> callback: () -&gt; <span class="type">Void</span>) {
    <span class="keyword">let</span> changesOperation = <span class="type">CKFetchDatabaseChangesOperation</span>(
        previousServerChangeToken: sharedDBChangeToken  <span class="comment">// cached between runs</span>
    )

    <span class="comment">// this gives you IDs of changed zones</span>
    changesOperation.<span class="property">recordZoneWithIDChangedBlock</span> = { … }

    <span class="comment">// this gives you IDs of deleted zones</span>
    changesOperation.<span class="property">recordZoneWithIDWasDeletedBlock</span> = { … }

    <span class="comment">// this gives you the current change token which you need to save
    // may be called multiple times if the operation fetches multiple pages of content
    // save the token each time, so in case of an error you don’t repeat all work</span>
    changesOperation.<span class="property">changeTokenUpdatedBlock</span> = { … }

    changesOperation.<span class="property">fetchDatabaseChangesCompletionBlock</span> = {
        (newToken: <span class="type">CKServerChangeToken</span>?, more: <span class="type">Bool</span>, error: <span class="type">NSError</span>?) -&gt; <span class="type">Void</span> <span class="keyword">in

        self</span>.<span class="property">sharedDBChangeToken</span> = newToken
        <span class="keyword">self</span>.<span class="call">fetchZoneChanges</span>(callback)
    }

    <span class="keyword">self</span>.<span class="property">sharedDB</span>.<span class="call">add</span>(operation)
}
</code></pre><p><code>fetchZoneChanges()</code> looks very similar, but fetches changes for a specific zone using <a href="https://developer.apple.com/documentation/cloudkit/ckfetchrecordzonechangesoperation"><code>CKFetchRecordZoneChangesOperation</code></a> (you pass it a list of zones).</p><h2>CloudKit best practices</h2><h3>Automatic authentication:</h3><p>CloudKit allows you to authenticate users (if they’re logged in to iCloud) without requiring any private information.</p><p>You use the CloudKit user record for authentication. The user record is unique per container and never changes for that user.</p><pre><code>container.<span class="call">fetchUserRecordID</span>(completionHandler: (<span class="type">CKRecordID</span>?, <span class="type">NSError</span>?) -&gt; <span class="type">Void</span>)
</code></pre><h3>CKOperation API:</h3><p>The convenience API works on single items and it’s simpler to use. Every convenience API call has a <a href="https://developer.apple.com/documentation/cloudkit/ckoperation"><code>CKOperation</code></a> counterpart that lets you perform an operation on a batch of records.</p><p>The <a href="https://developer.apple.com/documentation/cloudkit/ckoperation"><code>CKOperation</code></a> also has other advantages - for example, it lets you:</p><ul><li>set up dependencies between operations</li><li>specify quality of service and queue priorities</li><li>cancel operations that have started executing</li><li>specify if you want the operation to work over cellular network</li><li>limit the number of records or set of fetched keys</li><li>report progress</li><li>… and everything that <a href="https://developer.apple.com/documentation/foundation/operation"><code>NSOperation</code></a> provides</li></ul><p>Watch the "<a href="https://developer.apple.com/videos/play/wwdc2015/226/">Advanced NSOperations</a>" talk from 2015 to learn more about <a href="https://developer.apple.com/documentation/foundation/operation"><code>NSOperation</code></a>.</p><h3>Quality of service:</h3><p>QoS: select a quality of service (<code>.userInteractive</code> / <code>.userInitiated</code> / <code>.utility</code> / <code>.background</code>) depending on the task priority.</p><ul><li>default is <code>.utility</code></li><li><code>.utility</code> and below enable discretionary networking</li></ul><p>Discretionary networking means that:</p><ul><li>the system decides when is the best moment to run your request, so it may take longer than you expect</li><li>however, all network failures will be automatically retried for you</li><li>the request gets a timeout period of 7 days by default</li></ul><h3>Long lived operations:</h3><p>If you have some operations that you want to continue/retry if they don’t manage to complete by the time your app is terminated, iOS 9.3 adds “CloudKit long lived operations”. Once you run such operation, the system will finish it even if the app is killed by the system or the user. The request is executed even if your app isn’t running, the result is cached and is returned to you once the app restarts. Results are kept by the OS for at least 24 hours.</p><p>To use this API:</p><ul><li>set <a href="https://developer.apple.com/documentation/cloudkit/ckoperation/1452374-islonglived"><code>isLongLived</code></a> = <code>true</code> on <a href="https://developer.apple.com/documentation/cloudkit/ckoperation"><code>CKOperation</code></a></li><li>save the operation’s <a href="https://developer.apple.com/documentation/cloudkit/ckoperation/3003367-operationid"><code>operationID</code></a></li><li>use <a href="https://developer.apple.com/documentation/cloudkit/ckcontainer/3003356-fetchlonglivedoperation"><code>CKContainer.fetchLongLivedOperation(withId:)</code></a> to get the operation object back</li><li>set completion blocks and run it again just like a new one</li></ul><pre><code><span class="type">CKContainer</span>.<span class="call">default</span>().<span class="call">fetchLongLivedOperation</span>(withID: myOpID) {
    (operation: <span class="type">CKOperation</span>?, error: <span class="type">NSError</span>?) <span class="keyword">in

    let</span> fetchRecords = operation <span class="keyword">as</span>! <span class="type">CKFetchRecordsOperation</span>
    fetchRecords.<span class="property">fetchRecordsCompletionBlock</span> = { … }

    <span class="type">CKContainer</span>.<span class="call">default</span>().<span class="property">privateCloudDatabase</span>.<span class="call">add</span>(fetchRecords)
}
</code></pre><h3>Parent references:</h3><p>A new type of reference added this year to help you better model data, especially with sharing in mind. If your app supports sharing, it’s recommended that you set the parent reference to create a hierarchy between records.</p><p>Example: Album ⭢ list of photos</p><pre><code><span class="keyword">let</span> photoRecord = <span class="type">CKRecord</span>(recordType: <span class="string">"photo"</span>)
photoRecord.<span class="call">setParent</span>(albumRecordID)
</code></pre><p>What this gives you: when the user shares the album record, the whole record hierarchy under this album (photos and other data) will also be shared.</p><h3>Types of errors:</h3><h4>1) Fatal error (bad request)</h4><p>Error codes like:</p><ul><li><a href="https://developer.apple.com/documentation/cloudkit/ckerror/2325203-internalerror"><code>.internalError</code></a></li><li><a href="https://developer.apple.com/documentation/cloudkit/ckerror/2325219-serverrejectedrequest"><code>.serverRejectedRequest</code></a></li><li><a href="https://developer.apple.com/documentation/cloudkit/ckerror/2325210-invalidarguments"><code>.invalidArguments</code></a></li><li><a href="https://developer.apple.com/documentation/cloudkit/ckerror/2325225-permissionfailure"><code>.permissionFailure</code></a></li></ul><p>In this case, you should show an alert to the user and tell them this can’t be executed.</p><h4>2) Connection/server error</h4><p>Error codes like:</p><ul><li><a href="https://developer.apple.com/documentation/cloudkit/ckerror/2325220-zonebusy"><code>.zoneBusy</code></a></li><li><a href="https://developer.apple.com/documentation/cloudkit/ckerror/2325227-serviceunavailable"><code>.serviceUnavailable</code></a></li><li><a href="https://developer.apple.com/documentation/cloudkit/ckerror/2325202-requestratelimited"><code>.requestRateLimited</code></a></li></ul><p>In this case, check for <a href="https://developer.apple.com/documentation/cloudkit/ckerrorretryafterkey"><code>CKErrorRetryAfterKey</code></a> and retry after specified time.</p><h4>3) Errors that are returned before connection is even made</h4><p><a href="https://developer.apple.com/documentation/cloudkit/ckerror/2325209-networkunavailable"><code>.networkUnavailable</code></a></p><ul><li>you should monitor network reachability (<a href="https://developer.apple.com/documentation/systemconfiguration/scnetworkreachability-g7d"><code>SCNetworkReachability</code></a>) and retry when the device is connected again</li></ul><p><a href="https://developer.apple.com/documentation/cloudkit/ckerror/2325221-notauthenticated"><code>.notAuthenticated</code></a></p><ul><li>when the user is not logged in and can’t access their private database</li><li>you should register at startup for <a href="https://developer.apple.com/documentation/foundation/nsnotification/name/1399172-ckaccountchanged"><code>CKAccountChangedNotification</code></a>, and when it fires, recheck account status and update the UI</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc15/715</guid><title>CloudKit Tips and Tricks</title><description>CloudKit makes it easy to store and retrieve any kind of data from iCloud. Dive into the API with the CloudKit framework team as they explore some of its lesser-known features, explore best practices around subscriptions and queries, and reveal its hidden gems.</description><link>https://www.wwdcnotes.com/notes/wwdc15/715</link><pubDate>Fri, 4 Dec 2020 20:00:33 +0700</pubDate><content:encoded><![CDATA[<h2>Error Handling</h2><h3>Accounts:</h3><p>To check the account status of the current user:</p><pre><code>container.<span class="call">accountStatusWithCompletionHandler</span> { status, error <span class="keyword">in</span> … }
</code></pre><p>All APIs that fail because they require an authenticated user return <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/notauthenticated"><code>CKErrorNotAuthenticated</code></a>.</p><p>You can now subscribe for <a href="https://developer.apple.com/documentation/foundation/nsnotification/name/1399172-ckaccountchanged"><code>CKAccountChangedNotification</code></a> to be notified when account status changes.</p><p>You should avoid showing alerts to the user about a missing account - simply disable parts of the UI that require an account, and reenable them when you get a notification that an account is now available.</p><h3>Network errors:</h3><p>Network connection errors that you may sometimes get: <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/networkfailure"><code>CKErrorNetworkFailure</code></a>, <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/serviceunavailable"><code>CKErrorServiceUnavailable</code></a>, <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/zonebusy"><code>CKErrorZoneBusy</code></a>, <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/requestratelimited"><code>CKErrorRequestRateLimited</code></a>. These errors include a key <a href="https://developer.apple.com/documentation/cloudkit/ckerrorretryafterkey"><code>CKErrorRetryAfterKey</code></a> in their user info dictionary that tells you how long you should wait before retrying.</p><h3>Handling conflicts:</h3><p>If you try to save a record that has been modified in the meantime on the server (meaning: the record change tag you’re sending with the save request is outdated), you will receive the error <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/serverrecordchanged"><code>CKErrorServerRecordChanged</code></a>.</p><p>There is no magic happening behind the scenes in such case, CloudKit doesn’t make assumptions about how you want to resolve conflicts, you need to handle this yourself. However, the SDK provides you the necessary information in the <code>userInfo</code>:</p><ul><li><a href="https://developer.apple.com/documentation/cloudkit/ckrecordchangederrorclientrecordkey"><code>CKRecordChangedErrorClientRecordKey</code></a> - what you tried to save</li><li><a href="https://developer.apple.com/documentation/cloudkit/ckrecordchangederrorserverrecordkey"><code>CKRecordChangedErrorAncestorRecordKey</code></a> - the original version</li><li><a href="https://developer.apple.com/documentation/cloudkit/ckrecordchangederrorancestorrecordkey"><code>CKRecordChangedErrorServerRecordKey</code></a> - what is currently on the server</li></ul><p>Usually you will want to resolve the conflict by applying the same changes that you did on the original record to the current server version of the record.</p><h2>CloudKit Operations</h2><h3>Batch operations:</h3><p>If you create and save a lot of records in one go, each of them will create a separate network request, and making a lot of requests in a short period means you’re likely to hit some kind of rate limit and they will be queued up. To avoid making multiple similar requests, you can use the <a href="https://developer.apple.com/documentation/cloudkit/ckoperation"><code>CKOperation</code></a> API. Almost every convenience API method that works on one record at a time has a <code>CKOperation</code> counterpart that allows you to work on a batch of records.</p><p>For saving multiple records, use <a href="https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation"><code>CKModifyRecordsOperation</code></a>:</p><pre><code><span class="keyword">class</span> CKModifyRecordsOperation: <span class="type">CKDatabaseOperation</span> {
  <span class="keyword">convenience init</span>(recordsToSave: [<span class="type">CKRecord</span>]?, recordIDsToDelete: [<span class="type">CKRecordID</span>]?)
}
</code></pre><p>Note: there are certain limits on how large batch operations you can make (number of items in the request and total request size). This doesn’t include the size of saved binary assets, just the record field data.</p><p>If you hit this limit, you will get the <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/limitexceeded"><code>CKErrorLimitExceeded</code></a> error. In that case, the best solution is usually to try to divide the batch in half and make two requests.</p><p>If one or more records in the batch can’t be saved, you will get <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/partialfailure"><code>CKErrorPartialFailure</code></a>. From this error’s <code>userInfo</code> you can get a dictionary with specific record errors under <a href="https://developer.apple.com/documentation/cloudkit/ckpartialerrorsbyitemidkey"><code>CKPartialErrorsByItemIDKey</code></a>.</p><p>In a standard zone, in such scenario some records will be saved and those with errors won’t. In a custom zone you can make an atomic update - in this case, in case of a problem with some of the records, no records will actually be saved, but instead you will get an error <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/batchrequestfailed"><code>CKErrorBatchRequestFailed</code></a> for those that could have been saved but weren’t.</p><h3>Queries:</h3><p>If you expect a query to return a large number of records, but you only need a small number of them at a time, you can use the <a href="https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515078-resultslimit"><code>CKQueryOperation.resultsLimit</code></a> property (also available on <a href="https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation"><code>CKFetchRecordChangesOperation</code></a>, <a href="https://developer.apple.com/documentation/cloudkit/ckfetchnotificationchangesoperation"><code>CKFetchNotificationChangesOperation</code></a>).</p><p>When limiting the number of records, you will usually also want to set the query's <a href="https://developer.apple.com/documentation/cloudkit/ckquery/1413121-sortdescriptors"><code>sortDescriptors</code></a> to e.g. sort records by oldest or newest first. You can use the <a href="https://developer.apple.com/documentation/cloudkit/ckrecord/1462223-creationdate"><code>creationDate</code></a> key which is automatically added to all saved records regardless of type.</p><p>To implement pagination and get further pages beyond the first one, use the <a href="https://developer.apple.com/documentation/cloudkit/ckqueryoperation/cursor"><code>CKQueryCursor</code></a> object that you get in response to the <a href="https://developer.apple.com/documentation/cloudkit/ckqueryoperation/1515067-querycompletionblock"><code>queryCompletionBlock</code></a> callback. Then, initialize the next <code>CKOperation</code> passing it the cursor object in the argument to the initializer.</p><p>If you don’t need all information contained in a record immediately, you can also use the <a href="https://developer.apple.com/documentation/cloudkit/ckqueryoperation/3003370-desiredkeys"><code>desiredKeys</code></a> property to only download the keys you want; e.g. download the record’s thumbnail image, but not a full-size photo (also available on <a href="https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation"><code>CKFetchRecordsOperation</code></a>, <a href="https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation"><code>CKFetchRecordChangesOperation</code></a>).</p><h3>Maintaining a local cache:</h3><p>Let's say you want to keep some subset of all data completely cached on all local devices for quicker access (e.g. user’s personal notes).</p><p>You have two options:</p><ul><li>use <a href="https://developer.apple.com/documentation/cloudkit/ckqueryoperation"><code>CKQueryOperation</code></a> to fetch all records and synchronize them manually</li><li>make a custom zone and use delta downloads using <a href="https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation"><code>CKFetchRecordChangesOperation</code></a></li></ul><p>When saving fetched records to a local database, you should save CKRecord’s system fields like the change tag together with your own data. To do that, you can use <a href="https://developer.apple.com/documentation/cloudkit/ckrecord/1462200-encodesystemfields"><code>encodeSystemFieldsWithCoder</code></a>:</p><pre><code><span class="keyword">let</span> data = <span class="type">NSMutableData</span>()
<span class="keyword">let</span> archiver = <span class="type">NSKeyedArchiver</span>(forWritingWithMutableData: data)
archiver.<span class="property">requiresSecureCoding</span> = <span class="keyword">true</span>
record.<span class="call">encodeSystemFieldsWithCoder</span>(archiver)
archiver.<span class="call">finishEncoding</span>()
</code></pre><p>When restoring a record from the local storage, you don’t have to set all its data fields - it’s fine to only set those you want to change.</p><p>To synchronize any changes from the server, create a subscription subscribing to a given record type using silent notifications, and use <a href="https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation"><code>CKFetchRecordChangesOperation</code></a> to fetch all recent changes when notified.</p><p>Subscriptions (<a href="https://developer.apple.com/documentation/cloudkit/cksubscription"><code>CKSubscription</code></a>) are persistent queries on the server that send remote notifications about a relevant change - either in a specific record set (query subscription) or in the whole zone (zone subscription).</p><p>To get CloudKit subscription notifications, you need to follow the usual setup for push notifications:</p><ul><li>have push notification capability enabled for your app</li><li>call <a href="https://developer.apple.com/documentation/uikit/uiapplication/1623078-registerforremotenotifications"><code>registerForRemoteNotifications()</code></a></li><li>call <a href="https://developer.apple.com/documentation/uikit/uiapplication/1622932-registerusernotificationsettings"><code>registerUserNotificationSettings(…)</code></a> if you want to show notifications to the user</li></ul><p>To ask for silent subscription notifications, configure the <a href="https://developer.apple.com/documentation/cloudkit/cknotificationinfo"><code>CKNotificationInfo</code></a> object appropriately:</p><ul><li>set the <a href="https://developer.apple.com/documentation/cloudkit/cknotificationinfo/1515110-shouldsendcontentavailable"><code>shouldSendContentAvailable</code></a> key</li><li>do not set any of the UI-related keys: <a href="https://developer.apple.com/documentation/cloudkit/cknotificationinfo/1515270-alertbody"><code>alertBody</code></a>, <a href="https://developer.apple.com/documentation/cloudkit/cknotificationinfo/1514996-shouldbadge"><code>shouldBadge</code></a>, <a href="https://developer.apple.com/documentation/cloudkit/cknotificationinfo/1514987-soundname"><code>soundName</code></a></li></ul><p>Notification priorities: a notification is high priority if it has any UI keys set, otherwise it’s medium priority.</p><p>For silent notifications, the <a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate"><code>UIApplicationDelegate</code></a> will receive the following callback:</p><pre><code><span class="keyword">func</span> application(application: <span class="type">UIApplication</span>,
    didReceiveRemoteNotification: [<span class="type">NSObject</span>: <span class="type">AnyObject</span>],
    fetchCompletionHandler: (<span class="type">UIBackgroundFetchResult</span>) -&gt; <span class="type">Void</span>) { … }
</code></pre><p>Remember that push notification delivery in general is “best effort” - pushes can be dropped if many are received in a short period of time or because of network issues. Silent notifications may also be additionally delayed if the system is waiting for better conditions.</p><p>When you receive a notification, use <a href="https://developer.apple.com/documentation/cloudkit/ckfetchnotificationchangesoperation"><code>CKFetchNotificationChangesOperation</code></a> to check the server’s notification collection for any notifications you might have missed.</p><p>You may want to use a <a href="https://developer.apple.com/documentation/uikit/uiapplication"><code>UIApplication</code></a> background task (<a href="https://developer.apple.com/documentation/uikit/uiapplication/1623031-beginbackgroundtask"><code>beginBackgroundTaskWithName(…)</code></a>) for syncing tasks.</p><p>Interactive notifications: you can now make CloudKit notifications interactive (e.g. show action buttons) by setting the <a href="https://developer.apple.com/documentation/cloudkit/cknotificationinfo/1515082-category"><code>category</code></a> key on <a href="https://developer.apple.com/documentation/cloudkit/cknotificationinfo"><code>CKNotificationInfo</code></a>.</p><h2>Other performance tips</h2><p>CloudKit is a highly asynchronous API, most operations require a network call and take some time to execute. You will often want to make a series of operations that have some dependencies between them.</p><p>Things to keep in mind:</p><ul><li>however you implement task handling, remember to always handle all errors</li><li>never block the main thread with an operation in progress</li><li>don’t nest calls to the convenience API methods, creating a “callback hell”</li><li>don’t use locks/semaphores to wait for an API call to finish</li><li>instead, use the <a href="https://developer.apple.com/documentation/foundation/operation/1412859-adddependency"><code>addDependency()</code></a> API in <code>CKOperation</code> to add dependencies between operations:</li></ul><pre><code><span class="keyword">let</span> firstFetch = <span class="type">CKFetchRecordsOperation</span>(…)
<span class="keyword">let</span> secondFetch = <span class="type">CKFetchRecordsOperation</span>(…)
secondFetch.<span class="call">addDependency</span>(firstFetch)

<span class="keyword">let</span> queue = <span class="type">NSOperationQueue</span>()
queue.<span class="call">addOperations</span>([firstFetch, secondFetch], waitUntilFinished: <span class="keyword">false</span>)
</code></pre><ul><li>use the <a href="https://developer.apple.com/documentation/foundation/operation/1413553-qualityofservice"><code>qualityOfService</code></a> property on <code>NSOperation</code> to indicate which operations are something you need in the UI and which are low priority background operations</li><li>there used to be a <code>usesBackgroundSession</code> property on <code>CKOperation</code> too, but it’s deprecated now ⭢ use quality of service for this</li><li>QoS = <code>.utility</code> and <code>.background</code> use discretionary networking, use <code>.userInteractive</code> and <code>.userInitiated</code> for high priority tasks<ul><li>note: <code>.utility</code> QoS is the default if you don’t change it! [the video says <code>.background</code> but a later one says <code>.utility</code>]</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc14/231</guid><title>Advanced CloudKit</title><description>Dive deep into CloudKit! Learn how to perform advanced operations on records and store private data and gain a deeper understanding about custom record zones, ensuring data integrity, and effectively modeling your data.</description><link>https://www.wwdcnotes.com/notes/wwdc14/231</link><pubDate>Thu, 3 Dec 2020 18:33:09 +0700</pubDate><content:encoded><![CDATA[<p>CloudKit API is designed to be asynchronous, all calls return through a callback, because they all require a network connection.</p><p>The main API (“operational API”) is based on <a href="https://developer.apple.com/documentation/foundation/nsoperation"><code>NSOperation</code></a>. You use it by creating special <a href="https://developer.apple.com/documentation/foundation/nsoperation"><code>NSOperation</code></a> objects for a given use case, e.g. <a href="https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation"><code>CKFetchRecordsOperation</code></a>, and specifying parameters and callbacks in their properties. Apart from the final result callback, you can set callbacks e.g. for reporting download progress or to get records one by one as they’re downloaded.</p><p>Operation lifecycle (cancelling, suspending etc.) can be managed through standard <a href="https://developer.apple.com/documentation/foundation/nsoperation"><code>NSOperation</code></a> methods and <a href="https://developer.apple.com/documentation/foundation/nsoperationqueue"><code>NSOperationQueue</code></a>.</p><p>There are separete fetch/modify operation types for records, subscriptions, zones, users and notifications. You can set dependencies between operations (even if they’re in different queues), e.g. make a fetch operation and then a modify operation that needs to wait for the object to load.</p><p>Operations can also have different priority levels.</p><h3>Starting an operation:</h3><p>(Note: this wasn’t actually in the video, but I think it should have been, because it's not obvious at all.)</p><p>How to start an operation once you prepare the <a href="https://developer.apple.com/documentation/cloudkit/ckoperation"><code>CKOperation</code></a> object:</p><ol><li>Use the database’s built-in queue:</li></ol><pre><code><span class="keyword">let</span> fetchOperation = ...
<span class="type">CKContainer</span>.<span class="call">default</span>().<span class="property">privateCloudDatabase</span>.<span class="call">add</span>(fetchOperation)
</code></pre><ol start="2"><li>Use your own operation queue and assign a reference to the database:</li></ol><pre><code><span class="keyword">let</span> operationQueue = <span class="type">NSOperationQueue</span>()

<span class="keyword">let</span> fetchOperation = ...
fetchOperation.<span class="property">database</span> = <span class="type">CKContainer</span>.<span class="call">default</span>().<span class="property">privateCloudDatabase</span>
operationQueue.<span class="call">addOperation</span>(fetchOperation)
</code></pre><h2>Custom zones</h2><p>Custom zones (in the private database) let you compartmentalize data and add some special features. Records can’t be moved between zones or have cross-zone relationships.</p><p>There are some operations that can only be done in custom zones:</p><h3>Atomic commits:</h3><ul><li>Objects in the CloudKit database have relationships between them, and you want to keep all data consistent</li><li>Atomic commits are kind of like transactions in a relational database: batch operations succeed or fail together</li><li>Only available in the private database (because public database may be accessed by millions of users at the same time)</li><li>If an operation fails, you get a <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/partialfailure"><code>CKErrorPartialFailure</code></a> response, with the user info containing info about errors on specific records (<a href="https://developer.apple.com/documentation/cloudkit/ckpartialerrorsbyitemidkey"><code>CKPartialErrorsByItemID</code></a>)</li><li>Error <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/batchrequestfailed"><code>CKErrorBatchRequestFailed</code></a> means that this record wasn’t saved because of a problem with another record in the batch</li></ul><h3>Delta downloads:</h3><ul><li>They allow you to download a list of all changes since the last time the app was online, to let you perform a full sync</li><li>When a device connects, you can send a “change token” to the server asking for all changes since that version</li><li>This lets you implement an offline cache of the whole dataset and sync any changes when possible</li></ul><p>To do that:</p><ul><li>track all local changes</li><li>send changes to the server when connected</li><li>resolve conflicts</li><li>fetch server changes with <a href="https://developer.apple.com/documentation/cloudkit/ckfetchrecordchangesoperation"><code>CKFetchRecordChangesOperation</code></a></li><li>remember the received new server change token and send it back next time</li></ul><h3>Zone subscriptions:</h3><ul><li>Let you subscribe for notifications about any change in the zone</li><li>When you get a notification, you request a delta download</li></ul><h2>Advanced record operations</h2><h3>Record changes:</h3><p>When you change some fields in a CKRecord, the changes are automatically tracked locally and only the changed fields are transmitted when you save it. By default CloudKit performs a “locked update”, which makes sure that the update is only saved on the server if the record wasn’t modified in the meantime by another client (this uses record change tokens). After you execute a save, the server returns your record with a new change token - so you should use that returned version for any subsequent changes.</p><p>You have a choice between:</p><ul><li>Unlocked update ⭢ just overwrites server data regardless what is there</li><li>Locked update ⭢ if the record was changed in the meantime, you get back an error (<a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/serverrecordchanged"><code>CKErrorServerRecordChanged</code></a>)</li></ul><p>The <code>userInfo</code> of the <a href="https://developer.apple.com/documentation/cloudkit/ckerror/code/serverrecordchanged"><code>CKErrorServerRecordChanged</code></a> error contains info that lets you perform a 3-way merge:</p><ul><li><a href="https://developer.apple.com/documentation/cloudkit/ckrecordchangederrorclientrecordkey"><code>CKRecordChangedErrorClientRecordKey</code></a> - what you tried to save</li><li><a href="https://developer.apple.com/documentation/cloudkit/ckrecordchangederrorserverrecordkey"><code>CKRecordChangedErrorAncestorRecordKey</code></a> - the original version</li><li><a href="https://developer.apple.com/documentation/cloudkit/ckrecordchangederrorancestorrecordkey"><code>CKRecordChangedErrorServerRecordKey</code></a> - what is currently on the server</li></ul><p>Based on the values from these 3 copies of the record you can decide what state the record should be in, and then retry the save.</p><p>You can modify the behavior with “save policies”:</p><ul><li><a href="https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/recordsavepolicy/ifserverrecordunchanged"><code>SaveIfServerUnchanged</code></a> ⭢ default, performs a locked update and sends only changed keys</li><li><a href="https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/recordsavepolicy/changedkeys"><code>SaveChangedKeys</code></a> ⭢ unlocked update, sends only changed keys</li><li><a href="https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/recordsavepolicy/allkeys"><code>SaveAllKeys</code></a> ⭢ unlocked update, overwrites all keys in the record (note: this doesn’t affect keys that aren’t present in the local copy at all)</li></ul><p>You should almost always use the default locked update (<a href="https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/recordsavepolicy/ifserverrecordunchanged"><code>SaveIfServerUnchanged</code></a>), use unlocked updates only to forcefully resolve serious conflicts. Use <a href="https://developer.apple.com/documentation/cloudkit/ckmodifyrecordsoperation/recordsavepolicy/allkeys"><code>SaveAllKeys</code></a> if the user requests to overwrite server data with local data.</p><h3>Partial records:</h3><p>The <a href="https://developer.apple.com/documentation/cloudkit/ckfetchrecordsoperation/3003361-desiredkeys"><code>desiredKeys</code></a> field present in most operation types lets you specify that you only want to download selected keys from the server. This is useful if the whole record is very large and you don’t need all of it. Partial records can be normally saved after a change.</p><h2>CloudKit data modeling</h2><h3>References:</h3><p>Forward reference ⭢ a parent object keeps an array of references to children in its property</p><p>Backward reference ⭢ only child objects have a reference to the parent</p><p>It’s recommended to use backward references - with a forward reference you need to update the parent object every time a new child is added, and you will run into conflicts if multiple clients are adding records. To get a list of all children using backward references, make a query for all child records with a predicate like “owner = X”.</p><p>References give you cascading deletes - when you delete the parent object, all child objects and their children are deleted. If an object has two parent references, it’s deleted when the first parent is deleted.</p><p>When batch uploading a tree of objects, CloudKit makes sure that parent objects are uploaded first so that you don’t get inconsistent data during upload (important in the public database).</p><h3>Your data objects:</h3><p>CloudKit is only a transport mechanism and requires you to keep and manage your own local copy of all data.</p><p>It’s recommended that you don’t subclass CK* objects to build your models - make your own completely independent model classes and translate to/from CloudKit objects when fetching and saving.</p><h3>Handling push notifications:</h3><p>You need to remember that push notifications in general aren’t guaranteed to be delivered. The server only stores one push per client, so if you reconnect e.g. after a flight, you might miss some previous notifications.</p><p>You can find pushes that you’ve missed in a “Notification Collection” where every notification is saved. The Notification Collection works kind of like delta updates - you ask for notifications since a given change token and you get a list of everything added since then. You can mark a notification as read, which notifies all other clients that they can ignore it.</p><p>You should check the Notification Collection every time you get a push, since you never know what you might have missed (this doesn’t only happen with airplane mode).</p><h2>The iCloud Dashboard</h2><p>The dashboard lets you browse data saved by your app - the whole public database and the private database for your developer account (but not anyone else’s private database). You can view saved records, run queries with any filters, and add new records.</p><p>You can define roles in the public database and define for each model who can create/read/modify records (e.g. specify that records are publicly readable but only an admin can create them). You will also see a list of all user ids and first/last names of those users that marked themselves as discoverable.</p><h3>Schema:</h3><p>The CloudKit database has two separate “environments”: development and production.</p><p>The schema for each record type is “just in time” during development, i.e. when you save a new type of record, it automatically creates a new schema for that record type, recording every field type, and when you save a record with a new field, it adds a field to the list.</p><p>However, once you’re ready to release a new version of your app, you need to save the schema to production and at that point it’s locked - a production version of the app can’t save records or fields that aren’t defined in the schema.</p><p>CloudKit also automatically creates indexes for each field in each record type - when you’re done with development, you can delete some indexes that you won’t need so they don’t waste space in the production database.</p><h2>Tips &amp; tricks</h2><ul><li>Please handle all errors :)</li><li>Remember that you can get partial errors (when atomic commits aren’t used), so some records might be saved while others aren’t</li><li>Retry any “server busy” errors (<a href="https://developer.apple.com/documentation/cloudkit/ckerrorretryafterkey"><code>CKErrorRetryAfterKey</code></a> tells you the amount of time you should wait)</li><li>Don’t waste space in your users’ iCloud in private databases, they may be paying real money for it</li><li>Limits in the public database are mostly to prevent abuse, they should be fine for most normal use (the limits scale with the number of users)</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc14/208</guid><title>Introducing CloudKit</title><description>CloudKit is the framework that powers iCloud on iOS and OS X, now available directly in your app. Learn how you can take advantage of its feature-rich API to store and query your own custom data and assets in iCloud.</description><link>https://www.wwdcnotes.com/notes/wwdc14/208</link><pubDate>Mon, 30 Nov 2020 20:30:31 +0700</pubDate><content:encoded><![CDATA[<p>CloudKit lets you write client applications without having to build and host a server part to handle things like database, accounts or push notifications.</p><p>Usage is free for the developer up to pretty big limits.</p><p>CloudKit gives you more direct access to iCloud servers. It’s the framework that’s used behind the scenes by iCloud Photo Library and iCloud Drive, uses the same iCloud account as iCloud documents or key-value storage.</p><p>There are two types of databases:</p><ul><li>public - accessible to everyone</li><li>private - private data of a specific user</li></ul><p>CloudKit is only a transport technology, it does not deal with local data persistence - you need to decide how you store the data that you load from the cloud.</p><p>To enable iCloud in your app, set it up in the Capabilities tab in Xcode just like with other iCloud APIs.</p><h2>Elements of the API</h2><h3>Containers (<a href="https://developer.apple.com/documentation/cloudkit/ckcontainer"><code>CKContainer</code></a>):</h3><ul><li>Each app’s data is kept in a separate container</li><li>Containers give you the safety that your app’s data will not be mixed with someone else’s app’s data</li><li>A container’s ID needs to be unique in the whole iCloud, so use reverse-domain style identifiers</li><li>By default each app has one container of its own, but apps can additionally use shared containers</li><li>Containers are managed by the developer through the WWDR portal</li></ul><h3>Databases (<a href="https://developer.apple.com/documentation/cloudkit/ckdatabase"><code>CKDatabase</code></a>):</h3><ul><li>A container contains one shared public database for everyone, and separate private databases for each user</li><li>An app running on the device has access to one public and one private database</li><li>The database is the initial entry point to CloudKit (from a container)</li></ul><pre><code><span class="type">CKDatabase</span> *publicDatabase = [[<span class="type">CKContainer</span> defaultContainer] publicCloudDatabase];
<span class="type">CKDatabase</span> *privateDatabase = [[<span class="type">CKContainer</span> defaultContainer] privateCloudDatabase];
</code></pre><p>Private database:</p><ul><li>requires a logged in iCloud account</li><li>data stored counts against the user’s iCloud account quota</li><li>default permission for data is user readable</li><li>the data your users store in your app’s CloudKit container is <em>not</em> accessible to you</li></ul><p>Public database:</p><ul><li>can be accessed anonymously even if the user isn’t logged in</li><li>data stored counts against the developer’s app quota</li><li>default permission for data is world readable</li><li>permissions can be customized using iCloud Dashboard Roles</li></ul><h3>Records (<a href="https://developer.apple.com/documentation/cloudkit/ckrecord"><code>CKRecord</code></a>):</h3><ul><li>A record is a single “object” in the CloudKit database, essentially a list of key-value pairs</li><li>Records have a Record Type (≈ table name)</li><li>There is no defined up front schema, you can just save a record of any type with any keys and the schema will be updated based on that<ul><li>note: this only works in development, the schema is fixed in production, see "Advanced CloudKit"</li><li>Records can have metadata: who created it &amp; modified it and when, also includes a “change tag” (version id) - for determining if two sides have the same version of a record</li><li>Record values can be: strings, numbers, dates, <a href="https://developer.apple.com/documentation/foundation/nsdata"><code>NSData</code></a>, <a href="https://developer.apple.com/documentation/corelocation/cllocation"><code>CLLocation</code></a>, <a href="https://developer.apple.com/documentation/cloudkit/ckrecord/reference"><code>CKReference</code></a>, <a href="https://developer.apple.com/documentation/cloudkit/ckasset"><code>CKAsset</code></a>, arrays of any of these</li></ul></li></ul><pre><code>- (instancetype)initWithRecordType:(<span class="type">NSString</span> *)recordType;
- (id)objectForKey:(<span class="type">NSString</span>*)key;
- (void)setObject:(id)object forKey:(<span class="type">NSString</span> *)key;
- (<span class="type">NSArray</span> *)allKeys;
</code></pre><p>Subscripts also work:</p><pre><code><span class="type">CKRecord</span> *party = [[<span class="type">CKRecord</span> alloc] initWithRecordType:<span class="string">@"Party"];</span>
party[<span class="string">@"start"] = [NSDate date];</span>
</code></pre><h3>Record zones (<a href="https://developer.apple.com/documentation/cloudkit/ckrecordzone/id"><code>CKRecordZoneID</code></a>):</h3><ul><li>Records are grouped within a database inside “zones”</li><li>The public database has one zone, the private database has one default zone, but it can have additional custom zones</li></ul><h3>Record identifiers (<a href="https://developer.apple.com/documentation/cloudkit/ckrecord/id"><code>CKRecordID</code></a>):</h3><ul><li>Record identifier is a tuple grouping: a “record name” + zone ID</li><li>You can provide a recordID when creating a record instance</li><li>If you don’t provide a recordID, a random UUID will be assigned</li></ul><h3>References (<a href="https://developer.apple.com/documentation/cloudkit/ckrecord/reference"><code>CKReference</code></a>):</h3><ul><li>A reference is a pointer from one record to another, as an id of the “parent” record contained in a child record’s field</li><li>References allow you to do cascade deletes, deleting child records when parent is deleted</li><li>You can create a reference from a CKRecord object, or from a CKRecordID if you know the ID but don’t have the object in memory</li></ul><h3>Assets (<a href="https://developer.apple.com/documentation/cloudkit/ckasset"><code>CKAsset</code></a>):</h3><ul><li>An asset is an unstructured piece of data, basically a binary file</li><li>Assets are downloaded and uploaded from/to files on disk, not from memory</li><li>An asset is always owned by a record, and is deleted when the record is deleted</li><li>Transport of assets is optimized so that only the minimal amount of data is transferred</li></ul><h2>APIs</h2><p>There are two different APIs for managing CloudKit data: “operational API” and “convenience API”. The operational API has every possible operation you might need, the convenience API is more convenient.</p><p>Start with the convenience API, use operational API for tweaking and overriding options if needed.</p><p>CloudKit APIs for saving/fetching data are asynchronous - there is no SDK-managed local data, everything needs to go over the network unless you manually cache it. So it’s absolutely necessary to properly handle error cases - every network call can fail and your app needs to be prepared for this.</p><h3>Convenience API:</h3><pre><code>[publicDatabase saveRecord:obj completionHandler: ^(…) { … }];
[publicDatabase retchRecordWithID:recordID completionHandler: ^(…) { … }];
</code></pre><h3>Queries:</h3><p>For any large database, or the shared public database, you shouldn’t try to keep a copy of the whole database on disk and sync all of it, but instead fetch what you need on demand - for this you can use queries.</p><p>A query (<a href="https://developer.apple.com/documentation/cloudkit/ckquery"><code>CKQuery</code></a>) allows you to fetch a list of records matching some conditions. Query can specify a <a href="https://developer.apple.com/documentation/cloudkit/ckrecord/recordtype"><code>RecordType</code></a>, <a href="https://developer.apple.com/documentation/foundation/nspredicate"><code>NSPredicate</code></a> and optionally <a href="https://developer.apple.com/documentation/foundation/nssortdescriptor">NSSortDescriptors</a>.</p><p>A subset of the predicate language is supported, if something is not supported you’ll get an exception. Predicates such as “equal”, “greater than”, “distance to location”, string tokenizing, and OR / AND are supported.</p><pre><code>[publicDatabase performQuery:query inZoneWithID:<span class="keyword">nil</span> completionHandler: ^(…) { … }];
</code></pre><h3>Subscriptions:</h3><p>If you repeatedly run the same query, polling for the same data, you can ask the server to run the query for you and notify you immediately when a new record is added. You do that by creating a subscription (<a href="https://developer.apple.com/documentation/cloudkit/cksubscription"><code>CKSubscription</code></a>).</p><p>A subscription includes: <a href="https://developer.apple.com/documentation/cloudkit/ckrecord/recordtype"><code>RecordType</code></a>, <a href="https://developer.apple.com/documentation/foundation/nspredicate"><code>NSPredicate</code></a> and push configuration (<a href="https://developer.apple.com/documentation/cloudkit/cksubscription/notificationinfo"><code>CKNotificationInfo</code></a>). Your app is notified of changes through a push notification with some additional data.</p><pre><code><span class="type">CKSubscription</span> *subscription =
  [[<span class="type">CKSubscription</span> alloc] initWithRecordType:<span class="string">@"Party"</span>
                                   predicate:predicate
                                     options:<span class="type">CKSubscriptionOptionsFiresOnRecordCreation</span>];

[publicDatabase saveSubscription:subscription completionHandler: ^(…) { … }];
</code></pre><p>Pushes are handled through the usual push API:</p><pre><code>- (void)application:(<span class="type">UIApplication</span> *)application didReceiveRemoteNotification:(<span class="type">NSDictionary</span> *)<span class="call">userInfo</span> {
  …
}
</code></pre><p>Build a <a href="https://developer.apple.com/documentation/cloudkit/cknotification"><code>CKNotification</code></a> object from the user info:</p><pre><code><span class="type">CKNotification</span> *notification = [<span class="type">CKNotification</span> notificationFromRemoteNotificationDictionary:userInfo];

<span class="type">NSString</span> *alertBody = notification.<span class="property">alertBody</span>;

<span class="keyword">if</span> (notification.<span class="property">notificationType</span> == <span class="type">CKNotificationTypeQuery</span>) {
    <span class="type">CKQueryNotification</span> *queryNotification = notification;
    <span class="type">CKRecordID</span> *recordID = [queryNotification recordID];
}
</code></pre><h3>Handling user accounts:</h3><p>Your application does not get direct access to any user identifiers like iCloud email address. Instead, in each container each user is represented as a unique ID within that container that doesn’t change unless the user switches to another account. The same user will have a different ID in a different CloudKit container (the ID is an instance of <a href="https://developer.apple.com/documentation/cloudkit/ckrecord/id"><code>CKRecordID</code></a>).</p><pre><code>[[<span class="type">CKContainer</span> defaultContainer] fetchUserRecordIDWithCompletionHandler: ^(…) { … }];
</code></pre><p>Each user has a user record representing them (which is almost like any other record) with their user id and record type = <a href="https://developer.apple.com/documentation/cloudkit/ckrecordtypeuserrecord"><code>CKRecordTypeUserRecord</code></a> - one in the private database, and another with the same ID in the public database.</p><p>You can set and read any key-value data on this record like on other records; however, these records aren’t created by you and can’t be queried to get a list of users.</p><pre><code>[publicDatabase fetchRecordWithID:userRecordID completionHandler: ^(…) { … }];
</code></pre><h3>User discovery:</h3><p>You can ask the user to allow you to make them discoverable by other users (they get a request popup). If they agree, they can be looked up by user ID, specific email, or by fetching a list of all users matching your user’s contacts from the address book (this doesn’t give your app access to the address book itself, just a list of matching users). You get back record IDs, first &amp; last names of users, but no emails.</p><pre><code>[defaultContainer discoverAllContactUserInfosWithCompletionHandler: ^(…) { … }];
</code></pre><p>This returns an array of <code>CKDiscoveredUserInfo</code> objects with properties <code>userRecordID</code>, <code>firstName</code>, <code>lastName</code>.</p><p>[note: this API has been replaced since then with a new one that returns <a href="https://developer.apple.com/documentation/cloudkit/ckuseridentity"><code>CKUserIdentity</code></a> objects]</p><h2>When to use CloudKit vs. other APIs?</h2><p>CloudKit doesn’t replace or deprecate any existing iCloud APIs [note: no longer true as of 2016 :)], it’s just an additional tool.</p><p>Key-value store:</p><ul><li>asynchronous, small amounts of data</li><li>mostly for application preferences</li></ul><p>iCloud Drive:</p><ul><li>works on files and folders</li><li>on OS X it makes a full offline cache of the drive</li><li>good for document-centric apps</li></ul><p>iCloud Core Data:</p><ul><li>built on top of iCloud Drive</li><li>good for keeping private, structured data (custom databases) in sync</li><li>note: the whole data set is downloaded to each device</li></ul><p>CloudKit:</p><ul><li>good for sharing public data between users, both structured data and large files</li><li>good for large data sets where not every device needs to have a copy of the whole database</li><li>for attaching some data to the user’s identity and sharing info between users that know each other</li><li>more low-level, your app is in control of when any information is downloaded or uploaded to the iCloud servers, and has responsibility for handling sync</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc12/209</guid><title>iCloud Storage Overview</title><description>iCloud Storage enables apps to store documents and settings across iOS and OS X. Discover how iCloud Storage works, learn about the latest advancements in development and debugging for iCloud and the Key-Value Store, and learn how your app can use iCloud to store documents and settings today.</description><link>https://www.wwdcnotes.com/notes/wwdc12/209</link><pubDate>Mon, 30 Nov 2020 04:00:34 +0700</pubDate><content:encoded><![CDATA[<p>iCloud Storage APIs allow you to store your app’s data in iCloud. System services sync your data automatically even when your app isn’t running.</p><p>3 different types of storage:</p><ul><li>key-value storage - simple storage for things like preferences, game state (“<em>it’s so simple, we actually don’t have another session talking about it</em>")</li><li>document storage - a filesystem in the cloud scoped for your application, where you can store any kinds of files and folders, synced between devices; ideal for productivity apps like iWork</li><li>Core Data storage - an extension for Core Data that lets you store Core Data databases in the cloud [note: deprecated in 2016]</li></ul><p>What iCloud handles for you:</p><ul><li>account setup - users don’t need to create a new account for your service, they already have an iCloud account</li><li>APIs for your apps integrated into the OS X/iOS SDKs</li><li>server code you don’t have to write, for things like load balancing, replication, backup and recovery</li><li>the personnel handling the servers, support etc.</li></ul><blockquote><p>“If you happen to know some friends who like writing server code that scales to hundreds of millions of users, send them our way - we’re hiring” ;)</p></blockquote><h2>How it works</h2><h3>Key-value storage:</h3><ul><li>Accessed through <a href="https://developer.apple.com/documentation/foundation/nsubiquitouskeyvaluestore"><code>NSUbiquitousKeyValueStore</code></a></li><li>Lets you put simple plist-type values into the cloud</li><li>It talks to a key-value service running on the device which talks to iCloud on your behalf</li></ul><h3>Document storage:</h3><ul><li>Use <a href="https://developer.apple.com/documentation/uikit/uidocument"><code>UIDocument</code></a> (iOS) / <a href="https://developer.apple.com/documentation/appkit/nsdocument"><code>NSDocument</code></a> (OS X) / <a href="https://developer.apple.com/documentation/uikit/uimanageddocument"><code>UIManagedDocument</code></a> (Core Data)</li><li>You can also use lower level file storage APIs like NSFileCoordination, <a href="https://developer.apple.com/documentation/foundation/nsfilepresenter"><code>NSFilePresenter</code></a>, <a href="https://developer.apple.com/documentation/foundation/nsmetadataquery"><code>NSMetadataQuery</code></a></li></ul><p>All these APIs (also the Core Data iCloud API) talk to OS’s document service which talks to the iCloud for you. You never actually interact with the iCloud servers yourself, you just use these APIs in the SDK and system services.</p><h2>How to enable iCloud in your project</h2><ul><li>your app needs to be distributed through the App Store [note: no longer true for Mac apps]</li><li>enable the relevant entitlement: <code>com.apple.developer.ubiquity-kvstore-identifier</code> and/or <code>com.apple.developer.ubiquity-container-identifiers</code></li></ul><h2>Working with Key Value Storage</h2><p><a href="https://developer.apple.com/documentation/foundation/nsubiquitouskeyvaluestore"><code>NSUbiquitousKeyValueStore</code></a>:</p><ul><li>lets you store simple plist values - strings, numbers, booleans, dictionaries and arrays of those</li><li>similar API to <a href="https://developer.apple.com/documentation/foundation/userdefaults"><code>UserDefaults</code></a></li><li>simple conflict resolution: if two devices independently change or add a value for a given key, the latest change wins</li><li>works even if iCloud isn’t configured - in this case it just acts as local user defaults that don’t sync</li></ul><p>Improvements from last year’s initial release:</p><ul><li>increased capacity - now up to 1024 keys, up to 1 MB per application (not part of the total user quota); it’s fine to have just one key of 1 MB</li><li>improved responsiveness (allows around 15 requests every 90 seconds)</li></ul><p>How to set up:</p><pre><code><span class="comment">// get a reference to the store</span>
<span class="type">NSUbiquitousKeyValueStore</span> *store = [<span class="type">NSUbiquitousKeyValueStore</span> defaultStore];

<span class="comment">// observe changes</span>
<span class="type">NSNotificationCenter</span> *center = [<span class="type">NSNotificationCenter</span> defaultCenter];
[center addObserver:<span class="keyword">self</span>
           selector:<span class="keyword">@selector</span>(kvStoreDidChange:)
               name:<span class="type">NSUbiquitousKeyValueStoreDidChangeExternallyNotification</span>
             object:<span class="keyword">nil</span>];

<span class="comment">// ask for any changes since the last launch</span>
[store synchronize];
</code></pre><p>Making changes:</p><pre><code>[store setObject:someObject forKey:<span class="keyword">@</span>“someKey”];
[store setBool:<span class="type">YES</span> forKey:<span class="keyword">@</span>“someOtherKey”];

[store synchronize];
</code></pre><p>It’s recommended to also store another copy of the same data locally, so that you can do conflict resolution manually in case if just keeping the latest change isn’t always the right strategy for your app.</p><p>Handling notifications about a change:</p><pre><code>- (void)kvStoreDidChange:(<span class="type">NSNotification</span> *)<span class="call">notification</span> {
    <span class="type">NSDictionary</span> *userInfo = [notification userInfo];

    <span class="comment">// get change reason</span>
    int reason = [userInfo objectForKey:<span class="type">NSUbiquitousKeyValueStoreChangeReasonKey</span>];
    <span class="type">NSArray</span> *changedKeys = [userInfo objectForKey:<span class="type">NSUbiquitousKeyValueStoreChangedKeysKey</span>];

    <span class="comment">// … store values locally, do conflict resolution etc.</span>
}
</code></pre><h2>Working with document storage</h2><p>Apart from your app’s container, each app has a separate “ubiquity container” (or iCloud container). The app can put any files inside that container, and whatever is put there is synced with other devices via iCloud, kind of like Dropbox.</p><p>When you put a file in the ubiquity container, the file is broken into chunks and the chunks that are new or modified are uploaded to iCloud - so if you only change a few bytes of the file, most of it doesn’t need to be uploaded again.</p><p>Metadata about the file is uploaded first - info about the file name, type, size etc. So every device knows about each file that’s uploaded, but it doesn’t necessarily have to download each file - the decision is made independently on the device depending on the platform and settings: OS X usually downloads all files if it has space, iOS only downloads files on demand. Once a file is downloaded to the device, all later changes are also automatically synced.</p><p>Local peer to peer communication is used if possible - e.g. if you have a file on the Mac, your iPhone will copy it from the Mac instead of the iCloud network.</p><p>Automatic conflict resolution - if a file is edited on two devices in parallel, the system picks a winner automatically, but your application gets access to both versions and can override it if needed.</p><p>URL publishing: you can make the current version of the document public and available through a URL which you can share with others (if it’s changed later in the iCloud, the URL still downloads that previous version). URLs are not permanent, they expire after some time.</p><h3>Detecting an iCloud account:</h3><p>Unlike key-value storage, using this API requires the user to have an iCloud account. You can check for an “Ubiquity Identity Token” to see if they have an account configured.</p><p>The token is anonymous so it doesn’t tell you anything about the user, but it will change if the user switches to another account (you also get a notification then). The token is also unique to your app and to this specific device, so the same app will get a different token from that user on another device.</p><pre><code>id token = [[<span class="type">NSFileManager</span> defaultManager] ubiquityIdentityToken];
<span class="keyword">if</span> (token) {
    <span class="comment">// cache the token
    // the next time the app launches, check if it has changed</span>
}

<span class="comment">// register for the identity changed notification</span>
<span class="type">NSNotificationCenter</span> *center = [<span class="type">NSNotificationCenter</span> defaultCenter];
[center addObserver:<span class="keyword">self</span>
           selector:<span class="keyword">@selector</span>(handleUbiquityIdentityChanged:)
               name:<span class="type">NSUbiquityIdentityDidChangeNotification</span>
             object:<span class="keyword">nil</span>];
</code></pre><p>When the account changes, clear any local caches specific to this account and refresh the UI.</p><p>To access the ubiquity container, you ask for the container URL - note that the container will be created on demand the first time you ask for it; this should ideally not be called on the main thread.</p><pre><code><span class="call">dispatch_async</span>(<span class="call">dispatch_get_global_queue</span>(<span class="type">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>), ^{
    containerURL = [fileManager <span class="type">URLForUbiquityContainerIdentifier</span>:<span class="keyword">nil</span>];
});
</code></pre><p>Types of documents you can store in the document storage:</p><ul><li>normal files, also symlinks</li><li>directories of files</li><li>packages - bundles of files that act as a single document</li><li>Core Data stores</li></ul><p>File extended attributes are also synced.</p><p>Watch out for filesystem case sensitivity issues - users running on a Mac might have a case-sensitive filesystem.</p><p>For packages, iCloud updates only the files from a package that have been changed, but it handles updates to the whole package atomically, so you will not get a package in an inconsistent state.</p><h2>Core Data [deprecated]</h2><p>Useful for so-called “shoebox style applications”, like iPhoto or iTunes, which work with a single database in app’s own format.</p><p>The Core Data store remains local and only change logs are uploaded to iCloud. It's not recommended to use binary and XML stores, because in those cases every change modifies the whole file (only use those for small data sets that don’t change often) - use SQLite stores for iCloud sync instead.</p><p><a href="https://developer.apple.com/documentation/uikit/uimanageddocument"><code>UIManagedDocument</code></a> - a subclass of <a href="https://developer.apple.com/documentation/uikit/uidocument"><code>UIDocument</code></a> for managing Core Data stores that supports syncing them with iCloud. Note: <a href="https://developer.apple.com/documentation/appkit/nspersistentdocument"><code>NSPersistentDocument</code></a>, the AppKit equivalent, does not support iCloud.</p><h2>Designing your document format for iCloud</h2><ul><li>Design with network efficiency in mind - don’t write a lot of changes very often</li><li>Keep in mind any possible differences between platforms</li><li>Plan for future app upgrades - include version number in the format and keep compatibility if possible</li><li>Beware of sync loops - when one instance of the app receives a change, merges it and writes back the result, and the other side does the same and triggers a change in the first copy again (“And you have two versions of the app playing ping-pong with the user’s iCloud account”)</li><li>Avoid making rapid changes to the file, e.g. updating some position tag while the user is scrolling the document</li><li>Don’t put the last open date into the document itself, so that opening it doesn’t count as making a change</li><li>Use iCloud for user data only: don’t put any caches, temporary files or auto-generated content there</li><li>Think about privacy when allowing the user to publish a document: don’t include any sensitive info or things they might not be aware they’re publishing (e.g. undo history) in the publicly accessible view</li></ul><h2>APIs</h2><ul><li><a href="https://developer.apple.com/documentation/foundation/filemanager"><code>NSFileManager</code></a></li><li><a href="https://developer.apple.com/documentation/foundation/nsfilecoordinator"><code>NSFileCoordinator</code></a> &amp; <a href="https://developer.apple.com/documentation/foundation/nsfilepresenter"><code>NSFilePresenter</code></a></li><li><a href="https://developer.apple.com/documentation/foundation/nsmetadataquery"><code>NSMetadataQuery</code></a> - use a live metadata query to be notified of new files and changes before the file contents are downloaded</li><li><a href="https://developer.apple.com/documentation/appkit/nsdocument"><code>NSDocument</code></a> &amp; <a href="https://developer.apple.com/documentation/uikit/uidocument"><code>UIDocument</code></a></li><li><a href="https://developer.apple.com/documentation/uikit/uimanageddocument"><code>UIManagedDocument</code></a></li></ul><p><a href="https://developer.apple.com/documentation/appkit/nsdocument"><code>NSDocument</code></a>/<a href="https://developer.apple.com/documentation/uikit/uidocument"><code>UIDocument</code></a> handle most of the integration with iCloud for you:</p><ul><li>using the ubiquity container</li><li>coordinating with the OS</li><li>tracking files and their versions</li><li>resolving conflicts</li></ul><h3>Tips:</h3><ul><li>subclass native document types</li><li>use the default auto-save behavior</li><li>if the app provides a prepopulated Core Data store on first launch, use a migration instead of copying a packaged store file</li><li>track documents using <a href="https://developer.apple.com/documentation/foundation/nsmetadataquery"><code>NSMetadataQuery</code></a></li><li>if it makes sense for your app, manually control conflict resolution (<a href="https://developer.apple.com/documentation/uikit/uidocument/state/1619972-inconflict"><code>UIDocumentStateInConflict</code></a>); avoid user involvement if possible</li></ul><h3>Tips for debugging:</h3><ul><li>test with multiple devices</li><li>monitor network traffic</li><li>use Airplane Mode to create conflicts artificially</li><li>there will be a configuration profile available that makes the document service log additional messages</li><li><a href="https://developer.icloud.com">developer.icloud.com</a> - a web tool that shows you all iCloud storage on your account from various apps [note: not available anymore, replaced with CloudKit dashboard, but it only shows CloudKit data]</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10220</guid><title>Handle interruptions and alerts in UI tests</title><description>Learn how to anticipate potential interruptions to your app’s interface and build smart tests to identify them. UI interruptions often appear indeterminately, typically during onboarding or first launch, which can make them hard to track down. Learn how to understand interruptions, write stronger tests with UI interruption handlers, and manage expected alerts.

To learn more about the latest improvements for testing your app in Xcode, check out “XCTSkip your tests”, “Get your test results faster”, and “Triage test failures with XCTIssue”.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10220</link><pubDate>Mon, 23 Nov 2020 11:22:30 +0700</pubDate><content:encoded><![CDATA[<h2>What an UI interruption?</h2><p>An element that:</p><ul><li>appears unexpectedly</li><li>blocks access to another element (which an UI test is trying to interact with)</li></ul><p>Common interruptions:</p><ul><li>banner notifications</li><li>alerts/dialogs</li></ul><h2>What are UI interruptions handlers?</h2><ul><li>closures</li><li>XCTest maintains a stack of handlers</li><li>XCTest uses LIFO: the last handler registered is the first to be invoked</li><li>the stack resets between tests</li></ul><p>If an interruption handler successfully handled an interruption, it returns <code>true</code> and the UI test continues. If it was not able to handle the interruption, it returns <code>false</code> and the next handler is invoked.</p><p>iOS has built-in interruption handlers for alerts: - taps cancel button if any, falls back to the default button otherwise</p><p>(New in Xcode 12) iOS has built-in interruption handlers for banners: - swipe to dismiss persistent banners - wait for temporary banners to auto-dismiss</p><p>macOS has built-in interruption handlers for:</p><ul><li>permission dialogs: chooses <code>Don't Allow</code></li><li>Bluetooth Setup Assistant: closes window</li></ul><h2>When UI interruptions handlers are not triggered</h2><p>Not all alerts will trigger UI interruptions handlers:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10220/alertChart.png"/><h2>How to interact with expected alerts</h2><p>Use <a href="https://developer.apple.com/documentation/xctest/xctestcase/1496273-adduiinterruptionmonitor"><code>addUIInterruptionMonitor(withDescription:handler:)</code></a> to add a new interruption monitor. The system will automatically invoke the interruption handler stack when the UI test tries to interact with something that is blocked by an interruption.</p><p>The following example tries to tap the <code>Retry</code> button on an alert (if interrupted by it):</p><pre><code><span class="call">addUIInterruptionMonitor</span>(withDescription: <span class="string">"Handle recipe update failures"</span>) { element -&gt; <span class="type">Bool</span> <span class="keyword">in
    let</span> retryButton = element.<span class="property">buttons</span>[<span class="string">"Retry"</span>].firstMatch
    <span class="keyword">if</span> element.<span class="property">elementType</span> == .<span class="dotAccess">alert</span> &amp;&amp; retryButton.<span class="property">exists</span> {
        retryButton.<span class="call">tap</span>()
        <span class="keyword">return true</span>
    } <span class="keyword">else</span> {
        <span class="keyword">return false</span>
    }
}
</code></pre><h2>Protected resources</h2><p>From Xcode 11.4, iOS and tvOS 13.4, and macOS 10.15.4, we have a new <a href="https://developer.apple.com/documentation/xctest/xcuiapplication/3526066-resetauthorizationstatus"><code>resetAuthorizationStatus(for:)</code></a> API to reset the authorization status for a protected resource (it will be like it was never asked before).</p><p>Note that the app will be killed when this api is called, therefore a way to use this API is the following:</p><pre><code><span class="keyword">func</span> testAddingPhotosFirstTime() <span class="keyword">throws</span> {
    <span class="keyword">let</span> app = <span class="type">XCUIApplication</span>()
    app.<span class="call">resetAuthorizationStatus</span>(for: .<span class="dotAccess">photos</span>)

    app.<span class="call">launch</span>()

    <span class="comment">// Test code…</span>
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc19/210</guid><title>What’s New in AppKit for macOS</title><description>Learn about the latest APIs in AppKit and associated frameworks. Get an overview of the enhancements coming in macOS Catalina to help you save time, take advantage of the latest hardware, and add polish to your application.</description><link>https://www.wwdcnotes.com/notes/wwdc19/210</link><pubDate>Wed, 18 Nov 2020 21:54:36 +0700</pubDate><content:encoded><![CDATA[<h2>New frameworks</h2><p>AppKit is no longer the only framework to build Mac apps with - you also have an option now to use UIKit via Catalyst and the new SwiftUI framework (although you will probably still need to use at least a little bit of AppKit in both cases).</p><h2>Colors</h2><ul><li>new system colors: <a href="https://developer.apple.com/documentation/appkit/nscolor/3174921-systemteal"><code>NSColor.systemTeal</code></a> and <a href="https://developer.apple.com/documentation/appkit/nscolor/3174920-systemindigo"><code>systemIndigo</code></a> (dynamic colors, specific color values depend on light/dark appearance)</li><li><a href="https://developer.apple.com/documentation/appkit/nscolor"><code>NSColor</code></a> uses tagged pointers - this means that color data is now stored in the pointer itself and allocating NSColor objects becomes very cheap</li><li><a href="https://developer.apple.com/documentation/appkit/nscolorsampler"><code>NSColorSampler</code></a> - a magnifier tool for picking a color from somewhere on the screen</li><li>new <a href="https://developer.apple.com/documentation/appkit/nscolor"><code>NSColor</code></a> initializer that lets you return different colors based on appearance:</li></ul><pre><code><span class="keyword">let</span> color = <span class="type">NSColor</span>(name: <span class="string">"userWidgetColor"</span>) { appearance <span class="keyword">in
  switch</span> appearance.<span class="call">bestMatch</span>(from: [.<span class="dotAccess">aqua</span>, .<span class="dotAccess">darkAqua</span>]) {
  <span class="keyword">case</span> .<span class="dotAccess">darkAqua</span>:
    <span class="keyword">return</span> darkUserWidgetColor
  <span class="keyword">case</span> .<span class="dotAccess">aqua</span>, .<span class="dotAccess">default</span>:
    <span class="keyword">return</span> lightUserWidgetColor
  }
}
</code></pre><h2>Screens</h2><ul><li><a href="https://developer.apple.com/documentation/appkit/nsscreen/3228043-localizedname"><code>NSScreen.localizedName</code></a> now returns e.g. “Thunderbolt Display”</li></ul><h3>Extended dynamic range:</h3><p>Computer screens are very bright these days and most of the time aren't used at full brightness. This means that at lower brightness levels we can use the monitor's capability to show brighter pixels than what 100% white means at that brightness level, and provide an extended dynamic range, i.e. color values of more than 1.0.</p><p>This feature has been available in macOS since 10.11:</p><ul><li><a href="https://developer.apple.com/documentation/quartzcore/cametallayer/1478161-wantsextendeddynamicrangecontent"><code>CAMetalLayer.wantsExtendedDynamicRangeContent</code></a> - enables dynamic range in this layer<ul><li><a href="https://developer.apple.com/documentation/appkit/nsscreen/1388362-maximumextendeddynamicrangecolor"><code>NSScreen.maximumExtendedDynamicRangeColorComponentValue</code></a> - tells you the maximum color component value (e.g. 1.3), if some content on the screen is using EDR</li></ul></li></ul><p>New APIs in 10.15:</p><ul><li><a href="https://developer.apple.com/documentation/appkit/nsscreen/3180381-maximumpotentialextendeddynamicr"><code>NSScreen.maximumPotentialExtendedDynamicRangeColorComponentValue</code></a> - tells you the maximum component value even if it’s not rendering in EDR mode at the moment, so that you can make some decisions in advance before you enable it<ul><li><a href="https://developer.apple.com/documentation/appkit/nsscreen/3180382-maximumreferenceextendeddynamicr"><code>NSScreen.maximumReferenceExtendedDynamicRangeColorComponentValue</code></a> - maximum usable value on reference screens like the new Pro Display XDR</li></ul></li></ul><h3>Finding the current screen in Metal:</h3><p>Previously, in order to find the <a href="https://developer.apple.com/documentation/metal/mtldevice"><code>MTLDevice</code></a> for the current screen in Metal you had to do something like this:</p><pre><code><span class="keyword">let</span> preferredDevice = <span class="type">CGDirectDisplayCopyCurrentMetalDevice</span>(
    <span class="keyword">self</span>.<span class="property">window</span>?.<span class="property">screen</span>?.<span class="property">deviceDescription</span>[<span class="string">"NSScreenNumber"</span>]
)
</code></pre><p>In 10.15, there's a new property <a href="https://developer.apple.com/documentation/quartzcore/cametallayer/3175021-preferreddevice"><code>CAMetalLayer.preferredDevice</code></a> that returns the MTLDevice for the current screen</p><ul><li>also <a href="https://developer.apple.com/documentation/metalkit/mtkview/3181987-preferreddevice"><code>MTKView.preferredDevice</code></a></li></ul><h2>Text &amp; Fonts</h2><p><a href="https://developer.apple.com/documentation/appkit/nstextview/3237223-usesadaptivecolormappingfordarka"><code>NSTextView.usesAdaptiveColorMappingForDarkAppearance</code></a></p><ul><li>automatically updates colors for light/dark appearance</li><li>enable this if it's more important for rich text to be readable regardless of appearance than to show the document in an original unchanged form</li></ul><p>Almost all of the <code>NSText*</code> related classes support secure coding now.</p><h3>Spell checking:</h3><ul><li><a href="https://developer.apple.com/documentation/appkit/nsspellchecker"><code>NSSpellChecker</code></a> - old API for managing spell checking (since OS X 10.0!)</li><li><a href="https://developer.apple.com/documentation/appkit/nstextcheckingcontroller"><code>NSTextCheckingController</code></a> - new API built as a successor of NSSpellChecker<ul><li>used in UIKit, WebKit and AppKit</li><li>you can add support for it to any view by implementing the <a href="https://developer.apple.com/documentation/appkit/nstextcheckingclient"><code>NSTextCheckingClient</code></a> protocol</li><li>also does grammar checks, data detection, autocorrection</li></ul></li></ul><h3>Font descriptors:</h3><p><a href="https://developer.apple.com/documentation/appkit/nsfontdescriptor/3152380-withdesign"><code>NSFontDescriptor.withDesign(.monospaced / .rounded / .serif)</code></a></p><ul><li>lets you choose a different variant of the same font, if available</li></ul><h3>Scaling fonts between macOS &amp; iOS:</h3><p>If your app opens rich text documents created on another platform, you will notice that fonts at the same point size will look different, because Mac and iOS devices use very different screen densities. There are now new <a href="https://developer.apple.com/documentation/foundation/nsattributedstring"><code>NSAttributedString</code></a> APIs that let you scale fonts in documents coming from the other platform to a more appropriate size:</p><ul><li><a href="https://developer.apple.com/documentation/foundation/nsattributedstring/documentattributekey/3294212-sourcetextscaling"><code>NSAttributedString.DocumentAttributeKey.sourceTextScaling</code></a> and <a href="https://developer.apple.com/documentation/foundation/nsattributedstring/documentattributekey/3294215-textscaling"><code>textScaling</code></a></li><li><a href="https://developer.apple.com/documentation/foundation/nsattributedstring/documentreadingoptionkey/3294213-sourcetextscaling"><code>NSAttributedString.DocumentReadingOptionKey.sourceTextScaling</code></a> and <a href="https://developer.apple.com/documentation/foundation/nsattributedstring/documentreadingoptionkey/3294214-targettextscaling"><code>targetTextScaling</code></a></li></ul><h3>Text hyphenation:</h3><p>Previously, you could configure hyphenation for each paragraph using <a href="https://developer.apple.com/documentation/uikit/nsparagraphstyle"><code>NSParagraphStyle</code></a>. Now, this can be enabled for the whole container using <a href="https://developer.apple.com/documentation/uikit/nslayoutmanager/3180380-usesdefaulthyphenation"><code>NSLayoutManager.usesDefaultHyphenation</code></a>.</p><h2>Toolbars</h2><p><a href="https://developer.apple.com/documentation/appkit/nstoolbaritem/3237224-isbordered"><code>NSToolbarItem.isBordered</code></a> - an easier way to make standard toolbar buttons:</p><ul><li>previously, you had to manually create an <a href="https://developer.apple.com/documentation/appkit/nsbutton"><code>NSButton</code></a>, configure it appropriately and add it as a custom view to the toolbar item</li><li>now, you can just create an <code>NSToolbarItem</code> with an image and set <code>isBordered = true</code></li><li>needs to be done in code though, no setting on the storyboard yet</li><li>this also allows you to make use of NSToolbarItem's built-in functionality like automatic enabling/disabling</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nstoolbaritem/3237225-title"><code>NSToolbarItem.title</code></a>:</p><ul><li>allows you to make toolbar items that are buttons with a text label instead of an icon</li><li>note: this is different than the item label, which appears below the button</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nstoolbaritemgroup"><code>NSToolbarItemGroup</code></a>:</p><ul><li>new convenience initializers that create a group with given item labels/icons in one line</li><li>can display items as a segmented control which collapses into a popup or pulldown menu when there isn't enough space (use the new initializers for this)</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nsmenutoolbaritem"><code>NSMenuToolbarItem</code></a>:</p><ul><li>a button toolbar item that shows a pulldown menu</li><li>the menu can be any <a href="https://developer.apple.com/documentation/appkit/nsmenu"><code>NSMenu</code></a>, with separators, nested menus etc.</li></ul><h2>Touch Bar</h2><p><a href="https://developer.apple.com/documentation/appkit/nstouchbar/3228044-isautomaticcustomizetouchbarmenu"><code>NSTouchBar.isAutomaticCustomizeTouchBarMenuItemEnabled</code></a></p><ul><li>lets you enable/disable the "Customize Touch Bar…" entry in the Edit menu</li><li><a href="https://developer.apple.com/documentation/appkit/nsapplication"><code>NSApplication</code></a> already has such property, but this is useful if you want to avoid referencing NSApplication in the Touch Bar related code, or if you don't have access to it (e.g. Catalyst apps don't)</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nssteppertouchbaritem"><code>NSStepperTouchBarItem</code></a>:</p><ul><li>a new item type for selecing an item from a list, with left/right arrows</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nsslidertouchbaritem"><code>NSSliderTouchBarItem</code></a>:</p><ul><li>adds <a href="https://developer.apple.com/documentation/appkit/nsslidertouchbaritem/3237222-minimumsliderwidth"><code>minimumSliderWidth</code></a>, <a href="https://developer.apple.com/documentation/appkit/nsslidertouchbaritem/3237221-maximumsliderwidth"><code>maximumSliderWidth</code></a> properties for defining min/max width</li><li>previously you could achieve this using AutoLayout constraints, but it was less convenient</li></ul><h2>Other controls</h2><p><a href="https://developer.apple.com/documentation/appkit/nsswitch"><code>NSSwitch</code></a>:</p><ul><li>a new NSControl that looks like <a href="https://developer.apple.com/documentation/uikit/uiswitch"><code>UISwitch</code></a> on iOS</li><li>not a replacement for checkbox</li><li>avoid using it for small things and in large numbers, just one for some general mode switch, a "master toggle", like the Time Machine on/off switch</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nscollectionview"><code>NSCollectionView</code></a>:</p><ul><li>added compositional layout and diffable data source, same as on iOS</li></ul><h2>Storyboards</h2><p>Storyboards now let you use custom VC initializers for injecting dependencies:</p><pre><code><span class="keyword">@IBSegueAction func</span> showFoo(<span class="keyword">_</span> coder: <span class="type">NSCoder</span>) -&gt; <span class="type">NSViewController</span> {
    <span class="keyword">return</span> <span class="type">MyViewController</span>(params...)
}
</code></pre><p>This lets you use initializers in view controller classes that require passing any data the view controller needs, while still using storyboard segues to connect view controllers on the storyboard.</p><h2>AutoLayout</h2><p>Controls like text labels, buttons with titles etc. calculate their intrinsic content size that lets the AutoLayout system scale the whole window layout depending on the text contents of those controls. However, in some scenarios (e.g. inside an <a href="https://developer.apple.com/documentation/appkit/nsgridview"><code>NSGridView</code></a>) you want all controls to have their size set externally, and the control's intrinsic size is ignored. The calculations to determine the intrinsic size are still performed though in such case.</p><p>Now you can manually disable them (as an optimization) by setting these to false if you know the result will not be used in the layout calculations:</p><ul><li><a href="https://developer.apple.com/documentation/appkit/nsview/3353053-ishorizontalcontentsizeconstrain"><code>NSView.isHorizontalContentSizeConstraintActive</code></a></li><li><a href="https://developer.apple.com/documentation/appkit/nsview/3353054-isverticalcontentsizeconstrainta"><code>NSView.isVerticalContentSizeConstraintActive</code></a></li></ul><h2>NSResponder</h2><p>There was a possible source of bugs before if you captured an instance of a UI-related class in a block in such a way that it could be later deallocated on a background thread:</p><pre><code><span class="keyword">let</span> label = <span class="type">NSTextField</span>(labelWithString: <span class="string">"..."</span>)

<span class="call">dispatch_async</span>(<span class="call">dispatch_get_global_queue</span>(<span class="number">0</span>, <span class="number">0</span>)) {
    <span class="comment">// ...</span>

    <span class="call">dispatch_async</span>(<span class="call">dispatch_get_main_queue</span>()) {
        label.<span class="property">value</span> = <span class="string">"done"</span>
    }
}
</code></pre><p>If the outer block is released after the inner block (which you have no control over), then at that point the label object is deallocated on the background thread, and this could cause various hard to debug issues. This is now solved in 10.15 - the SDK guarantees that UI objects will be deallocated on the main thread in such scenario.</p><h2>Privacy &amp; security</h2><ul><li>Recording the screen will now require asking the user for permission<ul><li>this doesn't apply to the new NSColorSampler control mentioned earlier, which runs out of process</li><li>Open and save panels are also now always out-of-process, even for non-sandboxed apps</li><li>you may run into problems if you were somehow subclassing or customizing them in a non-standard way</li></ul></li></ul><h2>NSWorkspace</h2><p>Added new asynchronous versions of existing methods for opening one or more URLs or applications. You can configure some aspects of opening using <a href="https://developer.apple.com/documentation/appkit/nsworkspace/openconfiguration"><code>NSWorkspace.OpenConfiguration</code></a>, e.g.:</p><ul><li>if the user can control the process of opening a URL/app</li><li>if the opened app or document is added to the "Recents" menu</li><li>if the launched app is hidden on launch</li></ul><h2>iPad &amp; Sidecar</h2><p>With the Sidecar feature, an iPad can function as an additional screen for the Mac, and also as a drawing tablet.</p><p>Tablet drawing events are sent as normal mouse events, with <a href="https://developer.apple.com/documentation/appkit/nsevent/eventsubtype/1642479-tabletpoint"><code>.tabletPoint</code></a> subtype. They also provide pressure data (although unlike on iOS, you can't register to get retroactive updates for previous pressure).</p><p>Switching mode on the Apple Pencil by double-tapping can be handled by another event with event type <a href="https://developer.apple.com/documentation/appkit/nsevent/eventtype/changemode"><code>.changeMode</code></a>, also an <a href="https://developer.apple.com/documentation/appkit/nsresponder"><code>NSResponder</code></a> in the responder chain can handle that event through a new <a href="https://developer.apple.com/documentation/appkit/nsresponder/3237219-changemode"><code>changeMode(withEvent:)</code></a> method.</p><p>You can also listen to that event outside of the responder chain by using the "local event monitor" API:</p><pre><code><span class="keyword">let</span> monitorId = <span class="type">NSEvent</span>.<span class="call">addLocalMonitorForEvents</span>(matching: .<span class="dotAccess">changeMode</span>) { (event) -&gt; <span class="type">NSEvent</span>? <span class="keyword">in</span>
    <span class="call">switchTool</span>()
    <span class="keyword">return</span> event
}
</code></pre><h2>Foundation additions</h2><h3>View geometry:</h3><p>New data types for specifying view geometry:</p><ul><li><a href="https://developer.apple.com/documentation/uikit/nsdirectionalrectedge"><code>NSDirectionalRectEdge</code></a></li><li><a href="https://developer.apple.com/documentation/uikit/nsdirectionaledgeinsets"><code>NSDirectionalEdgeInsets</code></a></li><li><a href="https://developer.apple.com/documentation/uikit/nsrectalignment"><code>NSRectAlignment</code></a></li></ul><p>These use the terms leading &amp; trailing on the horizontal axis instead of e.g. "minX" or "maxX", so they work better with right-to-left languages.</p><h3>Formatters:</h3><p><a href="https://developer.apple.com/documentation/foundation/relativedatetimeformatter"><code>NSRelativeDateFormatter</code></a> - allows you to format dates as e.g. "1 month ago" or "last week"</p><p><a href="https://developer.apple.com/documentation/foundation/listformatter"><code>NSListFormatter</code></a> - formats lists of things, adding commas properly (uses nested formatters from <a href="https://developer.apple.com/documentation/foundation/listformatter/3130988-itemformatter"><code>.itemFormatter</code></a> to format specific items)</p><h2>Changes in extensions</h2><ul><li>non-UI file provider action extension</li><li>Network Extensions, DriverKit and Endpoint Security replace old kernel extensions</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10658</guid><title>What's new in education</title><description>For over 40 years, Apple has been working with educators to create technologies for students, teachers, and school administrators and help them share in a rich and meaningful learning experience. Explore the breadth of Apple's education technologies, including classroom management apps and tools and developer frameworks for assessment and curriculum integration — and discover how your app can have a critical role in them all.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10658</link><pubDate>Tue, 17 Nov 2020 10:32:49 +0700</pubDate><content:encoded><![CDATA[<h2>What's new in Schoolwork</h2><p><a href="https://apps.apple.com/us/app/schoolwork/id1355112526">Schoolwork</a> makes it easy for teachers to share materials, assign activities and track student progress.</p><ul><li>new design</li><li>handout library</li><li>handout detail view</li><li>support for new activity metadata</li></ul><p>If you want your app to integrate with Schoolwork, use the <a href="https://developer.apple.com/classkit/"><code>ClassKit</code></a> framework</p><h2>What's new in ClassKit</h2><p>ClassKit Catalog:</p><ul><li>a central store of your app's public Activities</li><li>using a web API, you can publish your Activities and they will be available from the Activity Chooser</li><li>includes new metadata fields</li></ul><h2>What's new in Apple School Manager</h2><p>Apple School Manager (ASM) is Apple's web-based portal for schools to manage accounts, devices, and content, all from one place.</p><ul><li>classes created in ASM are automatically available in <a href="https://apps.apple.com/us/app/classroom/id1085319084">Classroom</a></li><li>any updates in ASM are synced down to both Classroom and Schoolwork</li><li>allow managed Apple ID</li></ul><h2>What's new in Classroom</h2><ul><li>AirPlay class invitation</li><li>Pinch to zoom student screens</li></ul><h2>What's new in Shared iPad</h2><ul><li>Shared iPad Temporary Session:<ul><li>enables schools to deploy devices with standard configurations that students can use without sign-in credentials.</li><li>all data is removed on sign out</li></ul></li></ul><h2>Automatic Assessment Configuration</h2><p><a href="https://developer.apple.com/documentation/automaticassessmentconfiguration">Automatic Assessment Configuration</a> (ASC) is a new framework used to tests.</p><p>Thanks to ASC schools can now leverage the power of the Mac, while at the same time preventing students from using features that could give them an unfair advantage.</p><p>Features:</p><ul><li>Unified macOS and iOS API</li><li>Catalyst support</li><li>Restrict specific system features</li></ul><p>You need to apply for a new entitlement in order to use this framework.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10057</guid><title>Identify trends with the Power and Performance API</title><description>Track your app’s performance metrics in custom team dashboards, bug reporting systems, and other custom workflows with the Power and Performance Metrics and Diagnostics API. Explore how you can access the same data that drives the Power and Performance analysis tools in Xcode to quickly identify trends and regressions. Learn how to leverage diagnostic signatures and logs — including call stack trees — to prioritize and debug issues. And discover how you can integrate this API with your development team’s existing tools to troubleshoot issues quickly, offering better overall performance for people who use your app.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10057</link><pubDate>Tue, 17 Nov 2020 10:31:12 +0700</pubDate><content:encoded><![CDATA[<h2>New Power and Performance API</h2><ul><li>Two of the most important aspects of ensuring a great user experience are optimizing the power and performance impact of your applications.</li><li>Last year Xcode Organizer gained power and performance analytics, the same data is now part of the App Store Connect API</li></ul><h3>Smart Insights</h3><p>New built-in smart insights feature to identify your application's power and performance hotspots without any additional effort:</p><ul><li>returned as part of the API data</li><li>flag important power and performance hotspots:<ul><li>regressions</li><li>trends</li></ul></li></ul><h2>Overview</h2><p>New REST API resources:</p><ul><li>Performance Power metrics (metrics and insights)<ul><li>aggregated by unique metrics and devices (battery, launch, disk writes)</li><li>for your app's most recent versions (up to eight most recent versions) <code>GET /v1/apps/{id}/perfPowerMetrics</code></li><li>per build <code>GET /v1/builds/{id}/perfPowerMetrics</code></li></ul></li></ul><ul><li>Diagnostic signatures (these signatures are used to group common problems)<ul><li>e.g. disk writes and more</li><li>top signatures per build <code>GET /v1/builds/{id}/diagnosticSignatures</code></li><li>logs per signature (contains stack trees) <code>GET /v1/diagnosticSignatures/{id}/logs</code></li></ul></li></ul><h2>Demo</h2><p>Sample codes to generate a token, as well as to get diagnostics data will be released with the API later this year (2020).</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10100</guid><title>Meet Watch Face Sharing</title><description>Show off your watchOS app’s complications and create a watch face worth sharing. Learn how to share watch faces inside your watchOS and iOS apps or host them on the web for anyone to find and download. We’ll also explore best practices for using watch face preview images, and show you how to create a smooth installation experience.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10100</link><pubDate>Tue, 17 Nov 2020 10:29:37 +0700</pubDate><content:encoded><![CDATA[<ul><li>Face sharing is the ability to share a watch face with anyone (requires a Series 3 or later).</li><li>Watch faces include complication data.</li><li>if you include a complication in the watch face that the user doesn't have, they will be prompted to install the missing apps when they add the face.</li></ul><h2>Watch face distribution</h2><p>Watch faces can be shared:</p><ul><li>directly from the watch by long-pressing on your face and tapping the new "share" button.</li><li>from the Watch.app</li><li>from apps and websites</li></ul><h2>Watch face file</h2><p>A <code>.watchface</code> file contains everything that there's in a watch face:</p><ul><li>Face type</li><li>Color, styles</li><li>Complications</li><li>...<ul></ul></li></ul><p>It also includes default settings for complications (e.g. a selected city for a weather widget etc). When sharing a face you can choose which data is shared.</p><h2>Embedded face sharing implementation</h2><ol><li>Generate a watch face with your app complication (your app needs to be live in the store for this)</li><li>import watch face file and preview into the project (do not put them in an assets catalog)</li><li>prompt the user to add the face</li></ol><h3>Check if a watch is paired</h3><p>You should offer the user to add a watch face only if the user has a paired watch, you can check so with the following:</p><pre><code><span class="keyword">var</span> isPaired: <span class="type">Bool</span> {
    <span class="keyword">if</span> (<span class="type">WCSession</span>.<span class="call">isSupported</span>()) {
        <span class="keyword">let</span> session = <span class="type">WCSession</span>.<span class="property">default</span>
        session.<span class="property">delegate</span> = <span class="keyword">self</span>
        session.<span class="call">activate</span>()
        <span class="keyword">return</span> session.<span class="property">isPaired</span>
    } <span class="keyword">else</span> {
        <span class="keyword">return false</span>
    }
}
</code></pre><h3>Prompt the user to add a face</h3><p>Use <a href="https://developer.apple.com/documentation/clockkit/clkwatchfacelibrary/3601124-addwatchface"><code>addWatchFace(at:completionHandler:)</code></a> to prompt the user to add a watch face (api available on both iOS and watchOS):</p><pre><code><span class="keyword">private func</span> addFaceWrapper(withName: <span class="type">String</span>) {
    <span class="keyword">if let</span> watchfaceURL = <span class="type">Bundle</span>.<span class="property">main</span>.<span class="call">url</span>(forResource: withName, withExtension: <span class="string">"watchface"</span>) {
        <span class="type">CLKWatchFaceLibrary</span>().<span class="call">addWatchFace</span>(at: watchfaceURL, completionHandler: {
            (error: <span class="type">Error</span>?) <span class="keyword">in
            if let</span> nsError = error <span class="keyword">as</span> <span class="type">NSError</span>?, nsError.<span class="property">code</span> == <span class="type">CLKWatchFaceLibrary</span>.<span class="type">ErrorCode</span>.<span class="property">faceNotAvailable</span>.<span class="property">rawValue</span> {
                <span class="call">print</span>(nsError)
            }
            isLoading = <span class="keyword">false</span>
        })
    }
}
</code></pre><h2>Website distribution</h2><p>Host and link to the <code>.watchface</code> file with MIME type <code>application/vnd.apple.watchface</code>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10140</guid><title>Build location-aware enterprise apps</title><description>Develop location-aware enterprise apps for your business and personalize your employee’s everyday experience. Learn how Apple built the Caffe Macs app for its on-campus cafeterias using iBeacons and Location Services and how you can apply these tools and frameworks to your own apps, while preserving employee privacy. From there, discover how you can use localization to deliver a great experience for your international employees.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10140</link><pubDate>Tue, 17 Nov 2020 10:28:01 +0700</pubDate><content:encoded><![CDATA[<p>This session is mostly an introduction to how to use Core Location (see related session below) plus some tips.</p><h2>Determine device support</h2><p>Before asking for authorization, check whether the current device supports the feature you're interested in:</p><pre><code><span class="keyword">if</span> <span class="type">CLLocationManager</span>.<span class="call">isMonitoringAvailable</span>(for: <span class="type">CLBeaconRegion</span>.<span class="keyword">self</span>) {
    <span class="comment">// Supports region monitoring to detect beacon regions</span>
}

<span class="keyword">if</span> <span class="type">CLLocationManager</span>.<span class="call">isRangingAvailable</span>() {
    <span class="comment">// Supports obtaining the relative distance to a nearby iBeacon device</span>
}
</code></pre><p>If the device doesn't support what you're interested in, offer the user a list of options (e.g. a list of locations/cafes/..)</p><h2>iBeacon</h2><ul><li>A beacon is a device that emits a signal which can be detected by the system and passed to your app</li><li>Those signals can identify when a user is within a certain location</li><li>Once we detect a specific beacon signal, we can trigger something in our app.</li></ul><ul><li>When deploying your beacon hardware, you must program each beacon with an appropriate proximity UUID, major value and minor value.</li><li>The values identify each of your beacons uniquely and make it possible for your app to differentiate between them.</li></ul><ul><li>Use region monitoring to detect the presence of a beacon</li><li>Use ranging to determine the proximity of a detected beacon</li></ul><pre><code><span class="comment">// Stage 1: Region Monitoring</span>

<span class="keyword">func</span> monitorBeacons() {
    <span class="keyword">if</span> <span class="type">CLLocationManager</span>.<span class="call">isMonitoringAvailable</span>(for: <span class="type">CLBeaconRegion</span>.<span class="keyword">self</span>) {

        <span class="keyword">let</span> constraint = <span class="type">CLBeaconIdentityConstraint</span>(uuid: proximityUUID)

		<span class="comment">// Contains the proximity UUID, major value and minor value, of the beacons that you want to detect.</span>
        <span class="keyword">let</span> beaconRegion = <span class="type">CLBeaconRegion</span>(
            beaconIdentityConstraint: constraint,
            identifier: beaconID
        )
        
        <span class="keyword">self</span>.<span class="property">locationManager</span>.<span class="call">startMonitoring</span>(for: beaconRegion)
    }
}
</code></pre><pre><code><span class="comment">// Stage 2: Beacon Ranging</span>

<span class="keyword">func</span> locationManager(<span class="keyword">_</span> manager: <span class="type">CLLocationManager</span>, didEnterRegion region: <span class="type">CLRegion</span>) {
    <span class="keyword">guard let</span> region = region <span class="keyword">as</span>? <span class="type">CLBeaconRegion</span>,
        <span class="type">CLLocationManager</span>.<span class="call">isRangingAvailable</span>()
        <span class="keyword">else</span> { <span class="keyword">return</span> }
    
    <span class="keyword">let</span> constraint = <span class="type">CLBeaconIdentityConstraint</span>(uuid: region.<span class="property">uuid</span>)
    manager.<span class="call">startRangingBeacons</span>(satisfying: constraint)
    beaconsToRange.<span class="call">append</span>(region)
}

<span class="keyword">func</span> locationManager(<span class="keyword">_</span> manager: <span class="type">CLLocationManager</span>, didExitRegion region: <span class="type">CLRegion</span>) {
    ...
}

<span class="keyword">func</span> locationManager(
    <span class="keyword">_</span> manager: <span class="type">CLLocationManager</span>,
    didRangeBeacons beacons: [<span class="type">CLBeacon</span>],
    <span class="keyword">in</span> region: <span class="type">CLBeaconRegion</span>) {
    
    <span class="keyword">guard let</span> nearestBeacon = beacons.<span class="property">first</span> <span class="keyword">else</span> { <span class="keyword">return</span> }
    <span class="keyword">let</span> major = <span class="type">CLBeaconMajorValue</span>(truncating: nearestBeacon.<span class="property">major</span>)
    <span class="keyword">let</span> minor = <span class="type">CLBeaconMinorValue</span>(truncating: nearestBeacon.<span class="property">major</span>)
    
    <span class="keyword">switch</span> nearestBeacon.<span class="property">proximity</span> {
    <span class="keyword">case</span> .<span class="dotAccess">near</span>, .<span class="dotAccess">immediate</span>:
        <span class="call">displayInformation</span>(for: major, and: minor)
        
    <span class="keyword">default</span>:
        <span class="call">handleUnknownOrFarBeacon</span>(for: major, and: minor)
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10106</guid><title>Meet Scribble for iPad</title><description>Scribble offers a lightweight, ergonomic, and enjoyable way of entering text on iPad with Apple Pencil. Discover how people can take advantage of Scribble and handwritten text in apps that use standard text input controls or that implement a custom text editing experience. You’ll learn how it integrates into TextKit, and when you’ll need to adopt the new UIScribbleInteraction and UIIndirectScribbleInteraction APIs to provide a delightful and consistent experience with Scribble in your app.

To get the most out of this session, you should be familiar with UIKit text input controls, as well as keyboard input technologies. To get started, watch “Keyboard Input in iOS”. If you’re building a custom text editor, you should be familiar with the UITextInput protocol, TextKit, and related text input APIs. For more information, we recommend checking out “TextKit Best Practices” and “The Keys to a Better Text Input Experience.” And for design guidelines on pencil-based interaction, check out “Apple Pencil Design Essentials.”</description><link>https://www.wwdcnotes.com/notes/wwdc20/10106</link><pubDate>Tue, 17 Nov 2020 10:25:51 +0700</pubDate><content:encoded><![CDATA[<h2>Writing experience</h2><ul><li>You can write directly on a text field without the need to select the field first.</li><li>You can draw a horizontal line to select text and perform the normal text editing actions.</li><li>You can also scratch out some text that you want to delete.</li></ul><h2>Scribble Supporting APIs</h2><ul><li>Scribble relies on standard Text controls/inputs (<code>UITextField</code>, <code>UITextView</code>, ...)</li><li>Scribble does not support password fields (because Apple's recommended way to input password is via auto fill)</li><li>for custom UI elements Scribble relies on UIKit's text input protocols (<a href="https://developer.apple.com/documentation/uikit/uitextinput"><code>UITextInput</code></a>, <a href="https://developer.apple.com/documentation/uikit/uikeyinput"><code>UIKeyInput</code></a>, <a href="https://developer.apple.com/documentation/uikit/uitextinputtraits"><code>UITextInputTraits</code></a>, <a href="https://developer.apple.com/documentation/uikit/uitextinteraction"><code>UITextInteraction</code></a>)</li></ul><h2>New APIs</h2><p>Scribble introduces two interactions, <a href="https://developer.apple.com/documentation/uikit/uiscribbleinteraction"><code>UIScribbleInteraction</code></a> and <a href="https://developer.apple.com/documentation/uikit/uiindirectscribbleinteraction"><code>UIIndirectScribbleInteraction</code></a>, which are used to customize the behavior of Scribble in your app.</p><p>Both interactions are added to views where the custom behavior takes place.</p><h3>UIScribbleInteraction</h3><p>The interaction has a delegate, and this delegate is where an app can customize the Scribble experience, for example:</p><ul><li>disabling Scribble on the view</li><li>delaying that view from becoming first responder until handwriting has momentarily paused</li><li>being informed when Scribble handwriting begins or ends</li></ul><h3>UIIndirectScribbleInteraction</h3><p>Thanks to this interaction:</p><ul><li>we can allow writing outside a input control.</li><li>this is also the interaction to use for UI that would become editable in response to a tap gesture.</li></ul><p>This is done via the interaction's delegate. Which will provide the system information about elements, aka regions within the view that can be written into.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10020</guid><title>Make your app visually accessible</title><description>When you design with accessibility in mind, you empower everyone to use your app. Discover how to create an adaptive interface for your app that takes a thoughtful approach to color, provides readable text, and accommodates other visual settings to maintain a great experience throughout.

We’ve designed this session like our user interfaces — to be accessible to all. If you’d like to learn even more about accessibility and design, you may also enjoy “Visual Design and Accessibility,” “Accessibility Inspector,” “Building Apps with Dynamic Type,” and “Introducing SF Symbols.”</description><link>https://www.wwdcnotes.com/notes/wwdc20/10020</link><pubDate>Tue, 17 Nov 2020 10:23:52 +0700</pubDate><content:encoded><![CDATA[<h2>Color and shapes</h2><h3>Button Shapes</h3><p>In iOS 14 there's a new accessibility property for users that prefer an additional shape instead of relying just on the control color: <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/3618943-buttonshapesenabled"><code>buttonShapesEnabled</code></a> which we can listen to changes via <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/3618944-buttonshapesenabledstatusdidchan"><code>buttonShapesEnabledStatusDidChangeNotification</code></a>.</p><pre><code><span class="keyword">func</span> observeButtonShapesNotification() {
    <span class="comment">// Make buttons more visible by using shapes.
    // If your default design does not include button shapes, 
    // observe this notification to make visual changes.</span>
    <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">addObserver</span>(
    	<span class="keyword">self</span>, 
    	selector: <span class="keyword">#selector</span>(updateButtonShapes), 
    	name: <span class="type">UIAccessibility</span>.<span class="property">buttonShapesEnabledStatusDidChangeNotification</span>, 
    	object: <span class="keyword">nil</span>
    )
}

<span class="keyword">@objc func</span> updateButtonShapes() {
    <span class="keyword">if</span> <span class="type">UIAccessibility</span>.<span class="property">buttonShapesEnabled</span> {
        <span class="comment">// Use extra visualizations for buttons.</span>
    } <span class="keyword">else</span> {
        <span class="comment">// Use default design for buttons.</span>
    }
}
</code></pre><h3>Differentiate without color</h3><p>From iOS 13 there's a new accessibility property for users that ask you to differentiate app components without using colors (status icons, text, etc): <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/3043553-shoulddifferentiatewithoutcolor"><code>shouldDifferentiateWithoutColor</code></a> which we can listen to changes via <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/3043554-differentiatewithoutcolordidchan"><code>differentiateWithoutColorDidChangeNotification</code></a>.</p><pre><code><span class="keyword">func</span> observeDifferentiateWithoutColorNotification() {
    <span class="comment">// Use symbols or shapes to convey meaning instead of relying on color alone.
    // If your default design does not differentiate without color, 
    // observe this notification to make visual changes.</span>
    <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">addObserver</span>(
    	<span class="keyword">self</span>, 
    	selector: <span class="keyword">#selector</span>(updateColorAndSymbols), 
    	name: <span class="type">NSNotification</span>.<span class="type">Name</span>(<span class="type">UIAccessibility</span>.<span class="property">differentiateWithoutColorDidChangeNotification</span>), 
    	object: <span class="keyword">nil</span>
    )
}

<span class="keyword">@objc func</span> updateColorAndSymbols() {
    <span class="keyword">if</span> <span class="type">UIAccessibility</span>.<span class="property">shouldDifferentiateWithoutColor</span> {
        <span class="comment">// Use symbols or shapes to convey meaning.</span>
    } <span class="keyword">else</span> {
        <span class="comment">// Use default design.</span>
    }
}
</code></pre><h3>Contrast</h3><p>To check whether the users has enabled the <code>Increase Contrast</code> accessibility feature (iOS 8+), use <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/1615087-isdarkersystemcolorsenabled"><code>isDarkerSystemColorsEnabled</code></a> and the <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/1615177-darkersystemcolorsstatusdidchang"><code>darkerSystemColorsStatusDidChangeNotification</code></a> notification.</p><p>In assets catalog you can also provide a variant (for colors and images) for this accessibility, which will be used automatically when the accessibility feature is enabled.</p><h3>Smart Invert Color</h3><p>Smart Invert Colors is a system setting that asserts an inverted UI over any app. You should flag certain views in your app so they don't get inverted, like photos, videos and app icons.</p><p>You can so by setting <a href="https://developer.apple.com/documentation/uikit/uiview/2865843-accessibilityignoresinvertcolors"><code>accessibilityIgnoresInvertColors</code></a> on any <code>UIView</code> subclass.</p><h2>Text readability</h2><p>When designing your app, keep text size, weight, and layout in mind for clarity and readability:</p><ul><li>design with large text in mind</li><li>avoid truncating text as the content size increases, wrap labels and use all of the available display width</li><li>symbols and glyphs should scale with text</li></ul><h3>Bold Text</h3><ul><li>Use text weight to create emphasis and improve readability</li><li>Whenever possible, use system font styles</li></ul><p>Bold Text setting allows user to focus on the text: monitor this accessibility feature via the <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/1615156-isboldtextenabled"><code>isBoldTextEnabled</code></a> property and observe the <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/1615152-boldtextstatusdidchangenotificat"><code>boldTextStatusDidChangeNotification</code></a> notification.</p><pre><code><span class="keyword">func</span> observeBoldTextNotification() {
    <span class="comment">// Update labels to use bold or heavy font styles.
    // If you aren't using system font styles, observe 
    // this notification to make visual changes.</span>
    <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">addObserver</span>(
    	<span class="keyword">self</span>, 
    	selector: <span class="keyword">#selector</span>(updateLabelWeight), 
    	name: <span class="type">UIAccessibility</span>.<span class="property">boldTextStatusDidChangeNotification</span>, 
    	object: <span class="keyword">nil</span>
    )
}

<span class="keyword">@objc func</span> updateLabelWeight() {
    <span class="keyword">if</span> <span class="type">UIAccessibility</span>.<span class="property">isBoldTextEnabled</span> {
        <span class="comment">// Use bold or heavy font weight</span>
    } <span class="keyword">else</span> {
        <span class="comment">// Use font weight that is default to your design.</span>
    }
}
</code></pre><h2>Display preferences</h2><p>There is a collection of display accommodation settings that people can enable if they're sensitive to motion.</p><h3>Reduce motion</h3><p>When this the user requests reduce motion, suppress idle animations, parallax or other motion effects.</p><p>Use <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/1615133-isreducemotionenabled"><code>isReduceMotionEnabled</code></a> and <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/1615204-reducemotionstatusdidchangenotif"><code>reduceMotionStatusDidChangeNotification</code></a> for monitoring these preferences:</p><pre><code><span class="keyword">func</span> observeReduceMotionNotification() {
    <span class="comment">// Observe this notification to reduce or remove the frequency and intensity of motion effects.</span>
    <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">addObserver</span>(
    	<span class="keyword">self</span>, 
    	selector: <span class="keyword">#selector</span>(updateMotionEffects), 
    	name: <span class="type">UIAccessibility</span>.<span class="property">reduceMotionStatusDidChangeNotification</span>, 
    	object: <span class="keyword">nil</span>
    )
}

<span class="keyword">@objc func</span> updateMotionEffects() {
    <span class="keyword">if</span> <span class="type">UIAccessibility</span>.<span class="property">isReduceMotionEnabled</span> {
        <span class="comment">// Reduce or remove extraneous motion effects.</span>
    } <span class="keyword">else</span> {
        <span class="comment">// Use default motion effects.</span>
    }
}
</code></pre><h2>Transitions</h2><p>New in iOS 14 we have a new <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/3584818-preferscrossfadetransitions"><code>prefersCrossFadeTransitions</code></a> (along with its <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/3584819-preferscrossfadetransitionsstatu"><code>prefersCrossFadeTransitionsStatusDidChange</code></a> notification), this setting is used to suppress navigation view controllers slide transitions and replace them with a cross fade animation.</p><pre><code><span class="keyword">func</span> observeCrossFadeTransitionsNotification() {
    <span class="comment">// Reduce or remove sliding animations for transitioning views.
    // If you aren't using system-provided navigation, observe this notification to make visual changes.</span>
    <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">addObserver</span>(
    	<span class="keyword">self</span>, 
    	selector: <span class="keyword">#selector</span>(updateTransitionEffects), 
    	name: <span class="type">UIAccessibility</span>.<span class="property">prefersCrossFadeTransitionsStatusDidChange</span>, 
    	object: <span class="keyword">nil</span>
    )
}

<span class="keyword">@objc func</span> updateTransitionEffects() {
    <span class="keyword">if</span> <span class="type">UIAccessibility</span>.<span class="property">prefersCrossFadeTransitions</span> {
        <span class="comment">// Replace sliding transitions with cross-fade animations.</span>
    } <span class="keyword">else</span> {
        <span class="comment">// Use default sliding transitions.</span>
    }
}
</code></pre><h3>Reduce Transparency</h3><p>When this setting is enabled, blur effects should become completely opaque (use system blur effects to get this behavior automatically).</p><p>Use <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/1615074-isreducetransparencyenabled"><code>isReduceTransparencyEnabled</code></a> and <a href="https://developer.apple.com/documentation/uikit/uiaccessibility/1615125-reducetransparencystatusdidchang"><code>reduceTransparencyStatusDidChangeNotification</code></a> for tracking this.</p><pre><code><span class="keyword">func</span> observeReduceTransparencyNotification() {
    <span class="comment">// Reduce or remove transparency by adjusting these effects to be completely opaque.
    // If you aren't using system-provided visual effects for blurs or vibrancy, 
    // observe this notification to make visual changes.</span>
    <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">addObserver</span>(
    	<span class="keyword">self</span>, 
    	selector: <span class="keyword">#selector</span>(updateTransparencyEffects), 
    	name: <span class="type">UIAccessibility</span>.<span class="property">reduceTransparencyStatusDidChangeNotification</span>, 
    	object: <span class="keyword">nil</span>
    )
}

<span class="keyword">@objc func</span> updateTransparencyEffects() {
    <span class="keyword">if</span> <span class="type">UIAccessibility</span>.<span class="property">isReduceTransparencyEnabled</span> {
        <span class="comment">// Make transparency effects opaque.</span>
    } <span class="keyword">else</span> {
        <span class="comment">// Use default transparency.</span>
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc19/258</guid><title>Architecting Your App for Multiple Windows</title><description>Dive into the details about what it means to support multitasking in iOS 13. Understand how previous best practices fit together with new ideas. Learn the nuances of structuring your application to support multiple windows, and how to instantiate your UI, handle windows coming and going, and manage your app’s underlying window resources.</description><link>https://www.wwdcnotes.com/notes/wwdc19/258</link><pubDate>Wed, 11 Nov 2020 23:36:43 +0700</pubDate><content:encoded><![CDATA[<p>In the new scene delegate based lifecycle:</p><ul><li>app delegate should still handle things like initializing/cleaning up the whole process</li><li>it should not however handle things like setting up the UI or updating it when the app goes into foreground/background - because this will now happen separately per session</li><li>additionally, application delegate is now notified when a scene is created or discarded</li><li>lifecycle delegate methods like <a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623076-applicationwillenterforeground"><code>applicationWillEnterForeground</code></a>, <a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622956-applicationdidbecomeactive"><code>applicationDidBecomeActive</code></a> etc. will not be called at all if scene lifecycle is enabled</li></ul><h2>Modern lifecycle flow</h2><p>Starting the app:</p><ul><li><code>AppDelegate</code>: <a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1622921-application"><code>didFinishLaunchingWithOptions:</code></a></li><li><code>AppDelegate</code>: <a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate/3197905-application"><code>_:configurationForConnecting:options:</code></a> <code>-&gt;</code> <a href="https://developer.apple.com/documentation/uikit/uisceneconfiguration"><code>UISceneConfiguration</code></a> - return configuration for the scene</li><li><code>SceneDelegate</code>: <a href="https://developer.apple.com/documentation/uikit/uiscenedelegate/3197914-scene"><code>_:willConnectTo:options:</code></a> - this is where you set up your new scene</li></ul><p>Scene configuration (<a href="https://developer.apple.com/documentation/uikit/uisceneconfiguration"><code>UISceneConfiguration</code></a>): an object that describes the delegate class, storyboard etc. It's either built dynamically, or (better) statically described in <code>Info.plist</code> and looked up by name using the constructor:</p><pre><code><span class="type">UISceneConfiguration</span>(name: <span class="string">"Default"</span>, sessionRole: session.<span class="property">role</span>)
</code></pre><p>Going to the background:</p><ul><li><code>SceneDelegate</code>: <a href="https://developer.apple.com/documentation/uikit/uiscenedelegate/3197919-scenewillresignactive"><code>sceneWillResignActive</code></a></li><li><code>SceneDelegate</code>: <a href="https://developer.apple.com/documentation/uikit/uiscenedelegate/3197917-scenedidenterbackground"><code>sceneDidEnterBackground</code></a></li><li>…</li><li><code>SceneDelegate</code>: <a href="https://developer.apple.com/documentation/uikit/uiscenedelegate/3197916-scenediddisconnect"><code>sceneDidDisconnect</code></a> - after some time, the system will release your scene (including the delegate object and all views and VCs) to save memory; you should now release any objects loaded to build that piece of UI</li></ul><p>When the user force-closes a scene:</p><ul><li><code>AppDelegate</code>: <a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate/3197906-application"><code>_:didDiscardSceneSessions:</code></a> (may be called on the next launch instead)</li></ul><blockquote><p><em>“State restoration is no longer a nicety”</em></p></blockquote><p>Watch out for cases where a view controller needs to be updated if there are multiple scenes presenting the same view, which you might not have taken into account before - it’s better to only update the model and observe changes in the model, instead of updating the view directly when the user adds some new content.</p><ul><li>pro tip: you can pass Swift-only objects like enums in <a href="https://developer.apple.com/documentation/foundation/nsnotification"><code>NSNotification</code></a> if you use them as the sending object instead of in <code>userInfo</code></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc18/405</guid><title>Measuring Performance Using Logging</title><description>Learn how to use signposts and logging to measure performance.  Understand how the Points of Interest instrument can be used to examine logged data. Get an introduction into creating and using custom instruments.</description><link>https://www.wwdcnotes.com/notes/wwdc18/405</link><pubDate>Wed, 11 Nov 2020 23:23:23 +0700</pubDate><content:encoded><![CDATA[<p>Signposts - a new feature of the <a href="https://developer.apple.com/documentation/os/logging"><code>os_log</code></a> API</p><ul><li>useful for debugging performance issues</li><li>integrated with Instruments, which can visualize activity over time using signposts</li></ul><p>Signposts allow you to mark the beginning and end of a piece of work and mark it with some kind of label:</p><pre><code><span class="keyword">import</span> os.signpost

<span class="keyword">let</span> refreshLog = <span class="type">OSLog</span>(subsystem: <span class="string">"…"</span>, category: <span class="string">"…"</span>)

<span class="call">os_signpost</span>(.<span class="dotAccess">begin</span>, log: refreshLog, name: <span class="string">"Fetch Asset"</span>)
<span class="comment">// …do actual work…</span>
<span class="call">os_signpost</span>(.<span class="dotAccess">end</span>, log: refreshLog, name: <span class="string">"Fetch Asset"</span>)
</code></pre><p>Ranges of signposts with different names can overlap - e.g. you can have one signpost covering the whole process and smaller signposts covering specific single tasks that it consists of:</p><pre><code><span class="call">os_signpost</span>(.<span class="dotAccess">begin</span>, log: log, name: <span class="string">"Load Data"</span>)

<span class="call">os_signpost</span>(.<span class="dotAccess">begin</span>, log: log, name: <span class="string">"Fetch Asset"</span>)
<span class="comment">// …</span>
<span class="call">os_signpost</span>(.<span class="dotAccess">end</span>, log: log, name: <span class="string">"Fetch Asset"</span>)

<span class="call">os_signpost</span>(.<span class="dotAccess">begin</span>, log: log, name: <span class="string">"Parse JSON"</span>)
<span class="comment">// …</span>
<span class="call">os_signpost</span>(.<span class="dotAccess">end</span>, log: log, name: <span class="string">"Parse JSON"</span>)

<span class="call">os_signpost</span>(.<span class="dotAccess">end</span>, log: log, name: <span class="string">"Load Data"</span>)
</code></pre><p>If you run multiple tasks of the same kind, to let the system differentiate between them and know which begin matches which end, you can add a “signpost ID”:</p><pre><code><span class="call">os_signpost</span>(.<span class="dotAccess">begin</span>, log: log, name: <span class="string">"Load Data"</span>)

<span class="keyword">for</span> asset <span class="keyword">in</span> assets {
    <span class="keyword">let</span> spid = <span class="type">OSSignpostID</span>(log: log)

    <span class="call">os_signpost</span>(.<span class="dotAccess">begin</span>, log: refreshLog, name: <span class="string">"Fetch Asset"</span>, signpostID: spid)
    <span class="comment">// …do actual work…</span>
    <span class="call">os_signpost</span>(.<span class="dotAccess">end</span>, log: refreshLog, name: <span class="string">"Fetch Asset"</span>, signpostID: spid)
}

<span class="call">os_signpost</span>(.<span class="dotAccess">end</span>, log: log, name: <span class="string">"Load Data"</span>)
</code></pre><p>You can also pass your model object when generating the signpost ID - then it will always use the same signpost ID for the same object, and you don't have to store the signpost object, just your model:</p><pre><code><span class="keyword">let</span> spid = <span class="type">OSSignpostID</span>(log: log, object: asset)
</code></pre><p>There is also an option of passing an additional string argument to begin/end to provide some context (e.g. to differentiate between different possible ways to finish an activity, like success/failure). The string also accepts format arguments like <code>os_log</code>:</p><pre><code><span class="call">os_signpost</span>(.<span class="dotAccess">begin</span>, log: log, name: <span class="string">"Compute Physics"</span>,
    <span class="string">"Calculating %{public}s: %d %d %d %d"</span>, description, x1, y2, x2, y2)
</code></pre><p>Apart from marking the beginning and end, you can also mark specific points in time during the process using the <code>.event</code> signpost type:</p><pre><code><span class="call">os_signpost</span>(.<span class="dotAccess">event</span>, log: log, name: <span class="string">"Fetch Asset"</span>,
    <span class="string">"Received chunk of data, size %d"</span>, size)
</code></pre><p>Signposts are very optimized internally, they’re built to minimize the time spent when logging, same as the whole <code>os_log</code> API. This means you can emit a lot of signposts even in a very tight window when investigating a performance bottleneck.</p><p>If you still really want to enable or disable some signpost logs based on some conditions, you can swap your logger object with <a href="https://developer.apple.com/documentation/os/oslog/2863695-disabled"><code>OSLog.disabled</code></a>:</p><pre><code><span class="keyword">let</span> refreshLog: <span class="type">OSLog</span>

<span class="keyword">if</span> <span class="type">ProcessInfo</span>.<span class="property">processInfo</span>.<span class="property">environment</span>.<span class="property">keys</span>.<span class="call">contains</span>(<span class="string">"SIGNPOSTS_REFRESH"</span>) {
    refreshLog = <span class="type">OSLog</span>(…)
} <span class="keyword">else</span> {
    refreshLog = .<span class="dotAccess">disabled</span>
}
</code></pre><p>To conditionally disable some expensive code that is only useful for debugging, you can check the <a href="https://developer.apple.com/documentation/os/oslog/3006881-signpostsenabled"><code>signpostsEnabled</code></a> property:</p><pre><code><span class="keyword">if</span> refreshLog.<span class="property">signpostsEnabled</span> {
    <span class="keyword">let</span> information = <span class="call">collectInfo</span>()
    <span class="call">os_signpost</span>(…, information)
}
</code></pre><p>All APIs are also available in C &amp; ObjC:</p><pre><code>#include &lt;os/signpost.<span class="property">h</span>&gt;

<span class="call">os_signpost_interval_begin</span>()
<span class="call">os_signpost_interval_end</span>()
<span class="call">os_signpost_event_emit</span>()
os_signpost_id_t
<span class="type">OS_LOG_DISABLED</span>
</code></pre><p>Use the formatter <code>%{xcode:size-in-bytes}u</code> to let Xcode &amp; Instruments know that the logged value is a byte size of some data</p><ul><li>This is one of so called “Engineering types” - find more in the Instruments Help menu, in the Instruments developer guide</li></ul><h2>Instruments tips</h2><ul><li>Use the “os_signpost” instrument to profile using signposts</li><li>After recording some data, you can see the signpost names in the sidebar on the left and signpost ranges with the optional begin/end comments marked on the chart</li><li>In the bottom pane you can see count and duration statistics, grouped by category, signpost, id and comment</li><li>Clicking the arrow button next to a specific message row shows you a list of all instances of this specific message (selecting them highlights them on the timeline)</li><li>For metadata like logged byte sizes of downloads, you can choose “Summary: Metadata Statistics” to see total/min/max/avg of each type of value</li><li>Live streaming signpost logs to Instruments (“Immediate mode”) adds some overhead, so if you want to avoid that while debugging some performance-critical code, click and hold the Record button to access recording options and change mode to “Last n seconds”</li></ul><h2>Points of interest</h2><p>Points of interest is a special log category of <code>OSLog</code>. It’s meant for logging important actions taken by the user, like opening some specific screen.</p><p>Normal <code>os_log</code> logs and signpost logs logged to this category appear in a special separate Instruments timeline, which lets you visualize what was happening in the app at the moment when something happened on other charts like CPU usage.</p><h2>Custom Instruments packages</h2><p>You can now build your custom Instruments packages, defined as an XML file in a separate target, which appear as a new kind of template when starting Instruments. This lets you process and present collected signpost data in a different way that makes sense for the specific problem you’re analyzing.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc19/701</guid><title>Advances in macOS Security</title><description>We are on a journey to continuously improve macOS security, with a particular focus on preventing malware and protecting user data. Join us on the next step and learn more about what’s new in Gatekeeper—for keeping malware out of macOS—as well as new protections that help keep users’ data and activity under their control.</description><link>https://www.wwdcnotes.com/notes/wwdc19/701</link><pubDate>Mon, 9 Nov 2020 21:32:06 +0700</pubDate><content:encoded><![CDATA[<p>Defense in depth: there isn’t any single layer that can always perfectly protect you, so there are multiple layers of security, so if any single layer fails, that doesn’t defeat the whole security of the system. Layers can delay the advance of the attacker, reduce the attack surface, create “choke points” that are easier to defend.</p><p>Gatekeeper: designed to protect users from running malicious software, while allowing them to use the software they choose.</p><p>What does Gatekeeper check:</p><ul><li>does the app contain any known malicious content?</li><li>has the software been tampered with since it was signed?</li><li>does it meet the security policy configured on the computer?</li><li>first launch prompt ⭢ does the user actually want to run this?</li></ul><p>On Mojave, Gatekeeper runs the check on the 1st launch of quarantined software launched via Launch Services.</p><p>Quarantine - a technology on macOS for marking files that arrived from some external source (website, airdrop, iMessage, email)</p><ul><li>includes metadata about where the file came from</li><li>opt-in - the app has to opt-in to this, so e.g. when apps download their own updates they are usually not quarantined, except for sandboxed apps</li></ul><p>Launch Services - a framework for finding and launching apps on macOS, used when launching apps from Finder, <a href="https://developer.apple.com/documentation/appkit/nsworkspace"><code>NSWorkspace</code></a>, document handlers etc.</p><p>What does <em>not</em> use Launch Services: <a href="https://developer.apple.com/documentation/foundation/nstask"><code>NSTask</code></a>, <a href="https://developer.apple.com/documentation/foundation/nsbundle"><code>NSBundle</code></a>/<code>dlopen</code>, <code>exec</code>/<code>posix_spawn</code>.</p><p>In macOS Catalina:</p><ul><li>all new software must be notarized to pass Gatekeeper</li><li>all software is checked when first launched, even when launching through those non-LaunchServices methods</li><li>all software (even not quarantined) is checked for malicious content on every launch</li></ul><blockquote><p><em>"</em>You can always choose to run any software on your system<em>"</em> - there will always be a way to run a specific piece of software that you want to run <em>“We want to make macOS just as secure as iOS, while still maintaining the flexibility that you’ve come to expect from your Mac”</em></p></blockquote><p>Platform security is increasingly reliant on validity of code signatures; that means if code has no signature, it’s impossible to detect tampering.</p><p>In a future version of macOS, unsigned code will not load by default, so:</p><ul><li>sign and notarize all software</li><li>don’t modify signed applications and bundles</li><li>handle failures when loading libraries</li></ul><h2>Privacy changes:</h2><p>Requires user confirmation for:</p><ul><li>screen recording</li><li>keyboard input monitoring</li></ul><p>Requires confirmation for access to:</p><ul><li>Desktop, Documents, Downloads</li><li>iCloud Drive and third-party cloud storage</li><li>Removable and network volumes</li></ul><p>But:</p><ul><li>*not* required for creating new files, only for reading existing files</li><li>tries to understand intent, e.g. doesn’t ask if user double-clicked a file in Finder, or drag&amp;dropped it, or used an open/save panel</li><li>declare handled <a href="https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html#//apple_ref/doc/uid/20001431-101685"><code>CFBundleDocumentTypes</code></a> with <code>NSIsRelatedItemType</code> to e.g. automatically have access to a subtitles file when opening a movie file</li></ul><p>Purpose strings are accepted, but not required (<code>NSDesktopFolderUsageDescription</code> etc.).</p><p>Open and save panels always run out of process. Be careful with:</p><ul><li><a href="https://developer.apple.com/documentation/appkit/nsopensavepaneldelegate/1524630-panel"><code>panel(_:userEnteredFilename:confirmed:)</code></a></li><li><a href="https://developer.apple.com/documentation/appkit/nsopensavepaneldelegate/1535141-panel"><code>panel(_:validate:)</code></a></li><li><a href="https://developer.apple.com/documentation/appkit/nsopensavepaneldelegate/1527117-panel"><code>panel(_:didChangeToDirectoryURL:)</code></a></li></ul><p>Checking for readability without triggering a consent dialog: <a href="https://developer.apple.com/documentation/foundation/filemanager/1418292-isreadablefile"><code>isReadableFile</code></a>, <a href="https://developer.apple.com/documentation/foundation/filemanager/1416680-iswritablefile"><code>isWritableFile</code></a>, <a href="https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/access.2.html"><code>access()</code></a>.</p><p>Apps and other binaries that have previously been denied access to some kind of directory now appear automatically in the "Security &amp; Privacy" access list, unchecked.</p><p>Full disk access now required for access to Trash (except files that your app has moved there).</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc19/208</guid><title>Creating Independent Watch Apps</title><description>watchOS 6 enables a whole new level of watchOS experiences by allowing fully independent apps and apps built just for Apple Watch, and by bringing the App Store to Apple Watch. Discover how to leverage the power of many iOS frameworks and technologies, now on watchOS, to create fully independent experiences on Apple Watch.</description><link>https://www.wwdcnotes.com/notes/wwdc19/208</link><pubDate>Mon, 9 Nov 2020 21:21:33 +0700</pubDate><content:encoded><![CDATA[<p>Watch apps can now be independent - the iPhone app is now optional.</p><p>Up to watchOS 5, the Watch app was embedded in the iOS app and both were downloaded to the iPhone. iPhone then handled the task of installing the Watch app to the Watch.</p><p>Now, in iOS 13 and watchOS 6, both apps are installed straight from the App Store directly on the relevant device, each device installs its own app. This applies to all apps in the store today. iOS app no longer has the Watch app bundled inside, it no longer counts towards your iOS app cellular download limit if you don't need it.</p><p>This also enables asset/variant thinning for Watch apps - if you have a Series 4 watch, only Series 4 assets are downloaded to the watch (previously the iOS app had to include all variants in the bundled Watch app for any possible watches).</p><p>All current apps belong to the category of “dependent apps”, i.e. the Watch app depends on the iOS app. If you install a dependent app on the Watch, the iPhone will automatically install the matching companion iOS app. (Watch app launch is blocked until the iOS app is installed.)</p><p>On the other hand, independent apps can live without their iOS counterpart installed. They are backwards-compatible with earlier OSes.</p><ul><li>to make an app independent, check the checkbox “Supports Running Without iOS App Installation”</li></ul><p>Watch-only apps - apps that do not even have an iOS counterpart - are also possible, they require watchOS 6.</p><h2>Other improvements</h2><p>Debugging in the simulator is now up to 10x faster, on the device up to 2x faster.</p><p>Controls:</p><ul><li>added text field control (<a href="https://developer.apple.com/documentation/watchkit/wkinterfacetextfield"><code>WKInterfaceTextField</code></a>) to let you implement sign in forms (use <a href="https://developer.apple.com/documentation/watchkit/wkalertaction"><code>WKAlertAction</code></a> for "terms &amp; conditions")</li><li>Sign In With Apple button (<a href="https://developer.apple.com/documentation/authenticationservices"><code>AuthenticationServices</code></a>, <a href="https://developer.apple.com/documentation/watchkit/wkinterfaceauthorizationappleidbutton"><code>WKInterfaceAuthorizationAppleIDButton</code></a>)</li></ul><p>Added continuity keyboard for Watch ⭤ iOS - you can e.g. enter passwords to log in on the watch using your iOS device.</p><ul><li>for proper handling of logging in, set <a href="https://developer.apple.com/documentation/watchkit/wkinterfacetextfield/3120036-settextcontenttype"><code>textContentType</code></a> and associated domains</li></ul><p>Getting health authorization is now also supported on watchOS.</p><h3>Push notifications</h3><p>Watch is now a standalone push target, you can send user-visible notifications and background notifications straight to the watch.</p><p>New APNs request header - <code>apns-push-type</code>: set to <code>alert</code> for user-visible notifications, and <code>background</code> for background notifications.</p><ul><li>required for watchOS</li></ul><p>Added notification service extension support for e.g. decrypting notifications.</p><p>Complication pushes can also be sent straight to the watch (<a href="https://developer.apple.com/documentation/pushkit">PushKit</a>).</p><h3>Networking</h3><p>It’s now preferred to use URLSession than WatchConnectivity.</p><ul><li>WC is still available for any iOS-to-watchOS specific communication, but only use it if you really need to</li><li>check <a href="https://developer.apple.com/documentation/watchconnectivity/wcsession/3235766-iscompanionappinstalled"><code>WCSession.isCompanionAppInstalled</code></a></li><li>make sure to use background sessions</li></ul><p>CloudKit - full <a href="https://developer.apple.com/documentation/cloudkit/cksubscription"><code>CKSubscription</code></a> / CloudKit notifications support.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10104</guid><title>Adopt the new look of macOS</title><description>Make over your Mac apps: Discover how you can embrace the new design of macOS Big Sur and adopt its visual hierarchy, design patterns, and behaviors. We’ll explore the latest updates to AppKit around structural items and common controls, and show you how you can adapt more customized interfaces with just a bit of adoption work. And find out how you can incorporate custom accent colors and symbols to further personalize your app.

To get the most out of this session, you should be familiar with AppKit and SF Symbols. For additional information on symbols, watch "SF Symbols 2.0”.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10104</link><pubDate>Mon, 9 Nov 2020 01:00:15 +0700</pubDate><content:encoded><![CDATA[<p>macOS has an all new design:</p><ul><li>a new toolbar with inline title, big bold controls and integration with the window’s split view</li><li>full height sidebars with colorful icons and updated symbol iconography</li><li>new appearance for lists/tables using a new inset selection style</li></ul><p>Most of these changes happen automatically to your app (if you’re using classes like <a href="https://developer.apple.com/documentation/appkit/nstoolbar"><code>NSToolbar</code></a> and <a href="https://developer.apple.com/documentation/appkit/nssplitviewcontroller"><code>NSSplitViewController</code></a>).</p><h2>Sidebars</h2><p>Sidebar: use <a href="https://developer.apple.com/documentation/appkit/nssplitviewcontroller"><code>NSSplitViewController</code></a>, items configured using <a href="https://developer.apple.com/documentation/appkit/nssplitviewitem/behavior/sidebar"><code>NSSplitViewItem.Behavior.sidebar</code></a></p><ul><li>use full size content window mask - <a href="https://developer.apple.com/documentation/appkit/nswindow/stylemask/1644646-fullsizecontentview"><code>NSWindow.StyleMask.fullSizeContentView</code></a>, so that content is laid out in the space normally taken by the title bar</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nsview"><code>NSView</code></a> properties to find the safe areas of the view:</p><ul><li><a href="https://developer.apple.com/documentation/appkit/nsview/3553227-safeareainsets"><code>safeAreaInsets</code></a>, <a href="https://developer.apple.com/documentation/appkit/nsview/3553228-safearealayoutguide"><code>safeAreaLayoutGuide</code></a>, <a href="https://developer.apple.com/documentation/appkit/nsview/3553229-safearearect"><code>safeAreaRect</code></a></li><li>also available on the storyboard (“Safe Area Layout Guide”)</li></ul><p>New view item in the library: "Window Controller with Sidebar" (<a href="https://developer.apple.com/documentation/appkit/nswindowcontroller"><code>NSWindowController</code></a> + <a href="https://developer.apple.com/documentation/appkit/nssplitviewcontroller"><code>NSSplitViewController</code></a>)</p><p>Opting out of the full height sidebar: <a href="https://developer.apple.com/documentation/appkit/nssplitviewitem/3608197-allowsfullheightlayout"><code>NSSplitViewItem.allowsFullHeightLayout</code></a></p><ul><li>use this when sidebar is typically collapsed, or when you need more space for the toolbar</li></ul><p>Accent colors:</p><ul><li>by default all sidebar icons are colored with user's chosen accent color</li><li>use <a href="https://developer.apple.com/documentation/appkit/nsoutlineviewdelegate"><code>NSOutlineViewDelegate</code></a> method <a href="https://developer.apple.com/documentation/appkit/nsoutlineviewdelegate/3626816-outlineview"><code>outlineView(_: tintConfigurationForItem:)</code></a> to customize, return an instance of <a href="https://developer.apple.com/documentation/appkit/nstintconfiguration"><code>NSTintConfiguration</code></a>:<ul><li><a href="https://developer.apple.com/documentation/appkit/nstintconfiguration/3626820-default"><code>.default</code></a> - always uses the system accent color</li><li><a href="https://developer.apple.com/documentation/appkit/nstintconfiguration/3626822-monochrome"><code>.monochrome</code></a> - gray monochrome</li><li><a href="https://developer.apple.com/documentation/appkit/nstintconfiguration/3626824-init"><code>init(preferredColor:)</code></a> - use this color when default (“rainbow”) accent color is used, but follow the accent color if it’s customized</li><li><a href="https://developer.apple.com/documentation/appkit/nstintconfiguration/3626823-init"><code>init(fixedColor:)</code></a> - a fixed color that is always used (e.g. the yellow star in Mail’s VIP folder)</li><li>use sidebar colors to distinguish different sections of the sidebar, or highlight a specific item like the VIP star</li><li>or use monochrome to de-emphasize groups</li></ul></li></ul><h2>Toolbars</h2><p>There’s no longer any special material behind the toolbar items, it’s a uniform part of the content of the window (this works automatically).</p><p>New toolbar styles, controlled through <a href="https://developer.apple.com/documentation/appkit/nswindow/3608199-toolbarstyle"><code>NSWindow.toolbarStyle</code></a> - <a href="https://developer.apple.com/documentation/appkit/nswindow/toolbarstyle"><code>NSWindowToolbarStyle</code></a>:</p><p><a href="https://developer.apple.com/documentation/appkit/nswindow/toolbarstyle/unified"><code>.unified</code></a></p><ul><li>the new standard - like in the new versions of system apps</li><li>larger controls, bold icons</li><li>inline title located at the leading edge of the title bar next to the sidebar</li><li>good choice for most windows</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nswindow/toolbarstyle/unifiedcompact"><code>.unifiedCompact</code></a></p><ul><li>more compressed style</li><li>regular sized controls, smaller toolbar height</li><li>this is what was previously used if the window was configured to hide the title bar</li><li>now supports an optional inline title</li><li>use when user’s focus should be on the content of the window and there aren’t many elements in the toolbar</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nswindow/toolbarstyle/preference"><code>.preference</code></a></p><ul><li>specifically designed for preference windows</li><li>automatic when you’re using <a href="https://developer.apple.com/documentation/appkit/nstabviewcontroller"><code>NSTabViewController</code></a> with the <a href="https://developer.apple.com/documentation/appkit/nstabviewcontroller/tabstyle/toolbar"><code>.toolbar</code></a> tab style</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nswindow/toolbarstyle/expanded"><code>.expanded</code></a></p><ul><li>what used to be the standard layout of the toolbar</li><li>title is centered on top of the toolbar and can expand across the window</li><li>large button icons with labels below</li><li>use when the window title is long, or the toolbar is heavily populated with items, or when you want to keep existing toolbar layout</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nswindow/toolbarstyle/automatic"><code>.automatic</code></a></p><ul><li>default value</li><li>determines the toolbar style based on your window structure</li><li>existing apps linked on older SDKs keep their old layout</li></ul><p>Toolbar buttons no longer have a border, a shape only appears when hovering</p><ul><li>controls with text fields show a slight border so that you know where you can click to focus</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nstoolbaritem"><code>NSToolbarItem</code></a> <a href="https://developer.apple.com/documentation/appkit/nstoolbaritem/1531777-minsize"><code>minSize</code></a> &amp; <a href="https://developer.apple.com/documentation/appkit/nstoolbaritem/1526451-maxsize"><code>maxSize</code></a> properties are deprecated - macOS can automatically give your controls a proper size; you can still use constraints if necessary.</p><p>New <a href="https://developer.apple.com/documentation/appkit/nswindow/3608198-subtitle"><code>NSWindow.subtitle</code></a> property:</p><ul><li>shows a smaller subtitle under the window title, e.g. the message count in Mail</li><li>in <a href="https://developer.apple.com/documentation/appkit/nswindow/toolbarstyle/expanded"><code>.expanded</code></a> style it appears next to the title</li></ul><p>Controls like back/forward buttons should be put on the leading edge of the title bar, before the title</p><ul><li>set <a href="https://developer.apple.com/documentation/appkit/nstoolbaritem/3622481-isnavigational"><code>NSToolbarItem.isNavigational</code></a> to position them there</li><li>users can add and remove them from the toolbar, but can only put them in the leading edge area</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nssearchtoolbaritem"><code>NSSearchToolbarItem</code></a>:</p><ul><li>new toolbar control for search text fields</li><li>appears as a text field if there’s enough space, otherwise collapsed into an icon</li><li>use <a href="https://developer.apple.com/documentation/appkit/nssearchtoolbaritem/3634330-searchfield"><code>searchField</code></a> property to access the text field itself</li><li>works on older versions of macOS</li></ul><p><a href="https://developer.apple.com/documentation/appkit/nstrackingseparatortoolbaritem"><code>NSTrackingSeparatorToolbarItem</code></a>:</p><ul><li>a separator that extends the separator line of the window content’s split view upwards through the toolbar</li><li>when creating, you pass it the split view to track and the index of its divider</li></ul><p>To position items in the title bar area of the sidebar, include an <a href="https://developer.apple.com/documentation/appkit/nstoolbaritem/identifier/3622482-sidebartrackingseparator"><code>NSToolbarItem.Identifier.sidebarTrackingSeparator</code></a> item and add those items <em>before</em> the sidebar separator item.</p><p>The toolbar has no border below, but a slight shadow appears below it to separate it from the content when the content is scrolled</p><ul><li>this happens if the scroll view fills the frame and you’re using <a href="https://developer.apple.com/documentation/appkit/nswindow/stylemask/1644646-fullsizecontentview"><code>.fullSizeContentView</code></a></li><li>otherwise, there will be a separator regardless of the scrolling position</li><li>customize toolbar separator in the window using <a href="https://developer.apple.com/documentation/appkit/nswindow/3622489-titlebarseparatorstyle"><code>NSWindow.titlebarSeparatorStyle</code></a>, or in split view per section using <a href="https://developer.apple.com/documentation/appkit/nssplitviewitem/3622473-titlebarseparatorstyle"><code>NSSplitViewItem.titlebarSeparatorStyle</code></a></li></ul><h2>Controls</h2><p>New modern design of controls like popup buttons, sliders, segmented controls</p><p>New multicolor system accent color - uses each app’s preferred accent color</p><ul><li>define the app’s global accent color in the asset catalog (can be different for light/dark mode) + set the name in build options</li><li>people can still chose one of the previously available accent colors, and then that color overrides your setting so they can use that color everywhere</li><li>it’s preferred to use named colors like <a href="https://developer.apple.com/documentation/appkit/nscolor/3000782-controlaccentcolor"><code>controlAccentColor</code></a>, <a href="https://developer.apple.com/documentation/appkit/nscolor/2998830-selectedcontentbackgroundcolor"><code>selectedContentBackgroundColor</code></a>, <a href="https://developer.apple.com/documentation/appkit/nscolor/1532031-keyboardfocusindicatorcolor"><code>keyboardFocusIndicatorColor</code></a> instead of explicitly using your own color for controls</li></ul><p>New <a href="https://developer.apple.com/documentation/appkit/nscontrol/controlsize/large"><code>.large</code></a> control size</p><ul><li>e.g. when you need one large action button</li><li>works for: a few kinds of buttons, text fields, search fields, segmented controls</li><li>also used in the unified toolbar style, and in system alerts</li></ul><p>New inset style for table selection - adds extra padding, taller default row heights</p><p><a href="https://developer.apple.com/documentation/appkit/nstableview/style"><code>NSTableView.style</code></a>:</p><ul><li><a href="https://developer.apple.com/documentation/appkit/nstableview/style/automatic"><code>.automatic</code></a> (default)</li><li><a href="https://developer.apple.com/documentation/appkit/nstableview/style/fullwidth"><code>.fullWidth</code></a> - edge to edge selection background, like previously</li><li><a href="https://developer.apple.com/documentation/appkit/nstableview/style/inset"><code>.inset</code></a></li><li><a href="https://developer.apple.com/documentation/appkit/nstableview/style/sourcelist"><code>.sourceList</code></a> - new appearance of sidebar source list</li><li>automatic style uses <code>.inset</code> by default (on apps built on the latest SDK), <code>.fullWidth</code> in bordered scroll views, <code>.sourceList</code> in source lists<ul><li>you can check the <a href="https://developer.apple.com/documentation/appkit/nstableview/3622474-effectivestyle"><code>effectiveStyle</code></a> property to see what style is actually used</li><li>the old <a href="https://developer.apple.com/documentation/appkit/nstableview/selectionhighlightstyle/sourcelist"><code>SelectionHighlightStyle.sourceList</code></a> setting is deprecated</li></ul></li></ul><h2>Text</h2><p>System text styles are now available (Large Title, Headline, Body etc.) - but without Dynamic Type, so they have one constant size.</p><pre><code><span class="type">NSFont</span>.<span class="call">preferredFont</span>(forTextStyle: options:)
<span class="type">NSFontDescriptor</span>.<span class="call">preferredFontDescriptor</span>(forTextStyle: options:)
</code></pre><h2>Symbol images</h2><p>SF Symbols is now available on the Mac:</p><pre><code><span class="type">NSImage</span>.<span class="keyword">init</span>?(systemSymbolName: accessibilityDescription:)
</code></pre><ul><li>they can scale to different font sizes and weights</li><li>toolbar and sidebar items automatically configure symbol images to match the size &amp; style of the container</li><li>it’s best to use them inside <a href="https://developer.apple.com/documentation/appkit/nsimageview"><code>NSImageView</code></a> (see <a href="https://developer.apple.com/documentation/appkit/nsimageview/3667456-symbolconfiguration"><code>symbolConfiguration</code></a> property)</li><li>to customize symbol configuration, use <a href="https://developer.apple.com/documentation/appkit/nsimage/3656508-withsymbolconfiguration"><code>NSImage.withSymbolConfiguration(…)</code></a></li><li>most of existing named system images now return some kind of symbol image from SF Symbols</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10039</guid><title>Build document-based apps in SwiftUI</title><description>Learn how to build a document-based app entirely in SwiftUI! We’ll walk you through the DocumentGroup API and how it composes with your App and Scenes, allowing you to add out-of-the-box support for document management — such as document browsing and standard commands — no heavy lifting required. You’ll learn to set up Universal Type Identifiers as well as gain understanding into what makes a top-notch document-based app.

To get the most out of this session, you should first familiarize yourself with building apps in SwiftUI. Check out "App essentials in SwiftUI" to learn more.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10039</link><pubDate>Sun, 8 Nov 2020 04:09:17 +0700</pubDate><content:encoded><![CDATA[<p>For document based apps, use the <a href="https://developer.apple.com/documentation/swiftui/documentgroup"><code>DocumentGroup</code></a> scene as the main scene of the app:</p><pre><code><span class="type">DocumentGroup</span>(newDocument: <span class="type">MyDocument</span>()) { file <span class="keyword">in</span>
  <span class="type">ContentView</span>(document: file.<span class="property">$document</span>)
}
</code></pre><p>The content view receives a binding to the document contents, so when it changes the contents, the system knows it was modified</p><p>Document based apps have a “Document Types” section in the <code>Info.plist</code>, where you declare Uniform Type Identifiers of document types associated with your app:</p><ul><li>Imported types ⭢ documents from other apps or sources that your app is able to open</li><li>Exported types ⭢ document types owned by your app</li></ul><p><a href="https://developer.apple.com/documentation/swiftui/texteditor"><code>TextEditor()</code></a> - built in text view type</p><p>The type that implements the document model conforms to <a href="https://developer.apple.com/documentation/swiftui/filedocument"><code>FileDocument</code></a> (for value types) and declares its own <a href="https://developer.apple.com/documentation/uniformtypeidentifiers/uttype"><code>UTType</code></a> instances that represent imported and exported file types:</p><pre><code><span class="keyword">import</span> UniformTypeIdentifiers

<span class="keyword">extension</span> <span class="type">UTType</span> {
    <span class="keyword">static var</span> exampleText: <span class="type">UTType</span> {
        <span class="type">UTType</span>(importedAs: <span class="string">"com.example.plain-text"</span>)
    }

    <span class="keyword">static let</span> shapeEditDocument =
        <span class="type">UTType</span>(exportedAs: <span class="string">"com.example.ShapeEdit.shapes"</span>)
}
</code></pre><p>Imported type needs to be a computed property, because the value returned from the constructor may change between calls while the app is running, depending on system configuration. Exported type can just be assigned once and stored.</p><p>The document type provides a list of types (own and generic) that it can accept:</p><pre><code><span class="keyword">static var</span> readableContentTypes: [<span class="type">UTType</span>] { [.<span class="dotAccess">exampleText</span>] }
</code></pre><p>It also has methods for reading and writing its document to/from a file, which you need to implement, using e.g. Codable to encode/decode the value into your chosen format:</p><pre><code><span class="keyword">init</span>(fileWrapper: <span class="type">FileWrapper</span>, contentType: <span class="type">UTType</span>) <span class="keyword">throws</span> { ... }

<span class="keyword">func</span> write(to fileWrapper: <span class="keyword">inout</span> <span class="type">FileWrapper</span>, contentType: <span class="type">UTType</span>) <span class="keyword">throws</span> { ... }
</code></pre><p>In those methods, you can assume that the content type is one of those you declared as accepted by your app.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10652</guid><title>Meet the new Photos picker</title><description>Let people select photos and videos to use in your app without requiring full Photo Library access. Discover how the PHPicker API for iOS and Mac Catalyst ensures privacy while providing your app the features you need.

PHPicker is the modern replacement for UIImagePickerController. In addition to its privacy-focused approach, the API also provides additional features for your app like search, multi-image selection, and the ability to zoom in or out on on the photo grid. We’ll show you how PHPicker can help most apps avoid asking for direct library access and how you can implement it to improve the overall experience for people interacting with your app.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10652</link><pubDate>Sun, 8 Nov 2020 03:40:14 +0700</pubDate><content:encoded><![CDATA[<p>PHPicker: a new system-provided picker screen that gives you access to photos and videos from the user’s photo library.</p><p>It’s recommended that you use this picker instead of building your own custom photo selection UI.</p><p>New version includes:</p><ul><li>a new design and new easy to use API</li><li>an integrated search</li><li>easy multi-select</li><li>zoom gesture</li></ul><p>PHPicker is private by default:</p><ul><li>the picker screen runs out of process and talks to the app via XPC</li><li>your app has no direct access to the photos library</li><li>it doesn’t need to get photo library permission (don’t ask for it unless you <em>really</em> need it)</li><li>you only get selected photos and videos in response</li></ul><p>PHPicker is not a name of a single class, but a set of classes that work together.</p><h2>Elements of the API</h2><p><a href="https://developer.apple.com/documentation/photokit/phpickerconfiguration"><code>PHPickerConfiguration</code></a> – lets you specify limits and filters:</p><ul><li><code>selectionLimit</code> – number of items that can be selected (1 by default, 0 = unlimited)</li><li><code>filter</code> – e.g. <code>.images</code> or <code>.any(of: [.videos, .livePhotos])</code></li></ul><p><a href="https://developer.apple.com/documentation/photokit/phpickerviewcontroller"><code>PHPickerViewController</code></a> – the main view controller handling the picker:</p><ul><li>the picker doesn’t dismiss itself automatically, call <code>picker.dismiss(animated:)</code> when you get the response</li></ul><p><a href="https://developer.apple.com/documentation/photokit/phpickerviewcontrollerdelegate"><code>PHPickerViewControllerDelegate</code></a> – delegate for the picker:</p><ul><li><a href="https://developer.apple.com/documentation/photokit/phpickerviewcontrollerdelegate/3606609-picker"><code>picker(_: didFinishPicking results:)</code></a></li></ul><p><a href="https://developer.apple.com/documentation/photokit/phpickerresult"><code>PHPickerResult</code></a> – an array of these objects is passed to the app in response</p><ul><li>get <code>itemProvider</code> from the result</li><li>check <code>itemProvider.canLoadObject(ofClass: UIImage.self)</code></li><li>get the image via <code>itemProvider.loadObject(ofClass: UIImage.self) { … }</code></li></ul><p>You can normally extract picked photos from <code>PHPickerResult</code> item providers without touching the <code>PHPhotoLibrary</code> at all, but if you do need to access the photo library anyway, then pass it to <a href="https://developer.apple.com/documentation/photokit/phpickerconfiguration/3616114-init"><code>PHPickerConfiguration.init</code></a> and get <code>assetIdentifier</code> references from the picker results.</p><p>If you use PHPicker with photo library access and you only got limited access to a subset of photos, then:</p><ul><li>PHPicker will still let the user choose photos from their whole library</li><li>but the selection you have direct access to will not be extended by what they choose in the picker</li></ul><p>The photo library APIs from <a href="https://developer.apple.com/documentation/uikit/uiimagepickercontroller"><code>UIImagePickerController</code></a> are deprecated.</p><blockquote><p>Full blog post here: <a href="https://mackuba.eu/20https://www.wwdcnotes.com/photo-library-changes-ios-14/">https://mackuba.eu/20https://www.wwdcnotes.com/photo-library-changes-ios-14/</a></p></blockquote>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10665</guid><title>Meet Safari Web Extensions</title><description>When you create a Safari Web Extension, you can help people get common online tasks done more quickly and efficiently. We’ll show you how to build a new Safari Web Extension and host it on the App Store, as well as how to use the safari-web-extension-converter tool to migrate existing extensions from other web browsers like Chrome, Firefox, or Edge with very little effort.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10665</link><pubDate>Sun, 8 Nov 2020 03:12:08 +0700</pubDate><content:encoded><![CDATA[<p>Existing extension ecosystem:</p><ul><li>content blockers (iOS &amp; macOS)</li><li>share extensions - can run JS on the currently opened web page and return data to the extension</li><li>Safari app extensions on macOS</li></ul><p>If you’re a web developer and don’t want to learn Swift to build an extension, or you have an existing extension for Chrome/Firefox/etc., you can now use the new Safari Web Extensions API.</p><p>Safari Web Extensions:</p><ul><li>extensions built primarily using HTML, JS and CSS, like legacy Safari extensions</li><li>API compatible with other browsers (the <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions">WebExtensions</a> standard)</li><li>improved user privacy controls</li><li>extensions are sold through the App Store</li><li>some WebExtensions APIs are missing, so provide feedback if you want something added</li></ul><p>Like other extensions, Web Extensions must be packaged inside a native Mac app. Xcode 12 is required to build them.</p><p>A command-line tool is provided which wraps an exising web extension (e.g. for Chrome/Firefox) into a new app:</p><pre><code>xcrun safari-web-<span class="keyword">extension</span>-converter […] /path
</code></pre><ul><li>lets you know if any features are not available</li><li>the largest icon in the manifest is used as the app icon (it’s recommended to include 512×512 and 1024×1024 icons)</li></ul><p>To create a new extension from scratch, create a “Safari Extension App” project or add a “Safari Extension” target, and choose Type = Safari Web Extension.</p><h2>Extension privacy</h2><ul><li>If your extension needs access to specific sites, the user will be asked for permission to run it on that site for one day or always</li><li>Optional permissions: you can include the URL pattern under <code>optional_permissions</code> key and then ask for access using <code>browser.permissions.request(…)</code> at the moment when you require access</li><li>The Safari preferences window page of your extension shows information about what kind of access was granted to the extension</li><li>It’s best to use the <code>activeTab</code> permission, which grants access to the currently open page when the user interacts with your extension in some way</li><li>The hostname of the extension changes every time Safari is launched in order to prevent fingerprinting<ul><li>use <code>browser.runtime.getURL("/path/to/resource")</code> to create URLs to assets</li></ul></li></ul><h2>Debugging</h2><ul><li>Access the background page through the Develop menu</li><li>Content scripts are visible in the Sources tab for the page<ul><li>to run JS in the console in the context of a content script, choose the script from the pulldown menu in the corner</li></ul></li></ul><ul><li>Don’t rely on code being executed when the page loads, since the extension may not have permission to run yet at this point</li></ul><h2>Communicating between components</h2><p>Content script ⭢ background page:</p><pre><code>browser.<span class="property">runtime</span>.<span class="call">sendMessage</span>()
browser.<span class="property">runtime</span>.<span class="property">onMessage</span>.<span class="call">addListener</span>()
</code></pre><p>Background page ⭢ extension:</p><pre><code>browser.<span class="property">runtime</span>.<span class="call">sendNativeMessage</span>()
</code></pre><p>The message is handled by the <a href="https://developer.apple.com/documentation/foundation/nsextensionrequesthandling/1413395-beginrequest"><code>SafariWebExtensionHandler.beginRequest(with context:)</code></a> delegate method (requires the <code>nativeMessaging</code> permission).</p><p>Extension ⭢ background page:</p><ul><li>Use completion handler from <a href="https://developer.apple.com/documentation/foundation/nsextensioncontext"><code>NSExtensionContext</code></a> object in <a href="https://developer.apple.com/documentation/foundation/nsextensionrequesthandling/1413395-beginrequest"><code>beginRequest(with context:)</code></a> to send back a response</li></ul><p>App ⭢ background page:</p><ul><li><a href="https://developer.apple.com/documentation/safariservices/sfsafariapplication/2823941-dispatchmessage"><code>SFSafariApplication.dispatchMessage(...)</code></a> (check that the extension is turned on first)</li></ul><p>App ⭤ extension:</p><p>Shared <a href="https://developer.apple.com/documentation/foundation/nsuserdefaults"><code>NSUserDefaults</code></a> from an app group, or <a href="https://developer.apple.com/documentation/foundation/nsxpcconnection"><code>NSXPCConnection</code></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10219</guid><title>Build localization-friendly layouts using Xcode</title><description>Localizing your app is a wonderful way to share your work with a worldwide audience and make it relevant to more cultures and languages. We’ll show you how you can prepare for localization before ever translating a word by building thoughtful layouts for your app. Learn how to structure your UI in Xcode, identify common issues prevalent with more verbose and right-to-left languages, and easily adapt your interfaces to provide a great experience for everyone.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10219</link><pubDate>Wed, 4 Nov 2020 22:15:44 +0700</pubDate><content:encoded><![CDATA[<h2>Design best practices</h2><ul><li>Avoid fixed widths or frames</li><li>Avoid fixed spacing between distant objects</li><li>Allow multiple lines of wrapped text when it makes sense</li><li>Do not place too many controls in a fixed space (e.g. four buttons side by side)</li></ul><h2>Demo project</h2><p>The <a href="https://developer.apple.com/documentation/xcode/autosizing_views_for_localization_in_ios">demo project</a> comes with a <code>ReadjustingStackView</code> which switches axis (horizontal -&gt; vertical) when the optimal horizontal space, computed via <a href="https://developer.apple.com/documentation/uikit/uiview/1622624-systemlayoutsizefitting"><code>systemLayoutSizeFitting()</code></a>, exceeds the available space.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10216</guid><title>What's new in ResearchKit</title><description>ResearchKit continues to simplify how developers build research and care apps. Explore how the latest ResearchKit updates expand the boundaries of data researchers can collect. Learn about features like enhanced onboarding, extended options for surveys, and new active tasks. Discover how Apple has partnered with the research community to leverage this framework, helping developers build game-changing apps that empower care teams and the research community.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10216</link><pubDate>Sat, 31 Oct 2020 11:26:49 +0700</pubDate><content:encoded><![CDATA[<h2>How to get started</h2><ul><li><a href="https://www.researchandcare.org">researchandcare.org</a></li><li><a href="https://github.com/ResearchKit">github.com/ResearchKit</a></li></ul><h2>Onboarding updates</h2><ul><li>ResearchKit comes in with a baked-in onboarding screen (<a href="http://researchkit.org/docs/Classes/ORKInstructionStep.html"><code>ORKInstructionStep</code></a>) ready to be used in an app:<ul><li>we can customize thing such as image, title</li><li>can have multiple steps</li><li>a webview step (<a href="http://researchkit.org/docs/Classes/ORKWebViewStep.html"><code>ORKWebViewStep</code></a>) can now have an in-line signature section after the webview content</li><li>new request permission step to request user for authorizations to system features (<code>ORKRequestPermissionStep</code>)</li></ul></li></ul><h2>Survey enhancements</h2><ul><li>now ResearchKit uses in-line labels to display errors instead of alerts</li><li>we can now enable a "I Don't Know" button to let users skip an answer if they don't want to answer a question (the <code>I don't know</code> text can be customized)</li><li>new <code>ReviewViewController</code> that allows participants to view a breakdown of all the questions they were asked and the response they gave (users will be able to edit their answers from there as well)</li></ul><h2>Active tasks</h2><ul><li>many UI and UX improvements around hearing tasks.</li></ul><h2>3D models</h2><ul><li>Two new classes to visualize 3D models:<ul><li><code>ORK3DModelStep</code></li><li><code>ORKUSDZModelManager</code></li></ul></li></ul><p>How-to:</p><ol><li>Add a USDZ model into the project</li><li>Create a <code>ORKUSDZModelManager</code> instance</li><li>Create a <code>ORK3DModelStep</code> and present it</li></ol>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10664</guid><title>Getting started with HealthKit</title><description>HealthKit helps you build world-class health and fitness apps by centralizing health data from third-party apps, iPhone, Apple Watch, and external health devices. Discover how you can manage authorization and privacy around Health data, read and write data to the shared Health Store, and use HealthKit’s built-in queries to fetch data and calculate statistics for that data.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10664</link><pubDate>Sat, 31 Oct 2020 11:26:02 +0700</pubDate><content:encoded><![CDATA[<h2>What's HealtKit?</h2><p>HealthKit is a framework that creates a central repository of all the user's health data, allowing applications to read data from it and also contribute data to it.</p><p>We can interact with health data on multiple devices including our iPhone, Apple Watch, and iCloud.</p><h2>How to build a HealthKit app</h2><p>Three steps:</p><ol><li>Setup HealthKit</li><li>Save data to HealthKit</li><li>Read and display HealthKit data</li></ol><h3>Setup HealthKit</h3><ul><li>Enable HealthKit capability</li><li>Check whether the current platform (where the app is running on) supports HealthKit (via <a href="https://developer.apple.com/documentation/healthkit/hkhealthstore/1614180-ishealthdataavailable"><code>HKHealthStore.isHealthDataAvailable()</code></a>)</li><li>Create an <a href="https://developer.apple.com/documentation/healthkit/hkhealthstore">HKHealthStore</a>, which is the access point for all data managed by HealthKit</li></ul><h3>Save data to HealthKit</h3><p>All different types of health data are stored as <a href="https://developer.apple.com/documentation/healthkit/samples">Health Samples</a> (<a href="https://developer.apple.com/documentation/healthkit/hksample"><code>HKSample</code></a>).</p><p>Health Samples are all structured in a very similar pattern:</p><ul><li>they have an associated type of data that they represent</li><li>the value of that type of data</li><li>the time these health events occurred</li><li>meta-data representing any additional information about these samples</li></ul><p>To save data to HealthKit:</p><ul><li>Request write access to HealthKit</li><li>Create Health samples</li><li>Save the samples via the <code>HealthStore</code></li></ul><h3>Read data from HealthKit</h3><p>HealthKit offers <a href="https://developer.apple.com/documentation/healthkit/queries">queries</a> to read HealthKit data</p><p>To read data from HealthKit:</p><ul><li>Create a query object, for each object you'll need to define:<ul><li>the type of data that you want to read</li><li>a filter (predicate) that will restrict the results returned from your query</li></ul></li></ul><ul><li>Execute the query via the <code>HealthStore</code></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10151</guid><title>What's new in CareKit</title><description>Build feature-rich research and care apps with CareKit: Learn about the latest advancements to our health framework, including new views for its modular architecture, improvements to the data store, and tighter integration with other frameworks on iOS. And discover how the open-source community continues to leverage CareKit to allow developers to push the boundaries of digital health — all while preserving privacy.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10151</link><pubDate>Sat, 31 Oct 2020 11:25:04 +0700</pubDate><content:encoded><![CDATA[<h2>How to get started</h2><ul><li><a href="https://www.researchandcare.org">researchandcare.org</a></li><li><a href="https://github.com/carekit-apple/">github.com/carekit-apple</a></li></ul><h2>What is CareKit?</h2><p>CareKit is an open-source framework that helps you build beautiful care apps.</p><p>Three components:</p><ul><li>CareKitUI: provides static views that are perfect for displaying that data.</li><li>CareKitStore: provides health flavored data models and a core data layer for persistence.</li><li>CareKit: ties the UI and store layers together by providing synchronization between the two</li></ul><h2>What's new</h2><ul><li>CareKitUI:<ul><li>Some UIKit views now also have a SwiftUI variant</li><li>New SwiftUI-exclusive views</li></ul></li></ul><ul><li>CareKit:<ul><li>Synchronized SwiftUI views</li><li>WatchOS support (via SwiftUI)</li></ul></li></ul><ul><li>CareKitStore:<ul><li>You can now use data in HealthKit alongside CareKit data to create HealthKit-driven tasks</li><li><a href="https://en.wikipedia.org/wiki/Fast_Healthcare_Interoperability_Resources">FHIR</a> compatibility via the new <code>CareKitFHIR</code> package</li><li>New CareKit Remote synchronization APIs</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc12/703</guid><title>Core Bluetooth 101</title><description>The CoreBluetooth framework lets your iOS applications communicate with Bluetooth Low Energy devices over a personal area network (PAN). Learn about the Bluetooth LE technology and the APIs we provide for designing apps that connect to a Bluetooth LE peripheral and read, write, and request notification of changes to the characteristics of the peripheral.</description><link>https://www.wwdcnotes.com/notes/wwdc12/703</link><pubDate>Sat, 31 Oct 2020 00:58:57 +0700</pubDate><content:encoded><![CDATA[<p>This is an introduction to Bluetooth Low Energy (BLE). This biggest benefit is that the Bluetooth device take sufficiently less energy compared to classic Bluetooth so it can now be powered by a cheap battery. This is accomplished by doing the following 3 things:</p><ol><li>Less time on the air</li><li>Less energy when on the air</li><li>Completely new architecture</li></ol><p>Power consumption is about 6 times less then classic, but the max amount of data transferred is over 20 worse.</p><h2>Use cases for BLE</h2><ul><li>Health Care</li><li>Sports &amp; Fitness</li><li>Security</li><li>Home Automation</li><li>Home Entertainment</li><li>Kids Toys</li><li>Pay Systems</li><li>Time Syncing Services</li><li>Proximity (How close things are, via RSSI)</li></ul><h3>Key Terms</h3><h3>Dual Mode vs Single Mode</h3><ul><li>Dual mode can do both Bluetooth Classic and BLE</li><li>Single mode can only do BLE</li></ul><h3>Client &amp; Server</h3><ul><li>Server has the data</li><li>Client is Central</li><li>Server is Peripheral</li><li>iOS Device can be either central or peripheral</li><li>Peripheral can only connect to one Central</li><li>Central can connect to many Peripherals</li></ul><h3>Discovering the Device</h3><ul><li>Broadcaster (Central) advertises on 40 different frequencies under 3 channels it's services</li><li>Observer (Peripheral) scans for services</li><li>An advertising interval is the amount of time between packets and the shorter the time the more battery that is used.</li></ul><h3>Connecting to the device</h3><ul><li>A connection request is sent from the Observer to the Broadcaster. The Broadcaster accepts, then data can be transferred between the two</li><li>There is analogous connection interval which limits the Peripheral to only sending data at certain times.</li></ul><h3>Services</h3><ul><li>Service is a description of the set of data.</li><li>A service contains multiple characteristics</li></ul><h3>Characteristics</h3><ul><li>Characteristics are specific values related to the service.</li></ul><p>A characteristic contains the following:</p><ul><li>UUID</li><li>value</li><li>properties (read, write)</li><li>client configuration (notifications)</li><li>additional descriptors (you can define)</li></ul><h2>Core Bluetooth Principles</h2><ul><li>Simple</li><li>Powerful</li><li>Build on Bluetooth 4.0 standard</li></ul><h2>Your App</h2><ul><li>There nothing in the OS that manages BLE, so your app is responsible for:<ul><li>Discovery</li><li>Connection Management</li><li>Data Exchange</li><li>Device Management</li></ul></li></ul><h2>Where is BLE supported?</h2><ul><li>iPhone 4S<ul><li>Mac mini</li><li>iPad</li><li>MacBook</li><li>iOS Simulator</li></ul></li></ul><h2>Core Bluetooth Objects</h2><h3>Main Objects</h3><ul><li><code>CBCentral</code></li><li><code>CBCentralManager</code></li><li><code>CBPeripheral</code></li><li><code>CBPeripheralManager</code></li></ul><h3>Data Objects</h3><ul><li>CBService<ul><li>CBMutableService</li><li>CBCharacteristic</li><li>CBMutableCharacteristic</li></ul></li></ul><h3>Helper Objects</h3><ul><li>CBUUID<ul><li>CBATTRequest</li></ul></li></ul><h2>iOS Backgrounding Modes</h2><ol><li>Event-based Peripherals: something has happened, tell the user</li><li>Session-based Peripherals: full access to peripherals</li></ol><h2>Heart Rate Demo</h2><p>Found <a href="https://developer.apple.com/library/archive/samplecode/HeartRateMonitor/">here</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10073</guid><title>Empower your intents</title><description>When you create an intent for your app, you can help people accomplish tasks quickly by using it as part of a shortcut or when asking Siri. Learn how to adopt Siri more easily than ever when you use SiriKit’s in-app intent handling, and how to improve Siri performance with existing Intents app extensions. We'll also show you how to leverage features in SiriKit to improve the experience of using your actions — like including images and subtitles for a rich conversational experience. And find out how to fine tune support for intents in your codebase to make your life as a developer easier.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10073</link><pubDate>Thu, 17 Sep 2020 11:56:18 +0700</pubDate><content:encoded><![CDATA[<h2>Overview</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10073/overview.png"/><ul><li>SiriKit encompasses the Intents and Intents UI frameworks which you use to integrate your services with Siri, Shortcuts, and maps</li><li>In iOS 14 you can use intents to add configuration and intelligence to widgets</li><li>An Intents UI app extension displays custom UI in the Siri shortcuts or maps interface</li><li>An Intents app extension receives user requests from surrogate and turns them into app specific actions such as sending the message</li></ul><h2>In-app intent handling</h2><ul><li>New in iOS 14</li><li>When should you use it?<ul><li>When the intent controls media playback/workouts</li><li>When the intent affects the apps user interface live on screen</li><li>When the intent needs more memory (e.g. photo/video editing)</li></ul></li></ul><h3>How to adopt in-app intent handling</h3><ul><li>Make sure to support multiple windows</li><li>When your app is launched in response to a SiriKit request, it will be launched without any <code>UIScene</code> object connected to your app</li><li>List all intents that you would like to handle inside of your application in the <code>Support intents</code> section of your apps target</li><li>Implement the <code>AppDelegate</code>'s <a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate/3548063-application"><code>application(_:handlerFor:)</code></a></li></ul><h2>What's new in iOS 14</h2><ul><li>Rich Disambiguation:<ul><li>In iOS 13 we were able to provide a list of options in case of ambiguity</li><li>This year we can add an image and a subtitle for each option</li><li>We can tell Siri to paginate our items (to present to the user)</li></ul></li></ul><ul><li>Dynamic Search for dynamic options</li><li>Parameters can be mark configurable and resolvable separately. Siri and the Shortcuts app will not resolve parameters which are marked as unresolvable</li></ul><h2>Tips</h2><ul><li>Custom intents deprecation<ul><li>We can now mark intents as deprecated in the Xcode 12 inspector.</li><li>This will be shown in the shortcuts.app: <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10073/deprec.png"/></li></ul></li></ul><ul><li><ul><li>The action will be hidden when creating new shortcuts</li></ul></li></ul><ul><li>Custom classes names:<ul><li>Classes are generated for you when defining when custom intents, custom types, or custom enums</li><li>You can now specify your generated class name in the Xcode inspector of your intent</li><li>Alternatively, you can specify a common class prefix used for all custom intense types and enums in the project document inspector of your target where the code generation needs to happen</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10148</guid><title>Inspect, modify, and construct PencilKit drawings</title><description>Make Apple Pencil an even more useful tool for drawing and writing within your app. With PencilKit, you can delve into the strokes, inks, paths, and points that comprise a drawing, use these to build features that use recognition, and modify drawings in response to input. Discover how you can dynamically generate shapes and drawings and learn more about APIs like PKDrawings and PKStrokes.

To get the most out of this session, we recommend first checking out “Introducing PencilKit,” which provides an overview of the PencilKit framework in its WWDC19 debut, and WWDC20’s “What's new in PencilKit.”</description><link>https://www.wwdcnotes.com/notes/wwdc20/10148</link><pubDate>Thu, 17 Sep 2020 11:52:29 +0700</pubDate><content:encoded><![CDATA[<ul><li>In iOS 14, we have access to PencilKit's data model, this enable us to:<ul><li>Inspect the contents of what the users drew</li><li>React to what was drawn</li><li>Manipulate existing drawings</li><li>Dynamically create new drawings from scratch</li></ul></li></ul><h2>PKStroke</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10108/stroke.png"/><p>A <a href="https://developer.apple.com/documentation/pencilkit/pkstroke"><code>PKStroke</code></a> is composed by:</p><ul><li>A path, which provides the shape of the stroke</li><li>An ink, which describes the appearance of the stroke, its color and type</li><li>A transform, giving us the orientation and position of the stroke</li><li>A mask, created when the pixel eraser is used to erase only a portion of a stroke</li><li>The renderBounds, a.k.a. the bounding box that encompasses the entirety of the stroke when it is rendered, the renderBounds accounts for the effect of all the stroke properties including the path, ink, transform, and mask.</li></ul><h2>PKStrokePath</h2><ul><li>Describes the shape of the stroke, and the appearance of that shape as it changes along the path.</li><li>Gives you the width of the stroke at any point</li><li>The stroke path is a uniform cubic, B-spline of PencilKit stroke points<ul><li>The contents of a path the control points for the B-Spline <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10108/spline.png"/></li></ul></li></ul><ul><li><ul><li>To get points on the actual path, we need to interpolate the spline using <a href="https://developer.apple.com/documentation/pencilkit/pkstrokepath/3595222-interpolatedpoints"><code>interpolatedPoints(strideBy:)</code></a>. <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10108/interpolation.png"/></li></ul></li></ul><pre><code><span class="keyword">for</span> point <span class="keyword">in</span> path.<span class="call">interpolatedPoints</span>(strideBy: .<span class="call">distance</span>(<span class="number">50</span>)) {
  <span class="call">draw</span>(point)
}
</code></pre><h2>PKStrokePoint</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10108/point.png"/><p>A <code>PKStrokePoint</code> describe how a stroke appears at a certain location. It is composed by:</p><ul><li>A location</li><li>A size, for marker strokes won't be square</li><li>A rotation angle, or azimuth</li><li>An opacity</li><li>A force (same value from <code>UITouch</code> when the stroke was drawn)</li><li>A altitude (same value from <code>UITouch</code> when the stroke was drawn)</li><li>A time offset from path creation date</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10107</guid><title>What's new in PencilKit</title><description>PencilKit helps power creativity, writing, drawing, and animation in your iPad apps. Explore the latest improvements to our drawing and annotation framework, and discover how you can take advantage of APIs like PKToolPicker, PKCanvasView, and PKStroke to support new features in illustration and writing apps. 

To get the most out of this session, you should have a basic understanding of PencilKit. If you want to a refresher, “Introduction to PencilKit” from WWDC19 is a great place to start.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10107</link><pubDate>Thu, 17 Sep 2020 11:43:15 +0700</pubDate><content:encoded><![CDATA[<h2>New fatures</h2><ul><li>Rich-selection experience:<ul><li>Double-tap to select a word</li><li>Double-tap again to select a line</li><li>Grab selection handles to expand your selection</li></ul></li></ul><ul><li>Enhanced tap-and-pan gesture: you can make noncontiguous selections by brushing over specific strokes</li><li>Add space between scribbles/notes:<ul><li>Tap on the space between two lines</li><li>Tap <code>Insert Space</code> from the callout bar</li><li>Use the grab handle to adjust the amount of space</li></ul></li></ul><ul><li>New color picker:<ul><li>Saved colors</li><li>Eye dropper</li></ul></li></ul><ul><li>Catalyst support</li></ul><h2>Pencil vs hand drawing</h2><ul><li>New (iOS 14 only) system settings for users to choose if they would like to draw only with the pencil or with fingers as well.</li><li>All apps need to respect that, if you have your own drawing engine, check <a href="https://developer.apple.com/documentation/uikit/uipencilinteraction/3552414-preferspencilonlydrawing"><code>UIPencilInteraction.prefersPencilOnlyDrawing</code></a></li><li>This can also be toggled directly on the tool picker: <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10107/prefers.png"/></li></ul><ul><li><a href="https://developer.apple.com/documentation/pencilkit/pkcanvasview"><code>PKCanvasView</code></a> has been updated to reflect this preference with the new <a href="https://developer.apple.com/documentation/pencilkit/pkcanvasview/3552388-drawingpolicy"><code>drawingPolicy</code></a>, these are the possible values/behaviors:<ul><li><code>anyInput</code>: allows drawing on the canvas from any input source</li><li><code>pencilOnly</code>: pencil touches are the only input that draw on the canvas</li><li><code>default</code>:<ul><li>if the tool picker is displayed, it follows <code>UIPencilInteraction.prefersPencilOnlyDrawing</code></li><li>if the tool picker is hidden, it's the same as <code>pencilOnly</code></li></ul></li></ul></li></ul><ul><li>If you'd like to hide the <code>Draw with Finger</code> option in the tool picker (for example when your app is a pencil-only app) set the <a href="https://developer.apple.com/documentation/pencilkit/pktoolpicker/3552394-showsdrawingpolicycontrols"><code>PKToolPicker.showsDrawingPolicyControls</code></a> to <code>false</code>.</li></ul><ul><li>You can also create your own <code>PKToolPicker</code> instances:<ul><li>Need to be retained by your app</li><li>Each toolpicker can be used with different states with different canvases</li></ul></li></ul><h2>Strokes Access</h2><ul><li>PencilKit in iOS 14 provides access to strokes, for more, check session <a href="../10148"><code>Inspect, modify, and construct PencilKit drawings</code></a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10046</guid><title>Create complications for Apple Watch</title><description>When you add complications to a Watch app, people can access glanceable and up to date information directly from their watch face. We’ll show you how to create and build complications from the ground up and introduce you to Multiple Complications. Learn how to construct timelines, use families and templates, and discover best practices on crafting a thorough complication experience.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10046</link><pubDate>Thu, 17 Sep 2020 11:39:17 +0700</pubDate><content:encoded><![CDATA[<h2>Timelines</h2><ul><li>Representation of your complication's data over time</li><li>Enables ClockKit to query your app once and get all information needed</li><li>Extend or invalidate as necessary to ask ClockKit to re-query your app</li></ul><ul><li>Your complication will show an entry until the date of the next one</li></ul><h2>Complication building blocks</h2><ul><li>There are dozens of <a href="https://developer.apple.com/design/human-interface-guidelines/watchos/overview/complications/">watchOS families</a></li><li>Ideally you will want to support as many complication families as you can</li><li>For each family there are multiple <a href="https://developer.apple.com/design/human-interface-guidelines/watchos/overview/complications/">templates</a></li><li>All templates inherit from <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationtemplate"><code>CLKComplicationTemplate</code></a></li></ul><h2>Providing data</h2><ul><li>When providing a timeline, we're giving WatchKit a list of <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationtimelineentry"><code>CLKComplicationTimelineEntry</code></a> instances.</li><li>These will populate your complications</li><li>Each entry represents what your complications should look like at a certain point in time.</li><li>Each entry has two properties:<ul><li>Date, which is the date that this entry should be visible</li><li>Complication template, which is the template containing the data you want to display for this entry</li></ul></li></ul><ul><li>Your main interaction with ClockKit is through an object you create that conforms to <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationdatasource"><code>CLKComplicationDatasource</code></a>.</li><li>There's only one required method in this protocol:</li></ul><pre><code><span class="keyword">class</span> ComplicationController: <span class="type">NSObject</span>, <span class="type">CLKComplicationDataSource</span> {
    <span class="keyword">func</span> getCurrentTimelineEntry(
        for complication: <span class="type">CLKComplication</span>, 
        withHandler handler: <span class="keyword">@escaping</span> (<span class="type">CLKComplicationTimelineEntry</span>?) -&gt; <span class="type">Void</span>) {
        <span class="comment">// Call the handler with the current timeline entry</span>
        <span class="call">handler</span>(<span class="call">createTimelineEntry</span>(forComplication: complication, date: <span class="type">Date</span>()))
    }
}
</code></pre><ul><li>This function is used to get the current entry only, if we can/want to provide future entries as well, we will need to implement the following methods as well:</li></ul><pre><code><span class="keyword">extension</span> <span class="type">ComplicationController</span> {

    <span class="comment">// Specifies how far in the future you can provide entries</span> 
    <span class="keyword">func</span> getTimelineEndDate(
        for complication: <span class="type">CLKComplication</span>, 
        withHandler handler: <span class="keyword">@escaping</span> (<span class="type">Date</span>?) -&gt; <span class="type">Void</span>) {
        <span class="call">handler</span>(<span class="call">timeline</span>(for: complication)?.<span class="property">endDate</span>)
    }

    <span class="comment">// lets you provide as many entries as is appropriate up to the limit after the given date</span>
    <span class="keyword">func</span> getTimelineEntries(
        for complication: <span class="type">CLKComplication</span>, 
        after date: <span class="type">Date</span>, 
        limit: <span class="type">Int</span>, 
        withHandler handler: <span class="keyword">@escaping</span> ([<span class="type">CLKComplicationTimelineEntry</span>]?) -&gt; <span class="type">Void</span>) {
       <span class="call">handler</span>(<span class="call">timeline</span>(for: complication)?.<span class="call">entries</span>(after: date, limit: limit))
    }
}
</code></pre><h3>Reloading complications</h3><ul><li>Call <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationserver/1627891-reloadtimeline"><code>reloadTimeline(for:)</code></a> on the <code>.sharedInstance()</code> <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationserver"><code>CLKComplicationServer</code></a> to invalidate the current timeline (and trigger an update session to reload it)</li><li>Call <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationserver/1627895-extendtimeline"><code>extendTimeline(for:)</code></a> on the <code>.sharedInstance()</code> <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationserver"><code>CLKComplicationServer</code></a> to let ClockKit know we can now provide more entries</li></ul><h3>Data Providers</h3><ul><li>Provided by ClockKit to adapt the display of the same data/values in different templates or families of complications.</li><li><a href="https://developer.apple.com/documentation/clockkit/clkdatetextprovider"><code>CLKDateTextProvider</code></a> will take care of displaying a date for you</li></ul><pre><code><span class="keyword">let</span> longDate: <span class="type">Date</span> = <span class="type">DateComponents</span>(year: <span class="number">2020</span>, month: <span class="number">9</span>, day: <span class="number">23</span>).<span class="property">date</span> ?? <span class="type">Date</span>()
<span class="keyword">let</span> units: <span class="type">NSCalendar</span>.<span class="type">Unit</span> = [.<span class="dotAccess">weekday</span>, .<span class="dotAccess">month</span>, .<span class="dotAccess">day</span>]
<span class="keyword">let</span> textProvider = <span class="type">CLKDateTextProvider</span>(date: longDate, units: units)
</code></pre><ul><li><a href="https://developer.apple.com/documentation/clockkit/clkrelativedatetextprovider"><code>CLKRelativeDateTextProvider</code></a> will take care of displaying relative time/intervals</li></ul><pre><code><span class="keyword">let</span> timerStart: <span class="type">Date</span> = …
<span class="keyword">let</span> units: <span class="type">NSCalendar</span>.<span class="type">Unit</span> = [.<span class="dotAccess">hour</span>, .<span class="dotAccess">minute</span>, .<span class="dotAccess">second</span>]
<span class="keyword">let</span> textProvider = <span class="type">CLKRelativeDateTextProvider</span>(date: timerStart, style: .<span class="dotAccess">timer</span>, units: units)
</code></pre><ul><li>and <a href="https://developer.apple.com/documentation/clockkit/data_providers">many others</a> including image and gauge providers</li></ul><h2>Multiple complications</h2><ul><li>New in WatchOS 7</li><li>Declared via our <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationdatasource"><code>CLKComplicationDatasource</code></a> implementation via <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationdatasource/3555131-getcomplicationdescriptors"><code>getComplicationDescriptors(handler:)</code></a></li><li>We will use a <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationdescriptor"><code>CLKComplicationDescriptor</code></a> to define each complication</li><li>If you want to update the complications your app offer, call <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationserver/3555139-reloadcomplicationdescriptors"><code>reloadComplicationDescriptors()</code></a> on the <code>.sharedInstance()</code> <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationserver"><code>CLKComplicationServer</code></a></li><li>Note that if you remove support for a complication that is currently on a user watch face, WatchKit will continue to ask you for timeline entries for that complication</li></ul><h2>Getting information back to your app</h2><ul><li>Tapping a complication launches your app</li><li>Based on the <code>CLKComplicationDescriptor</code> description define above, the app will be launched with:<ul><li>A <code>userActivity</code></li><li>A <code>userInfo</code> dictionary</li></ul></li></ul><ul><li>Either way, WatchKit will pass more data in the <code>userInfo</code> dictionary (passed also within the <code>userActivity</code>) such as the <a href="https://developer.apple.com/documentation/clockkit/clklaunchedtimelineentrydatekey"><code>CLKLaunchedTimelineEntryDateKey</code></a> and <a href="https://developer.apple.com/documentation/clockkit/clklaunchedcomplicationidentifierkey"><code>CLKLaunchedComplicationIdentifierKey</code></a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10049</guid><title>Keep your complications up to date</title><description>Time is of the essence: Discover how your Apple Watch complications can provide relevant information throughout the day and help people get the information they need, when they need it. Learn best practices for capitalizing on your app’s runtime opportunities, incorporating APIs like background app refresh and URLSession, and implementing well-timed push notifications.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10049</link><pubDate>Thu, 17 Sep 2020 11:35:25 +0700</pubDate><content:encoded><![CDATA[<p>Demo app <a href="https://developer.apple.com/documentation/clockkit/creating_and_updating_complications">here</a>.</p><h2>Foreground opportunities</h2><p>When the app is in the foreground, we can tell the <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationserver"><code>CLKComplicationServer</code></a> that we would like to reload our complications timelines:</p><pre><code><span class="keyword">let</span> complicationServer = <span class="type">CLKComplicationServer</span>.<span class="call">sharedInstance</span>()

<span class="keyword">if let</span> activeComplications = complicationServer.<span class="property">activeComplications</span> {
  <span class="keyword">for</span> complication <span class="keyword">in</span> activeComplications {
      <span class="comment">// Be selective on what you actually need to reload</span>
    complicationServer.<span class="call">reloadTimeline</span>(for: complication)
  }
} 
</code></pre><p>This tells the server when we would like to refresh our complication(s).</p><p>Later on our <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationdatasource"><code>CLKComplicationDataSource</code></a>'s <code>getCurrentTimelineEntry(for:withHandler:)</code> will be called:</p><pre><code><span class="keyword">func</span> getCurrentTimelineEntry(
  for complication: <span class="type">CLKComplication</span>, 
  withHandler handler: <span class="keyword">@escaping</span> (<span class="type">CLKComplicationTimelineEntry</span>?) -&gt; <span class="type">Void</span>
  ) {
  <span class="comment">// ..</span>
  <span class="call">handler</span>(entry)
}
</code></pre><h2>Background App Refresh</h2><ul><li>Background refresh allows us to schedule periodic updates to keep that complication up-to-date even when the app isn't in use.</li><li>Up to four times per hour (regardless of how many complications are present in the current watch face)</li></ul><p>Make a <a href="https://developer.apple.com/documentation/watchkit/wkextension/1650848-schedulebackgroundrefresh"><code>scheduleBackgroundRefresh(withPreferredDate:userInfo:scheduledCompletion:)</code></a> request on <code>WKExtension</code></p><pre><code><span class="keyword">private func</span> scheduleBAR(<span class="keyword">_</span> first: <span class="type">Bool</span>) {
  <span class="keyword">let</span> now = <span class="type">Date</span>()
  <span class="keyword">let</span> scheduledDate = now.<span class="call">addingTimeInterval</span>(first ? <span class="number">60</span> : <span class="number">15</span>*<span class="number">60</span>)

  <span class="comment">// use the info dictionary to supply your own data to the refresh</span>
  <span class="keyword">let</span> info: <span class="type">NSDictionary</span> = [“submissionDate”: now]

  <span class="keyword">let</span> wkExt = <span class="type">WKExtension</span>.<span class="call">shared</span>()
  wkExt.<span class="call">scheduleBackgroundRefresh</span>(
      withPreferredDate: scheduledDate, 
      userInfo:info
  ) { (error: <span class="type">Error</span>?) <span class="keyword">in
    if</span> (error != <span class="keyword">nil</span>) {
      <span class="call">print</span>(<span class="string">"background refresh could not be scheduled</span> \(error.<span class="property">debugDescription</span>)<span class="string">"</span>)
    } 
  }
}
</code></pre><p>Later on the <code>WKExtension</code> will trigger the refresh in our <code>WKExtensionDelegate</code> via the <code>handle(:)</code> method.</p><pre><code><span class="keyword">class</span> ExtensionDelegate: <span class="type">NSObject</span>, <span class="type">WKExtensionDelegate</span> {
  <span class="keyword">func</span> handle(<span class="keyword">_</span> backgroundTasks: <span class="type">Set</span>&lt;<span class="type">WKRefreshBackgroundTask</span>&gt;) {
    <span class="keyword">for</span> task <span class="keyword">in</span> backgroundTasks {

      <span class="keyword">switch</span> task {
        <span class="keyword">case let</span> backgroundTask <span class="keyword">as</span> <span class="type">WKApplicationRefreshBackgroundTask</span>:

          <span class="keyword">if let</span> userInfo: <span class="type">NSDictionary</span> = backgroundTask.<span class="property">userInfo</span> <span class="keyword">as</span>? <span class="type">NSDictionary</span> {
             <span class="keyword">if let</span> then:<span class="type">Date</span> = userInfo[<span class="string">"submissionDate"</span>] <span class="keyword">as</span>! <span class="type">Date</span> {
                <span class="keyword">let</span> interval = <span class="type">Date</span>.<span class="keyword">init</span>().<span class="call">timeIntervalSince</span>(then)
                <span class="call">print</span>(<span class="string">"interval since request was made</span> \(interval)<span class="string">"</span>)
             }
          }

          <span class="comment">// once we're done updating the data, we ask the complication server to reload our active complications</span>
          <span class="keyword">self</span>.<span class="call">updateActiveComplications</span>()

          <span class="comment">// we then schedule the next background refresh</span>
          <span class="keyword">self</span>.<span class="call">scheduleBAR</span>(first: <span class="keyword">false</span>)

          <span class="comment">// then we complete the current task, we pass `false` to indicate that no snapshot is needed.
          // Each complication update results in a snapshot request, so we don't have to request one separately.</span>
          backgroundTask.<span class="call">setTaskCompletedWithSnapshot</span>(<span class="keyword">false</span>)
         <span class="keyword">case</span> ...
      }
    }
  }
}
</code></pre><p>Guidelines:</p><ul><li>Only one request is outstanding at a time: if you need periodic updates, schedule the next update before marking the current one complete</li><li>No networking: URLSession will fail with an error</li><li>Background updates are limited to a maximum of four seconds of <strong>active</strong> CPU time</li><li>Background updates have a maximum of 15 seconds of total time to complete the task</li></ul><h2>Background URLSession</h2><ul><li>Allow your app to schedule and receive data even when the app isn't running</li><li>Can be used in addition to background app refresh</li><li>Up to four times per hour</li><li>Multiple outstanding tasks are allowed</li></ul><p>Creating a request is composed by multiple steps:</p><ol><li>define a <code>backgroundURLSession</code>:</li></ol><pre><code><span class="keyword">class</span> WeatherDataProvider: <span class="type">NSObject</span>, <span class="type">URLSessionDownloadDelegate</span> {

  <span class="keyword">private lazy var</span> backgroundURLSession: <span class="type">URLSession</span> = {
    <span class="keyword">let</span> config = <span class="type">URLSessionConfiguration</span>.<span class="call">background</span>(withIdentifier: “<span class="string">BackgroundWeather")</span>
    config.<span class="property">isDiscretionary</span> = <span class="keyword">false</span>
    config.<span class="property">sessionSendsLaunchEvents</span> = <span class="keyword">true

    return</span> <span class="type">URLSession</span>(configuration: config, delegate: <span class="keyword">self</span>, delegateQueue: <span class="keyword">nil</span>)
  }()
}
</code></pre><ol start="2"><li>create and resume a background task:</li></ol><pre><code><span class="keyword">func</span> schedule(<span class="keyword">_</span> first: <span class="type">Bool</span>) {
  <span class="keyword">if let</span> url = <span class="keyword">self</span>.<span class="call">currentWeatherURLForLocation</span>(delegate.<span class="property">currentLocationCoordinate</span>) {
    <span class="keyword">let</span> bgTask = backgroundURLSession.<span class="call">downloadTask</span>(with: url)
  
    bgTask.<span class="property">earliestBeginDate</span> = <span class="type">Date</span>().<span class="call">addingTimeInterval</span>(first ? <span class="number">60</span> : <span class="number">15</span>*<span class="number">60</span>)
    bgTask.<span class="property">countOfBytesClientExpectsToSend</span> = <span class="number">200</span>
    bgTask.<span class="property">countOfBytesClientExpectsToReceive</span> = <span class="number">1024</span>
    bgTask.<span class="call">resume</span>()
    backgroundTask = bgTask
  }
}
</code></pre><p>When the download is complete, our <code>WKExtensionDelegate</code>'s <code>handle(:)</code> method will be called.</p><pre><code><span class="keyword">class</span> ExtensionDelegate: <span class="type">NSObject</span>, <span class="type">WKExtensionDelegate</span> {
   <span class="keyword">var</span> weatherDataProvider:<span class="type">WeatherDataProvider</span>

  <span class="keyword">func</span> handle(<span class="keyword">_</span> backgroundTasks: <span class="type">Set</span>&lt;<span class="type">WKRefreshBackgroundTask</span>&gt;) {
    <span class="keyword">for</span> task <span class="keyword">in</span> backgroundTasks {
       <span class="keyword">switch</span> task {
         <span class="keyword">case let</span> urlSessionTask <span class="keyword">as</span> <span class="type">WKURLSessionRefreshBackgroundTask</span>:
           weatherDataProvider.<span class="call">refresh</span>() { (update: <span class="type">Bool</span>) -&gt; <span class="type">Void</span> <span class="keyword">in</span>
           	 <span class="comment">// schedule the next retrieval (if needed)</span>
             weatherDataProvider.<span class="call">schedule</span>(first: <span class="keyword">false</span>)
           
             <span class="comment">// update complications if needed</span>
             <span class="keyword">if</span> update {
               <span class="keyword">self</span>.<span class="call">updateActiveComplications</span>()
             }

             <span class="comment">// call task completion</span>
             urlSessionTask.<span class="call">setTaskCompletedWithSnapshot</span>(<span class="keyword">false</span>)
           }
       }
      }
    }
  }
}
</code></pre><p>Our <code>URLSessionDownloadDelegate</code>'s <code>urlSession(:downloadTask:didFinishDownloadingTo:)</code> will be called with information on the downloaded data:</p><pre><code><span class="keyword">class</span> WeatherDataProvider : <span class="type">NSObject</span>, <span class="type">URLSessionDownloadDelegate</span> {
  <span class="keyword">func</span> urlSession(
  	<span class="keyword">_</span> session: <span class="type">URLSession</span>, downloadTask: <span class="type">URLSessionDownloadTask</span>,
    didFinishDownloadingTo location: <span class="type">URL</span>
    ) {
      <span class="keyword">if</span> location.<span class="property">isFileURL</span> {
        <span class="keyword">do</span> {
          <span class="keyword">let</span> jsonData = <span class="keyword">try</span> <span class="type">Data</span>(contentsOf: location)
          <span class="keyword">if let</span> kiteFlyingWeather = <span class="type">KiteFlyingWeather</span>(jsonData) {
          <span class="comment">// Process weather data here.</span>
        }
      } <span class="keyword">catch let</span> error <span class="keyword">as</span> <span class="type">NSError</span> {
        <span class="call">print</span>(<span class="string">"could not read data from</span> \(location)<span class="string">"</span>)
      }
    }
  }
}
</code></pre><p>After we process the data <code>URLSessionDownloadDelegate</code>'s <code>urlSession(:task:didCompleteWithError:)</code> will be called: call the completion handler on the main queue so we dispatch to the main queue and call the completion handler.</p><pre><code><span class="keyword">func</span> urlSession(
  <span class="keyword">_</span> session: <span class="type">URLSession</span>, task: <span class="type">URLSessionTask</span>, 
  didCompleteWithError error: <span class="type">Error</span>?
  ) {
  	<span class="call">print</span>(<span class="string">"session didCompleteWithError</span> \(error.<span class="property">debugDescription</span>)<span class="string">”)</span>
  	<span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> {
  	  <span class="keyword">self</span>.<span class="property">completionHandler</span>?(error == <span class="keyword">nil</span>)
  	  <span class="comment">// set the completion handler to nil to make sure it's not called more than once.</span>
  	  <span class="keyword">self</span>.<span class="property">completionHandler</span> = <span class="keyword">nil</span>
    }
  }
}
</code></pre><p>Guidelines:</p><ul><li>Background updates are limited to a maximum of four seconds of <strong>active</strong> CPU time</li><li>Background updates have a maximum of 15 seconds of total time to complete the task</li></ul><h2>Complication Pushes</h2><ul><li>Servers can send up to fifty complication pushes per day to each individual watch (no limitations on how frequent they are, aka they can be 50 pushes in one hour)</li><li>The server needs to have a valid push certificate:<ul><li>crate a new app (complication) identifier with id <code>{{bundle ID}}.watchkitapp.complication</code></li><li>create a push notification certificate with this new app identifier</li><li>your app needs to enable <code>Remote Notifications</code> Background modes (in the app project)</li><li>your watchkit extension need the push notifications capabilities enabled</li></ul></li></ul><h3>Register the complication for push notifications</h3><pre><code><span class="keyword">class</span> PushNotificationProvider : <span class="type">NSObject</span>, <span class="type">PKPushRegistryDelegate</span> {

  <span class="keyword">func</span> startPushKit() -&gt; <span class="type">Void</span> {
    <span class="keyword">let</span> pushRegistry = <span class="type">PKPushRegistry</span>(queue: .<span class="dotAccess">main</span>)
    pushRegistry.<span class="property">delegate</span> = <span class="keyword">self</span>
    pushRegistry.<span class="property">desiredPushTypes</span> = [.<span class="dotAccess">complication</span>]
  }

  <span class="keyword">func</span> pushRegistry(
  	<span class="keyword">_</span> registry: <span class="type">PKPushRegistry</span>, 
    didUpdate pushCredentials: <span class="type">PKPushCredentials</span>, for type: <span class="type">PKPushType</span>
  ) {
    <span class="comment">// Send credentials to server</span> 
  }
}
</code></pre><h3>Receiving Push notifications</h3><ul><li>The app will resumed or launched when receiving a push notification</li><li>Our <code>PKPushRegistryDelegate</code>'s <code>pushRegistry(_:didReceiveIncomingPushWith:for:completion:)</code> will be called</li><li>This function is called in the queue we specified when registering with PushKit</li><li>Remember to call the completion after processing the notification</li></ul><pre><code><span class="keyword">class</span> PushNotificationProvider : <span class="type">NSObject</span>, <span class="type">PKPushRegistryDelegate</span> {
  ...
  
  <span class="keyword">func</span> pushRegistry(
  	<span class="keyword">_</span> registry: <span class="type">PKPushRegistry</span>, 
    didReceiveIncomingPushWith payload: <span class="type">PKPushPayload</span>, 
    for type: <span class="type">PKPushType</span>, 
    completion: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>
  ) {
    <span class="comment">// Process payload</span>
    delegate.<span class="call">updateActiveComplications</span>()
    <span class="call">completion</span>()
  }
}
</code></pre><p>Guidelines:</p><ul><li>Background updates are limited to a maximum of four seconds of <strong>active</strong> CPU time</li><li>Background updates have a maximum of 15 seconds of total time to complete the task</li></ul><h2>Recap</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10049/recap.png"/>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10188</guid><title>Discover WKWebView enhancements</title><description>WKWebView is the best way to present rich, interactive web content right within your app. Explore new APIs that help you convert apps using WebViews or UIWebViews while adding entirely new capabilities. Learn about better ways to handle JavaScript, fine tune the rendering process, export web content, and more.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10188</link><pubDate>Wed, 9 Sep 2020 11:09:12 +0700</pubDate><content:encoded><![CDATA[<h2>iOS in-app browser choices</h2><p>In iOS we have mainly two ways: <a href="https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller"><code>SFSafariViewController</code></a> and <a href="https://developer.apple.com/documentation/webkit/wkwebview"><code>WKWebView</code></a>.</p><h3>SFSafariViewController</h3><ul><li>If we don't need deep customization, <a href="https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller"><code>SFSafariViewController</code></a> is the best choice</li><li>Built on top of <a href="https://developer.apple.com/documentation/webkit/wkwebview"><code>WKWebView</code></a></li><li>It handles everything for you</li><li>Provides many Safari features such as:<ul><li>reader</li><li>content blockers</li><li>autofill</li><li>and more</li></ul></li></ul><h3>WKWebView</h3><ul><li>More customizable</li><li>Protects your application's code and data from the complexities of the web platform</li><li>The web content runs in a separate process</li></ul><h2>What's new in WKWebView</h2><h3>Isolating your app from web content</h3><ul><li>To disable javascript, use the new <a href="https://developer.apple.com/documentation/webkit/wkwebpagepreferences/3552422-allowscontentjavascript"><code>WKWebPagePreferences.allowsContentJavaScript</code></a> instead of the deprecated <code>WKPreferences.javaScriptEnabled</code></li><li><a href="https://developer.apple.com/documentation/webkit/wkcontentworld"><code>WKContentWorld</code></a> makes sure that your javascript doesn't interfere with the website's javascript (e.g. by declaring the same function) and vice versa:<ul><li>use <a href="https://developer.apple.com/documentation/webkit/wkwebview/3656442-evaluatejavascript"><code>evaluateJavaScript(_:in:in:completionHandler:)</code></a> and pass either <code>.defaultClient</code> (your own default world), <code>.page</code> (the webpage's), or <code>.world(name:)</code> (for a custom world)</li><li>You can also inject <a href="https://developer.apple.com/documentation/webkit/wkscriptmessagehandler"><code>WKScriptMessageHandler</code></a> in different words in order to isolate those as well</li></ul></li></ul><h3>Communicating with JavaScript</h3><ul><li><a href="https://developer.apple.com/documentation/webkit/wkwebview/3656441-callasyncjavascript"><code>callAsyncJavaScript</code></a> makes reusing the same script with different values much more like native functions:</li></ul><pre><code><span class="keyword">let</span> styleJavaScript = <span class="string">"""
  var element = document.getElementById(elementIDToStylize);
  if (!element) 
    return false; 
  for (const theStyle in stylesToApply)
    element.style.theStyle = stylesToApply[theStyle]; 
  return true; 
"""</span>

webView.<span class="call">callAsyncJavaScript</span>(
	styleJavaScript, 
	arguments: [ 
    <span class="string">"elementIDToStylize)"</span>: <span class="string">"postContainer"</span>, 
    <span class="string">"stylesToApply"</span>: [
      <span class="string">"margin"</span>: <span class="number">0</span>, 
      <span class="string">"padding-left"</span>: <span class="string">"5px"</span>
    ]
  ], 
  in: .<span class="dotAccess">defaultClient</span>, 
  completion: { <span class="keyword">_ in</span>
   	<span class="comment">// check the return value if desired</span> 
  }
)
</code></pre><ul><li>With <code>callAsyncJavaScript</code> serialization and de-serialization of argument types happens automatically</li><li>The <code>callAsyncJavaScript</code> completion block is called only after the script code says so: it the script returns a promise, it will call the completion block only after the promise has been fulfilled.</li></ul><h3>More flexible rendering</h3><ul><li>Use <a href="https://developer.apple.com/documentation/webkit/wkwebview/3516411-pagezoom"><code>WKWebView.pageZoom</code></a> instead of changing the CSS zoom with JavaScript. This will make sure that the zoom is set before the page is rendered.</li><li>Use <a href="https://developer.apple.com/documentation/webkit/wkwebview/3516410-mediatype"><code>WKWebView.mediaType</code></a> to set a custom media type (used in css queries)</li></ul><h3>Working with web content</h3><ul><li>Use <a href="https://developer.apple.com/documentation/webkit/wkwebview/3650493-find"><code>find(_:configuration:completionHandler:)</code></a> to offer a native way to find a string in the content similarly to how Safari does</li><li>Use <a href="https://developer.apple.com/documentation/webkit/wkwebview/3650490-createpdf"><code>createPDF(configuration:completionHandler:)</code></a> to share the whole web view similar to how sharing in Safari works</li><li>WKWebView has learned to create Web Archives with <a href="https://developer.apple.com/documentation/webkit/wkwebview/3650491-createwebarchivedata">createWebArchiveData(completionHandler:)</a></li></ul><h3>Respecting privacy</h3><ul><li>Intelligent Tracking Prevention (ITP) is enabled by default on all <code>WKWebView</code>s on iOS 14 and macOS 11</li></ul><h3>App-bound domains</h3><ul><li>you specify which domains are the core part of the implementation of your app</li><li>deep interaction with the web content not core to your app is disabled, making it impossible for user data to be accidentally compromised by other domains</li></ul><p>Define your domains in the app <code>info.plist</code>:</p><pre><code>&lt;plist version=<span class="string">"1.0"</span>&gt;
&lt;dict&gt; 
&lt;key&gt;<span class="type">WKAppBoundDomains</span>&lt;/key&gt;
&lt;array&gt;
	&lt;string&gt;webkittens.<span class="property">internal</span>.<span class="property">apple</span>.<span class="property">com</span>&lt;/string&gt;
	&lt;string&gt;pupsonsafari.<span class="property">internal</span>.<span class="property">apple</span>.<span class="property">com</span>&lt;/string&gt;
&lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt; 
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10197</guid><title>Broaden your reach with Siri Event Suggestions</title><description>Whether you’re hosting event information in your app, on the web, or in an email, Siri Event Suggestions can help people keep track of their commitments — without compromising their privacy. We’ll show you how to set up your reservations so that they automatically show up in the Calendar app and how to work with the Siri Event Suggestions APIs for iOS and Markup for web and email.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10197</link><pubDate>Wed, 9 Sep 2020 11:06:33 +0700</pubDate><content:encoded><![CDATA[<ul><li>Siri Event Suggestions are now also on macOS Big Sur and on the simulator</li></ul><h2>What is Siri Event Suggestions?</h2><ul><li>Makes it easy to get your event from your app into Calendar</li><li>The system uses on-device intelligence to streamline everyday interactions with your events:<ul><li>on the lock screen, Siri can notify you when it's time to leave for a restaurant reservation, based on local traffic conditions.</li><li>on Maps, you get a Siri Suggestion, making getting directions to the airport to catch a flight is as easy as just one tap.</li><li>Siri can also proactively suggest turning on Do Not Disturb, so you can stay focused on what matters, like the movie you're about to watch.</li><li>Siri can even provide a suggestion to check-in for your flight right on your lock screen.</li></ul></li></ul><h2>New categories and platforms</h2><p>Previously:</p><ul><li>Restaurants booking</li><li>Car rentals</li><li>Train</li><li>Movies</li><li>Lodging</li><li>Ticketed Events</li><li>Flights</li></ul><p>New:</p><ul><li>Bus</li><li>Boat</li></ul><h2>New ways to donate events</h2><p>Beside apps you can now donate events with Mail.app and Safari.app:<br>to do you need to embed the event web markup within the HTML of your website or emails.</p><ul><li>leverages a web standard called <a href="https://schema.org/docs/documents.html">schema.org</a></li><li>supports both JSON-LD and Microdata</li></ul><p>JSON-LD example:</p><pre><code>&lt;script type=<span class="string">"application/ld+json"</span>&gt;
{
  <span class="string">"@context"</span>: <span class="string">"http://schema.org"</span>,
  <span class="string">"@type"</span>: <span class="string">"FoodEstablishmentReservation"</span>,
  <span class="string">"reservationStatus"</span>: <span class="string">"http://schema.org/ReservationConfirmed"</span>,
  <span class="string">"reservationId"</span>: <span class="string">"IWDSCA"</span>,
  <span class="string">"partySize"</span>: <span class="string">"2"</span>,
  <span class="string">"reservationFor"</span>: {
    <span class="string">"@type"</span>: <span class="string">"FoodEstablishment"</span>,
    <span class="string">"name"</span>: <span class="string">"EPIC Steak"</span>,
    <span class="string">"startDate"</span>: <span class="string">"2020-06-26T19:30:00-07:00"</span>,
    <span class="string">"telephone"</span>: <span class="string">"(415)369-9955"
    "address"</span>: {
      <span class="string">"@type"</span>: <span class="string">"http://schema.org/PostalAddress"</span>,
      <span class="string">"streetAddress"</span>: <span class="string">"369 The Embarcadero"</span>,
      <span class="string">"addressLocality"</span>: <span class="string">"San Francisco"
      "addressRegion"</span>: <span class="string">"CA"</span>,
      <span class="string">"postalCode"</span>: <span class="string">"95105"</span>,
      <span class="string">"addressCountry"</span>: <span class="string">"USA"</span>
    }
  }
}
&lt;/script&gt;
</code></pre><p>Microdata example:</p><pre><code>&lt;div itemscope itemtype=<span class="string">"FoodEstablishmentReservation"</span>&gt; 
  &lt;link itemprop=<span class="string">"reservationStatus"</span> href=<span class="string">"http://schema.org/ReservationConfirmed"</span>/&gt;
  &lt;meta itemprop=<span class="string">"reservationId"</span> content=<span class="string">"IWDSCA"</span>/&gt;
  &lt;meta itemprop=<span class="string">"partySize"</span> content=<span class="string">"2"</span>/&gt;
  &lt;div itemprop=<span class="string">"reservationFor"</span> itemscope itemtype=<span class="string">"FoodEstablishment"</span>&gt;
    &lt;meta itemprop=<span class="string">"name"</span> content=<span class="string">"EPIC Steak"</span>/&gt;
    &lt;meta itemprop=<span class="string">"startDate"</span> content=<span class="string">"2020-06-26T19:30:00-07:00"</span>/&gt;
    &lt;meta itemprop=<span class="string">"telephone"</span> content=<span class="string">"(415)369-9955"</span>/&gt;
    &lt;div itemprop=<span class="string">"address"</span> itemscope itemtype=<span class="string">"PostalAddress"</span>&gt;
      &lt;meta itemprop=<span class="string">"streetAddress"</span> content=<span class="string">"369 The Embarcadero"</span>/&gt;
      &lt;meta itemprop=<span class="string">"addressLocality"</span> content=<span class="string">"San Francisco"</span>/&gt;
      &lt;meta itemprop=<span class="string">"addressRegion"</span> content=<span class="string">"CA"</span>/&gt;
      &lt;meta itemprop=<span class="string">"postalCode"</span> content=<span class="string">"95105"</span>/&gt;
      &lt;meta itemprop=<span class="string">"addressCountry"</span> content=<span class="string">"USA"</span>/&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre><ul><li>As long as the reservation identifier stays the same, we can use the same markup format to update the event as well.</li><li>If the event gets canceled, update the <code>reservationStatus</code> to <code>http://schema.org/ReservationCancelled</code></li></ul><h3>Requirements</h3><ul><li>you must register your domain at <a href="https://developer.apple.com/contact/request/siri-events/">developer.apple.com</a> where you can submit your domain and samples of your markup.</li><li>your website must use HTTPS, and that your emails have a valid DKIM signature.</li></ul><h3>Testing</h3><p>To enable your domain for testing, either:</p><ul><li>open the Developer Settings and enable <code>Allow Any Domain on iOS</code></li><li>use the command below on the Mac:</li></ul><pre><code>defaults write com.<span class="property">apple</span>.<span class="property">suggestions</span> <span class="type">SuggestionsAllowAnyDomainForMarkup</span> -bool <span class="keyword">true</span>
</code></pre><p>To enable local testing, either:</p><ul><li>open the Developer Settings and enable <code>Allow Unverified Sources</code></li><li>use the command below on the Mac:</li></ul><pre><code>defaults write com.<span class="property">apple</span>.<span class="property">suggestions</span> <span class="type">SuggestionsAllowUnverifiedSourceForMarkup</span> -bool <span class="keyword">true</span>
</code></pre><h3>Guidelines</h3><ul><li>Use appropriate <code>reservationStatus</code></li><li>Use <code>ISO8601</code> format for dates and time</li><li>Keep <code>reservationId</code> consistent for updates and canceled reservations</li></ul><h2>Donations overview</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10197/overview.png"/><ul><li>To donate to Siri, the app first maps its reservation details into <a href="https://developer.apple.com/documentation/sirikit/inreservation"><code>INReservation</code></a> objects.</li><li><code>INReservation</code> contains the details about the reservation shown in the app.</li><li>The <code>INReservation</code> objects are added to an intent response that, together with the intent, forms the interaction, <a href="https://developer.apple.com/documentation/sirikit/ininteraction"><code>INInteraction</code></a>, that the app donates to Siri.</li><li>Once donated, Siri may create one or more Calendar events and notify the user that the reservations were added to their Siri Event Suggestions Calendar.</li><li>To get more details, or to manage the reservation, we want people to easily get back into your app, so we put a "Show in App" button right in Calendar to make this easy.</li><li>When the "Show in App" button is pressed, the system will construct an <a href="https://developer.apple.com/documentation/sirikit/ingetreservationdetailsintent"><code>INGetReservationDetailsIntent</code></a> containing information about the reservation the user wants to view.</li><li>This <code>INGetReservationDetailsIntent</code> uses the container and item reference from the donation that was used to create the event.</li><li>A reservation may consist of one or more parts. For example, in a flight reservation with multiple legs, each leg is one part of the reservation and must be represented as an individual <code>INReservation</code> object with a unique <code>item reference</code>. <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10197/itemReference.png"/></li></ul><ul><li>You can choose any identifier you'd like, as long as it's unique and it enables you to find a specific part of the reservation to show when being launched</li><li>if the booking consists of one part only, like a dinner, you can use the reservation number as item reference</li><li>if the booking consists of multiple parts, like a round-trip flight, each flight/leg needs to have its own unique item reference (for example the ticket number)</li></ul><ul><li>if the app is not installed on a device, instead of the "Show in App" button there will be a "Show in Safari" button: pressing this will open the URL you set in Safari, so the user can view their reservation details on your website.</li><li>Make sure you adopt this new URL property, since calendar events will be synced to all the users' devices, some of which may not have your app installed.</li></ul><h2>Debugging Donations</h2><p>When your app/website/email donates reservation details, they may be processed asynchronously by different parts of the system: it's not always possible to let your app know if something went wrong.</p><p>To help you debug issues during development, you can view donation logs in the Console.app (needs Big Sur):</p><ul><li>select the device you're debuggin</li><li>filter by <code>siri-event-suggestions</code> category</li><li>donate again</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10068</guid><title>What's new in SiriKit and Shortcuts</title><description>Get a quick overview of everything new in Siri and Shortcuts to help people get more out of your app: We’ll demonstrate how you can design visually rich conversations, feel at home with the operating system by designing for the new compact Siri UI, and provide an overview of all the ways we’ve made it even easier for people to organize and set up actions from your apps.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10068</link><pubDate>Wed, 9 Sep 2020 11:02:27 +0700</pubDate><content:encoded><![CDATA[<h2>Design</h2><ul><li>in iOS 14 Siri comes with a notification-like, compact design</li><li>The new design focuses only on the most essential information, minimizing disruption</li></ul><ul><li>The same design also comes to Shortcuts.app</li><li>in iOS 13 you may have needed to jump into the Shortcuts.app to complete a task: with iOS 14 shortcuts will run seamlessly in the background, and will only prompt you if the shortcut needs your input</li></ul><h2>Shortcuts: intents principles</h2><h3>Disambiguation</h3><p>a.k.a. when you're asking follow-up questions to clarify the user's intent</p><ul><li>With conversational shortcuts, you have the opportunity to ask follow-up questions, with iOS 14 there are new APIs for customizing how the list is presented: <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10068/list.png"/></li></ul><h3>Intents UI</h3><p>a.k.a. how your app UI shows in Siri and Shortcuts.</p><ul><li>Your Intents UI now appears in this new compact UI, whether you're running from Siri or Shortcuts: <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10068/intents.png"/></li></ul><ul><li>Intents UIs now use a consistent background material whether they're run from Siri or from Shortcuts:<ul><li>take advantage of the new material by keeping the background color of your Intents UI view transparent.</li></ul></li></ul><ul><li>focus on the essentials:<ul><li>Because the compact UI appears on top of whatever the user is doing, the less vertical space your Intents UI takes up, the more lightweight the experience will feel.</li></ul></li></ul><h2>Shortcuts Folders</h2><ul><li>users can now create folders for their shortcuts</li><li>there are smart folders to identify which shortcuts appear in the share sheet or on the watch.</li></ul><h2>Shortcuts on Apple Watch</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10068/watch.png"/><ul><li>shortctus can now run on the watch with the new shortcuts.app on watchOS.</li><li>shortcuts can be set as complications and run them right from the watch face</li></ul><h2>Shortcuts.app automation</h2><ul><li>New Automation suggestion in the Shortcuts.app gallery</li></ul><h3>New triggers</h3><ul><li>when receiving an email</li><li>when receiving an message</li><li>when closing an app</li><li>when the battery hits a certain level</li><li>when the phone starts charging</li></ul><h3>More automatic triggers (without asking first)</h3><ul><li>time of day</li><li>alarm</li><li>sleep</li><li>workout</li><li>CarPlay</li><li>Airplane Mode</li><li>NFC</li><li>DND</li><li>Low Power Mode</li><li>Open app</li><li>Close app</li><li>Battery level</li></ul><h3>Wind Down integration</h3><p>If your app has sleep-friendly shortcuts, use the new <a href="https://developer.apple.com/documentation/sirikit/inshortcutavailabilityoptions"><code>INShortcutAvailabilityOptions</code></a> API to.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10074</guid><title>Decipher and deal with common Siri errors</title><description>“Sorry, there was a problem with the app..."

Don’t let Siri errors get you down: Learn how to debug your Siri intents and create great integrations people can use through voice or the Shortcuts app. We’ll look at common intent errors, how to test for them, and the path to a seamless Siri experience for your app.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10074</link><pubDate>Sun, 23 Aug 2020 21:17:42 +0700</pubDate><content:encoded><![CDATA[<h2>Automate Siri Queries</h2><ul><li>You can automate Siri queries using the scheme editor in Xcode when debugging your extension</li><li>When you're attaching to your intents extension, you have an option to choose between Siri and the Shortcuts.app as the host process</li></ul><h2>Debugging intents</h2><ul><li>as the intents UI extensions run in a separate processes, your breakpoints won't be hit by default: use the Xcode debug menu to attach to multiple processes at the same time</li></ul><h2>"Sorry there was a problem with the app"</h2><p>If you get this error:</p><ul><li>make sure your intent handler calls the completion handler within 10 seconds</li><li>make sure the completion handler is called once</li><li>your app/extension might have crashed (check crash logs)</li></ul><h2>Tips</h2><ul><li>use <code>os_log</code> and Console.app to see how your app and its extensions interact with each other</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10006</guid><title>Introducing Car Keys</title><description>You can now store car keys on iPhone or Apple Watch. You no longer have to bring your key fob to unlock and start your car. And with digital keys, it's easy to share them with family or friends, and manage keys remotely.

This session is intended for automakers who want to adopt digital car keys in their vehicles. We'll talk about the core feature set including owner pairing, transactions (when you unlock or start your car), key sharing, and key management. Learn about the car key architecture and how it ensures security and privacy. Get information on where to go next for information on hardware and specifications.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10006</link><pubDate>Sun, 23 Aug 2020 21:15:00 +0700</pubDate><content:encoded><![CDATA[<p>For specifications refer to the <a href="http://carconnectivity.org">Car Connectivity Consortium</a>.</p><h2>What's Car Keys?</h2><ul><li>With Car Keys you can lock, unlock and start supported cars via iPhone and Apple Watch.</li><li>Securely stored on device and iCloud</li><li>Shareable and manageable remotely</li><li>Supports multiple radio technology: NFC (for now), Ultrawide-band soon</li><li>Designed to work without a network connection</li><li>Works with Power Reserve (aka even when your device is out of battery and switched off)</li></ul><h2>Car compatibility</h2><p>Three requirements:</p><ul><li>Owner pairing</li><li>Transactions</li><li>Server interfaces</li></ul><h3>Owner pairing</h3><p>Required to setup (additional) car keys on the iPhone.</p><p>Steps:</p><ol><li>the user must prove ownership of the car (this step is up to the automaker)</li><li>initiate pairing (via app or email by automaker)</li><li>place iPhone nearby the car radio sensor</li><li>Car key appears in Wallet.app</li></ol><h3>Transactions</h3><ul><li>Used to lock. unlock, and start the car engine</li><li>Cars are required to provide radio sensors in the door handle and dashboard</li><li>Express mode<ul><li>makes the transaction work without user identification first (face/touch id or password)</li><li>on by default, the user can turn it off</li></ul></li></ul><ul><li>completely offline</li><li>No data is sent to Apple (a.k.a Apple doesn't know when the user uses the car)</li></ul><h3>Service interfaces</h3><ul><li>required for car key sharing and management</li><li>Share keys via Messages.app</li><li>The car can be offline when the sharing happens</li><li>Fully encrypted: Apple has no info who the user shares the key with</li><li>Automakers can provide different access levels to different car keys, for example to limit the car speed</li></ul><h2>Key Management</h2><ul><li>the owner can create, manage, revoke, and share keys on iPhone</li><li>some functionality can be added in the dashboard</li><li>car keys removed on iPhone stop working immediately, even if the device is offline</li><li>iCloud lost mode temporarily suspends car keys on iPhone or Apple Watch (by locking the car key applet on the Secure Element)</li><li>when purchasing a new phone, the owner needs to pair the new device to the car and all previous keys will be automatically transferred, shared keys will keep working seamlessly</li></ul><h2>System Architecture</h2><ul><li>All key management is integrated in iOS, doesn't relay on automakers</li><li>keys are created and stored on Secure Element (NFC/ApplePay chip)</li><li>use AES and Elliptic curve (EC) cryptography</li><li>Offline design based on PKI (Public Key infrastructure)</li><li>Automaker TSM (Trusted service manager) not required</li></ul><h3>Key lifecycle</h3><ul><li>Elliptic curve private/public key created in the device's Secure Element</li><li>The private key never leaves the Secure Element</li><li>The public key is exported in a X.509 certificate for authenticity certification</li><li>A Secure Element Applet implements the car key:<ul><li>stores key pair and binds it to the car</li><li>implements transactions and manages secure mailboxes which store key attestations and security tokens that prevent a revoked car key from being re-activated</li><li>Mailboxes also support immobilizer tokens for compatibility with existing car architectures</li><li>For memory efficiency all car keys are hosted in a single applet instance</li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10686</guid><title>Explore the new system architecture of Apple silicon Macs</title><description>Discover how Macs with Apple silicon will deliver modern advantages using Apple's System-on-Chip (SoC) architecture. Leveraging a unified memory architecture for CPU and GPU tasks, Mac apps will see amazing performance benefits from Apple silicon tuned frameworks such as Metal and Accelerate.  Learn about new features and changes coming to boot and security, and how these may affect your applications.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10686</link><pubDate>Sun, 23 Aug 2020 21:06:59 +0700</pubDate><content:encoded><![CDATA[<h2>Architecture: Intel vs. Mac</h2><ul><li>Intel-based architecture is composed of several, separated components such as multicore CPUs, discrete GPUs, T2</li><li>Apple Silicon has all its components in a SoC (System on a Chip): building everything into one chip gives the system a shared memory architecture</li><li>SoC CPU and GPU work in the same memory, and data can be shared efficiently, without need to copy data over a PCIe bus</li><li>By using Apple Silicon, new macs gain powerful components present on iDevices such as specialized video encoder and decoder, Neural Engine, Machine Learning Accelerators</li><li>intel-based macs CPUs have multiple cores with similar performance (a.k.a. <em>symmetric</em> cores)</li><li>Apple Silicon has multiple performance cores and other power efficient cores (a.k.a. <em>asymmetric cores</em>)</li></ul><h3>AMP (Asymmetric MultiProcessing)</h3><p>All cores support the same architectural set of features, and support the same software</p><h3>How to take advantage of the new architecture</h3><p>All modern frameworks have been adopted to take advantage of the new architecture, there are no API changes specifically for Apple Silicon.</p><ul><li>Unified memory architecture: use <code>Metal</code></li><li>Video encoder and decoder: use <code>AVFoundation</code> and <code>VideoToolbox</code></li><li>Neural Engine: use <code>CoreML</code></li><li>Machine Learning Accelerators: use <code>CoreML</code>, <code>Accelerate</code>, <code>Compression</code>, <code>simd</code></li><li>Asymmetric multiprocessing: use <code>QoS</code> and <code>GCD</code></li></ul><h2>Security features</h2><p>Apple Silicon brings all the iDevices security features to macOS:</p><ul><li><a href="https://developer.apple.com/documentation/apple_silicon/porting_just-in-time_compilers_to_apple_silicon">Write XOR execute (W^X)</a></li><li>Kernel Integrity Protection</li><li>Pointer authentication</li><li>Device isolation</li></ul><h3>Write XOR execute (W^X)</h3><ul><li>Memory pages cannot be both writable and executable at the same time.</li><li>Use <code>pthread_jit_write_protect_np</code> for fast switching between RW and RX permissions</li><li>Per-thread permission to support multi-threaded JITs</li></ul><h3>Kernel Integrity Protection</h3><ul><li>Apple Silicon has hardware support in the memory controller that enforces kernel immutability</li><li>Once the kernel has been loaded into memory, Kernel Integrity Protection makes sure that Kernel pages cannot be modified, or new pages made executable</li></ul><h3>Pointer authentication</h3><ul><li>Pointer authentication guards against misuse of pointers and prevent memory attacks.</li><li>Enabled for: Kernel, System applications, System services</li></ul><h3>Device isolation</h3><p>On Apple Silicon all devices use a separate <a href="https://en.wikipedia.org/wiki/Input–output_memory_management_unit">IOMMU</a>, this restricts devices to memory they're only intended to (Intel macs have a shared memory for all devices)</p><h2>Rosetta</h2><p>Rosetta runs:</p><ul><li>macOS/Catalyst applications</li><li>games</li><li>Web browsers</li><li>JIT compilers</li><li>Metal directly on Apple GPU</li><li>Core ML with Neural Engine</li></ul><p>There are differences between processes running on a Intel- and Apple Silicon-based Macs:</p><ul><li>Memory pages sizes</li><li>TSO memory ordering</li><li>sleep time</li><li>Floating point NaN, denormal handling</li></ul><p>Rosetta will make sure that Intel-apps will see the architecture they expect</p><h2>Boot and Recovery</h2><h3>Boot Overview</h3><ul><li>On Apple Silicon Macs the boot process is based on iOS and iPadOS Secure Boot</li><li>Secure Boot ensures that each startup component is cryptographically signed by Apple and that the boot happens only after the verification of the chain of trust</li><li>Added support to boot from multiple macOS install from both internal and external volumes</li><li>enable booting any version of macOS signed by Apple</li></ul><h3>Start-up and macOS Recovery</h3><ul><li>Press and hold Touch ID or Power button to launch startup options, all existing start-up keys are replaced by UI interactions</li></ul><h4>Mac Sharing Mode</h4><ul><li>replaces Target Disk Mode</li><li>based on SMB file share</li><li>user authentication is required to enable this service</li></ul><h3>Protection layer</h3><ul><li>focuses on selecting the security policy for each of the volume</li><li>you can choose between full and reduced security mode.</li></ul><ul><li>Full security mode is the same as security on iPhone (enabled by default)</li></ul><ul><li>External volumes are supported in full security mode</li></ul><ul><li>reduced security mode provides flexibility and configurability of your mac</li></ul><ul><li>reduced security lets you run any version of macOS (including versions no longer signed by Apple)</li><li>reduced security lets you install notarized 3rd party kernel extensions</li></ul><ul><li>you can configure the security of your mac via <a href="https://developer.apple.com/library/archive/documentation/Security/Conceptual/System_Integrity_Protection_Guide/ConfiguringSystemIntegrityProtection/ConfiguringSystemIntegrityProtection.html"><code>csrutil(1)</code></a></li></ul><ul><li>Intel based macs have a system-wide security policy</li><li>Apple Silicon macs have a per-OS security policy</li></ul><ul><li>Login<ul><li>CCID and PIV-compatible</li><li>VoiceOvere support</li></ul></li></ul><ul><li>Apple Silicon support Secure hibernation:<ul><li>Full at-rest protection</li><li>Integrity and anti-replay protection</li></ul></li></ul><h2>Recovering your Mac</h2><p>At high level, the system software is composed by two components:</p><ul><li>macOS</li><li>macOS Recovery</li></ul><p>If macOS is not accessible/missing, you can use macOS Recovery to install and restore the system</p><p>What happens is even macOS Recovery is not accessible?</p><ul><li>In Intel-based macs you can use Internet recovery</li><li>On Apple Silicon macs you can use System Recovery:<ul><li>Minimal macOS environment</li><li>Separate hidden container</li><li>Lets you re-install macOS and macOS Recovery</li></ul></li></ul><ul><li>You can use Apple Configurator 2 when even the System Recovery is not functional</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10114</guid><title>iPad and iPhone apps on Apple silicon Macs</title><description>Apple silicon Macs can run many iPad and iPhone apps as-is, and these apps will be made available to users on the Mac through the Mac App Store. Discover how iPad and iPhone apps run on Apple silicon Macs, and the factors that make your apps come across better. Learn how to test your app for the Mac, and hear about your options for distribution of your apps.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10114</link><pubDate>Sun, 23 Aug 2020 20:59:36 +0700</pubDate><content:encoded><![CDATA[<h2>Compatibility</h2><p>For your app to be available in the Mac App Store, it must be compatible with the Mac:</p><ul><li>Your app can't be dependent on an unavailable symbols or frameworks</li><li>It can't be dependent on missing functionality in existing frameworks</li><li>It can't be dependent on hardware capabilities that don't exist on the Mac</li></ul><h2>Availability</h2><ul><li>All iOS/iPadOS apps are automatically available in the Mac app store</li><li>You can opt out in App Store Connect</li></ul><h2>Environment differences</h2><h3>Hardware differences</h3><ul><li>Mouse and touch events: the system automatically maps standard gestures, however you should test if your custom interactions and gestures work on Mac</li><li>Environment sensors: make sure to check for the availability of each sensor in your app</li><li>Camera: to discover all available cameras (you can plug external cameras on the mac) use <a href="https://developer.apple.com/documentation/avfoundation/avcapturedevicediscoverysession"><code>AVCaptureDeviceDiscoverySession</code></a></li></ul><h3>UI differences</h3><ul><li>Popups might be displayed in different places in macOS</li><li>Open and Save panels will show in separate window</li><li>If your iPad app already supports multitasking on iOS, it will be fully resizeable on macOS. (if not, your app will be displayed in a fixed-size window)</li></ul><h3>System Software differences</h3><ul><li>Filesytem: On macOS the user can move the app wherever they would like. Your app's data containers are also in a different location on the Mac. Use Foundation APIs to locate items in the filesystem.</li></ul><h2>Distribution</h2><ul><li>Beside the mac app store, you can also distribute your apps via ad-hoc and other methods as well</li><li>App thinning is supported</li><li>TestFlight is not supported on macOS</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc13/702</guid><title>Efficient Design with XPC</title><description>XPC has been enhanced to make it even easier to design for robustness and efficiency. Learn how to save power by opportunistically scheduling long-running tasks, transferring large amounts of data with minimal overhead, and how to best compartmentalize your app.</description><link>https://www.wwdcnotes.com/notes/wwdc13/702</link><pubDate>Sun, 23 Aug 2020 20:56:30 +0700</pubDate><content:encoded><![CDATA[<h2>What is <a href="https://developer.apple.com/documentation/xpc">XPC</a>?</h2><ul><li>It's a library that combines service bootstrapping and IPC (interprocess communication), a.k.a. everything related to having a service up and running and exchanging messages with it</li><li>Helps refactoring an app into services (with different responsibilities, privileges, etc)</li><li>These services are deployed within the app bundle</li></ul><h2>Key Benefits</h2><ul><li>fault isolation: if a service crashes the main app still runs fine</li><li>different privileges/entitlements: even if your app has access to iCloud or the contacts library etc, this doesn't mean that your app services automatically inherits those. The app decides which privileges to grant to the service, use the principle of least required privilege</li><li>XPC manages the lifecycle for all these services (no need to spawn/pause/etc)</li></ul><h2>XPC Kinds</h2><p>Two kinds, <strong>Bundled Services</strong> and <strong>launchd Services</strong>.</p><h3>Bundled Services</h3><ul><li>Ship within an app bundle</li><li>Stateless: meant to be stateless, on-demand helpers that come up to do something (a service, some requests)</li><li>Fully managed lifecycle</li></ul><h3>launchd Services</h3><ul><li>Run as root</li><li>independent from any app</li><li>cannot distribute on the app store</li></ul><p>In order to use these <code>launchd</code> services you must have a launchd plist in either <a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html">Library LaunchDaemons or Library LaunchAgents</a>.</p><h2>API</h2><p>From high level to low level:</p><ul><li><a href="https://developer.apple.com/documentation/foundation/nsxpcconnection">NSXPCConnection</a></li><li>libxpc</li><li>libdispatch</li><li>libobjc</li></ul><h2>Best practices</h2><ul><li>Avoid long-running processes: the system prefers to launch them on on-demand and exit when they're not needed</li><li>Adapt to resource availability</li><li>Lazy initialization: don't do work unless the user has done something where you need to initialize your resources</li></ul><h2>XPC Events</h2><p>With XPC Events the system acts as the source of demands that trigger your service. This is done via <a href="https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html"><code>launchd</code></a>.</p><p>A few examples:</p><ul><li><a href="https://developer.apple.com/documentation/iokit">IOKit</a> events: your service will be triggered (by <code>launchd</code>) whenever changes in the IO Registry happen</li><li><a href="https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/notify.3.html">BSD notifications - Notify(3)</a>: you can post a notification and a <code>launchd</code> job triggers</li><li><a href="https://developer.apple.com/documentation/corefoundation/cfnotificationcenter?language=objc"><code>CFDistributedNotifications</code></a>: a newer alternative to BSD notifications</li></ul><h3>Register for XPC events</h3><p>In order to use XPC events you need to define which events can trigger your service via the <code>launchd.plist</code>, for example:</p><pre><code>&lt;key&gt;<span class="type">LaunchEvents</span>&lt;/key&gt;
&lt;dict&gt;
  &lt;key&gt;com.<span class="property">apple</span>.<span class="property">iokit</span>.<span class="property">matching</span>&lt;/key&gt;
  &lt;dict&gt;
    &lt;key&gt;com.<span class="property">mycompany</span>.<span class="property">device</span>-attach&lt;/key&gt;
    &lt;dict&gt;
	  &lt;key&gt;idProduct&lt;/key&gt;
	  &lt;integer&gt;<span class="number">2794</span>&lt;/integer&gt;
	  &lt;key&gt;idVendor&lt;/key&gt;
	  &lt;integer&gt;<span class="number">725</span>&lt;/integer&gt;
	  &lt;key&gt;<span class="type">IOProviderClass</span>&lt;/key&gt;
	  &lt;string&gt;<span class="type">IOUSBDevice</span>&lt;/string&gt;
	  &lt;key&gt;<span class="type">IOMatchLaunchStream</span>&lt;/key&gt;
	  &lt;<span class="keyword">true</span>/&gt;
	&lt;/dict&gt;
  &lt;/dict&gt;
&lt;/dict&gt;
</code></pre><h3>Consume XPC events</h3><p>When these events are posted, your app need to consume them, for example:</p><pre><code><span class="call">xpc_set_event_stream_handler</span>(“com.<span class="property">apple</span>.<span class="property">iokit</span>.<span class="property">matching</span>”, q, ^(xpc_object_t event) {
	<span class="comment">// Every event has the key XPC_EVENT_KEY_NAME set to a string that
	// is the name you gave the event in your launchd.plist.</span>
	const char *name = <span class="call">xpc_dictionary_get_string</span>(event, <span class="type">XPC_EVENT_KEY_NAME</span>);

	<span class="comment">// IOKit events have the IORegistryEntryNumber as a payload.</span>
	uint64_t id = <span class="call">xpc_dictionary_get_uint64</span>(event, “<span class="type">IOMatchLaunchServiceID</span>”);

  <span class="comment">// Reconstruct the node you were interested in here using the IOKit
	// APIs.</span> 
});
</code></pre><p>This <a href="https://developer.apple.com/documentation/xpc/1505578-xpc_set_event_stream_handler?language=objc"><code>xpc_set_event_stream_handler</code></a> takes three arguments:</p><ul><li>the first it the event identifier, to declare that this is the handler for IOKit Events for example</li><li>the second is a dispatch queue</li><li>the third is a block</li></ul><p>The block gets invoked on that queue: once this block is consumed, the event is considered consumed. Each notification has a payload that allows you to reconstruct who triggered along with other information (depending on the event).</p><h2>Centralized Task Scheduling</h2><p>Based on XPC activity APIs, will help you schedule tasks at the right time (e.g. when the system is idle, along with other tasks) to minimize disruption to user experience.</p><p>Activity types:</p><ul><li>Maintenance (launched when the machine is in idle, interrupted when the user begins using the machine)</li><li>Utility (interrupted when resources become scarce)</li></ul><p>Activity Criteria:</p><ul><li>A/C power</li><li>Battery level</li><li>HDD spinning</li><li>Screen asleep</li></ul><p>Example of activity:</p><pre><code>xpc_object_t criteria = <span class="call">xpc_dictionary_create</span>(<span class="type">NULL</span>, <span class="type">NULL</span>, <span class="number">0</span>);
<span class="call">xpc_dictionary_set_int64</span>(criteria, <span class="type">XPC_ACTIVITY_INTERVAL</span>, <span class="number">5</span> * <span class="number">60</span>); 
<span class="call">xpc_dictionary_set_int64</span>(criteria, <span class="type">XPC_ACTIVITY_GRACE_PERIOD</span>, <span class="number">10</span> * <span class="number">60</span>);

<span class="comment">// Activity handler runs on background queue.</span> 
<span class="call">xpc_activity_register</span>(“com.<span class="property">mycompany</span>.<span class="property">myapp</span>.<span class="property">myactivity</span>”, criteria, ^(xpc_activity_t activity) {
	id data = <span class="call">createDataFromPeriodicRefresh</span>();
	<span class="comment">// Continue the activity asynchronously to update the UI.</span> 
	<span class="call">xpc_activity_set_state</span>(activity, <span class="type">XPC_ACTIVITY_STATE_CONTINUE</span>); 
	<span class="call">dispatch_async</span>(<span class="call">dispatch_get_main_queue</span>(), ^{
	    <span class="call">updateViewWithData</span>(data);
		<span class="call">xpc_activity_set_state</span>(activity, <span class="type">XPC_ACTIVITY_STATE_DONE</span>); 
	});
});
</code></pre><h2>Service Lifecycle</h2><ul><li>Service launches on-demand</li><li>System stops service as needed<ul><li>App quits</li><li>Memory pressure</li><li>Idle/lack of use</li></ul></li></ul><h2>Importance Boosting</h2><p>By default processes are launched in a background queue, however sometimes we need the service to process something immediately (to avoid bad user experience): use importance boosting for such scenarios. Importance boosting makes sure that the service gets all the resources etc.</p><p>Use the <code>ProcessType</code> key in the <code>launchd.plist</code> to opt into this behavior, possible values:</p><table><tbody><tr><td>value</td><td>Contention Behavior</td><td>Use when</td></tr><tr><td>Adaptive</td><td>contends with apps when doing work on their behalf</td><td>app uses XPC to communicate with launchd job</td></tr><tr><td>Background</td><td>Never contend with apps</td><td>app has no dependency on launchd job’s work</td></tr><tr><td>Interactive</td><td>Always contend with apps</td><td>Extreme cases (Apple doesn't want you to use this)</td></tr><tr><td>Standard</td><td>Default behavior</td><td></td></tr></tbody></table><h2>Debugging Tips</h2><ul><li>use <code>imptrace(1)</code> tool for debugging important boost services</li></ul><ul><li>If you get a <code>connection-invalid</code> error, this indicates a configuration error:<ul><li>make sure service target is dependency of app target</li><li>make sure service target is in Copy Files build phase</li><li>make sure <code>CFBundleIdentifier</code> matches service name</li></ul></li></ul><ul><li>When your service "misbehaves" (obvious misuse of certain APIs etc), it can be killed:<ul><li>from clients you will get a crash report</li><li>during debugging, you can use <a href="https://developer.apple.com/documentation/xpc/1505415-xpc_debugger_api_misuse_info?language=objc"><code>xpc_debugger_api_misuse_info()</code></a> in lldb to get a pointer to the human-readable string describing the reason the caller was aborted.</li></ul></li></ul><p>Crash report example:</p><pre><code><span class="type">Exception Type</span>: <span class="type">EXC_BAD_INSTRUCTION</span> (<span class="type">SIGILL</span>)
<span class="type">Exception Codes</span>: 0x0000000000000001, 0x0000000000000000
<span class="type">Application Specific Information</span>:
<span class="type">API MISUSE</span>: <span class="type">Over</span>-release of an object
</code></pre><p>lldb example:</p><pre><code><span class="type">Exception Type</span>: <span class="type">EXC_BAD_INSTRUCTION</span> (<span class="type">SIGILL</span>)
<span class="type">Exception Codes</span>: 0x0000000000000001, 0x0000000000000000
 <span class="type">Application Specific Information</span>:
<span class="type">API MISUSE</span>: <span class="type">Over</span>-release of an object
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10214</guid><title>Port your Mac app to Apple silicon</title><description>Your porting questions, answered: Learn how to recompile your macOS app for Apple silicon Macs and build universal apps that launch faster, have better performance, and support the future of the platform. We’ll show you how Xcode makes it simple to build a universal macOS binary and go through running, debugging, and testing your app. Learn what changes to low-level code you might need to make, find out how to handle in-process and out-of-process plug-ins, and discover some useful tips for working with universal apps.

We’ve designed this session for experienced macOS developers who want to get their existing apps running natively on Apple silicon Macs. You can learn more about doing so in the Apple silicon documentation.

For more information on the transition to Apple silicon, watch "Explore the new system architecture of Apple silicon Macs", "Bring your Metal app to Apple silicon Macs", and "Optimize Metal Performance for Apple silicon Macs". And to learn how to run your iPhone and iPad apps on Mac, check out "iPad and iPhone apps on Apple silicon Macs".</description><link>https://www.wwdcnotes.com/notes/wwdc20/10214</link><pubDate>Sun, 23 Aug 2020 20:51:32 +0700</pubDate><content:encoded><![CDATA[<p>For an in-depth overview of everything Apple Silicon, check the official <a href="https://developer.apple.com/documentation/apple_silicon">Apple Silicon documentation</a>.</p><h2>What the transition to Apple Silicon means</h2><table><tbody><tr><td></td><td>Apple Silicon Mac</td><td>Intel-based Mac</td></tr><tr><td>Native architecture</td><td>arm 64</td><td>x86_64</td></tr><tr><td>Supported architectures</td><td>arm64 (native), x86_64 (translated via Rosetta)</td><td>x86_64</td></tr></tbody></table><p>In macOS 11, when running on Apple silicon, the CPU tab of the Activity Monitor.app has a new <code>Kind</code> column showing which architecture each process runs on ("<code>Apple</code>" means it's running natively in Apple Silicon, <code>Intel</code> when the process is being translated via Rosetta):</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10214/activityMonitor.png"/><h3>Universal Mach-O binaries</h3><p>Your apps and most executable code in macOS, are stored in a file format called <a href="https://en.wikipedia.org/wiki/Mach-O">Mach-O</a>.</p><p>These files can either be targeting a single CPU architecture or they can be universal (a.k.a. support multiple CPU architectures).</p><p>To examine a file on disk, you can use the <code>lipo</code> command.</p><h3>Rosetta translation</h3><ul><li>the entire process is either native or translated (cannot mix).</li><li>Kernel extensions, AVX vector instructions, and virtualization are not supported.</li></ul><h2>Building Universal Binaries</h2><ul><li>endianness of arm64 is the same as x86</li><li>if your (macOS) app shares code with an iOS app, that code is guarantee to work in Apple Silicon</li><li>Xcode 12 supports building Universal Binaries on all mac architectures (both on Intel and Apple Silicon macs)</li></ul><h3>Determining CPU page size</h3><ul><li>Native page size on Intel is <code>4 kB</code>, on Apple Silicon it's <code>16 kB</code>: therefore the <code>PAGE_SIZE</code> macro is no longer a constant. Use:<ul><li><code>PAGE_MAX_SIZE</code> for a compile-time upper bound</li><li><code>vm_page_size</code> to read the actual value at runtime</li></ul></li></ul><ul><li>Rosetta provides 4 KB pages when translating Intel processes</li></ul><h3>#if for platforms and CPU architectures</h3><ul><li>macOS: <code>#if os(macOS)</code></li><li>intel: <code>#if arch(x86_64)</code></li><li>ARM64: <code>#if arch(arm64)</code></li><li>Simulator: <code>#if targetEnvironment(simulator)</code></li><li>iOS device: <code>#if os(iOS) &amp;&amp; !targetEnvironment(simulator)</code></li></ul><h3>Precompiled binaries</h3><p>When building for Apple Silicon you might encounter linker warnings (that later translate in some cryptic errors) similar to: <code>ignoring file when building for macOS-arm64, but attempting to link with file built for macOS-x86_64.</code>.</p><p>This happens when we have a binary dependency that hasn't been built as universal yet, the only way to fix this is to:</p><ul><li>remove such dependency (even just temporarily)</li><li>wait for the dependency to provide an universal binary</li></ul><p>What you can do now: search for precompiled binaries in your project (<code>.a</code>, <code>.dylib</code>, <code>.framework</code>, <code>.xcframework</code>) and reach out their vendors if the binary is not universal (use <code>lipo --info path/to/binary</code> to inspect them)</p><h3>Building Universal Binaries steps</h3><ol><li>Build your app as an Intel app in Xcode 12 first (make sure it builds fine with no warnings)</li><li>Build your app natively for Apple Silicon<ul><li>fix non-portable code issues (see #if chapter above)</li><li>fix link-time issues (see <code>Precompiled binaries</code> chapter above)</li></ul></li></ol><h2>Running, Testing, Debugging</h2><ul><li>When running tests, they will run only in the selected architecture</li><li>The default architecture is the one the mac machine is running on</li><li>Always run your tests on both architectures</li></ul><h2>Asymmetric CPU cores on Apple Silicon</h2><ul><li>Apple Silicon Macs have two types of cores:<ul><li>High-performance (P Cores)</li><li>Energy-efficient (E Cores)</li></ul></li></ul><ul><li>All can be active at the same time for highly-parallel workloads</li></ul><p>In Instruments you can see which core is which by the associated label:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10214/instruments.png"/><h2>Plug-ins</h2><ul><li>Plug-ins are a way to dynamically load and execute code.</li><li>Both native and translated plug-ins are supported.</li><li>If your app is a plug-in host, and if it's using a custom plug-in loading mechanism, you will need to consider how plug-ins work on Apple Silicon Macs.</li></ul><p>If your app supports plug-ins, it will typically discover them at runtime and then load them when needed.</p><p>That's called an <strong>in-process plug-in model</strong>, and typically the app uses a call to <a href="https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man3/dlopen.3.html"><code>dlopen()</code></a> or <a href="https://developer.apple.com/documentation/foundation/bundle/1415927-load"><code>Bundle.load()</code></a> for this.</p><p>Alternatively, the plug-ins can be spawned as new processes, and we call those <strong>out-of-process plug-ins</strong>. The app and the plug-in process then use some interprocess communication mechanism like XPC. Loading another plug-in typically spawns another process.</p><table><tbody><tr><td></td><td>1st party (build from source code shipped inside your app)</td><td>3rd party (precompiled binaries, shipped inside the app or separately)</td></tr><tr><td>Out-of-process</td><td>Supported</td><td>Supported, even when the binary is intel only (Rosetta will take care of that process)</td></tr><tr><td>In-process</td><td>Supported only if the running architecture matches the one in the precompiled binary)</td><td>not supported</td></tr></tbody></table>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10060</guid><title>Design high quality Siri media interactions</title><description>Demystify the art of designing Siri experiences for your music and audio apps: We’ll show you how to think about crafting great interactions and how you can provide custom vocabulary so that Siri can respond with more accuracy and personality. We’ll also explain how you can debug common errors and test your intents using the same methods Apple’s own Siri team employs.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10060</link><pubDate>Thu, 20 Aug 2020 17:18:02 +0700</pubDate><content:encoded><![CDATA[<h2>Siri intent Coverage:</h2><ul><li>These are the most popular Siri interactions with voice (covering 90% of all utterances):</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10060/popular.png"/><ul><li>The better your Siri support is, the more likely it is that people will make more complicated Siri requests.</li></ul><h2>Vocabularies</h2><ul><li>help Siri understand the user intent</li><li>User vocabulary:<ul><li>user/personalized items</li><li>shared with Siri via <a href="https://developer.apple.com/documentation/sirikit/invocabulary"><code>INVocabulary</code></a> API</li><li>the items order is by priority (put more important items first)</li></ul></li></ul><pre><code><span class="keyword">let</span> vocabulary = <span class="type">INVocabulary</span>.<span class="call">shared</span>()
<span class="keyword">let</span> playlistNames = <span class="type">NSOrderedSet</span>(objects: <span class="string">"70s punk classics"</span>)
vocabulary.<span class="call">setVocabularyStrings</span>(playlistNames, of: .<span class="dotAccess">mediaPlaylistTitle</span>) 
</code></pre><ul><li><ul><li>Here's how to set it:</li></ul></li></ul><pre><code><span class="comment">// Set our playlist title in user vocabulary so we get the proper Siri intent</span>
<span class="keyword">let</span> vocabulary = <span class="type">INVocabulary</span>.<span class="call">shared</span>()
<span class="keyword">let</span> playlistNames = <span class="type">NSOrderedSet</span>(objects: <span class="string">"70s punk classics"</span>)
vocabulary.<span class="call">setVocabularyStrings</span>(playlistNames, of: .<span class="dotAccess">mediaPlaylistTitle</span>)
</code></pre><ul><li><a href="https://developer.apple.com/documentation/sirikit/registering_custom_vocabulary_with_sirikit/global_vocabulary_reference">Global vocabulary</a>:<ul><li>general static vocabulary</li><li>defined in <code>appIntentVocabulary.plist</code></li><li>only include things that are particular to your app, don't include popular music or podcast entities, as those are generally already recognized by Siri as part of its NL model</li><li>example:</li></ul></li></ul><pre><code>&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;
&lt;!<span class="type">DOCTYPE</span> plist <span class="type">PUBLIC</span> <span class="string">"-//Apple</span><span class="comment">//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
&lt;plist version=<span class="string">"1.0"</span>&gt;
&lt;dict&gt;
	&lt;key&gt;<span class="type">ParameterVocabularies</span>&lt;/key&gt;
	&lt;array&gt;
		&lt;dict&gt;
			&lt;key&gt;<span class="type">ParameterNames</span>&lt;/key&gt;
			&lt;array&gt;
				&lt;string&gt;<span class="type">INPlayMediaIntent</span>.<span class="property">playlistTitle</span>&lt;/string&gt;
			&lt;/array&gt;
			&lt;key&gt;<span class="type">ParameterVocabulary</span>&lt;/key&gt;
			&lt;array&gt;
				&lt;dict&gt;
					&lt;key&gt;<span class="type">VocabularyItemSynonyms</span>&lt;/key&gt;
					&lt;array&gt;
						&lt;dict&gt;
							&lt;key&gt;<span class="type">VocabularyItemPhrase</span>&lt;/key&gt;
							&lt;string&gt;70s punk anthems&lt;/string&gt;
						&lt;/dict&gt;
					&lt;/array&gt;          
					&lt;key&gt;<span class="type">VocabularyItemIdentifier</span>&lt;/key&gt;
					&lt;string&gt;70s punk anthems&lt;/string&gt;
				&lt;/dict&gt;
			&lt;/array&gt;
		&lt;/dict&gt;
	&lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre><h2>MPRemoteCommandCenter</h2><ul><li>Use <a href="https://developer.apple.com/documentation/mediaplayer/mpremotecommandcenter"><code>MPRemoteCommandCenter</code></a> to handle playback intents like "next track" and more (this is the same center used to respond playback actions in the lock screen)</li><li>Siri reads the center's <a href="https://developer.apple.com/documentation/mediaplayer/mpnowplayinginfocenter/1615903-nowplayinginfo"><code>nowPlayingInfo</code></a> to answer questions reguarding the current playing song (set properties such as <code>MPMediaItemPropertyTitle</code>, <code>MPMediaItemPropertyArtist</code>, <code>MPMediaItemPropertyAlbumTitle</code>)</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10004</guid><title>Expanding automation with the App Store Connect API</title><description>Make routine tasks in App Store Connect a thing of the past when you automate your workflow with the App Store Connect API. Learn how you can manage more about your presence on the App Store with the App Metadata API, or use the new Power and Performance Metrics and Diagnostics API to access the same aggregate data that drives the Power and Performance analysis tools in Xcode. Whether you’re managing team members and provisioning profiles, adding or removing beta testers, or downloading your sales and financial reports, this comprehensive API makes automation of these processes a snap.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10004</link><pubDate>Thu, 20 Aug 2020 16:32:13 +0700</pubDate><content:encoded><![CDATA[<h2>New API endpoints (200+)</h2><ul><li>versions</li><li>previews</li><li>screenshots</li><li>localizations</li><li>pricing</li><li>submit for review</li><li>ratings</li><li>categories</li><li>plarforms</li><li>encryption declarations</li><li>pre-orders</li><li>phased release</li><li>license agreements</li><li>routing app coverage</li><li>power and Performance Metrics</li><li>diagnostic logs</li></ul><h2>OpenAPI</h2><ul><li><a href="https://developer.apple.com/sample-code/app-store-connect/app-store-connect-openapi-specification.zip">downloadable OpenAPI specification File</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10646</guid><title>What's new in Web Inspector</title><description>The Web Inspector makes introspection and debugging simpler than ever. Discover how you can use debugger stepping, editing cookies, and overriding network loaded resources to provide you with powerful development capabilities and help you create faster, more efficient websites.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10646</link><pubDate>Thu, 20 Aug 2020 15:40:09 +0700</pubDate><content:encoded><![CDATA[<h2>Web Inspector changes</h2><ul><li>the toolbar and dashboard are now merged into a tab bar (to save on vertical space)</li><li>tightened the spacing around many controls (allowing you to see more content)</li><li>Dark Mode variants for all of the icons throughout Web Inspector</li><li>possibility to toggle Dark Mode independently from the rest of the system in the Settings Tab</li></ul><h2>New tabs Sources</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10646/sources.png"/><p>Overview:</p><ul><li>lists all resources loaded by the inspected page since Web Inspector was opened, including long-lived things like 'WebSocket's or more ephemeral things like XHRs or 'fetch's.</li><li>primary place for JavaScript debugging, containing all of the JavaScript debugger stepping controls and many of the breakpoint adding capabilities</li><li>used for network overriding capabilities</li><li>When ispecting a response or part of a request, beside raw, we can also display the content as a <code>DOM Tree</code> (in case of web sources) or <code>Object Tree</code> (in case of JSON responses)</li></ul><h3>Local overrides</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10646/localOverrides.png"/><ul><li>allow you to modify resources loaded over the network</li><li>Clicking the local override button (highlighted above) automatically copies the current contents of the displayed resource into a new local override for that resource.</li><li>Once we change the resource, refresh the page and the override will take place</li><li>by right-clicking on a local override in Web Inspector, we can select the "Edit Local Override…" action where it's also possible to modify the HTTP status code or any HTTP headers as well</li><li>non-text resources, like images, can also be overridden and fully configured</li><li>preserved across sessions of both the inspected page and Web Inspector itself</li></ul><h3>Inspector Bootstrap Script</h3><ul><li>we can be add a Inspector Bootstrap Script from the add resource button in the bottom corner of the navigation sidebar in the Sources Tab</li><li>it's a way to modify the JavaScript API surface itself.</li><li>The contents of the Inspector Bootstrap Script are guaranteed to run before anything else in the inspected page.</li><li>preserved across sessions of both the inspected page and Web Inspector itself</li></ul><h3>New Javascript Breakpoints</h3><ul><li>Debugger Statements breakpoint: controls whether or not JavaScript execution is paused at 'debugger' statements.</li><li>All Microtasks breakpoint: pauses JavaScript execution whenever any microtask is about to be executed (such as from 'Promise' objects or the 'queueMicrotask()' global function)</li><li>All Animation Frames breakpoint: same as above, but for 'requestAnimationFrame' callbacks.</li><li>All Timeouts breakpoint: same as above, but for 'setTimeout' callbacks</li><li>All Intervals breakpoint: same as above, but for 'setInterval' callbacks</li><li>All Events breakpoint: pauses before any callback is invoked for any event listener, even those unrelated to the DOM</li></ul><h3>Script blackboxing</h3><ul><li>defers any JavaScript debugger pauses that would occur in a script to pause at the first expression to execute outside of that script.</li><li>useful to avoid global breakpoints to stop within jquery for example</li></ul><h3>Step debugger action</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10646/step.png"/><ul><li>resumes and re-pauses Javascript execution before the next expression in the current call frame</li><li>basically a shortcut for Step in and Step outs</li></ul><h2>Timelane Tab</h2><p>Overview:</p><ul><li>captures activity in the inspected page</li><li>plots records based on category</li><li>import/export recording</li></ul><p>What's new:</p><ul><li>new <code>Media &amp; Animations</code> timeline<ul><li>captures events related to media elements</li><li>captures the lifecycle of CSS animations and CSS transitions</li></ul></li></ul><h2>Storage Tab</h2><p>Overview:</p><ul><li>enumerates data stored in the browser (cookies, LocalStorage, IndexDB, ..)</li></ul><p>What's new:</p><ul><li>Provides filtering to find specific data</li><li>Enhancements on editing and deleting data</li></ul><h2>New Graphics Tab</h2><ul><li>replaces the canvas tab</li><li>shows preview for all <code>&lt;canvas&gt;</code> contexts and shaders</li><li>supports recording Javascript API calls of <code>&lt;canvas&gt;</code> contexts</li><li>(new) lists all web/css animations, CSS transitions</li></ul><h2>New Layers Tab</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10646/layers.png"/><ul><li>shows a live view of the layer tree of the inspected page</li><li>lists the memory cost and the paint count for each layer</li></ul><h2>Console tab</h2><p>Overview:</p><ul><li>Lists all logs from the inspected page</li><li>Allows arbitrary JavaScript evaluation</li><li>Exposes special engine functionality</li></ul><p>What's new:</p><ul><li>many new console functions:<ul><li><code>queryInstances(className)</code> will return an array of all objects that inherit from <code>className</code></li><li><code>queryHolders(instanceName)</code> will return an array of all objects in the entire JavaScript heap that have a strong reference to <code>instanceName</code></li></ul></li></ul><h2>Enable Intelligent Tracking Prevention Debug Mode</h2><ul><li>new Developer menu option</li><li>if active, all debug logging from Safari's Intelligent Tracking Prevention will appear in the Web Inspector Console, and in the macOS system Console.app</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10027</guid><title>Modern cell configuration</title><description>Discover new techniques for configuring collection view and table view cells to quickly build dynamic interfaces in your app. Explore configuration types you can use to easily populate cells with content and apply common styles. Take advantage of powerful APIs to customize the appearance of cells for different states. Find out about patterns and best practices that simplify your code, eliminate bugs, and improve performance.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10027</link><pubDate>Wed, 12 Aug 2020 11:18:35 +0700</pubDate><content:encoded><![CDATA[<p>Xcode 12 brings new APIs to configure the content and styling of cells.</p><h2>Getting started with configurations</h2><p>With iOS 14, standard cells should use the new content configurations:</p><pre><code><span class="keyword">var</span> content = cell.<span class="call">defaultContentConfiguration</span>()

content.<span class="property">image</span> = <span class="type">UIImage</span>(systemName: <span class="string">"star"</span>)
content.<span class="property">text</span> = <span class="string">"Hello WWDC!"</span>

cell.<span class="property">contentConfiguration</span> = content
</code></pre><p>The cell's <a href="https://developer.apple.com/documentation/uikit/uicollectionviewlistcell/3600969-defaultcontentconfiguration"><code>defaultContentConfiguration()</code></a>:</p><ul><li>always return a clean configuration (with nothing set on it)</li><li>has a default styling, based on the cell and table view style</li></ul><p>The same approach is used for any cell that supports configurations (<code>UITableViewCell</code>s, <code>UICollactionViewcell</code>s, ..), this is possible because these standard cell layouts and appearances are now available as independent pieces that can plug right into any cell or view that supports them.</p><p>Using configurations will let the system take care of the multiple states a cell can be in, for example:</p><ul><li>normal</li><li>highlighted</li><li>highlighted and selected</li><li>disabled</li></ul><p>and more.</p><h3>What are configurations?</h3><ul><li>Configurations describe the cell appearance for a specific state</li><li>applied to a view to render</li><li>composable</li><li>lightweight (inexpensive to create)</li><li>built for performance</li></ul><h3>Configuration types</h3><p>Two types:</p><ul><li>Background Configuration</li><li>List Content Configuration</li></ul><p>Background configurations let you set things such as:</p><ul><li>background color</li><li>visual effect (blur)</li><li>stroke</li><li>insets and corner radius</li><li>custom view</li></ul><p>List Content configurations give you the standard layout for cells, headers, and footers:</p><ul><li>image</li><li>text</li><li>secondary text</li><li>layout metrics and behaviors</li></ul><p>You can change configurations at will, for example within an animation</p><h2>Configuration state</h2><ul><li>Configuration state represents the various inputs that you use to configure your cells and views: it's a collection of all the different traits, states, and your own custom states wrapped together in one place.</li><li>Each cell, header and footer has its own configuration state</li></ul><p>Two Types:</p><ul><li>View configuration state</li><li>Cell configuration state</li></ul><h3>View configuration state</h3><p>This state has:</p><ul><li>a trait collection</li><li>four different (boolean) states: highlighted, selected, disabled, focused</li><li>and a custom state: this is key value storage for you to add any extra states or data that you want to use when configuring your view</li></ul><h3>Cell configuration state</h3><p>Cell configuration state has everything from the View configuration state plus the following extra states:</p><ul><li>(boolean) editing, swiped, expanded</li><li>Drag and drop states</li></ul><p>We can ask a new configuration by passing a new state:</p><pre><code><span class="keyword">let</span> updatedConfiguration = configuration.<span class="call">updated</span>(for: state)
</code></pre><p>By default these configurations update by themselves when we set a new configuration, thanks to the cell <a href="https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600428-automaticallyupdatescontentconfi"><code>automaticallyUpdatesContentConfiguration</code></a> and <a href="https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600427-automaticallyupdatesbackgroundco"><code>automaticallyUpdatesBackgroundConfiguration</code></a> properties:<br>in other words, when you set a background or content configuration on the cell, any time the cell's configuration state changes it will automatically ask the configuration to return an updated version of itself and then reapply that new configuration back to the cell.</p><p>If you'd like to do this manually instead, you can override the cell's new function <a href="https://developer.apple.com/documentation/uikit/uicollectionviewcell/3600950-updateconfiguration"><code>updateConfiguration(using:)</code></a>:<br>this method is always called before your cell first displays and will be called again anytime the configuration state may have changed so you can configure your cell for the new state.</p><p>Here's an example that customizes the cell colors based on the state:</p><pre><code><span class="keyword">override func</span> updateConfiguration(using state: <span class="type">UICellConfigurationState</span>) {
    <span class="keyword">var</span> content = <span class="keyword">self</span>.<span class="call">defaultContentConfiguration</span>().<span class="call">updated</span>(for: state)
    
    content.<span class="property">image</span> = <span class="keyword">self</span>.<span class="property">item</span>.<span class="property">icon</span>
    content.<span class="property">text</span> = <span class="keyword">self</span>.<span class="property">item</span>.<span class="property">title</span>
 
    <span class="keyword">if</span> state.<span class="property">isHighlighted</span> || state.<span class="property">isSelected</span> {
        content.<span class="property">imageProperties</span>.<span class="property">tintColor</span> = .<span class="dotAccess">white</span>
        content.<span class="property">textProperties</span>.<span class="property">color</span> = .<span class="dotAccess">white</span>
    }
 
    <span class="keyword">self</span>.<span class="property">contentConfiguration</span> = content
}
</code></pre><h2>Background and content configurations</h2><ul><li>Each cell has a default background and content configuration, however we can ask for a specific configuration just as easily:</li></ul><pre><code><span class="keyword">var</span> background = <span class="type">UIBackgroundConfiguration</span>.<span class="call">listSidebarCell</span>()
<span class="keyword">var</span> content = <span class="type">UIListContentConfiguration</span>.<span class="call">sidebarCell</span>()
</code></pre><ul><li>Configurations are designed to be used with self-sizing cells where their height can be flexible depending on the exact configuration and environment</li></ul><ul><li>Content configurations give you control over the layout margins (blue), and various padding properties (orange) <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10027/layout.png"/></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10048</guid><title>Build complications in SwiftUI</title><description>Spice up your graphic complications on Apple Watch using SwiftUI. We’ll teach you how to use custom SwiftUI views in complications on watch faces like Meridian and Infograph, look at some best practices when creating your complications, and show you how to preview your work in Xcode 12.

To get the most out of this session, you should be familiar with the basics of SwiftUI and building complications on Apple Watch. For an overview, watch “Create Complications for Apple Watch” and read “Building watchOS App Interfaces with SwiftUI.”

Once you’ve discovered how to build graphic complications in SwiftUI, you can combine this with other watchOS 7 features like multiple complications and Face Sharing to create a watch face packed with personality and customized for people who love your app.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10048</link><pubDate>Wed, 12 Aug 2020 11:15:25 +0700</pubDate><content:encoded><![CDATA[<h2>New API</h2><h3>Templates</h3><p>With watchOS 7 there are new complication templates that take in just a SwiftUI view, letting us be in total control of what to display in the complication:</p><ul><li><code>CLKComplicationTemplateGraphicCornerCircularView</code></li><li><code>CLKComplicationTemplateGraphicCircularView</code></li><li><code>CLKComplicationTemplateGraphicRectangularLargeView</code></li><li><code>CLKComplicationTemplateGraphicRectangularFullView</code></li><li><code>CLKComplicationTemplateGraphicExtraLargeCircularVie</code></li></ul><h3>Text</h3><ul><li>By default <code>Text</code> size adapts based on the complication family it will appear on. The default font is SF Rounded.</li></ul><ul><li>Use the new <code>Text</code> date formatters to make the view update live:</li></ul><pre><code><span class="comment">/// A style displaying a date as relative to now.
/// e.g. 2 hours, 23 minutes</span>
<span class="keyword">static let</span> relative: <span class="type">Text</span>.<span class="type">DateStyle</span>

<span class="comment">/// A style displaying a date as offset from now.
/// e.g. +2 hours</span>
<span class="keyword">static let</span> offset: <span class="type">Text</span>.<span class="type">DateStyle</span>

<span class="comment">/// A style displaying a date as timer counting from now.
/// e.g. 36:59:01</span>
<span class="keyword">static let</span> timer: <span class="type">Text</span>.<span class="type">DateStyle</span>
</code></pre><p>Examples:</p><pre><code><span class="keyword">import</span> SwiftUI
<span class="keyword">import</span> ClockKit

<span class="keyword">struct</span> RelativeText: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(alignment: .<span class="dotAccess">leading</span>) {
      <span class="type">Text</span>(<span class="string">"Count Down"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">headline</span>)
        .<span class="call">foregroundColor</span>(.<span class="dotAccess">accentColor</span>)
      <span class="type">Label</span>(<span class="string">"Nap Time"</span>, systemImage: <span class="string">"moon.fill"</span>)
      <span class="type">Text</span>(<span class="type">Date</span>() + <span class="number">100</span>, style: .<span class="dotAccess">relative</span>)
    }
    .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>, alignment: .<span class="dotAccess">leading</span>)
  }
}

<span class="keyword">struct</span> RelativeText_Previews: <span class="type">PreviewProvider</span> {
  <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">CLKComplicationTemplateGraphicRectangularFullView</span>(<span class="type">RelativeText</span>())
      .<span class="call">previewContext</span>()
  }
}
</code></pre><pre><code><span class="keyword">import</span> SwiftUI
<span class="keyword">import</span> ClockKit

<span class="keyword">struct</span> TimerText: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span>(alignment: .<span class="dotAccess">leading</span>) {
      <span class="type">Label</span>(<span class="string">"Sourdough Timer"</span>, systemImage: <span class="string">"timer"</span>)
        .<span class="call">foregroundColor</span>(.<span class="dotAccess">orange</span>)
      <span class="type">Text</span>(<span class="string">"Time remaining:</span> \(<span class="type">Date</span>() + <span class="number">100</span>, style: .<span class="dotAccess">timer</span>)<span class="string">"</span>)
    }
    .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>, alignment: .<span class="dotAccess">leading</span>)
  }
}

<span class="keyword">struct</span> TimerText_Previews: <span class="type">PreviewProvider</span> {
  <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">CLKComplicationTemplateGraphicRectangularFullView</span>(<span class="type">TimerText</span>())
      .<span class="call">previewContext</span>()
  }
}
</code></pre><h3>ProgressView &amp; Gauge</h3><p>New <a href="https://developer.apple.com/documentation/swiftui/ProgressView"><code>ProgressView</code></a> and <a href=""><code>Gauge</code></a> SwiftUI views:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10048/pvg.png"/><p><code>ProgressView</code> comes with two styles:</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/circularprogressviewstyle"><code>CircularProgressViewStyle</code></a></li><li><a href="https://developer.apple.com/documentation/swiftui/linearprogressviewstyle"><code>LinearProgressViewStyle</code></a></li></ul><pre><code><span class="keyword">import</span> SwiftUI
<span class="keyword">import</span> ClockKit

<span class="keyword">struct</span> ProgressSample: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ProgressView</span>(value: <span class="number">0.7</span>) {
      <span class="type">Image</span>(systemName: <span class="string">"music.note"</span>)
    }
    .<span class="call">progressViewStyle</span>(<span class="type">CircularProgressViewStyle</span>(tint: .<span class="dotAccess">red</span>))
  }
}

<span class="keyword">struct</span> ProgressSample_Previews: <span class="type">PreviewProvider</span> {
  <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">CLKComplicationTemplateGraphicCircularView</span>(<span class="type">ProgressSample</span>())
      .<span class="call">previewContext</span>()
  }
}
</code></pre><p><code>Gauge</code> comes with a style:</p><ul><li><code>CircularGaugeStyle</code></li><li><code>LinearGaugeStyle</code></li></ul><p>Both styles come with many optional personalization such as:</p><ul><li>label</li><li>currentValueLabel</li><li>minimumValueLabel</li><li>maximumValueLabel</li></ul><pre><code><span class="keyword">import</span> SwiftUI
<span class="keyword">import</span> ClockKit

<span class="keyword">struct</span> GaugeSample: <span class="type">View</span> {
  <span class="keyword">@State var</span> acidity = <span class="number">5.8</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Gauge</span>(value: acidity, in: <span class="number">3</span>...<span class="number">10</span>) {
      <span class="type">Image</span>(systemName: <span class="string">"drop.fill"</span>)
        .<span class="call">foregroundColor</span>(.<span class="dotAccess">green</span>)
    } currentValueLabel: {
      <span class="type">Text</span>(<span class="string">"</span>\(acidity, specifier: <span class="string">"</span>%.1f")<span class="string">")</span>
    } minimumValueLabel: {
      <span class="type">Text</span>(<span class="string">"3"</span>)
    } maximumValueLabel: {
      <span class="type">Text</span>(<span class="string">"10"</span>)
    }
    .<span class="call">gaugeStyle</span>(<span class="type">CircularGaugeStyle</span>())
  }
}

<span class="keyword">struct</span> GaugeSample_Previews: <span class="type">PreviewProvider</span> {
  <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">CLKComplicationTemplateGraphicCircularView</span>(<span class="type">GaugeSample</span>())
      .<span class="call">previewContext</span>()
  }
}
</code></pre><h3>Complication Template Preview</h3><ul><li>When previewing templates, we now have a new <a href="https://developer.apple.com/documentation/swiftui/view/previewcontext(_:)"><code>.previewContext()</code></a> modifier that will let us preview our complication on a face that is best suited for our complication family (examples above).</li></ul><ul><li>We can also set a tinting to our preview as well: <code>.previewContext(faceColor: .blue)</code></li></ul><ul><li>We can use the new <a href="https://developer.apple.com/documentation/clockkit/clkcomplicationtemplategraphiccircularopengaugeview/previewfacecolor/3593768-allcolors"><code>CLKComplicationTemplate.PreviewFaceColor.allColors</code></a> to preview our complication with all the colors:</li></ul><pre><code><span class="keyword">struct</span> HistoryView_Previews: <span class="type">PreviewProvider</span> {
  <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ForEach</span>(<span class="type">CLKComplicationTemplate</span>.<span class="type">PreviewFaceColor</span>.<span class="property">allColors</span>) { color <span class="keyword">in</span>
      <span class="type">CLKComplicationTemplateGraphicRectangularFullView</span>(<span class="type">ComplicationHistoryView</span>())
      .<span class="call">previewContext</span>(faceColor: color)
    }
  }
}

</code></pre><h2>Watch face tinting</h2><p>Some faces alter the tint color, and the color on each complication.</p><p>There are two kinds of tinting:</p><ul><li>desaturated tint (default)</li><li>color opacity tint</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10048/tinting.png"/><h3>Desaturated tint</h3><ul><li>Depending on the face, our complication can get completely desaturated, or get one color applied for the whole complication</li></ul><ul><li>If our complication elements have similar brightness, they will be indistinguishable when the view is desaturated.</li></ul><h3>Color opacity tint</h3><ul><li>Alternative to Desaturated tint that we can opt-in to</li><li>This works by splitting our view in two layers, background and foreground:<ul><li>what matters for each layer is the opacity</li><li>each watch face will determine what color to give to each layer (they will be two different colors)</li></ul></li></ul><p>By default all elements are in the background layer, to move elements into the foreground layer, apply the new <code>.complicationForeground()</code> modifier.</p><h3>Custom tint</h3><p>For more custom tinting, we can get the current <a href="https://developer.apple.com/documentation/clockkit/complicationrenderingmode"><code>ComplicationRenderingMode</code></a> via the <code>\.complicationRenderingMode</code> environment variable: what we can do here is read the current rendering mode and change our layers opacity based on that.</p><h2>Best practices</h2><ul><li>Tapping anywhere in a complication will always open the watch app (no buttons or else support)</li><li>Use <code>Text</code>, <code>Image</code>. and drawing primitives such as <code>Shape</code>s, <code>Path</code>s, and <code>Paint</code>s, other SwiftUI elements are not supported</li><li>SwiftUI animations are not supported</li><li>Limit expensive drawing such as blurs and formatted text</li><li>Use the default font size as a guide for your complication layout</li><li>Circular and Rectangular complication families will mask your view</li><li>Rectangular full view complication features a safe area for layout to help prevent your content from being clipped on the watch face.</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10207</guid><title>SF Symbols 2</title><description>SF Symbols make it easy to adopt high-quality, Apple-designed symbols created to look great with San Francisco, the system font for all Apple platforms. Discover how you can use SF Symbols in AppKit, UIKit, and SwiftUI. Learn how to work with SF Symbols in common design tools and how to use them in code. And we’ll walk you through the latest updates, including additions to the repertoire, alignment improvements, changes with right-to-left localization, and multicolor symbols.

This session focuses on the latest features in SF Symbols 2. While not required, we recommend watching "Introducing SF Symbols" from WWDC19. If you’re planning to incorporate symbol assets into SwiftUI, you may also benefit from watching “Building Custom Views with SwiftUI."</description><link>https://www.wwdcnotes.com/notes/wwdc20/10207</link><pubDate>Wed, 12 Aug 2020 11:10:56 +0700</pubDate><content:encoded><![CDATA[<h2>The basics</h2><ul><li>Symbols are designed to work next to text from any SF family</li><li>When symbols appear next to text they are vertically centered with a cap height <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10207/capHeight.png"/></li></ul><ul><li>The text baseline is used as a flexible guide, sometimes symbols are lower or higher than the baseline: this is intended and it's meant to optically balance the shape of the symbol with the text</li><li>Things to keep in mind when designing new symbols:<ul><li>symbols come in three dimensions, small medium (default) large</li><li>all sizes align vertically</li><li>small symbols are ~20% smaller than the medium, large symbols are ~30% bigger than the medium symbol</li><li>small symbols look lighter and large symbols look bolder than others sizes, but actually there are some weight compensations which allow the symbols to maintain the same stroke thickness, making the symbols look weight matched not only between the scales but also with text. <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10207/thickness.png"/></li></ul></li></ul><h2>Usage tips</h2><ul><li>SF Symbol are supported on macOS starting from Big Sur</li><li>When using the SF Symbols app, we can copy the name of a symbol via <code>⇧</code> + <code>⌘</code> + <code>C</code>.</li><li>To change the scale of a symbol while maintaining the same point size we need to set the <code>UIImage</code>'s <a href="https://developer.apple.com/documentation/uikit/uiimage/symbolconfiguration"><code>SymbolConfiguration</code></a>:</li></ul><pre><code><span class="keyword">var</span> playImageView: <span class="type">UIImageView</span> = ...
<span class="keyword">let</span> buttonConfig = <span class="type">UIImage</span>.<span class="type">SymbolConfiguration</span>(textStyle: .<span class="dotAccess">headline</span>, scale: .<span class="dotAccess">small</span>)
playImageView.<span class="property">preferredSymbolConfiguration</span> = buttonConfig
playImageView.<span class="property">image</span> = <span class="type">UIImage</span>(systemName: <span class="string">"play.fill"</span>)
</code></pre><p>In SwiftUI:</p><pre><code><span class="type">Image</span>(systemName: <span class="string">"shuffle"</span>)
    .<span class="call">font</span>(.<span class="dotAccess">headline</span>)
    .<span class="call">imageScale</span>(.<span class="dotAccess">small</span>)
</code></pre><ul><li>Use SwiftUI's <a href="https://developer.apple.com/documentation/swiftui/label"><code>Label</code></a> to make sure the symbol and text are always in sync:</li></ul><pre><code><span class="type">Label</span>(<span class="string">"Sharing location"</span>, systemImage: <span class="string">"location.fill"</span>)
</code></pre><ul><li>With iOS 14 Images can also be added directly in <code>Text</code>:</li></ul><pre><code><span class="keyword">let</span> glyph = <span class="type">Image</span>(systemName: <span class="string">"location.[fill"</span>)
<span class="keyword">return</span> <span class="type">Text</span>(<span class="string">"</span>\(glyph) <span class="string">Sharing location"</span>)]
</code></pre><ul><li>Some symbols have been renamed: when selecting a symbol in the SF Symbols app, you can see what name you should use based on your target</li><li>use the baseline alignment when laying symbols next to text</li><li>use vertical alignment guides to make the symbols and text grow harmoniously when text gets resized</li></ul><h2>What's new</h2><p>New symbol categories:</p><ul><li>devices</li><li>transportation</li><li>game controllers</li><li>human features</li></ul><p>In the SF Symbol 2 app we can create our own collections:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10207/collection.png"/><p>Symbols are now automatically localized (you can see the localization when selecting a symbol in the SF Symbols app):</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10207/locale.png"/><h2>Colors</h2><ul><li>Last year all symbols were a mono color glyph, from this year we have new colored symbol variants</li><li>These variants will still respect the set tint color, but some part might have a different color</li><li>All these colors adapt with system appearances</li></ul><p>To use the multicolor variant, set the <code>isTemplate</code> property to <code>false</code>:</p><pre><code><span class="keyword">if let</span> folder = <span class="type">NSImage</span>(
    systemSymbolName: <span class="string">"folder.badge.plus"</span>, accessibilityDescription: <span class="string">"add folder"</span>) {
    folder.<span class="property">isTemplate</span> = <span class="keyword">true</span>
}
</code></pre><p>In SwiftUI:</p><pre><code><span class="type">Image</span>(systemName: <span class="string">"pencil.tip.crop.circle.badge.plus"</span>)
    .<span class="call">renderingMode</span>(.<span class="dotAccess">original</span>)
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10171</guid><title>What's new in watchOS design</title><description>Great watchOS apps are simple and direct. Actions should be discoverable, predictable and relevant. This session covers effective strategies for displaying actions in your watchOS app, whether they are primary buttons that begin core tasks, or contextual actions that might be less commonly used but are still important to offer.

For more on implementing actions with the latest UI frameworks, check out "SwiftUI on watchOS."</description><link>https://www.wwdcnotes.com/notes/wwdc20/10171</link><pubDate>Wed, 12 Aug 2020 11:04:42 +0700</pubDate><content:encoded><![CDATA[<h2>Design principles</h2><ul><li>watch apps should be lightweight</li><li>limit interactions/features</li><li>make actions discoverable</li></ul><h2>Design process goals</h2><ol><li>Interactions should be both discoverable and predictable.</li><li>Relevant actions should always be visible.</li><li>Eliminate gesture-based contextual menus without removing functionality.</li></ol><h2>Secondary Actions</h2><p>Secondary actions add or increase functionality, provide a secondary but still important action and/or provide new ways to interact with the primary actions already in the view.</p><h3>Sort and filter actions</h3><p>Sort and filter menus are a lightweight and actionable way to narrow down any long list and make it easier to navigate and more relevant to you in the moment.</p><p>Use a <code>Picker</code> inside a <code>List</code> to show such action:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10171/sort.png"/><pre><code><span class="type">List</span> {
    <span class="type">Picker</span>(selection: $viewing
           title: <span class="type">Text</span>(<span class="string">"Viewing"</span>)) {
       <span class="comment">// Viewing options</span>
    }
    <span class="comment">// Rest of the list</span> 
}
</code></pre><h3>Swipe actions</h3><p>Swipe actions are being used more and more in watchOS for displaying actions in a list.</p><p>Use the <code>.onDelete</code> modifier on a List to remove rows via a swipe:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10171/delete.png"/><pre><code><span class="type">List</span> {
    <span class="type">ForEach</span>(model.<span class="property">locations</span>) {
        <span class="type">ClockCell</span>(location: $0)
    }
    .<span class="call">onDelete</span> { <span class="call">deleteClock</span>(index: $0) }
}
</code></pre><h3>More options</h3><ul><li>It's especially important to separate primary from secondary actions when you think about using a More button</li><li>Never put primary actions inside a More menu</li><li>Be very choosy about which secondary actions you offer</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10171/more.png"/><p>Use a simple circular container element with the SF Symbol ellipsis centered inside. Refer to Apple's <a href="https://developer.apple.com/design/human-interface-guidelines/watchos/elements/buttons/">Human interface Guidelines</a> for the recommended hit regions for each watch screen size and add transparent padding around your button, if needed, to ensure that your button is comfortably tappable.</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10171/oneMore.png"/><p>If you'd like to show only one more extra action, you can do so by showing an ad-hoc glyph.</p><h3>Bottom of a scroll view actions</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10171/bottomButton.png"/><ul><li>Action buttons at the bottom of a detail view may be the most discoverable and intuitive way to show actions in your app</li><li>The actions at the bottom of a detail view should always apply to the content of the view above it</li><li>To avoid confusion, information in the detail view that is not actionable sits directly on the black background</li><li>Only the action button at the bottom sits in a container and looks tappable</li><li>Use a red text label on the button to indicate a destructive action</li><li>Add a confirmation alert if the information being deleted is not easily retrievable</li></ul><h3>Toolbar buttons</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10171/toolbar.png"/><ul><li>These buttons are hidden by default, and show up only after the user swipe down</li><li>Use tool bar buttons only for actions that are essential to the functioning of your app but may not be the primary action for the view</li><li>Use toolbar buttons only on scrollable views</li></ul><pre><code>.<span class="call">toolbar</span> {
    <span class="type">Button</span>(action: newMessage) {
        <span class="type">Label</span>(<span class="string">"New Message"</span>, 
              systemImage: <span class="string">"square.and.pencil"</span>)
    }
}
</code></pre><h3>Hierarchycal Navigation</h3><table><tbody><tr><td><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10171/level-0.png"/></td><td><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10171/level-1.png"/></td></tr></tbody></table><ul><li>In a hierarchical navigation model, the app should remember the destination the user chose the next time they open the app.</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10093</guid><title>Build for the iPadOS pointer</title><description>Help people who use iPad with a Magic Keyboard, mouse, trackpad or other input device get the most out of your app. We’ll show you how to add customizations to the pointer on iPad using pointer interaction APIs, create pointer effects for your buttons and custom views, and change the pointer shape in specific areas of your app to highlight them.

To learn more about pointer interactions on iPad and to get the most out of this session, we recommend also watching “Design for the iPadOS pointer” and “Handle trackpad and mouse input.”</description><link>https://www.wwdcnotes.com/notes/wwdc20/10093</link><pubDate>Tue, 4 Aug 2020 21:21:21 +0700</pubDate><content:encoded><![CDATA[<h2>Updating your app for pointer support</h2><h3>Controls</h3><ul><li>many system components have pointer support built-in:<ul><li>controls like <code>UIBarButtonItem</code>, <code>UISegmentedControl</code>, <code>UIMenuController</code>, and more.</li><li>Scroll views respond to scrolling with two fingers and mouse wheels</li><li>Scroll views respond to pinching to zoom on the trackpad.</li><li>Collection and TableView support two finger panning for swipe actions.</li><li><code>UITextView</code> and other components that use <code>UITextInteraction</code> support a suite quick text selection and editing gestures, behaving similarly to the Mac.</li><li><code>UIDragInteraction</code> allows you to drag quickly via a click and drag instead of requiring a long press as it does with touch.</li><li><code>UIContextMenuInteraction</code> lets you invoke its menu in a new compact appearance via a secondary click.</li></ul></li></ul><ul><li><code>UIBarButtonItem</code> have pointer support enabled by default</li><li><code>UIButton</code> offer API that allow you to enable and customize their effects</li></ul><h3>Interactions</h3><p><a href="https://developer.apple.com/documentation/uikit/uipointerinteraction"><code>UIPointerInteraction</code></a> lets your custom UI react to and interact with the pointer: you can choose from one of a collection of system-vended effects to apply to your views, or you can change the pointer's shape within an area of your app.</p><h3>Gestures</h3><p><a href="https://developer.apple.com/documentation/uikit/uihovergesturerecognizer"><code>UIHoverGestureRecognizer</code></a> lets you customize to the pointer's motion directly. For more information, see session <a href="https://developer.apple.com/videos/play/wwdc2020/10094"><code>Handle trackpad and mouse input</code></a></p><h3>UIButton</h3><ul><li>set <code>isPointerInteractionEnabled</code> property to true to enable pointer interactions</li><li>set <code>pointerStyleProvider</code> to customize the effect</li></ul><pre><code><span class="keyword">typealias</span> PointerStyleProvider = (<span class="type">UIButton</span>, <span class="type">UIPointerEffect</span>, <span class="type">UIPointerShape</span>) -&gt; <span class="type">UIPointerStyle</span>?
</code></pre><p>In this <code>PointerStyleProvider</code> closure, the system offers you a proposed effect and shape that have been determined based on the appearance, size, and contents of the button. Here, you can customize either of these or replace them entirely and construct a new style.</p><p><a href="https://developer.apple.com/documentation/uikit/uipointerstyle"><code>UIPointerStyle</code></a> fits in two categories:</p><ul><li><strong>Content Effect</strong>: causes the pointer to morph into a view in the app and apply some visual treatment to it. This is described via a <a href="https://developer.apple.com/documentation/uikit/uipointereffect"><code>UIPointerEffect</code></a>, which describes the visual treatment applied to the view, and <a href="https://developer.apple.com/documentation/uikit/uipointershape"><code>UIPointerShape</code></a> which describes the shape to which the pointer will change</li><li><strong>Shape customization</strong>: causes the pointer to morph into the provided shape and is constrained along the specified axes within the current region. This is described via a <a href="https://developer.apple.com/documentation/uikit/uipointershape"><code>UIPointerShape</code></a> and a <a href="https://developer.apple.com/documentation/uikit/uiaxis"><code>UIAxis</code></a> mask</li></ul><h2>Demo</h2><p>Apple has provided a demo with all the pointer effects <a href="https://developer.apple.com/documentation/uikit/pointer_interactions/enhancing_your_ipad_app_with_pointer_interactions">here</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10640</guid><title>Design for the iPadOS pointer</title><description>Bring the power of the pointer to your iPad app: We’ll show you how Apple's design team approached designing the iPadOS pointer to complement touch input, and how you can customize and refine pointer interactions in your app to make workflows more efficient and gratifying. Discover how the pointer’s adaptive precision enables people to quickly and confidently target interface elements regardless of their size. We’ll also share some best practices on adapting the pointer to complement your app's unique needs including how to select pointer effects and design pointer shapes, integrate trackpad gestures, and keyboard modifiers.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10640</link><pubDate>Tue, 4 Aug 2020 21:17:54 +0700</pubDate><content:encoded><![CDATA[<h2>Adaptive Precision</h2><p>While on the mac the pointer gives you increased precision compared to touch. On iPad it's helpful to actually reduce the precision of the pointer to match the user interface.<br><br>This concept of dynamically adjusting the precision of the pointer to match the precision of the interface is called, <strong>Adaptive Precision</strong>.</p><p>A traditional pointer is drawn <em>over</em> the entire interface often obscuring the control you're interacting with, the iPad pointer lets you have the controls you're interacting with completely unobstructed: when the pointer snaps to a control, the pointer shifts from being in front of the app to being behind the buttons icon or label.</p><h2>Two pointers</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10640/pointers.gif"/><p>When you move the pointer around on screen, you're actually moving two pointers:</p><ul><li>the one you see on screen</li><li>an invisible one, that tracks the true position of the pointer.</li></ul><p>The latter is called <strong>Model pointer</strong>: it is used to decide which item the pointer is hovering over and it takes advantage of the generous padding that buttons have on iPadOS to make them easier to tap with the finger.</p><p>Once you lift your finger the pointer centers itself on the current active control, this is called <strong>Recentering</strong>.</p><p>When swiping, the iPad pointer can figure out which control you were aiming for and move there automatically: this is called <strong>Magnetism</strong>. Magnetism scans the interface to find the control you most likely want to target.</p><h2>Pointer Effects</h2><p>When the iPadOS pointer hovers over an interactive element, both the appearance and the behavior of the pointer and the interactive element become one, bringing focus to the item that is being targeted, this is called <strong>Pointer Effect</strong>.</p><p>iPadOS provides three pointer effects, based on context and content type, and you can create your own as well.</p><h3>Highlight Effect</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10640/highlight.gif"/><ul><li>Used for small controls that don't have a background</li><li>Default effect for bar buttons and tab bars</li></ul><h3>Lift Effect</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10640/lift.gif"/><ul><li>Used for medium sized elements that already have a background</li><li>Default effects for app icons and control center modules</li></ul><h3>Hover Effect</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10640/hover.gif"/><ul><li>Used for larger objects that would behave poorly if the pointer were to morph into their shape</li><li>Customizable: it can be just a scale of the object and a shadow to lift it, a color tint added to the object, or any combination of the three</li></ul><h3>Tips</h3><ul><li>When to use which effect: start by selecting the <a href="https://developer.apple.com/documentation/uikit/uipointereffect/automatic"><code>.automatic</code></a> effect: the system uses a combination of rules like the object type and location, and the object size and shape to decide the best effect for it.</li><li>Make group of elements pointer effects consistent</li><li>Use an height of 37 points for toolbar items</li><li>Avoid the highlight effect around rectangular objects</li><li>define a good hit region for each element: not too small nor too big. A general rules is having a padding of about 12 points around elements that include a bezel, 24 points around elements without a bazel: <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10640/padding.png"/></li></ul><ul><li>don't leave hit regions gaps between elements in the same group</li><li>make sure elements that use the lift effect don't have the shadow clipped</li><li>when using the Lift effect, provide the correct size and corner radius</li><li>when using the Hover effect, you can customize the effect scale, shadow, and/or tint color</li></ul><h2>Designing custom pointers</h2><ul><li>make sure your shapes are simple and easy to understand: the shape of the pointer informs people the action they can take in the current context</li><li>use solid shapes as much as possible</li><li>if you can't use solid shapes, use heavy strokes (4.5 points)</li><li>make your shape visual weight similar to the default pointer, which is 19 points in diameter.</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10621</guid><title>Support performance-intensive apps and games</title><description>iOS and iPadOS provide powerful capabilities to help developers deliver breakthrough apps and games across all device generations. In certain instances, however, demanding apps with exceptional performance requirements may only be able to provide the best experience on devices with an A12 Bionic chip or higher. 

With Xcode 12, developers can now enable a setting for performance-intensive apps and games to indicate this requirement. We’ll walk you through the narrow circumstances for when to apply this setting and the app distribution trade-offs that must be carefully considered. 

Before selecting this approach, you should have deep experience in optimizing your apps. Watch “Delivering Optimized Metal Apps and Games” for specific insights into the tools and best practices you can use to make your product work well on all supported devices.

For more on creating graphics-intensive experiences for your app or game using Metal, check out “Harness Apple GPUs with Metal”.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10621</link><pubDate>Fri, 31 Jul 2020 14:52:47 +0700</pubDate><content:encoded><![CDATA[<h2>Required device capabilities</h2><ul><li>If your app requires a specific hardware capability (e.g. ARKit) then you should declare so via the <a href="https://developer.apple.com/support/required-device-capabilities/"><code>UIRequiredDeviceCapabilities</code></a> property list key.</li><li>This prevent users from downloading apps that their device doesn't support.</li><li>You’re allowed only to maintain or relax capability requirements. Submitting an update with added requirements is not allowed.</li><li>For a complete list of capabilities and devices compatability, see <a href="https://developer.apple.com/support/required-device-capabilities/">here</a>.</li></ul><h3>iphone-ipad-minimum-performance-a12</h3><ul><li>For intensive apps there's a new <code>iphone-ipad-minimum-performance-a12</code> capability key that will allow apps to be downloaded only in devices with A12 or later hardware.</li><li>This key has been created to support intensive and desktop-quality apps.</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10105</guid><title>Build for iPad</title><description>Learn how to improve iPad apps to leverage the increased screen size and additional features of iPadOS, and help people accomplish more with their devices. Discover how you can build detailed multi-column layouts and integrate lists into your app with little adjustment to your existing code. We’ll also explore reducing modality within your views to make it easier to navigate your interface with fewer taps and touches.

To get the most out of this session, you should have a general understanding of iPad app layouts and UIKit. For more information, watch “Making Apps Adaptive, Part 1.” And while not necessary, familiarity with UICollectionView may also be helpful. Watch “Advances in Collection View Layout” for an overview. 

Want to learn more about list creation for your apps? Watch “Lists in UICollectionView”.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10105</link><pubDate>Wed, 29 Jul 2020 21:05:43 +0700</pubDate><content:encoded><![CDATA[<h2>Multi-column Split View</h2><p>The core of a multi-column app is <a href="https://developer.apple.com/documentation/uikit/uisplitviewcontroller"><code>UISplitViewController</code></a>.</p><h3>Two-Column layout</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10105/double.png"/><p>Define your split view controller:</p><pre><code><span class="keyword">let</span> splitViewController = <span class="type">UISplitViewController</span>(style: .<span class="dotAccess">doubleColumn</span>)
</code></pre><p>Set the view for each column:</p><pre><code>splitViewController.<span class="call">setViewController</span>(sidebarViewController, for: .<span class="dotAccess">primary</span>)
splitViewController.<span class="call">setViewController</span>(myHomeViewController, for: .<span class="dotAccess">secondary</span>)
</code></pre><h3>Three-column layout</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10105/triple.png"/><p>Define your split view controller:</p><pre><code><span class="keyword">let</span> splitViewController = <span class="type">UISplitViewController</span>(style: .<span class="dotAccess">tripleColumn</span>)
</code></pre><h3>Behind the scenes</h3><p>Apple wants you to use this so your app adapts to both iPad and iPhone:</p><ul><li><code>UISplitViewController</code> handles the columns for you by showing the right view controllers based on size classes.</li><li>we can specify a different view to be used when in compact mode via the <code>UISplitViewController</code>'s <a href="https://developer.apple.com/documentation/uikit/uisplitviewcontroller/3580911-setviewcontroller"><code>setViewController(_:for:)</code></a> method and passing <code>.compact</code> as the column layout. This view can have a completely different navigation (for example a tab bar).</li></ul><h3>Display Modes</h3><ul><li>The different ways <code>UISplitViewController</code> can lay out your columns are called <a href="https://developer.apple.com/documentation/uikit/uisplitviewcontroller/displaymode"><code>DisplayModes</code></a>: they differ depending on how much space we have and how big they are.</li></ul><ul><li>To move between these display modes, <code>UISplitViewController</code> automatically creates appropriate buttons and makes them appear in the right places.</li></ul><ul><li>Some display modes can be shown via gestures, if needed, disable them via the <a href="https://developer.apple.com/documentation/uikit/uisplitviewcontroller/1623171-presentswithgesture"><code>presentsWithGesture</code></a> property.</li></ul><ul><li>Use <a href="https://developer.apple.com/documentation/uikit/uisplitviewcontroller/3580913-showssecondaryonlybutton"><code>showsSecondaryOnlyButton</code></a> to enable an additional button which hides all but the secondary column.</li></ul><h4>Double Column Display Modes</h4><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10105/doubleDisplay.png"/><h4>Triple Column Display Modes</h4><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10105/tripleDisplay.png"/><h4>Setting the preferred split behavior</h4><p>Set your app preferred split behavior via <a href="https://developer.apple.com/documentation/uikit/uisplitviewcontroller/3580909-preferredsplitbehavior"><code>preferredSplitBehavior</code></a>:</p><p><code>.tile</code>:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10105/tile.png"/><p><code>.displace</code>:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10105/displace.png"/><p><code>.overlay</code>:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10105/overlay.png"/><h3>Hide Columns</h3><p>At any time we can hide any of the columns:</p><pre><code>splitViewController.<span class="call">hideColumn</span>(.<span class="dotAccess">primary</span>)

splitViewController.<span class="call">showColumn</span>(.<span class="dotAccess">supplementary</span>)
</code></pre><h3>Navigation Controllers</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10105/navigation.png"/><p>Each <code>UISplitViewController</code> column has a navigation controller that's automatically created, and each navigation controller has a navigation bar at the top and an optional toolbar at the bottom.</p><h2>Lists</h2><p>Setup your primary/secondary views by building a list via <code>UICollectionView</code>:</p><pre><code><span class="keyword">let</span> configuration = <span class="type">UICollectionLayoutListConfiguration</span>(appearance: .<span class="dotAccess">sidebar</span>)
<span class="keyword">let</span> layout = <span class="type">UICollectionViewCompositionalLayout</span>.<span class="call">list</span>(using: configuration)
<span class="keyword">let</span> collectionView = <span class="type">UICollectionView</span>(frame: frame, collectionViewLayout: layout)
</code></pre><p>Then register your cells with the new <a href="https://developer.apple.com/documentation/uikit/uicollectionview/cellregistration"><code>CellRegistration</code></a> API:</p><pre><code><span class="keyword">let</span> cellRegistration = <span class="type">UICollectionView</span>.<span class="type">CellRegistration</span>&lt;<span class="type">UICollectionViewListCell</span>, <span class="type">MyItem</span>&gt; { cell, indexPath, item <span class="keyword">in

    var</span> content = cell.<span class="call">defaultContentConfiguration</span>()

    content.<span class="property">text</span> = item.<span class="property">title</span>
    content.<span class="property">image</span> = item.<span class="property">image</span>

    cell.<span class="property">contentConfiguration</span> = content
}
</code></pre><p>And create a diffable data source:</p><pre><code><span class="keyword">let</span> dataSource = <span class="type">UICollectionViewDiffableDataSource</span>&lt;<span class="type">Section</span>, <span class="type">MyItem</span>&gt;(
        collectionView: collectionView
    ) { collectionView, indexPath, item <span class="keyword">in</span>
   collectionView.<span class="call">dequeueConfiguredReusableCell</span>(using: cellRegistration, 
                                                for: indexPath,
                                                item: item)
}
</code></pre><p>In the supplementary column do the same but with the plain style:</p><pre><code><span class="keyword">let</span> configuration = <span class="type">UICollectionLayoutListConfiguration</span>(appearance: .<span class="dotAccess">sidebarPlain</span>)
<span class="keyword">let</span> layout = <span class="type">UICollectionViewCompositionalLayout</span>.<span class="call">list</span>(using: configuration)
<span class="keyword">let</span> collectionView = <span class="type">UICollectionView</span>(frame: frame, collectionViewLayout: layout)
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10656</guid><title>Beyond counting steps</title><description>Move beyond step counting in your app and give people a much richer understanding of their mobility. We’ll detail how you can take advantage of mobility metrics in iOS and watchOS to measure movement in more distinct and actionable ways. Learn about the latest HealthKit APIs for accessing mobility data, strategies for meaningful data aggregation, and how to interpret results for people using your app.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10656</link><pubDate>Tue, 21 Jul 2020 17:37:03 +0700</pubDate><content:encoded><![CDATA[<p>Apple is introducing a category of metrics to HealthKit that captures the complex and important elements of human movement, all via iPhone (8 and later) and Apple Watch (4 and later).</p><h2>New Mobility metrics on iPhone</h2><ul><li>Walking speed (<a href="https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3131040-walkingspeed"><code>.walkingspeed</code></a>): Rate of travel over flat ground</li><li>Step length (<a href="https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552088-walkingsteplength"><code>.walkingStepLength</code></a>): Distance between feet when walking</li><li>Double support time (<a href="https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552087-walkingdoublesupportpercentage"><code>.walkingDoubleSupportPercentage</code></a>): Percentage of time with two feet on the ground</li><li>Walking asymmetry (<a href="https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552086-walkingasymmetrypercentage"><code>.walkingAsymmetryPercentage</code></a>): Percentage of walking when left and tight step time are different</li></ul><h2>New Mobility metrics on Apple Watch</h2><ul><li>Stair speed up (<a href="https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552084-stairascentspeed"><code>.stairAscentSpeed</code></a>): Rate of vertical ascent on stairs</li><li>Stair speed down (<a href="https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552085-stairdescentspeed"><code>.stairDescentSpeed</code></a>): Rate of vertical descent on stairs</li><li>Six-minute walk (<a href="https://developer.apple.com/documentation/healthkit/hkquantitytypeidentifier/3552083-sixminutewalktestdistance"><code>.sixMinuteWalkTestDistance</code></a>): Weekly estimate of distance that could be walked in six minutes on flat ground</li></ul><h2>How to read HealthKit data</h2><p>Request authorization:</p><pre><code><span class="comment">/// Request authorization from the user</span> 
<span class="keyword">self</span>.<span class="property">healthStore</span> = <span class="type">HKHealthStore</span>() 

<span class="keyword">let</span> typesToRead: <span class="type">Set</span> = [ 
  <span class="type">HKObjectType</span>.<span class="call">quantityType</span>(forIdentifier:-walkingSpeed)!
]

<span class="keyword">self</span>.<span class="property">healthStore</span>.<span class="call">requestAuthorization</span>(toShare: <span class="keyword">nil</span>, read: typesToRead) { success, error <span class="keyword">in 
	if</span> !success, <span class="keyword">let</span> error = error { 
    <span class="call">print</span>(<span class="string">"Authorization failed:</span> \(error.<span class="property">localizedDescription</span>)<span class="string">"</span>) 
  }
}
</code></pre><p>Fetch the data of interest in the relevant time range:</p><pre><code><span class="comment">// Select a time range</span> 
<span class="keyword">let</span> start = <span class="type">Calendar</span>. <span class="property">current</span>.<span class="call">date</span>(byAdding: .<span class="dotAccess">day</span>, value: -<span class="number">30</span>, to: dateOfInjury)
<span class="keyword">let</span> end = <span class="type">Calendar</span>.<span class="property">current</span>.<span class="call">date</span>(byAdding: .<span class="dotAccess">day</span>, value: <span class="number">60</span>, to: dateOfInjury)

<span class="keyword">let</span> datePredicate = <span class="type">HKQuery</span>.<span class="call">predicateForSamples</span>(withStart: start, end: end, options: []) 

<span class="comment">// Query walking speeds</span> 
<span class="keyword">let</span> walkSpeedType = <span class="type">HKSampleType</span>.<span class="call">quantityType</span>(forIdentifier: .<span class="dotAccess">walkingSpeed</span>)!
<span class="keyword">let</span> sortByStartDate = <span class="type">NSSortDescriptor</span>(key: <span class="type">HKSampleSortIdentifierStartDate</span>, ascending: <span class="keyword">true</span>) 

<span class="keyword">let</span> query = <span class="type">HKSampleQuery</span>(
	sampleType: walkSpeedType, 
	predicate: datePredicate, 
	limit: <span class="type">HKObjectQueryNoLimit</span>, 
  sortDescriptors: [sortByStartDate]) { <span class="keyword">_</span>, samples, <span class="keyword">_ in</span>
  <span class="call">visualizeWalkSpeeds</span>(samples)
}
<span class="keyword">self</span>.<span class="property">healthStore</span>.<span class="call">execute</span>(query) 
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10668</guid><title>Meet Nearby Interaction</title><description>The Nearby Interaction framework streams distance and direction between opted-in Apple devices containing the U1 chip. Discover how this powerful combination of hardware and software allow you to create intuitive spatial interactions based on the relative position of two or more devices. We'll walk you through this session-based API and show you how to deliver entirely new interactive experiences — all with privacy in mind.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10668</link><pubDate>Mon, 20 Jul 2020 17:01:38 +0700</pubDate><content:encoded><![CDATA[<h2>Introduction</h2><p>iPhone's 11 (and later) U1 chip give iPhones special awareness.</p><p>Apple uses it for airdrop:<br>point your device to the user you want to share to and that user will automatically be highlighted on top of the screen:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10668/airdrop.png"/><h3>NearbyInteractions</h3><p><a href="https://developer.apple.com/documentation/nearbyinteraction"><code>NearbyInteractions</code></a> is a new framework that behaves as an interface to spatial awareness in iOS.</p><h3>User Control &amp; Transparency</h3><p>To use this framework, the user must allow your app to use <code>NearbyInteractions</code>, if granted, your app will be able to use <code>NearbyInteractions</code> until it is quit.</p><p>To use this framework you will need at least two devices, therefore this permission must be granted by both users.</p><p>Once granted, the devices can start to understand how far apart they are and in which relative direction:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10668/twoDevices.png"/><h2>Special Awareness in iOS</h2><p>Nearby Interaction provides your app two main types of inputs:</p><ul><li>a measurement of distance between devices</li><li>a measurement of relative direction from one to the other.</li></ul><p>When your app is running a Nearby Interaction session, it is able to get a continuous stream of updates containing distance and direction information.</p><p>These updates are bidirectional: both sides/devices of the session are learning about each other's relative position simultaneously.</p><p>Each device can run several sessions (aka bidirectional updates with different devices) at the same time: each session with one other peer.</p><h3>Discovery Tokens and Peer Discovery</h3><ul><li>When two devices would like to start a Nearby Interaction session, they need to know how to discover each other, this is called <strong>Peer Discovery</strong>.</li><li>Peer Discovery is accomplished in a privacy-preserving manner via a <strong>Discovery Token</strong>, <a href="https://developer.apple.com/documentation/nearbyinteraction/nidiscoverytoken"><code>NIDiscoveryToken</code></a>.</li><li><code>NIDiscoveryToken</code> is a randomly-generated identifier for a given device in a particular Nearby Interaction session. Its lifetime is equal to the session lifetime.</li></ul><p>The devices that want to start a session need to know each other discovery token, a way to exchange this token is via the <code>MultipeerActivity.framework</code>:</p><pre><code><span class="comment">/// Per-session Discovery Token</span> 

<span class="keyword">@available</span> (iOS <span class="number">14.0</span>, *)
<span class="keyword">open class</span> NIDiscoveryToken: <span class="type">NS0bject</span>, <span class="type">NSCopying</span>, <span class="type">NSSecureCoding</span> {
}

<span class="comment">// Encode discovery token</span>
<span class="keyword">if let</span> encodedData = <span class="keyword">try</span>? <span class="type">NSKeyedArchiver</span>.<span class="call">archivedData</span>(
  withRootObject: myDiscoveryToken,
  requiringSecureCoding: <span class="keyword">true</span>
) { 
  <span class="comment">// Share encoded token using your app's networking layer.
  // EXAMPLE: using MultipeerConnectivity.framework</span>
  mpcSession.<span class="call">send</span>(encodedData, toPeers: [myPeer], with: .<span class="dotAccess">reliable</span>)
}
</code></pre><h2>Getting Started</h2><blockquote><p>For more, read the <a href="https://developer.apple.com/documentation/nearbyinteraction/initiating_and_maintaining_a_session">official documentation</a>.</p></blockquote><ul><li>All Nearby Interactions are encapsulated in <a href="https://developer.apple.com/documentation/nearbyinteraction/nisession"><code>NISession</code></a>s.</li><li>You provide your session a <a href="https://developer.apple.com/documentation/nearbyinteraction/ninearbypeerconfiguration"><code>NINearbyPeerConfiguration</code></a> object you would like it to run with.</li><li>We get our own <code>NIDiscoveryToken</code> via our <code>NISession</code> object <a href="https://developer.apple.com/documentation/nearbyinteraction/nisession/3564775-discoverytoken"><code>discoveryObject</code></a> property</li></ul><p>This is an example of a typical class that manages the Nearby Interaction session:</p><pre><code><span class="comment">// A session instance. Store in whichever data structure makes the most sense for your app.</span>
<span class="keyword">var</span> niSession: <span class="type">NISession</span>?

<span class="comment">// Instantiate a new session object and set the session's delegate.</span>
<span class="keyword">func</span> prepareMySession() {
  <span class="comment">// Verify hardware support.</span>
  <span class="keyword">guard</span> <span class="type">NISession</span>.<span class="property">isSupported</span> <span class="keyword">else</span> {
    <span class="call">print</span>(<span class="string">"Nearby Interaction is not available on this device."</span>)
    <span class="keyword">return</span>
  }
  
  <span class="comment">// Create a new session for each peer, this creates the device's discovery token as well.</span>
  niSession = <span class="type">NISession</span>()

  <span class="comment">// Set the session’s delegate.</span>
  niSession?.<span class="property">delegate</span> = <span class="keyword">self</span> <span class="comment">// This class of 'self' needs to conform to NISessionDelegate.</span>
}

<span class="comment">// Share the encoded discovery token to the peer you intend to interact with.</span>
<span class="keyword">func</span> sendDiscoveryTokenToMyPeer(myPeer: <span class="type">Any</span> <span class="comment">/* change to whichever type represents peers in your app */</span>) {                                
	<span class="keyword">guard let</span> myToken = niSession?.<span class="property">discoveryToken</span> <span class="keyword">else</span> {
		<span class="comment">// The session object is not initialized or has been invalidated.</span>
		<span class="keyword">return</span>
	}

	<span class="keyword">if let</span> encodedToken = <span class="keyword">try</span>? <span class="type">NSKeyedArchiver</span>.<span class="call">archivedData</span>(withRootObject: myToken, requiringSecureCoding: <span class="keyword">true</span>) {
		&lt;# share token using your app's networking layer #&gt;
	}
}

<span class="comment">// Once you receive a token from the peer, create a configuration and run the session.
// This functions shows how to decode token data that was previously encoded using NSKeyedArchiver.</span>
<span class="keyword">func</span> runMySession(peerTokenData: <span class="type">Data</span>) {
  <span class="keyword">guard let</span> peerDiscoveryToken = <span class="keyword">try</span>? <span class="type">NSKeyedUnarchiver</span>.<span class="call">unarchivedObject</span>(ofClass: <span class="type">NIDiscoveryToken</span>.<span class="keyword">self</span>, from: peerTokenData) <span class="keyword">else</span> {
    <span class="call">print</span>(<span class="string">"Unexpectedly failed to decode discovery token."</span>)
    <span class="keyword">return</span>
  }

  <span class="comment">// Create a session configuration using the discovery token received from the peer.</span>
  <span class="keyword">let</span> config = <span class="type">NINearbyPeerConfiguration</span>(peerToken: peerDiscoveryToken)

  <span class="comment">// Run the session with the configuration.</span>
  niSession?.<span class="call">run</span>(config)
}
</code></pre><h2>NISessionDelegate</h2><p>The <code>NISession</code> session <a href="https://developer.apple.com/documentation/nearbyinteraction/nisession/3564773-delegate"><code>delegate</code></a> receives all updates regarding the session status:</p><pre><code><span class="keyword">public protocol</span> NISessionDelegate : <span class="type">NSObjectProtocol</span> {
  
  <span class="comment">// Monitoring Peers</span>
  optional <span class="keyword">func</span> session(<span class="keyword">_</span> session: <span class="type">NISession</span>, didUpdate nearbyObjects: [<span class="type">NINearbyObject</span>])
  optional <span class="keyword">func</span> session(<span class="keyword">_</span> session: <span class="type">NISession</span>, didRemove nearbyObjects: [<span class="type">NINearbyObject</span>], reason: <span class="type">NINearbyObject</span>.<span class="type">RemovalReason</span>)
  
  <span class="comment">// Managing Interruption</span>
  optional <span class="keyword">func</span> sessionWasSuspended(<span class="keyword">_</span> session: <span class="type">NISession</span>)
  optional <span class="keyword">func</span> sessionSuspensionEnded(<span class="keyword">_</span> session: <span class="type">NISession</span>)
  optional <span class="keyword">func</span> session(<span class="keyword">_</span> session: <span class="type">NISession</span>, didInvalidateWith error: <span class="type">Error</span>)
}
</code></pre><ul><li><a href="https://developer.apple.com/documentation/nearbyinteraction/nisessiondelegate/3601171-session"><code>session(_:didUpdate:)</code></a> receives updates about nearby devices.</li><li><a href="https://developer.apple.com/documentation/nearbyinteraction/nisessiondelegate/3601170-session"><code>session(_:didRemove:reason:)</code></a> will update you when the session is no longer interacting with a nearby object, it also comes with a <a href="https://developer.apple.com/documentation/nearbyinteraction/ninearbyobject/removalreason">reason</a> (currently either <code>.timeout</code> or <code>.peerEnded</code>). ⚠️ This notification is delivered on a best effort basis and may not always be received.</li><li>the last three methods are around managing the session state:<ul><li><a href="https://developer.apple.com/documentation/nearbyinteraction/nisessiondelegate/3601173-sessionwassuspended"><code>sessionWasSuspended(_:)</code></a> is called for example when the app goes in the backdround</li><li><a href="https://developer.apple.com/documentation/nearbyinteraction/nisessiondelegate/3601172-sessionsuspensionended"><code>sessionSuspensionEnded(_:)</code></a> lets us know that we can resume the session (you must wait for this function to be called before trying so). Note that this lets us know that we can resume, it's up to us to decide if we want to do so.</li><li><a href="https://developer.apple.com/documentation/nearbyinteraction/nisessiondelegate/3571263-session"><code>session(_:, didInvalidateWith:)</code></a> is called when the session has been invalidated. Once a session is invalidated we need to restart a new session from scratch (as the current Discovery Token has been invalidated as well)</li></ul></li></ul><h3>NINearbyObject</h3><p><a href="https://developer.apple.com/documentation/nearbyinteraction/ninearbyobject"><code>NINearbyObject</code></a> contains the update from a session, it provides three properties:</p><ul><li><code>discoveryToken</code> to identify the session</li><li><code>distance</code> in meters (<code>Float</code>), indicating how far apart the devices are</li><li><code>direction</code> as a relative <code>simd_float3</code> vector, pointing at the other device from our device poit of view.</li></ul><p><code>distance</code> and <code>direction</code> are nullable: this happens when the confidence of those values are very low and the devices are out of the U1 chip field of view</p><h2>Best Practices</h2><ul><li>Always verify device support, you can do so via <a href="https://developer.apple.com/documentation/nearbyinteraction/nisession/3601169-issupported"><code>NISession.isSupported</code></a>.</li><li>Get familiar with the U1 chip field of view (approximately the same as the Ultra Wide camera's field of view on the iPhone 11.) <img src="https://www.wwdcnotes.com/images/notes/wwdc20/10668/fov.png"/></li></ul><ul><li>For optimal performance, devices should be held in the portrait orientation.</li><li>If there is any kind of obstacles between the two devices, this will result into limited measurement availability.</li><li>Test your app in the simulator</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10676</guid><title>Build trust through better privacy</title><description>Privacy is a more important issue than ever. Learn about Apple’s privacy pillars, our approach to privacy, and how to adopt the latest features on our platforms that can help you earn customer trust, create more personal experiences, and improve engagement. Explore the transparency iOS provides when your app is recording using the microphone or camera, control over location with approximate location, tracking transparency and permissions, and much more.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10676</link><pubDate>Sun, 19 Jul 2020 20:08:45 +0700</pubDate><content:encoded><![CDATA[<h2>Privacy pillars</h2><ul><li>On-device processing: no external server involved</li><li>Data minimization: request only user data that you actually need</li><li>Security protection: enforce the privacy protections on Apple's platform</li><li>Transparency and Control: provide the user understanding and control over their data.</li></ul><h2>On-device processing</h2><p>Here are plenty of Apple Examples:</p><ul><li>All continuous Machine Learning models improvements are done on device:<ul><li>QuickType Keyboard</li><li>QuickType Quik Reply</li><li>Hey Siri Vocal Classifier</li><li>Photo Sharing</li><li>DIctation Language Models</li><li>HomeKit Security Video Object Detection</li><li>On-device dictation</li><li>HomeKit face recognition (opt-in only)</li><li>Fraud Prevention</li><li>Sleep Mode</li><li>Mobility Metrics</li><li>Sound Detection</li><li>Siri suggestions</li><li>Translate App</li><li>Approximate Location</li><li>Tips</li><li>Smart Widgets</li><li>Spatial Audio</li><li>Handwashing</li><li>Audio Exposure</li><li>Smart Automations</li></ul></li></ul><h2>Data minimization</h2><ul><li>Do not ask a user to share lots of personal information for features that will only take advantage of a little.</li></ul><ul><li>Trust is built over time, and starting out by showing respect for users data by asking for access to as little as possible is a great first step.</li></ul><h3>Photos</h3><p>New from this year is the Limited Photos Library:<br>users can give apps access to only a limited selection of their photos instead of their entire photos library.</p><p>This is the new iOS 14 prompt when apps ask for photo library access:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/photoAccess.png"/><p>If possible use the new <code>PHPicker</code> instead of <code>UIImagePickerController</code>, this skips the photos library access entirely.</p><p>For more information, refer to the <a href="../10641"><code>Handle the Limited Photos Library in Your App</code></a> session.</p><h3>Location</h3><p>From iOS 14 users can choose to share only their <em>approximate</em> location with an app.</p><p>This is the new prompt:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/locationAccess.png"/><p>Your app can ask for approximate location by default by setting the <code>NSLocationDefaultAccuracyReduced</code> <code>info.plist</code> key to <code>true</code>.</p><p>Apps can ask for a temporary upgrade to precise location as well:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/temp.png"/><p>For more information, refer to the <a href="../10660"><code>What's New in Location</code></a> and <a href="../10162"><code>Design for Location Privacy</code></a> sessions.</p><h3>Contact</h3><p>From iOS 14 the system will suggest auto completion with contacts details as well.</p><p>The user just needs to start typing the name of a contact and the keyboard will suggest to complete all details automatically, no need for the app to have contact access.</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/contactsAutoFill.png"/><p>To get this behavior we need to set the <code>UITextField</code> <a href="https://developer.apple.com/documentation/uikit/uitextcontenttype"><code>textContentType</code></a> property.</p><p>For more information, refer to the <a href="https://developer.apple.com/videos/play/wwdc2020/10115"><code>Autofill Everywhere</code></a> session.</p><h2>Security</h2><h3>Server name tracking</h3><p>Until iOS 13 DNS queries were made in plain sight and anyone in between could see where/what the user is visiting.</p><p>From iOS 14 (and equivalent in other platforms) the system uses <a href="https://en.wikipedia.org/wiki/DNS_over_TLS ">Dot (DNS over TLS)</a> and <a href="https://en.wikipedia.org/wiki/DNS_over_HTTPS">DoH (DNS over HTTPS)</a>, which encrypt these queries, making sure that no 3rd parties can access to what the system is querying.</p><p>For more information, refer to the <a href="../10047"><code>Enable Encrypted DNS</code></a> session.</p><h2>Transparency</h2><h3>App Store transparency</h3><p>While App are already required to have a Privacy Policy within the app itself, from fall 2020, apps will be required to expose such policies in the App Store as well.</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/dataUsage.png"/><p>This is done via a a questionnaire to be filled in App Store Connect.</p><p>3rd party SDKs are considered part of your app, therefore you will need to declare what data they collect and how it is used.</p><h3>Intelligent Tracking Prevention (ITP) Enhancements</h3><p>While Apple platforms have been using ITP since iOS 11, this year we have even more transparency with as we can see what known trackers ITP is protecting you from right from Safari's toolbar:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/trackMe.png"/><h3>App Pasteboard</h3><p>From iOS 14 the user will see a pop up every time the pasteboard is accessed:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/pasteboard.png"/><h3>Recording Indicator</h3><p>When the camera or the microphone is turned on, a new indicator will be displayed in the status bar.</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/indicatorStatusBar.png"/><p>Control Center will additionally show which app is currently using the camera or microphone or which app has recently used it.</p><h3>Local network access</h3><p>Accessing the network lets an app see who else is in the same network, what devices are available etc:<br>with this information an app can profile the user and understand if the user is at home and more details.</p><p>From iOS 14, accessing the local network (e.g. via Bonjour or mDNS scan) will trigger a prompt to the user requesting permission:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/network.png"/><p>You should declare which Bojour services you need access to in the <code>info.plist</code> and the usual usage string.</p><p>For more information, refer to the <a href="https://developer.apple.com/videos/play/wwdc2020/10110"><code>Support Local Network Privacy in Your App</code></a> session.</p><h2>Private Wi-Fi address</h2><p>Since iOS 8 the phone uses MAC randomization when it is not connected to Wi-fi.</p><p>However when is is connected is uses the real MAC address, leaving trails of their connectivity.</p><p>With iOS 14 each wifi the device connect to will get a random MAC, which is generated daily as well. This is possible to turn off in the Wi-fi settings.</p><h3>Nearby Interaction framework</h3><p>The <a href="https://developer.apple.com/documentation/nearbyinteraction"><code>NearbyInteraction</code></a> is a new framework that takes advantage of the U1 chip,</p><p>To use this framework there's a prompt per session-based access.<br>The data will be available while the app continues to be used in the foreground.</p><p>For more information, refer to the <a href="https://developer.apple.com/videos/play/wwdc2020/10668"><code>Meet Nearby Interaction</code></a> session.</p><h3>App Clips</h3><p>Have new location and notification permissions which are automatically granted without asking for permission via popup, instead, they're displayed in the App Clip card, before the user opens the App Clip.</p><p>For more information, refer to the <a href="../10120"><code>Streamline your app clip</code></a> session.</p><h3>Safari Extensions</h3><p>New in Safari 14, users will be able to select which websites a Safari Web extension gets access to and customize it to their needs.</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/safariExt.png"/><p>For more information, refer to the <a href="../10120"><code>Introducing Safari Web Extensions</code></a> session.</p><h3>Updates on MacOS</h3><p>Many of the iOS access grants popup are brought over to macOS, for example:</p><ul><li>Bluetooth</li><li>Limited Photos Library</li><li>HomeKit</li><li>Media and Apple Music</li><li>CNCopyCurrentNetworkInfo</li></ul><h3>Tracking transparency and control</h3><p>The App Store policy require user permission for tracking across apps and websites ownder by other companies, this includes:</p><ul><li>Targeted advertising</li><li>Advertising measurement</li><li>Sharing with data brokers</li></ul><p>If the app does any of this, it is oblidged to show the following popup:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/trackTransp.png"/><p>Exceptions:</p><ul><li>Linking is done solely on the user device</li><li>Sharing with a data broker solely for fraud detection, prevention, or security</li></ul><p>To show the popup, you need to use the <a href="https://developer.apple.com/documentation/apptrackingtransparency">'AppTrackingTransparency'</a> framework. This also requires the <code>NSUserTrackingUsageDescription</code> <code>info.plist</code> key to be filled in.</p><p>In addition, users are able to choose to not be asked by any app to be tracked:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10676/dontTrack.png"/><h3>Campaign Tracking</h3><p><a href="https://developer.apple.com/documentation/storekit/skadnetwork"><code>SKAdNetwork</code></a> helps advertisers measure the success of ad campaigns while maintaining user privacy.</p><p>For more information, refer to the <a href="https://developer.apple.com/videos/play/wwdc2020/10661"><code>What's New with in App Purchases</code></a> session.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10098</guid><title>What's new in Universal Links</title><description>Universal Links help people access your content, whether or not they have your app installed. Get the details on the latest updates for the Universal Links API, including support for Apple Watch and SwiftUI. Learn how you can reduce the size and complexity of your app-site-association file with enhanced pattern matching features like wildcards, substitution variables, and Unicode support. And discover how cached associated domains data will improve the initial launch experience for people using your app.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10098</link><pubDate>Sun, 19 Jul 2020 10:31:51 +0700</pubDate><content:encoded><![CDATA[<h2>What are Universal Links?</h2><ul><li>http or https urls that represent your content both in your app and in your website</li><li>they allow users to open content directly in your app instead on in a browser</li><li>created by adding the <a href="https://developer.apple.com/documentation/safariservices/supporting_associated_domains">Associated Domains entitlement</a> in your app and the <a href="https://developer.apple.com/documentation/safariservices/supporting_associated_domains"><code>apple-app-site-association</code> JSON file</a> to your web server.<ul><li>the app entitlement mentions your web server's domain name, and the web server mentions your app's application identifier.</li></ul></li></ul><h2>New Platform Support: WatchOS</h2><p>In order to support this, add the Associated Domains entitlement to the WatchKit extension, not the containing WatchKit app.</p><p>Since with WatchOS we use WatchKit instead of UIKit, this is how you handle universal links:</p><pre><code><span class="comment">// Handling universal links
// WKExtensionDelegate</span> 
<span class="keyword">func</span> handle(<span class="keyword">_</span> userActivity: <span class="type">NSUserActivity</span>) -&gt; <span class="type">Void</span> 

<span class="comment">// Opening universal links in other applications</span>
<span class="keyword">let</span> url = <span class="comment">/* ... */</span> 
<span class="type">WKExtension</span>.<span class="call">shared</span>().<span class="call">openSystemURL</span>(url)
</code></pre><p>Unlike UIKit, WatchKit's <a href="https://developer.apple.com/documentation/watchkit/wkextension/1628224-opensystemurl"><code>openSystemURL(:)</code></a> does not have a callback indicating success or failure: instead, it either succeeds or a pop up error is displayed (shown below).</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10098/err.png"/><h2>SwiftUI</h2><p>Regardless of the platform, you can use handle Universal Links in SwiftUI as well:</p><pre><code><span class="comment">// Handling universal links</span> 
<span class="call">onOpenURL</span> { url <span class="keyword">in</span> <span class="comment">/* ... */</span> } 

<span class="comment">// Opening universal links in other applications</span>
<span class="keyword">@Environment</span> (\.<span class="property">openURL</span>) <span class="keyword">var</span> openURL 

<span class="keyword">let</span> url = <span class="comment">/* ... */</span>
<span class="call">openURL</span>(url)
</code></pre><h2>Pattern matching</h2><h3>How pattern matching works with Universal Links</h3><p>You can use the <code>*</code> and <code>?</code> in your pattern strings to specify wildcards:</p><ul><li><code>*</code> matches 0 or more characters and does so greedily: it will match as many characters as possible.</li><li><code>?</code> matches exactly one character.</li><li><code>?*</code> matches at least one character.</li></ul><h3>New Features</h3><h4>Case insensitive patterns</h4><p><em>Available since macOS 10.15.5 and iOS 13.5</em></p><pre><code><span class="string">"components"</span>: [{ <span class="string">"/"</span>: <span class="string">"/sourdough/?*"</span>, <span class="string">"caseSensitive"</span>: <span class="keyword">false</span> }] 
</code></pre><h4>Unicode patterns</h4><p>URLs are always ASCII: Unicode characters are turned into ASCII before being part of an URL.</p><p>The ASCII representation of Unicode characters completely loses the visual clue of what those characters are, making it completely unreadable.</p><p>Thanks to the new <code>percentEncoded</code> key, we can now define a Unicode pattern that is still readable, the conversion to ASCII will automatically be done later.</p><p>[asciiImage]</p><h4>Defaults</h4><p>Instead of defining Unicode and case insensitive components for each component, we can define defaults that will be applied to all:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10098/defaults.png"/><h4>Substitution variables</h4><p><em>Available since macOS 10.15.6 and iOS 13.5</em></p><ul><li>Named list of possible substrings to match against.</li><li>All characters beside <code>$</code> <code>(</code> <code>)</code> are allowed</li><li>Values can contain <code>?</code> and <code>*</code></li><li>case-sensitive by default but can be overridden with the <code>caseSensitive</code> key as seen above</li></ul><p>Predefined substitution variables:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10098/pred.png"/><p>Usage example:</p><pre><code>{
	<span class="string">"applinks"</span>: { 
    <span class="string">"substitutionVariables"</span>: {
    	<span class="string">"food"</span>: [ <span class="string">"burrito"</span>, <span class="string">"shawarma"</span>, <span class="string">"sushi"</span>, <span class="string">"curry-pad-thai"</span> ] 
  	}, 
    <span class="string">"details"</span>: [{
      <span class="string">"appIDs"</span>: [ <span class="string">"ABCDE12345.com.example.restaurant"</span> ],
      <span class="string">"components"</span>: [{ <span class="string">"/"</span>; <span class="string">"/$(lang)_$(region)/$(food)/"</span> }]
    }]
  }
}
</code></pre><p>We can still exclude individual combinations of variable values:</p><pre><code>{
	<span class="string">"applinks"</span>: { 
    <span class="string">"substitutionVariables"</span>: {
    	<span class="string">"food"</span>: [ <span class="string">"burrito"</span>, <span class="string">"shawarma"</span>, <span class="string">"sushi"</span>, <span class="string">"curry-pad-thai"</span> ] 
  	}, 
    <span class="string">"details"</span>: [{
      <span class="string">"appIDs"</span>: [ <span class="string">"ABCDE12345.com.example.restaurant"</span> ],
      <span class="string">"components"</span>: [
	      { <span class="string">"/"</span>: <span class="string">"/$(lang)_CA/$(food)/"</span>, <span class="string">"exclude"</span>: <span class="keyword">true</span> }, 
	      { <span class="string">"/"</span>; <span class="string">"/$(lang)_$(region)/$(food)/"</span> }
      ]
    }]
  }
}
</code></pre><h2>Apple CDN</h2><p>Starting with macOS 11 and iOS 14, apps no longer send requests for <code>apple-app-site-association</code> files directly to your web server. Instead, they send these requests to an Apple-managed content delivery network (CDN) dedicated to associated domains.</p><p>This way Apple's CDN can cache those files and make a better experience to the user when their device download your app.</p><h3>Benefits</h3><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10098/bene.png"/><h3>Alternate Modes</h3><p>In case your app/server are not intended to be used publicly, cannot be reached by Apple's CDN, etc, Apple offers alternate modes:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10098/altModes.png"/><p>In the app Associated Domains entitlement we will need to define a url for each mode we would like to operate in, the only requirement (for the non public url) is to have a query item with the name <code>mode</code> and a value specifying the alternate mode to use (<code>developer</code>, <code>managed</code>, or <code>developer+managed</code>)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10172</guid><title>Design great App Clips</title><description>App Clips offer fast, convenient ways for people to perform everyday tasks without needing to download or navigate your full app. We'll show you how to identify key elements from your iOS app that make up a great App Clip, design a smooth flow, work with notifications, and provide messaging guidance when encouraging people to download your full app.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10172</link><pubDate>Sun, 19 Jul 2020 09:19:03 +0700</pubDate><content:encoded><![CDATA[<h2>What are App Clips?</h2><ul><li>Lightweight versions of our main apps</li><li>They only offer <em>some</em> of our app functionality</li><li>They offer said functionality only when and where the user needs it</li><li>Fully native</li><li>Instant</li><li>Meant for people that have not downloaded our main app</li><li>Apps don't live on the device, they will be removed for the user by the system when they're deemed as no longer needed</li></ul><h2>Discovering App Clips</h2><h2>Found in physical places tags</h2><p>The new App Clip code comes with both an NFC tag, right in the middle, useful when the user can come up close to it, and a visual, QR-like, code on the outside around it, which can be useful if the user can't get too close, maybe because the code is on a billboard or similar.</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10172/clipCode.png"/><h3>Found also in built-in apps</h3><h4>Maps</h4><p>You can also attach app clips to locations. This way your app clip might show up in maps which lets people use the app clip before they actually get to the place itself.</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10172/mapsClip.png"/><p>If the app becomes frequently used in a specific location, it will even show up in Siri Suggestions:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10172/siriSuggestions.png"/><h4>Safari</h4><p>Like previously with apps, we can now show a smart app banner with the App Clip instead of the main app:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10172/safariClip.png"/><h4>Messages</h4><p>If you have a webpage with a smart app banner, and a user share a link to that page in messages, people can go directly from messages right into the app clip:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10172/messagesClip.png"/><h2>Designing for App Clips</h2><h3>Icon</h3><p>The main App Clip icon is generated automatically for you:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10172/iconDiff.png"/><p>If your app creates App Clips for other physical businesses, you can have custom icons for each clip:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10172/businessIcon.png"/><p>For more, refer to the <a href="../10118"><code>Create app clips for other businesses</code></a> session</p><h3>Concepts</h3><ul><li>App Clips are simple</li><li>App Clips they're built to let the user accomplish a task</li><li>App Clips are fast</li></ul><h3>Approach to App Clips</h3><ol><li><strong>Purpose</strong>: think what your App Clip is for, define what is the single task that the App Clip accomplishes</li><li><strong>Minimum Flow</strong>: think what is the minimum flow to accomplish that task, remove everything else</li><li><strong>Offer the full app</strong>: once the task is complete, you can offer the user to download the full app</li></ol><h2>Tips</h2><ul><li>Narrow down you full app into a single feature</li><li>avoid onboardings, introductions, etc</li><li>avoid using log-ins</li><li>avoid tabs or other kind of global navigation</li><li>no settings</li></ul><h2>Notifications</h2><ul><li>By default App Clips can send notifications up to 8 hours since their launch.</li><li>If the App Clip request for notifications permission, this time is extended up to one week.</li><li>Keep notifications on the specific App Clip task</li><li>Do not send unsolicited notifications</li></ul><p>For more information, see the <a href="https://developer.apple.com/design/human-interface-guidelines/app-clips/overview/">App Clips's Human Interface Guidelines</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10120</guid><title>Streamline your App Clip</title><description>App Clips are best when they provide an “in the moment” experience for people using them, like ordering your favorite refreshing beverage or paying for parking. We’ll share guidelines and best practices for building focused and consistent App Clips, show you how to streamline transaction experiences by taking advantage of technologies like App Clip notifications and location confirmation, and explore how you can help people move from your App Clip over to your full app. 

To get the most out of this session, we recommend first watching “Explore App Clips” and “Configure and link your App Clips.”</description><link>https://www.wwdcnotes.com/notes/wwdc20/10120</link><pubDate>Sat, 18 Jul 2020 21:19:54 +0700</pubDate><content:encoded><![CDATA[<h2>Best practices</h2><ul><li>interactions with clips need to be quick and focused</li><li>focus on essential tasks</li><li>when the App Clip launches, it should be usable right away (no splash screens/downloads before the user can start using the App Clip)</li><li>ask the user to sign-in after they completed their task</li><li>the main app should provide the same streamline experience of the App Clip (especially since the App Clip Experience will be launched in the app if the user has the app installed)</li><li>use Sign in with Apple or <a href="https://developer.apple.com/documentation/authenticationservices/aswebauthenticationsession"><code>ASWebAuthenticationSession</code></a> to authenticate the user</li><li>App Clips can request permissions for camera, microphone, and Bluetooth, these grants will be transferred to the main app if the user downloads it</li></ul><h2>Streamlining transactions</h2><h3>Location</h3><p>Instead of asking for location access, use specific URLs in nfc tags inside your business: this way you can skip this step as you know the user has scanned the tag at your business.</p><p>In order to make this more secure, beside the nfc tag, when your App Clip receives the payload from a physical nfc tag, you can ask the system if the payload has been acquired at a specific location: this is there's no user location access prompt and it's displayed in a callout in your App Clip Card:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10120/locationCard.png"/><p>To opt-in into this behavior, set the boolean flag to 1 into your <code>info.plist</code> for the key <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/nsappclip/nsappcliprequestlocationconfirmation"><code>NSAppClipRequestLocationConfirmation</code></a>.</p><p>After the App Clip launches, you can ask the system for confirmation via the following code:</p><pre><code><span class="keyword">import</span> AppClip

<span class="keyword">guard let</span> payload = userActivity.<span class="property">appClipActivationPayload</span> <span class="keyword">else</span> {
    <span class="keyword">return</span>
}

<span class="keyword">let</span> region = <span class="type">CLCircularRegion</span>(
  center: <span class="type">CLLocationCoordinate2D</span>(
    latitude: <span class="number">37.3298193</span>,        
    longitude: -<span class="number">122.0071671</span>
  ), 
  radius: <span class="number">100</span>, 
  identifier: <span class="string">"apple_park"</span>
)

payload.<span class="call">confirmAcquired</span>(in: region) { inRegion, error <span class="keyword">in</span>
  <span class="comment">// inRegion == true means that the verification succeeded.</span>
}
</code></pre><h3>Notifications</h3><p>Similar to location, App Clips can bypass the prompt for notification authorization by setting the <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/nsappclip/nsappcliprequestephemeralusernotification"><code>NSAppClipRequestEphemeralUserNotification</code></a> boolean key to 1.</p><p>This will be shown to the user in the App Clip Card as well:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10120/notifiCard.png"/><p>To verify if the user has granted this authorization:</p><pre><code><span class="keyword">import</span> UserNotifications

<span class="keyword">let</span> center = <span class="type">UNUserNotificationCenter</span>.<span class="call">current</span>()

center.<span class="call">getNotificationSettings</span> { (settings) <span class="keyword">in
  if</span> settings.<span class="property">authorizationStatus</span> == .<span class="dotAccess">ephemeral</span> {
    <span class="comment">// User has already granted ephemeral notification.</span>
  }
}
</code></pre><p>Ephemeral (local) notifications can be sent up to 8 hours after the App Clip launch.</p><h2>Transition users to your app</h2><p>After the user has downloaded the main app, you can transfer data from your App Clip to the main app.</p><p>The way to do so is via a secured App Group.</p><p>For example, this is how you use the App Group to store the Sign In With Apple credentials:</p><pre><code><span class="comment">// App Clip code
// Automatically log in with Sign in with Apple</span>
<span class="keyword">import</span> AuthenticationServices

<span class="type">SignInWithAppleButton</span>(.<span class="dotAccess">signUp</span>, onRequest: { <span class="keyword">_ in</span>
}, onCompletion: { result <span class="keyword">in
    switch</span> result {
    <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> authorization):
        <span class="keyword">guard let</span> secureAppGroupURL = 
            <span class="type">FileManager</span>.<span class="property">default</span>.<span class="call">containerURL</span>(forSecurityApplicationGroupIdentifier:
                <span class="string">"group.com.example.apple-samplecode.fruta"</span>)
            <span class="keyword">else</span> { <span class="keyword">return</span> };
        <span class="keyword">guard let</span> credential = authorization.<span class="property">credential</span> <span class="keyword">as</span>? <span class="type">ASAuthorizationAppleIDCredential</span> 
            <span class="keyword">else</span> { <span class="keyword">return</span> }
        <span class="call">save</span>(userID: credential.<span class="property">user</span>, in: secureAppGroupURL)
    <span class="keyword">case</span> .<span class="dotAccess">failure</span>(<span class="keyword">let</span> error):
        <span class="call">print</span>(error)
   }
})
</code></pre><p>In the main app this is how you fetch those credentials:</p><pre><code><span class="comment">// Main app code</span>

<span class="keyword">import</span> AuthenticationServices

<span class="keyword">let</span> provider = <span class="type">ASAuthorizationAppleIDProvider</span>()
<span class="keyword">guard let</span> secureAppGroupURL =
    <span class="type">FileManager</span>.<span class="property">default</span>.<span class="call">containerURL</span>(forSecurityApplicationGroupIdentifier:   
        <span class="string">"group.com.example.apple-samplecode.fruta"</span>)
    <span class="keyword">else</span> { <span class="keyword">return</span> };
<span class="keyword">let</span> user = <span class="call">readUserID</span>(in: secureAppGroupURL)
provider.<span class="call">getCredentialState</span>(forUserID: user) { state, error <span class="keyword">in
    if</span> state == .<span class="dotAccess">authorized</span> {
       <span class="call">loadFavoriteSmoothies</span>(userID: user)
   }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10118</guid><title>Create App Clips for other businesses</title><description>Create App Clips for table reservations, food ordering, and more on behalf of brands, businesses, or services that appear within your app. We’ll show you how you can deliver customized experiences for each business, offering them a unique look, invocation card, and icon — all within a single App Clips binary. Learn best practices for uploading unique metadata, handling links, routing notifications, and keeping track of session states. And discover different types of icons in the context of App Clips, where they appear, and how to customize them.

For more on designing and creating App Clips, make sure to watch “Explore App Clips” and “Configure and link your App Clips.”</description><link>https://www.wwdcnotes.com/notes/wwdc20/10118</link><pubDate>Sat, 18 Jul 2020 18:49:59 +0700</pubDate><content:encoded><![CDATA[<h2>When should you consider offering App Clips for other businesses</h2><p>When your app aggregates many businesses in a customer-facing app.</p><p>Having Advanced App Clip Experiences let you customize the UI for each business:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10118/shiny.png"/><h2>Type of Advanced App Clip Experiences</h2><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10118/comparison.png"/><h2>How-to</h2><p>The way to do this is the standard way to create App Clips: see session <a href="../10146"><code>Configure and Link Your App Clips</code></a> for more info.</p><h2>Route Notifications to the right app clip experience</h2><p>In the notification payload, specify the targeted App Clip id via <code>targetContentIdentifier</code>, the app clip with the longest prefix match will get the notification.</p><p>For more information, refer <a href="https://developer.apple.com/documentation/app_clips/enabling_notifications_in_app_clips">here</a>.</p><h2>App Clip Experience Icons a.k.a. Businesses Icons</h2><p>Beside the main app icon, we also get App Clip Experience icons, which are used to display a specific App Clip Experience icon, which can be completely different than the main app icon.</p><p>This icon will be shown like any other app icon in the App Library, Spotlight, Siri proactive suggestions, and in other apps such as messages.app.</p><p>These custom icons come from Apple's Maps Point of Interest Icon: businesses can upload their icon via <a href="https://mapsconnect.apple.com">Maps Connect</a></p><p>If the business does not have uploaded a custom icon, the system will display a generic POI of interest image like "Food" and "Shopping":</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10118/poi.png"/>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc20/10146</guid><title>Configure and link your App Clips</title><description>App Clips are small parts of an app that offer a streamlined, direct experience and help people get what they need at the right time. Learn how you can invoke an App Clip through real-world experiences like App Clip Codes, NFC, and QR codes, or have them appear digitally through apps like Maps or Safari. We’ll show you how to handle links in your App Clip and demonstrate how to set up your associated domains. And discover how you can configure App Clip experiences in App Store Connect, add App Clip banners to your website, and thoroughly test your App Clips through TestFlight.

To get the most out of this session, you should have experience using Universal Links and associated domains. For a primer, watch “What’s New in Universal Links” from WWDC19.</description><link>https://www.wwdcnotes.com/notes/wwdc20/10146</link><pubDate>Sat, 18 Jul 2020 18:12:49 +0700</pubDate><content:encoded><![CDATA[<h2>Steps</h2><p>From the user point of view:</p><ol><li>The user taps on a NFC tag</li><li>The App Clip Experience of your app is displayed, describing the app clip and a button to open the app clip</li><li>The user taps the Open button and launches the app clip</li></ol><p>From the coder point of view:</p><ol><li>The NFC tag contains an URL that is registered with an App Clip experience in App Store Connect</li><li>The system shows your App clip Experience images and description, meanwhile, your App Clip is being downloaded in the background</li><li>Your App Clip is launched with an <code>NSUserActivity</code> specific for the current App Clip Experience</li></ol><h2>Where App Clips can appear</h2><p>At the end of the day an App Clip Experience is tied to a registered URL.</p><p>We have many ways to get that URL:</p><ul><li>NFC tags</li><li>QR codes</li><li>Maps.app (for registered businesses)</li><li>Nearby suggestions</li><li>Safari.app (via a new smart banner for App Clips)</li><li>Messages.app</li><li>App Clip code (shown below, available later this year)</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10146/appClipCode.png"/><h2>How to Setup a new App Clip</h2><h3>1. Configure web server and app clip for link handling</h3><p>The association between your web site and your App Clip must be validated for the App Clip to be able to present content in place of the website's URL.</p><p>To securely associate your App Clip with the server, you will need the <code>apple-app-site-association</code> file on your web server (located under the <code>.well-known</code> directory).</p><p>This is the same process used with universal links, the only difference is that know we need to add a new <code>appclips</code> key with a list of all our app clip ids:</p><pre><code>{
    <span class="string">"appclips"</span>: {
        <span class="string">"apps"</span>: [ <span class="string">"ABCDE12345.example.fruta.Clip"</span> ]
    },
 
   ...
}
</code></pre><p>On the app side, we need to have an Associated Domains entitlement with the id <code>appclips:yourwebsite.domain</code> (where <code>yourwebsite.domain</code> is your website domain).</p><p>Then you have to update the code in your App Clip to handle links from incoming <code>NSUserActivity</code>:</p><pre><code><span class="keyword">import</span> SwiftUI

<span class="keyword">@main
struct</span> AppClip: <span class="type">App</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
    <span class="type">WindowGroup</span> {
     <span class="type">ContentView</span>()
      .<span class="call">onContinueUserActivity</span>(<span class="type">NSUserActivityTypeBrowsingWeb</span>) { userActivity <span class="keyword">in
        guard 
          let</span> incomingURL = userActivity.<span class="property">webpageURL</span>,
          <span class="keyword">let</span> components = <span class="type">NSURLComponents</span>(url: incomingURL, resolvingAgainstBaseURL: <span class="keyword">true</span>) 
        <span class="keyword">else</span> {
            <span class="keyword">return</span>
        }

        <span class="comment">// Direct to the linked content in your app clip.</span>
      }
    }
  }
}
</code></pre><p>Note that once the user downloads the app, when opening the App clip url now it's your main app that will need to handle the app clip url (you cannot have both the app clip and the app installed, as they're mutually exclusive).</p><h3>2. Configure your App Clip Card Experience in App Store Connect</h3><p>Each App Clip experience starts with the App Clip card that the user sees when they tap on an App Clip link:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10146/card.png"/><p>In App Store Connect the App Clip section will be shown only after you've uploaded a build that contains at least one App Clip:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10146/appStore.png"/><p>If you want your App Clip to be accessible from more than just Safari and Messages, you must set up an advanced App Clip experience by clicking the Get Started link above.</p><p>In this advanced experience is where you can set multiple urls for different experiences (e.g. a restaurant might have an experience to reserve a table, another to check the menu)</p><p>Note that you don't need exact url matches:<br>the App Clip Experience that has the most specific prefix match against a given url will be launched.</p><p>This is very important for example if you're renting bikes: each bike can have its own URL that differs only at the end, eg <code>bike.app.renting/bike-id/500</code>, <code>bike.app.renting/bike-id/123</code> <code>bike.app.renting/bike-id/66</code> etc<br>The app will only need to register <code>bike.app.renting/</code> (or <code>bike.app.renting/bike-id/</code>) once.</p><p>Another example is if you're an app for a chain of shops, you can have the same url for all shops, and just a different postfix specifying the shop location to specify which shop the user is in.</p><h3>3. (optional) Configure App Clip smart banners in your website</h3><p>As before we need to add a meta tag in our webpage header:</p><pre><code>&lt;meta 
  name=<span class="string">"apple-itunes-app"</span> 
  content=<span class="string">"app-clip-bundle-id=com.example.fruta.Clip, app-id=123456789"</span>
&gt;
</code></pre><p>Note that we pass both an <code>app-clip-bundle-id</code> and an <code>app-id</code>, the latter is for devices not running iOS 14.</p><h2>How to test an App Clip</h2><p>You can test the URL handling in your App Clip in Xcode.</p><p>To do so:</p><ul><li>Open up the scheme editor</li><li>Select the Arguments tab.</li><li>Under Environment Variables, set your <code>_XCAppClipURL</code> variable.</li></ul><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10146/schemeEditor.png"/><h2>How to test an App Clip via TestFlight</h2><p>In the TestFlight section of our app, we now also have an <code>Add App Clip Invocation</code> for us to define urls for testers to use:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc20/10146/testFlight.png"/>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc15/230</guid><title>Performance on iOS and watchOS</title><description>Great performance is a prerequisite for delivering a compelling and immersive app experience that keeps users engaged. Learn best practices and strategies for characterizing and improving the performance of your code for iPhone, iPad, and Apple Watch.</description><link>https://www.wwdcnotes.com/notes/wwdc15/230</link><pubDate>Sat, 18 Jul 2020 10:07:32 +0700</pubDate><content:encoded><![CDATA[<h2>Why should I think about performance?</h2><p>It's a feature in your app that you should have on your mind all the time:</p><ul><li>Responsiveness delights and engages users</li><li>Be a good neighbor, especially in Multitasking on iPad</li><li>Efficient apps extend battery life</li><li>Supports the whole range of iOS 9 hardware</li></ul><h2>Thinking About Performance</h2><ul><li>Choosing technologies<ul><li>Know the technologies</li><li>Pick the best ones for your app</li><li>Apple technologies are optimized (we use them)</li><li>Benifit from updating</li></ul></li></ul><ul><li>Taking measurements<ul><li>Animations: Instruments: Core Animation</li><li>Responsiveness: Core instrumentation, Instruments: System Trace<ul><li>Don't ship your instrumentation: Create a copy of release scheme in Xcode, and define one additional define, so you could build a release version of the app with performance instrumentation quickly and easily.</li><li>Collect start and end times: CFAbsoluteTimeGetCurrent</li><li>Taps and button presses: IBAction, touchesEnded, UIGestureRecognizer target</li><li>Tabs and modal views: viewWillAppear, viewDidAppear, will show how long it takes to display a the view.</li></ul></li></ul></li></ul><ul><li><ul><li>Memory: Xcode debugger, Instruments Allocations, Instruments Leaks<ul><li>Allocate, Reallocate memory takes time.<ul><li>Ref: iOS App Performance: Memory, WWDC12</li><li>Ref: Improving Your App with Instruments, WWDC14</li><li>Ref: Optimzing Your App Multitasking on iPad in iOS 9</li></ul></li></ul></li></ul></li></ul><ul><li>Setting goals<ul><li>60fps scrolling and animations.</li><li>Respond to user actiosn in 100ms</li></ul></li></ul><ul><li>Performance Workflow<ul><li>Reproduce -&gt; Profil -&gt; Measure -&gt; Change code -&gt; Reproduce</li></ul></li></ul><ul><li>Profiling vs Measuring<ul><li>Profiling: Unsderstanding overall app activity<ul><li>Xcode debugger</li><li>Instruments: Time Profiler</li></ul></li></ul></li></ul><ul><li><ul><li><ul><li>Measuring: Instrumenting a specific action<ul><li>CGAbsoluteTimeGetCurrent</li><li>Instruments: System Trace</li></ul></li></ul></li></ul></li></ul><ul><li><ul><li>Avoid Using the Main Thread for<ul><li>CPU-intensive work</li><li>Tasks that depend on external resource</li></ul></li></ul></li></ul><ul><li><ul><li>Common Blocking Calls<ul><li>Any code path that ends up making a syscall</li><li>Accessing resources not currently in memory: Disk I/O, Network access</li><li>Waiting for work to complete on another thread</li></ul></li></ul></li></ul><ul><li><ul><li><ul><li>Networking: <code>NSURLConnection</code> and friends<ul><li>Use asynchronous API</li><li>Use GCD, Ref: Building Responsive and Efficient Apps with GCD</li><li><code>NSURLSession</code> background session</li></ul></li></ul></li></ul></li></ul><ul><li><ul><li><ul><li>Foundation initializers<ul><li>contentsOfFile:</li><li>contentsOfURL:</li></ul></li></ul></li></ul></li></ul><ul><li><ul><li><ul><li>Core Data<ul><li>Move some Core Data work to different concurrency modes. Ref: What's New in Core Data, Mission.</li></ul></li></ul></li></ul></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc15/231</guid><title>Cocoa Touch Best Practices</title><description>Small improvements can make a big impact on your iOS app's performance and launch time. Learn best practices to optimize your UIKit-based applications. See how to future-proof your app for what may be next, and walk through numerous real world examples for more responsive and dynamic collection and table views.</description><link>https://www.wwdcnotes.com/notes/wwdc15/231</link><pubDate>Sat, 18 Jul 2020 10:07:32 +0700</pubDate><content:encoded><![CDATA[<h2>App Lifecycle</h2><h3>Beyond App Launch, Being responsive to every input</h3><ul><li>Put on the work to the background queue, when you are done with it, put it back to main queue.</li></ul><h3>Leverage Frameworks</h3><ul><li>Target two most recent major releases</li></ul><h2>Views and View Controllers</h2><h3>Layout to Proportions</h3><ul><li>Avoid hard-coded layout values</li></ul><h3>Size Classes</h3><ul><li>Some size thresholds trigger major change</li><li>Properties, not Tags. Keep a property instead.</li></ul><h3>Leverage <code>UIViewControllerTransitionCoordinator</code></h3><ul><li>Animate alongside a transition</li><li>Get accurate completion timing</li><li>Support interactive and cancelable animations</li></ul><h2>Auto Layout</h2><h3>Modify Constraints Efficiently</h3><ul><li>Identify constraints that get changed, added, or removed</li><li>Unchanged constraints are optimized</li><li><strong>Avoid removing all constraints</strong></li><li>Use explicit constraint references</li></ul><h3>Constraint Specificity</h3><ul><li>De-duplicating constraints<ul><li>Duplicates are implied by existing constraints</li><li>Duplicates cause excess work in layout engine</li></ul></li></ul><ul><li>Create flexible constraints<ul><li>Avoid hard-coded values</li><li>Describe constraints using bounds</li></ul></li></ul><ul><li>Fully specify constraints</li><li>Testing and debugging<ul><li><code>-[UIView hasAmbiguousLayout]</code>, when called on <code>UIWindow</code>, returns result for entire view tree</li></ul></li></ul><ul><li><ul><li><code>-[UIView _autolayoutTrace]</code>, Call this method on a view. It returns a string with diagnostic information about the entire view hierarchy containing that view. Ambiguous views are labeled, and so are views that have translatesAutoresizingMaskIntoConstraints set to YES.</li><li>This could be used in Unit Test, try call <code>-[UIView hasAmbiguousLayout]</code> first, if it returns <code>YES</code>, then call <code>-[UIView _autolayoutTrace]</code> to help figure out the cause.</li></ul></li></ul><h2>Table and Collection Views</h2><h3>Self-Sizing Cells</h3><ul><li>Fully specify constraints</li><li>Width = input; height = output.</li><li>Tip: add a constraint to cell's content view, height</li></ul><h3>Animating Height Changes</h3><p>Naive way: update the model, then call <code>tableView.reloadData()</code></p><p>Promoted way:</p><ul><li><strong><code>tableView.beginUpdates</code></strong></li><li>Update model</li><li>Update cell contents, might just <strong>call <code>tableView.cellForRowAtIndexPath</code> and update the content with corresponding model.</strong></li><li><strong><code>tableView.endUpdates</code></strong> ### Fast CollectionView Layout Invalidation</li><li>Invalidate on bounds change</li><li>Build <a href="https://developer.apple.com/documentation/uikit/uicollectionviewlayoutinvalidationcontext">targeted invalidation context</a></li><li>Repeat as necessary</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc15/411</guid><title>Swift in Practice</title><description>Learn how Swift can help you define away some common pitfalls in app development, allowing your apps to benefit from safer runtime behavior while enjoying strong guarantees provided by Swift at compile-time. Hear about how API availability checking in Swift allows you to easily take advantage of new APIs while guaranteeing safe deployment to earlier OS releases. See how enumerations and protocols can help not only maintain compile-time invariants between your app's code and assets but also reduce boilerplate.</description><link>https://www.wwdcnotes.com/notes/wwdc15/411</link><pubDate>Sat, 18 Jul 2020 10:07:32 +0700</pubDate><content:encoded><![CDATA[<h2>Take advantage of new APIs while deploying to older OS releases</h2><p><strong>Problem</strong>: Users on different OS releases</p><p><strong>Solution</strong>: Adopt new features and support the older OS releases - Always use the <strong>Latest SDK</strong> to access complete set of APIs - Use Deployment Target to set an application's minimum supported OS release</p><ul><li>Manually check Framework, Class, etc.<ul><li>Framework: manually check framework as optional</li><li>Class: manually check if a method/function available.</li></ul></li></ul><ul><li>Compile-Time API Availability Checking.</li></ul><h2>Enforce expected application behavior using enums and protocols</h2><h3>Use Case: Asset Catalog Identifiers</h3><pre><code><span class="keyword">extension</span> <span class="type">UIImage</span> {
    <span class="keyword">enum</span> AssetIdentifier: <span class="type">String</span> {
        <span class="keyword">case</span> isabella = <span class="string">"Isabella"</span>
        <span class="keyword">case</span> william = <span class="string">"William"</span>
        <span class="keyword">case</span> <span class="type">Olivia</span> = <span class="string">"Olivia"</span>
    }
    
    <span class="keyword">convenience init</span>!(assertIdentifier: <span class="type">AssetIdentifier</span>) {
        <span class="keyword">self</span>.<span class="keyword">init</span>(named: assertIdentifier.<span class="property">rawValue</span>)
    }
}
</code></pre><ul><li>Centrally located constants</li><li>Doesn't pollute global namespace</li><li>Must use one of the enum cases</li><li>Image initialization are not failable</li></ul><h3>Use Case: Segue Identifiers</h3><pre><code><span class="keyword">class</span> ViewController: <span class="type">UIViewController</span> {
    <span class="keyword">enum</span> SegueIdentifier: <span class="type">String</span> {
        <span class="keyword">case</span> <span class="type">ShowImportUnicorn</span> = <span class="string">"ShowImportUnicorn"</span>
        <span class="keyword">case</span> <span class="type">ShowCreateNewUnicore</span> = <span class="string">"Show CreateNewUnicorn"</span>
    }
    
    <span class="keyword">override func</span> prepareForSegue(segue: <span class="type">UIStoryboardSegue</span>, sender: <span class="type">AnyObject</span>?) {
        <span class="keyword">guard let</span> identifier = segue.<span class="property">identifier</span>, segueIdentifier = <span class="type">SegueIdentifier</span>(rawValue: identifier)
        <span class="keyword">else</span> { <span class="call">fatalError</span>(<span class="string">"Invalid segue identifier</span> \(segue.<span class="property">identifier</span>)<span class="string">."</span>)}
        
        <span class="keyword">switch</span> segueIdentifier {
            <span class="keyword">case</span> .<span class="dotAccess">ShowImportUnicorn</span>:    <span class="comment">// Config...</span>
            <span class="keyword">case</span> .<span class="dotAccess">ShowCreateUnicor</span>:     <span class="comment">// Config...</span>
        }
    }
}
</code></pre><p>When new case added to enum, then the compiler will tell us switch is not exhausted.</p><pre><code><span class="keyword">class</span> ViewController: <span class="type">UIViewController</span> {
    <span class="keyword">func</span> performSegueWithIdentifier(segueIdentifier: <span class="type">SegueIdentifier</span>, sender: <span class="type">AnyObject</span>?) {
        <span class="call">performSegueWithIdentifier</span>(segueIdentifier.<span class="property">rawValue</span>, sender: sender)
    }
}
</code></pre><h3>To avoid duplicate all of the smart solution showed above, use <code>Protocol</code></h3><pre><code><span class="keyword">protocol</span> SegueHandlerType {
    <span class="keyword">typealias</span> SegueIdentifier: <span class="type">RawRepresentable</span>
}

<span class="comment">// Shared Implementation.</span>
<span class="keyword">extension</span> <span class="type">SegueHandlerType</span> <span class="keyword">where</span> <span class="type">Self</span>: <span class="type">UIViewController</span>, <span class="type">SegueIdentifier</span>.<span class="type">RawValue</span> == <span class="type">String</span> {
    <span class="keyword">func</span> segueIdentifier(for segue: <span class="type">UIStoryboardSegue</span>) -&gt; <span class="type">SegueIdentifier</span> {
        <span class="keyword">guard let</span> identifier = segue.<span class="property">identifier</span>,
            <span class="keyword">let</span> segueIdentifier = <span class="type">SegueIdentifier</span>(rawValue: identifier)
        <span class="keyword">else</span> { <span class="call">fatalError</span>(<span class="string">"Unknown segue:</span> \(segue)<span class="string">)"</span>) }
        <span class="keyword">return</span> segueIdentifier
    }
    
    <span class="keyword">func</span> performSegueWithIdentifier(segueIdentifier: <span class="type">SegueIdentifier</span>, sender: <span class="type">AnyObject</span>?) {
        <span class="call">performSegueWithIdentifier</span>(segueIdentifier.<span class="property">rawValue</span>, sender: sender)
    }
}

<span class="keyword">class</span> ViewController: <span class="type">UIViewController</span>, <span class="type">SegueHandlerType</span> {
    <span class="keyword">enum</span> SegueIdentifier: <span class="type">String</span> {
    <span class="comment">// ...</span>
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc15/413</guid><title>Advanced Debugging and the Address Sanitizer</title><description>Discover UI debugging and how to use advanced breakpoint actions to quickly explore and fix your app. Learn how the new Address Sanitizer feature finds buffer overflows, use-after-free errors, and other memory corruption bugs at run time.</description><link>https://www.wwdcnotes.com/notes/wwdc15/413</link><pubDate>Sat, 18 Jul 2020 10:07:32 +0700</pubDate><content:encoded><![CDATA[<h2>View Debugger</h2><ul><li>Focus on troublesome views</li><li>Visualize your constraints</li></ul><p>View Debugger helps you visualize the hierarchy of views in current view. It's a great way to view the relationship between views(sibling and parent/child), also it's a great place to see the auto layout constraints between these views.</p><h2>Advanced Breakpoint Actions</h2><ul><li>Catch exceptions at throw, print message</li><li>Print expressions without adding clutter</li></ul><p>Under Breakpoint Navigator, user could manually add variety breakpoints, shows in the following image:</p><img src="https://www.wwdcnotes.com/images/notes/wwdc15/413/BreakpointsList.png" alt="BreakpointList"/><p>In the demo, click 'Exception Breakpoint' to add a general exception breakpoint, but this would not show any exception error information.</p><p>To display further information about exception error, one trick to do is in the console at the breakpoint, <code>po $arg1</code> could print out the latest exception error message in the console, which means we could add this as an action for corresponding breakpoint.</p><h2>Address Sanitizer (ASan)</h2><p>Enable this tool in <code>Edit Scheme...</code> under <code>Diagnostic</code></p><p>The benefit of using ASan to Analyze Memory Corruption - Use after free - Heap buffer overflow - Stack buffer overflow - Global variable overflow Overflows in C++ containers - Use after return</p><p>It's better to use it under none <code>[-O0]</code> optimization configuration.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.wwdcnotes.com/notes/wwdc16/301</guid><title>Introducing Expanded Subscriptions in iTunes Connect</title><description>See what's new in subscriptions. Learn how our improvements give you more flexibility and control over pricing, and provide powerful incentives to engage and retain your customers.</description><link>https://www.wwdcnotes.com/notes/wwdc16/301</link><pubDate>Sat, 18 Jul 2020 10:07:32 +0700</pubDate><content:encoded><![CDATA[<h2>What is an In-App Purchase</h2><p>Digital content or service bought within app:</p><ul><li>Consumable</li><li>Non-consumable</li><li>Non-renewable subscriptions</li><li>Auto-renewable subscriptions</li></ul><h2>Auto-Renewable Subscriptions</h2><h3>Increased proceeds</h3><p>Proceeds goes from 70% to 85% for subscriptions over a year.</p><h3>Subscription Groups</h3><p>Only one subscription in a single group can be selected, if the app needs to support multiple active subscriptions at the same time, then multiple subscription groups should be created.</p><p>In the same group, the level of subscription could be offered for the different subscriptions, thus, user could upgrade/downgrade subscription level.</p><h2>Territory Pricing</h2><p>Price can be customized for each territory.</p><h3>Customer Retention</h3><p>Using <em>Push Notification</em> and highly customized <em>Email</em> would be a good idea to keep attracting existing customers.</p><h4>Preserve Price</h4><p>Multiple ways to manipulate the prices:</p><ul><li>Initial price could be offered for the soft launch (Early adopters).</li><li>A different price could be offered after trial period.</li><li>Increase the price without changing existing customers, after a certain date.</li><li>Increase the price without changing early adopters price, after a certain date.</li><li>Early adopters price could also be changed. (That will be effective immediately.)</li></ul>]]></content:encoded></item></channel></rss>