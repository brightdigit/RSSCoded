<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>FIVE STARS</title><description>Exploring iOS, SwiftUI &amp; much more.</description><link>https://www.fivestars.blog</link><language>en</language><lastBuildDate>Sun, 20 Jun 2021 13:51:20 +0700</lastBuildDate><pubDate>Sun, 20 Jun 2021 13:51:20 +0700</pubDate><ttl>250</ttl><atom:link href="https://www.fivestars.blog/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://www.fivestars.blog/articles/safe-area-insets</guid><title>How to control safe area insets in SwiftUI</title><description>Fresh out of WWDC21, let's dig into the brand new safeAreaInset view modifier!</description><link>https://www.fivestars.blog/articles/safe-area-insets</link><pubDate>Tue, 15 Jun 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Fresh out of WWDC21, <code>safeAreaInset()</code> is a brand new SwiftUI view modifier, which lets us define views that become part of the observed safe area. Let's take a deep dive into this new, powerful feature.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Scroll views</h2><p>The most common <code>safeAreaInset</code> use case is probably going to be with scroll views.<br>Consider the following screen for example, where we have a <code>ScrollView</code> with some content and a button:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/button.png"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {
      <span class="type">ForEach</span>(<span class="number">1</span>..&lt;<span class="number">30</span>) { <span class="keyword">_ in</span>
        <span class="type">Text</span>(<span class="string">"Five Stars"</span>)
          .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      }
      .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>)
    }
    .<span class="call">overlay</span>(alignment: .<span class="dotAccess">bottom</span>) {
      <span class="type">Button</span> {
        ...
      } label: {
        <span class="type">Text</span>(<span class="string">"Continue"</span>)
          .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>)
      }
      .<span class="call">buttonStyle</span>(.<span class="dotAccess">bordered</span>)
      .<span class="call">controlSize</span>(.<span class="dotAccess">large</span>)
      .<span class="call">controlProminence</span>(.<span class="dotAccess">increased</span>)
      .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>)
    }
  }
}
</code></pre><blockquote><p>Note the new iOS 15 <code>.buttonStyle(.bordered)</code> <code>.controlSize(.large)</code> <code>.controlProminence(.increased)</code> view modifiers!</p></blockquote><p>Because the button is just an overlay, the scroll view is not affected by it, which becomes a problem when we scroll at the bottom:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/no.gif"/><p>The last elements in the <code>ScrollView</code> are hidden under the button!</p><p>Let's now swap <code>.overlay(alignment: .bottom)</code> with <code>.safeAreaInset(edge: .bottom)</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {
      <span class="type">ForEach</span>(<span class="number">1</span>..&lt;<span class="number">30</span>) { <span class="keyword">_ in</span>
        <span class="type">Text</span>(<span class="string">"Five Stars"</span>)
          .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
      }
      .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>)
    }
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">bottom</span>) { <span class="comment">// üëàüèª</span>
      <span class="type">Button</span> {
        ...
      } label: {
        <span class="type">Text</span>(<span class="string">"Continue"</span>)
          .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>)
      }
      .<span class="call">buttonStyle</span>(.<span class="dotAccess">bordered</span>)
      .<span class="call">controlSize</span>(.<span class="dotAccess">large</span>)
      .<span class="call">controlProminence</span>(.<span class="dotAccess">increased</span>)
      .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>)
    }
  }
}
</code></pre><p>...and voila'! <code>ScrollView</code> observes the new region passed down by <code>safeAreaInset</code> and our last elements are now visible:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/yes.gif"/><p>Next, let's see how it works.</p><h2>Definition</h2><p>This modifier comes in two variants, one for each axis (horizontal/vertical):</p><pre><code><span class="comment">/// Horizontal axis.</span>
<span class="keyword">func</span> safeAreaInset&lt;V: <span class="type">View</span>&gt;(
  edge: <span class="type">HorizontalEdge</span>,
  alignment: <span class="type">VerticalAlignment</span> = .<span class="dotAccess">center</span>,
  spacing: <span class="type">CGFloat</span>? = <span class="keyword">nil</span>,
  <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">V</span>
) -&gt; <span class="keyword">some</span> <span class="type">View</span>

<span class="comment">/// Vertical axis.</span>
<span class="keyword">func</span> safeAreaInset&lt;V: <span class="type">View</span>&gt;(
  edge: <span class="type">VerticalEdge</span>, 
  alignment: <span class="type">HorizontalAlignment</span> = .<span class="dotAccess">center</span>, 
  spacing: <span class="type">CGFloat</span>? = <span class="keyword">nil</span>, 
  <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">V</span>
) -&gt; <span class="keyword">some</span> <span class="type">View</span>
</code></pre><p>We have four parameters:</p><ul><li><code>edge</code> - where we specify which region edge we're targeting: either <code>.top</code> or <code>.bottom</code> for the vertical variant, and <code>.leading</code> or <code>.trailing</code> for the horizontal one</li><li><code>alignment</code> - where we specify how our <code>safeAreaInset</code> content should align when it doesn't fit the available space</li><li><code>spacing</code> - where we can further shift the safe area beyond the bounds of the <code>safeAreaInset</code> content, by default this parameter has a non-zero value, based on the platform convention we're targeting</li><li><code>content</code> - where we define our <code>safeAreaInset</code> content</li></ul><p>Let's use it in practice to understand what this is all about.</p><h2>Examples</h2><p>By default SwiftUI places our content within the safe area, we will start with a <code>LinearGradient</code> which always takes all the available space:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/base.png"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">LinearGradient</span>(
      colors: [.<span class="dotAccess">mint</span>, .<span class="dotAccess">teal</span>, .<span class="dotAccess">cyan</span>, .<span class="dotAccess">indigo</span>],
      startPoint: .<span class="dotAccess">leading</span>,
      endPoint: .<span class="dotAccess">trailing</span>
    )
  }
}
</code></pre><p>Let's say that we'd like to extend our top safe area, this is now possible thanks to the new <code>safeAreaInset</code> view modifier:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/red.png"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">LinearGradient</span>(
      colors: [.<span class="dotAccess">mint</span>, .<span class="dotAccess">teal</span>, .<span class="dotAccess">cyan</span>, .<span class="dotAccess">indigo</span>],
      startPoint: .<span class="dotAccess">leading</span>,
      endPoint: .<span class="dotAccess">trailing</span>
    )
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">top</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">red</span>.<span class="call">frame</span>(height: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
  }
}
</code></pre><p>We passed a see-through view as the view modifier content: note how <code>LinearGradient</code> doesn't extend beneath it.</p><p>This is because our <code>safeAreaInset</code>:</p><ol><li>takes in the observed region</li><li>places its <code>content</code> (the red color above) in that region (according to its parameters)</li><li>reduces the available region, based on both its <code>content</code> size and parameters, and passes it down to <code>LinearGradient</code></li></ol><p>This is a big departure from the <code>overlay</code> view modifier, where:</p><ol><li>the view where the overlay is applied to places itself in the observed region</li><li>the overlay inherits that view location and size</li><li>the overlay is placed on top of that space</li></ol><p>The way things get placed is essentially the opposite.</p><h3>Size</h3><p>Because <code>safeAreaInset</code> only cares about the observed region, its <code>content</code> can exceed the size of the view it's applied to:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/size.png"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">LinearGradient</span>(
      colors: [.<span class="dotAccess">mint</span>, .<span class="dotAccess">teal</span>, .<span class="dotAccess">cyan</span>, .<span class="dotAccess">indigo</span>],
      startPoint: .<span class="dotAccess">leading</span>,
      endPoint: .<span class="dotAccess">trailing</span>
    )
    .<span class="call">frame</span>(width: <span class="number">50</span>)
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">top</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">red</span>.<span class="call">frame</span>(height: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
  }
}
</code></pre><p>In this example, the view where <code>safeAreaInset</code> is applied is only <code>50</code> points wide, thanks to <code>.frame(width: 50)</code>, however, the <code>safeAreaInset</code>'s content still takes all the space it needs from the observed region.</p><h3>Spacing</h3><p>The <code>spacing</code> parameter further shifts the safe area beyond the bounds of the <code>safeAreaInset</code> content, in all examples we've so far it was always set to <code>0</code>, let's pass <code>50</code> this time:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/gap.png"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">LinearGradient</span>(
      colors: [.<span class="dotAccess">mint</span>, .<span class="dotAccess">teal</span>, .<span class="dotAccess">cyan</span>, .<span class="dotAccess">indigo</span>],
      startPoint: .<span class="dotAccess">leading</span>,
      endPoint: .<span class="dotAccess">trailing</span>
    )
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">top</span>, spacing: <span class="number">50</span>) {
      <span class="type">Color</span>.<span class="property">red</span>.<span class="call">frame</span>(height: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
  }
}
</code></pre><p>We now have a <code>50</code> points gap between our <code>Color.red</code> and <code>LinearContent</code>: this spacing always reduces the region available of our original view (the <code>LinearGradient</code> in our examples) by the amount provided, and only for the edge we're targeting.</p><p>If we were to pass a negative <code>spacing</code>, then we'd be decreasing the safe region instead:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/overlap.png"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">LinearGradient</span>(
      colors: [.<span class="dotAccess">mint</span>, .<span class="dotAccess">teal</span>, .<span class="dotAccess">cyan</span>, .<span class="dotAccess">indigo</span>],
      startPoint: .<span class="dotAccess">leading</span>,
      endPoint: .<span class="dotAccess">trailing</span>
    )
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">top</span>, spacing: -<span class="number">10</span>) {
      <span class="type">Color</span>.<span class="property">red</span>.<span class="call">frame</span>(height: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
  }
}
</code></pre><p>As expected, the <code>safeAreaInset</code> content did not move, however, the <code>LinearGradient</code> now overlaps <code>Color.red</code> for <code>10</code> points, as the <code>safeAreaInset</code> has a <code>spacing</code> of <code>-10</code>.</p><h3>Alignment</h3><p>The <code>alignment</code> parameter works similarly to how it did on <code>overlay</code>, positioning the <code>safeAreaInset</code> content at the right place when it doesn't entirely fit the available space.</p><p>With <code>Color.red.frame(height: 30)</code>, the <code>safeAreaInset</code> content always took all the horizontal available space, let's limit its width to <code>30</code> and declare a <code>.trailing</code> <code>alignment</code>:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/align.png"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">LinearGradient</span>(
      colors: [.<span class="dotAccess">mint</span>, .<span class="dotAccess">teal</span>, .<span class="dotAccess">cyan</span>, .<span class="dotAccess">indigo</span>],
      startPoint: .<span class="dotAccess">leading</span>,
      endPoint: .<span class="dotAccess">trailing</span>
    )
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">top</span>, alignment: .<span class="dotAccess">trailing</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">red</span>.<span class="call">frame</span>(width: <span class="number">30</span>, height: <span class="number">30</span>)
    }
  }
}
</code></pre><p>No surprises here.</p><h2>Beyond the basics</h2><p>With the introduction out of the way, let's try to experiment a little more with our new modifier.</p><h3>Accumulative view modifiers</h3><p>What happens when we apply multiple <code>safeAreaInset</code> to the same view?</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">LinearGradient</span>(
      colors: [.<span class="dotAccess">mint</span>, .<span class="dotAccess">teal</span>, .<span class="dotAccess">cyan</span>, .<span class="dotAccess">indigo</span>],
      startPoint: .<span class="dotAccess">leading</span>,
      endPoint: .<span class="dotAccess">trailing</span>
    )
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">bottom</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">red</span>.<span class="call">frame</span>(height: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">bottom</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">green</span>.<span class="call">frame</span>(height: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">bottom</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">blue</span>.<span class="call">frame</span>(height: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
  }
}
</code></pre><p>Let's go back at the beginning of the article where we described <code>safeAreaInset</code>'s three steps:</p><ol><li>the <code>safeAreaInset</code> takes in the observed region</li><li>places its <code>content</code> in that region (according to its parameters)</li><li>reduces the available region, based on the <code>content</code> size and its parameters, and passes it down</li></ol><p>The first view modifier applied is the outer-most one, the one with <code>Color.blue</code>, which takes the three steps above and passes down the reduced available region to the second-last <code>safeAreaInset</code>, the <code>Color.green</code> one, which will do the same, etc.</p><p>Here's the final result:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/stack.png"/><h3>Multiple edges</h3><p>We've seen how we can "stack" multiple <code>safeAreaInset</code>s, however we don't need to stop at one edge: it's totally ok to apply multiple <code>safeAreaInset</code> modifiers that apply to different edges:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">LinearGradient</span>(
      colors: [.<span class="dotAccess">mint</span>, .<span class="dotAccess">teal</span>, .<span class="dotAccess">cyan</span>, .<span class="dotAccess">indigo</span>],
      startPoint: .<span class="dotAccess">leading</span>,
      endPoint: .<span class="dotAccess">trailing</span>
    )
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">top</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">red</span>.<span class="call">frame</span>(height: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">trailing</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">green</span>.<span class="call">frame</span>(width: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">bottom</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">blue</span>.<span class="call">frame</span>(height: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">leading</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">yellow</span>.<span class="call">frame</span>(width: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/multiple.png"/><p>The same logic is still valid, regardless of what edge each <code>safeAreaInset</code> modifier target:</p><ul><li>first we apply/place the (outermost) <code>Color.yellow</code> <code>safeAreaInset</code>, which will take all the space needed, and pass the reduced region down</li><li>then we move to the <code>Color.blue</code> <code>safeAreaInset</code>, which will do the same</li><li>etc</li></ul><h3>ignoresSafeArea</h3><p>Previously <code>ignoresSafeArea</code> meant letting our views be placed under the Home indicator, keyboard, and/or the status bar:<br>in iOS 15 <code>ignoresSafeArea</code> also means resetting any <code>safeAreaInset</code>.</p><p>In the following example we're first placing our <code>safeAreaInset</code>, and then ignore it before placing our final view:</p><img src="https://www.fivestars.blog/assets/posts/safe-area-insets/ignore.png"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">LinearGradient</span>(
      colors: [.<span class="dotAccess">mint</span>, .<span class="dotAccess">teal</span>, .<span class="dotAccess">cyan</span>, .<span class="dotAccess">indigo</span>],
      startPoint: .<span class="dotAccess">leading</span>,
      endPoint: .<span class="dotAccess">trailing</span>
    )
    .<span class="call">ignoresSafeArea</span>(edges: .<span class="dotAccess">bottom</span>)
    .<span class="call">safeAreaInset</span>(edge: .<span class="dotAccess">bottom</span>, spacing: <span class="number">0</span>) {
      <span class="type">Color</span>.<span class="property">red</span>.<span class="call">frame</span>(height: <span class="number">30</span>).<span class="call">opacity</span>(<span class="number">0.5</span>)
    }
  }
}
</code></pre><blockquote><p>As of Xcode 13b1, only <code>ScrollView</code> correctly observes <code>safeAreaInset</code>s: hopefully <code>List</code> and <code>Form</code> will be fixed in an upcoming Xcode seed (FB9166130).</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>WWDC21 brought us a lot of new SwiftUI functionality, allowing us to push our apps to the next level: <code>safeAreaInset</code> is one of those view modifiers that you didn't know you needed until you do, and it comes with a great, simple API.</p><p>Are you planning to use <code>safeAreaInset</code>? What challenges will it solve in your app? Please let me know either via <a href="mailto:hello@fivestars.blog">email</a> or <a href="https://twitter.com/zntfdr">Twitter</a>!</p><blockquote><p>This is the first of a series of articles exploring new SwiftUI features. We will cover many more during the rest of the summer: subscribe to Five Stars's <a href="https://www.fivestars.blog/feed.rss">feed RSS</a> or follow <a href="http://twitter.com/fiveStarsBlog">@FiveStarsBlog</a> on Twitter to never miss new content!</p></blockquote>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-wwdc21</guid><title>What's new in SwiftUI</title><description>WWDC21 is here! Let's take a look at some of the new SwiftUI additions!</description><link>https://www.fivestars.blog/articles/swiftui-wwdc21</link><pubDate>Wed, 9 Jun 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>WWDC21 is here! SwiftUI has taken another huge step forward, and it comes with many enhancements to current views, new views, new types, new view modifiers, and more:<br>don't fret! We have a whole summer ahead of us to explore all of that, in this first article, let's have a look at some of the new changes!</p><blockquote><p>For the new "flagship" SwiftUI features, I recommend <a href="https://swiftwithmajid.com/2021/06/08/what-is-new-in-swiftui-after-wwdc21/">this article</a> by <a href="https://twitter.com/mecid">Majid Jabrayilov</a>.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Colors</h2><h3>New colors</h3><img src="https://www.fivestars.blog/assets/posts/swiftui-wwdc21/newcolors.png"/><p>Not all new features need to come with disrupting changes, for example, this year we gained five new colors:</p><pre><code><span class="type">HStack</span> {
  <span class="type">Group</span> {
    <span class="type">Circle</span>()
      .<span class="call">fill</span>(.<span class="dotAccess">mint</span>)
    <span class="type">Circle</span>()
      .<span class="call">fill</span>(.<span class="dotAccess">teal</span>)
    <span class="type">Circle</span>()
      .<span class="call">fill</span>(.<span class="dotAccess">cyan</span>)
    <span class="type">Circle</span>()
      .<span class="call">fill</span>(.<span class="dotAccess">indigo</span>)
    <span class="type">Circle</span>()
      .<span class="call">fill</span>(.<span class="dotAccess">brown</span>)
  }
  .<span class="call">frame</span>(width: <span class="number">32</span>, height: <span class="number">32</span>)
}
</code></pre><h3>New initializers</h3><p>All current <code>CGColor</code>/<code>UIColor</code>/<code>NSColor</code> <code>Color</code> initializers have been soft deprecated, in favor of new initializers with explicit argument labels:</p><pre><code>

<span class="keyword">@available</span>(
  ..., deprecated: ..., 
  message: <span class="string">"Use Color(uiColor:) when converting a UIColor, or create a standard Color directly"</span>
)
<span class="keyword">extension</span> <span class="type">Color</span> {
  <span class="keyword">public init</span>(<span class="keyword">_</span> color: <span class="type">UIColor</span>)
}

<span class="keyword">@available</span>(iOS <span class="number">15.0</span>)
<span class="keyword">extension</span> <span class="type">Color</span> {
  <span class="keyword">public init</span>(uiColor: <span class="type">UIColor</span>)
}
</code></pre><h2>Styles</h2><h3>New (iOS) Button style</h3><img src="https://www.fivestars.blog/assets/posts/swiftui-wwdc21/BorderedButtonStyle.png"/><p>iOS's <code>Button</code> gains <code>BorderedButtonStyle</code>, which previously was available in all other platforms <em>but</em> iOS.</p><pre><code><span class="type">Button</span>(<span class="string">"Tap me"</span>) {}
  .<span class="call">buttonStyle</span>(<span class="type">BorderedButtonStyle</span>())
</code></pre><h3>New Toggle style</h3><img src="https://www.fivestars.blog/assets/posts/swiftui-wwdc21/togglebutton.png"/><p><code>Toggle</code> also gains a new style, available on both macOS and iOS:</p><pre><code><span class="type">VStack</span> {
  <span class="type">Toggle</span>(isOn: .<span class="call">constant</span>(<span class="keyword">true</span>), label: { <span class="type">Text</span>(<span class="string">"Toggle on"</span>)})
  <span class="type">Toggle</span>(isOn: .<span class="call">constant</span>(<span class="keyword">false</span>), label: { <span class="type">Text</span>(<span class="string">"Toggle off"</span>)})
  <span class="type">Toggle</span>(isOn: .<span class="call">constant</span>(<span class="keyword">true</span>), label: { <span class="type">Text</span>(<span class="string">"Toggle on disabled"</span>)})
    .<span class="call">disabled</span>(<span class="keyword">true</span>)
  <span class="type">Toggle</span>(isOn: .<span class="call">constant</span>(<span class="keyword">false</span>), label: { <span class="type">Text</span>(<span class="string">"Toggle off disabled"</span>)})
    .<span class="call">disabled</span>(<span class="keyword">true</span>)
}
.<span class="call">toggleStyle</span>(<span class="type">ButtonToggleStyle</span>())
</code></pre><h3>New way to apply styles</h3><p>Beside actual styles, there's a new way to declare which style we'd like to apply, let's take a plain button style for example:</p><pre><code><span class="type">Button</span>(<span class="string">"Tap me"</span>) {}
  .<span class="call">buttonStyle</span>(<span class="type">PlainButtonStyle</span>())
</code></pre><p>We can now apply this style with a more succinct API:</p><pre><code><span class="type">Button</span>(<span class="string">"Tap me"</span>) {}
  .<span class="call">buttonStyle</span>(.<span class="dotAccess">plain</span>)
</code></pre><p>The old way is soft deprecated, and will trigger warnings in future Xcode releases.</p><p>This is a nice shift, and it's applied to all SwiftUI components, for example:</p><pre><code><span class="type">List</span> {
  ...
}
.<span class="call">listStyle</span>(.<span class="dotAccess">grouped</span>)


<span class="type">Toggle</span>(isOn: $isOn, label: { <span class="type">Text</span>(<span class="string">"Toggle"</span>) })
  .<span class="call">toggleStyle</span>(.<span class="dotAccess">button</span>)

<span class="type">TextField</span>(<span class="string">"Username: "</span>, text: $username)
  .<span class="call">textFieldStyle</span>(.<span class="dotAccess">roundedBorder</span>)
</code></pre><h2>SwiftUI previews InterfaceOrientation</h2><img src="https://www.fivestars.blog/assets/posts/swiftui-wwdc21/previews.png"/><p>SwiftUI previews now have a new <code>previewInterfaceOrientation(_:)</code> view modifier, allowing us to preview our screens in different orientation:</p><pre><code><span class="keyword">struct</span> ContentView_Previews: <span class="type">PreviewProvider</span> {
  <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ContentView</span>()
      .<span class="call">previewInterfaceOrientation</span>(.<span class="dotAccess">portraitUpsideDown</span>)
    <span class="type">ContentView</span>()
      .<span class="call">previewInterfaceOrientation</span>(.<span class="dotAccess">landscapeLeft</span>)
  }
}
</code></pre><p><code>InterfaceOrientation</code> conforms to <code>Identifiable</code> and comes with an <code>allCases</code> static property, allowing us to preview any view in all orientations with a <code>ForEach</code>:</p><pre><code><span class="keyword">struct</span> ContentView_Previews: <span class="type">PreviewProvider</span> {
  <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ForEach</span>(<span class="type">InterfaceOrientation</span>.<span class="property">allCases</span>) { interfaceOrientation <span class="keyword">in</span>
      <span class="type">ContentView</span>()
        .<span class="call">previewInterfaceOrientation</span>(interfaceOrientation)
    }
  }
}
</code></pre><p>With this out of the way, I would love to see previews side by side next, instead of stacked vertically (FB7635888).</p><h2>Dismiss action</h2><p>In previous iOS versions, if we wanted a view (a sheet, or a navigation view) to dismiss itself, we could have used the <code>presentationMode</code> environment object:</p><pre><code><span class="keyword">struct</span> OldSheetView: <span class="type">View</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">presentationMode</span>) <span class="keyword">@Binding var</span> presentationMode

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(<span class="string">"Dismiss Me"</span>) {
      presentationMode.<span class="call">dismiss</span>()
    }
  }
}
</code></pre><p>In iOS 15 we have a new <code>dismiss</code> environment variable, on which we just call <code>dismiss()</code> on itself:</p><pre><code><span class="keyword">struct</span> NewSheetView: <span class="type">View</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">dismiss</span>) <span class="keyword">var</span> dismiss

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(<span class="string">"Dismiss Me"</span>) {
      <span class="call">dismiss</span>()
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-wwdc21/dismiss.gif"/><p>With this new addition, I believe the old <code>presentationMode</code> object should be deprecated (FB9142876), if you're aware of any reason why it shouldn't, please <a href="mailto:hello@fivestars.blog">let me know</a>!</p><h2>Badges</h2><img src="https://www.fivestars.blog/assets/posts/swiftui-wwdc21/badgetab.png"/><p>We have a new <code>badge(_:)</code> view modifier used to display badges on UI components:</p><pre><code><span class="type">TabView</span> {
  <span class="type">Text</span>(<span class="string">"FIVE STARS"</span>)
    .<span class="call">badge</span>(<span class="number">1</span>)
    .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"One"</span>, systemImage: <span class="string">"1.circle.fill"</span>) }
  <span class="type">Text</span>(<span class="string">"FIVE STARS"</span>)
    .<span class="call">badge</span>(<span class="number">2</span>)
    .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Two"</span>, systemImage: <span class="string">"2.circle.fill"</span>) }
  <span class="type">Text</span>(<span class="string">"FIVE STARS"</span>)
    .<span class="call">badge</span>(<span class="number">3</span>)
    .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Three"</span>, systemImage: <span class="string">"3.circle.fill"</span>) }
  <span class="type">Text</span>(<span class="string">"FIVE STARS"</span>)
    .<span class="call">badge</span>(<span class="number">4</span>)
    .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Four"</span>, systemImage: <span class="string">"4.circle.fill"</span>) }
  <span class="type">Text</span>(<span class="string">"STARS"</span>)
    .<span class="call">badge</span>(<span class="number">5</span>)
    .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Five"</span>, systemImage: <span class="string">"5.circle.fill"</span>) }
}
</code></pre><p><code>badge(_:)</code> accepts both numbers and strings, it's displayed when applied to <code>TabView</code> items and <code>Text</code> on <code>List</code>s:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-wwdc21/badgelist.png"/><pre><code><span class="type">List</span> {
  <span class="type">Text</span>(<span class="string">"See badge on the right üëâüèª"</span>)
    .<span class="call">badge</span>(<span class="number">5</span>)
  <span class="type">Button</span> {
    <span class="comment">// ...</span>
  } label: {
    <span class="type">Text</span>(<span class="string">"Button"</span>)
      .<span class="call">badge</span>(<span class="number">10</span>)
  }
}
</code></pre><h2>Property wrappers meet Optional RawRepresentable</h2><p>Last year we saw the introduction of both <code>@AppStorage</code> and <code>@SceneStorage</code>, which we covered <a href="https://www.fivestars.blog/articles/app-scene-storage">here</a>, this year both property wrappers gained the possibility to be associated with an optional <code>RawRepresentable</code> type:</p><pre><code><span class="keyword">extension</span> <span class="type">AppStorage</span> {
  <span class="keyword">public init</span>&lt;R: <span class="type">RawRepresentable</span>&gt;(
    <span class="keyword">_</span> key: <span class="type">String</span>, 
    store: <span class="type">UserDefaults</span>? = <span class="keyword">nil</span>
  ) <span class="keyword">where</span> <span class="type">Value</span> == <span class="type">R</span>?, <span class="type">R</span>.<span class="type">RawValue</span> == <span class="type">String</span>

  <span class="keyword">public init</span>&lt;R: <span class="type">RawRepresentable</span>&gt;(
    <span class="keyword">_</span> key: <span class="type">String</span>, 
    store: <span class="type">UserDefaults</span>? = <span class="keyword">nil</span>
  ) <span class="keyword">where</span> <span class="type">Value</span> == <span class="type">R</span>?, <span class="type">R</span>.<span class="type">RawValue</span> == <span class="type">Int</span>
}

<span class="keyword">extension</span> <span class="type">SceneStorage</span> {
  <span class="keyword">public init</span>&lt;R: <span class="type">RawRepresentable</span>&gt;(
    <span class="keyword">_</span> key: <span class="type">String</span>
  ) <span class="keyword">where</span> <span class="type">Value</span> == <span class="type">R</span>?, <span class="type">R</span>.<span class="type">RawValue</span> == <span class="type">String</span>

  <span class="keyword">public init</span>&lt;R: <span class="type">RawRepresentable</span>&gt;(
    <span class="keyword">_</span> key: <span class="type">String</span>
  ) <span class="keyword">where</span> <span class="type">Value</span> == <span class="type">R</span>?, <span class="type">R</span>.<span class="type">RawValue</span> == <span class="type">Int</span>
}
</code></pre><p>Allowing us to start with a blank state, without forcing us to choose a default value:</p><pre><code><span class="keyword">enum</span> Fruit: <span class="type">Int</span>, <span class="type">Identifiable</span>, <span class="type">CaseIterable</span> {
  <span class="keyword">case</span> banana
  <span class="keyword">case</span> orange
  <span class="keyword">case</span> mango

  <span class="keyword">var</span> id: <span class="type">Int</span> { rawValue }
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@AppStorage</span>(<span class="string">"fruit"</span>) <span class="keyword">private var</span> fruit: <span class="type">Fruit</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Picker</span>(<span class="string">"My Favorite Fruit"</span>, selection: $fruit) {
      <span class="type">ForEach</span>(<span class="type">Fruit</span>.<span class="property">allCases</span>, id: \.<span class="keyword">self</span>) {
        <span class="type">Text</span>(<span class="string">"</span>\($0)<span class="string">"</span> <span class="keyword">as</span> <span class="type">String</span>)
      }
    }.<span class="call">pickerStyle</span>(<span class="type">SegmentedPickerStyle</span>())
  }
}
</code></pre><blockquote><p>In this example, the picker will have no value selected at launch.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>This is just a sneak peek at some of the new SwiftUI changes from this year, we will explore many more during the rest of the summer:<br>if you haven't already, this is a great moment to subscribe to Five Stars's <a href="https://www.fivestars.blog/feed.rss">feed rss</a> or follow <a href="http://twitter.com/fiveStarsBlog">@FiveStarsBlog</a> on Twitter!</p><p>What are you most excited about WWDC21? <a href="http://twitter.com/zntfdr">Let me know</a>!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/wwdc-notes-2</guid><title>WWDC NOTES 2.0!</title><description>Just in time for WWDC21, WWDC NOTES 2 is live! Here's what's new!</description><link>https://www.fivestars.blog/articles/wwdc-notes-2</link><pubDate>Wed, 2 Jun 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Just in time for WWDC21, <a href="https://www.wwdcnotes.com">WWDC Notes 2</a> is out!</p><p><a href="https://www.wwdcnotes.com"><img src="https://www.fivestars.blog/assets/posts/wwdc-notes-2/home.png"/></a></p><p>Here's what's new:</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Design</h2><img src="https://www.fivestars.blog/assets/posts/wwdc-notes-2/design.png"/><p>From <a href="https://www.wwdcnotes.com">home</a> all the way to <a href="https://www.wwdcnotes.com/community/skhillon/">individual community members</a>, every page has a fresh new look.</p><p>A few highlights:</p><ul><li>more compact headers, new menu for quick links</li><li>improved overall readability</li><li>smart list layouts: pages listing notes pick the best layout based on the number of notes</li><li>note pages: session topics are highlighted along with the note event and track. Apple's session descriptions and contributors are improved as well.</li></ul><h2>Filters</h2><img src="https://www.fivestars.blog/assets/posts/wwdc-notes-2/browseby.png"/><p>It has always been possible to filter notes by <a href="https://www.wwdcnotes.com/events/">year</a> or <a href="https://www.wwdcnotes.com/tracks/">track</a> (<a href="https://www.wwdcnotes.com/tracks/Design/">Design</a>, <a href="https://www.wwdcnotes.com/tracks/DeveloperTools/">Developer Tools</a>, ...): there's now a finer way to do so by <a href="https://www.wwdcnotes.com/topics/">topics</a>. A few examples: <a href="https://www.wwdcnotes.com/topics/MachineLearningandVision/">machine learning</a>, <a href="https://www.wwdcnotes.com/topics/Networking/">networking</a>, <a href="https://www.wwdcnotes.com/topics/AppStoreConnect/">App Store Connect</a>, <a href="https://www.wwdcnotes.com/topics/HealthandFitness/">health</a> and <a href="https://www.wwdcnotes.com/topics/">many more</a>.</p><p>Each note shows its topic(s) under their page title as well.</p><p>Similarly to topics, WWDC Notes now features <a href="https://www.wwdcnotes.com/tags/">over <strong>one-thousand</strong> tags</a>: if topics are still too broad, tags will definitively help. A few examples: <a href="https://www.wwdcnotes.com/tags/swiftui/">SwiftUI</a>, <a href="https://www.wwdcnotes.com/tags/performance/">performance</a>, <a href="https://www.wwdcnotes.com/tags/widgets/">widgets</a>, and <a href="https://www.wwdcnotes.com/tags/">many more</a>.</p><p><a href="https://www.wwdcnotes.com/topics/">Browse all topics</a>.<br><a href="https://www.wwdcnotes.com/tags/">Browse all tags</a>.</p><h2>Assets</h2><img src="https://www.fivestars.blog/assets/posts/wwdc-notes-2/assets.png"/><p>I reviewed all current 300+ notes and <a href="https://github.com/FiveStarsBlog/WWDCNotes/pull/129/">replaced over 130 images</a> with actual text and code: not only WWDC Notes now loads faster, but it's also much more accessible for everyone.</p><p>Speaking of images, <a href="https://github.com/FiveStarsBlog/WWDCNotes">WWDC Notes's repository</a> now comes with <a href="https://github.com/apps/imgbot">ImgBot</a>, which automatically optimizes the size of every image added to the repository. This lets the community focus on the notes, while Imgbot takes care of assets optimization.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>And much more!</h2><p>These are just a few of the many new updates on the website, please feel free to <a href="https://www.wwdcnotes.com">check out the new website</a> and I look forward to welcome <a href="https://www.wwdcnotes.com/what-s-missing/">your notes</a>!</p><p>Thank you for reading and I wish you a great WWDC 2021!</p><h2>ICYMI</h2><p>Here is a small recap of some iterations that went live before this big 2.0 release:</p><ul><li>New <code>Latest updates</code> home section highlighting updates on existing notes</li><li>New twitter account! Follow <a href="https://twitter.com/wwdcnotes">@wwdcnotes</a> to not miss new notes!</li><li>The <a href="https://www.wwdcnotes.com/feed.rss">feed RSS</a> is stricter on when it updates</li><li>All notes come with <a href="https://twitter.com/wwdcnotes">social media previews</a></li><li>Each note showcases related sessions</li><li><a href="https://chrome.google.com/webstore/detail/wwdcnotes-button/afkhgncidjoehjglihnijhalfkdfdcbc">New Chrome extension</a> to add notes directly from Apple's <a href="https://developer.apple.com/videos/">WWDC website</a> (by community member <a href="https://www.wwdcnotes.com/community/skhillon/">Sarthak Khillon</a>)</li><li>New <a href="https://www.wwdcnotes.com/what-s-missing/"><code>Add a new note</code></a> button on top of each page</li><li>New <a href="https://www.wwdcnotes.com/what-s-missing/"><code>What's missing</code></a> page listing all sessions without notes (yet!)</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-patterns-closures</guid><title>SwiftUI patterns: view closures</title><description>A tour into how SwiftUI has replaced UIKit's Target-Action design pattern</description><link>https://www.fivestars.blog/articles/swiftui-patterns-closures</link><pubDate>Tue, 25 May 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Swift's introduction brought us significant shifts in the way we build products. For example, we went from...</p><ul><li>...<code>everything is an object</code> to <code>everything is a protocol</code> (admittedly, we took this one <em>too much</em> to the letter)</li><li>...<code>everything is a class</code> to <code>prefer value types wherever possible</code></li></ul><p>A paradigm that didn't make it into Swift is the <a href="https://developer.apple.com/library/archive/documentation/General/Conceptual/Devpedia-CocoaApp/TargetAction.html"><code>Target-Action</code> design pattern</a>.</p><p>If we take a pre-iOS 14 <code>UIButton</code> for example, we used to do the following to link an action to a button:</p><pre><code><span class="keyword">final class</span> FSViewController: <span class="type">UIViewController</span> {
  ...

  <span class="keyword">override func</span> viewDidLoad() {
    <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
    <span class="call">setupViews</span>()
  }
    
  <span class="keyword">private func</span> setupViews() {
    <span class="keyword">let</span> button = <span class="type">UIButton</span>(type: .<span class="dotAccess">system</span>)
    button.<span class="call">addTarget</span>(
      <span class="keyword">self</span>,
      action: <span class="keyword">#selector</span>(<span class="call">didTapButton</span>(<span class="keyword">_</span>:)),
      for: .<span class="dotAccess">touchUpInside</span>
    )
    ...
  }

  <span class="keyword">@objc private func</span> didTapButton(<span class="keyword">_</span> sender: <span class="type">UIButton</span>) {
    <span class="comment">// button action here</span>
  }
}
</code></pre><p>Things got better in iOS 14, with a new, more Swifty, <a href="https://developer.apple.com/documentation/uikit/uiaction"><code>UIAction</code></a> API:</p><pre><code><span class="keyword">final class</span> FSViewController: <span class="type">UIViewController</span> {
  ...

  <span class="keyword">override func</span> viewDidLoad() {
    <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
    <span class="call">setupViews</span>()
  }
    
  <span class="keyword">private func</span> setupViews() {
    <span class="keyword">let</span> button = <span class="type">UIButton</span>(
      primaryAction: <span class="type">UIAction</span> { <span class="keyword">_ in</span>
        <span class="comment">// button action here</span>
      }
    )
    ...
  }
}
</code></pre><p>All of this was necessary because UIKit's buttons, and many other components such as <code>UISlider</code> and <code>UIDatePicker</code>, were a subclass of <a href="https://developer.apple.com/documentation/uikit/uicontrol"><code>UIControl</code></a>, which is based on the <code>Target-Action</code> pattern.</p><p>At the time, things had to work this way for many reasons, such as linking <code>@IBAction</code> methods to storyboard components/triggers.</p><p>When it comes to SwiftUI, the team at Apple had a chance to start fresh, Swift-first, and with no legacies:<br>in this article, let's see how they replaced the <code>Target-Action</code> pattern with view closures, and more.</p><blockquote><p>This article focuses on closures accepted on view initialization and triggered when certain events happen, for closures used to build views, refer to <a href="https://www.fivestars.blog/articles/swiftui-patter-passing-views/">SwiftUI patterns: passing &amp; accepting views</a>.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Buttons</h2><pre><code><span class="comment">// Definition</span>
<span class="keyword">struct</span> Button&lt;Label: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">init</span>(action: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>, <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>)
  <span class="keyword">init</span>(<span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, action: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>)
  <span class="keyword">init</span>&lt;S&gt;(<span class="keyword">_</span> title: <span class="type">S</span>, action: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) <span class="keyword">where</span> <span class="type">S</span> : <span class="type">StringProtocol</span>
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(<span class="string">"tap me"</span>) { 
      <span class="comment">// button action here</span>
    }
  }
}
</code></pre><p>Creating a button without an associated action would probably make any app look broken:<br>in SwiftUI, the <code>action</code> closure is a required parameter of <code>Button</code>'s initialization.</p><p>We can no longer "just" forget to associate an action to its button, or mistakenly associate more than one action to any given button. This approach solves the previous challenges right from the start.</p><h2>TextField/SecureField</h2><pre><code><span class="comment">// Definition</span>
<span class="keyword">extension</span> <span class="type">TextField</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">Text</span> {
  <span class="keyword">init</span>(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
    text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    onCommit: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span> = {}
  )

  <span class="keyword">init</span>&lt;S: <span class="type">StringProtocol</span>&gt;(
    <span class="keyword">_</span> title: <span class="type">S</span>, 
    text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    onCommit: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span> = {}
  )

  <span class="keyword">init</span>&lt;T&gt;(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
    value: <span class="type">Binding</span>&lt;<span class="type">T</span>&gt;, 
    formatter: <span class="type">Formatter</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    onCommit: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span> = {}
  )

  <span class="keyword">init</span>&lt;S: <span class="type">StringProtocol</span>, T&gt;(
    <span class="keyword">_</span> title: <span class="type">S</span>, 
    value: <span class="type">Binding</span>&lt;<span class="type">T</span>&gt;, 
    formatter: <span class="type">Formatter</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    onCommit: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span> = {}
  )
}

<span class="keyword">extension</span> <span class="type">SecureField</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">Text</span> {
  <span class="keyword">init</span>(<span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;, onCommit: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span> = {})
  <span class="keyword">init</span>&lt;S: <span class="type">StringProtocol</span>&gt;(<span class="keyword">_</span> title: <span class="type">S</span>, text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;, onCommit: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span> = {})
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> username = <span class="string">""</span>
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">TextField</span>(
        <span class="string">"Username:"</span>, 
        text: $username, 
        onEditingChanged: { isOnFocus <span class="keyword">in</span> 
          <span class="comment">// ...</span>
        }, 
        onCommit: {
          <span class="comment">// ...</span>
        }
      )

      <span class="type">TextField</span>(<span class="string">"Username:"</span>, text: $username)
    }
  }
}
</code></pre><p><code>TextField</code> comes with two optional closures:</p><ol><li><code>onEditingChanged</code>, triggered when the associated <code>TextField</code> becomes first responder and when it relinquishes its first responder status</li><li><code>onCommit</code>, triggered when the user taps the associated <code>TextField</code> keyboard action key (e.g. <code>Search</code>, <code>Go</code>, or, more commonly, <code>Return</code>).</li></ol><p>Both these actions are not required to make any <code>TextField</code> work, which is why both parameters come with a default value (that does nothing).</p><p>Sometimes, we would like to trigger some side effects while the user is typing into the <code>TextField</code>: for example, to do some validation on the input (for email or password criteria, or ..).</p><p>With UIKit's <code>Target-Action</code> approach, this was easy: at every text change, our action was triggered, which we could then use to both fetch the current text value, and trigger our side effect.</p><p>In SwiftUI, there doesn't seem to be a direct equivalent. However, it's right in front of us: it's the <code>text: Binding&lt;String&gt;</code> parameter.</p><p>The binding main function is to have a single source of truth: the value our app sees is the same as the value displayed in the <code>TextField</code> (unlike UIKit, where each <code>UITextField</code> had its storage, and our view/view controller would have another one).</p><p>However, because it's a binding, we can observe its changes with iOS 14's <a href="https://developer.apple.com/documentation/swiftui/text/onchange(of:perform:)"><code>onChange(of:perform:)</code></a> view modifier:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> username = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(<span class="string">"Username:"</span>, text: $username)
      .<span class="call">onChange</span>(of: username, perform: <span class="call">validate</span>(<span class="keyword">_</span>:))
  }

  <span class="keyword">func</span> validate(<span class="keyword">_</span> username: <span class="type">String</span>) {
    <span class="comment">// validate here</span>
  }
}
</code></pre><p>If we're targeting iOS 13, the same can be done by providing our own binding, for example:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> username = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> binding = <span class="type">Binding</span> {
      username
    } set: {
      <span class="call">validate</span>($0)
      username = $0
    }

    <span class="type">TextField</span>(<span class="string">"Username:"</span>, text: binding)
  }

  <span class="keyword">func</span> validate(<span class="keyword">_</span> username: <span class="type">String</span>) {
    <span class="comment">// validate here</span>
  }
}
</code></pre><p>SwiftUI's Bindings are SwiftUI's most elegant replacement of UIKit's <code>Target-Action</code> pattern: they beautifully solve data synchronization challenges and other kinds of bugs.</p><blockquote><p>We took a deep dive into all SwiftUI bindings in another article of the series <a href="https://www.fivestars.blog/articles/swiftui-patterns-bindings/">SwiftUI patterns: @Bindings</a>.</p></blockquote><h2>Sliders</h2><pre><code><span class="comment">// Definition</span>
<span class="keyword">extension</span> <span class="type">Slider</span> {
  <span class="keyword">init</span>&lt;V&gt;(
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    <span class="keyword">in</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">V</span>&gt; = <span class="number">0</span>...<span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    minimumValueLabel: <span class="type">ValueLabel</span>, 
    maximumValueLabel: <span class="type">ValueLabel</span>, 
    <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>
  ) <span class="keyword">where</span> <span class="type">V</span>: <span class="type">BinaryFloatingPoint</span>, <span class="type">V</span>.<span class="type">Stride</span>: <span class="type">BinaryFloatingPoint</span>

  <span class="keyword">init</span>&lt;V&gt;(
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    <span class="keyword">in</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">V</span>&gt;, 
    step: <span class="type">V</span>.<span class="type">Stride</span> = <span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    minimumValueLabel: <span class="type">ValueLabel</span>, 
    maximumValueLabel: <span class="type">ValueLabel</span>, 
    <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>
  ) <span class="keyword">where</span> <span class="type">V</span>: <span class="type">BinaryFloatingPoint</span>, <span class="type">V</span>.<span class="type">Stride</span>: <span class="type">BinaryFloatingPoint</span>
}

<span class="keyword">extension</span> <span class="type">Slider</span> <span class="keyword">where</span> <span class="type">ValueLabel</span> == <span class="type">EmptyView</span> {
  <span class="keyword">init</span>&lt;V&gt;(
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    <span class="keyword">in</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">V</span>&gt; = <span class="number">0</span>...<span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>
  ) <span class="keyword">where</span> <span class="type">V</span>: <span class="type">BinaryFloatingPoint</span>, <span class="type">V</span>.<span class="type">Stride</span>: <span class="type">BinaryFloatingPoint</span>
  
  <span class="keyword">init</span>&lt;V&gt;(
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    <span class="keyword">in</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">V</span>&gt;, 
    step: <span class="type">V</span>.<span class="type">Stride</span> = <span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>
  ) <span class="keyword">where</span> <span class="type">V</span>: <span class="type">BinaryFloatingPoint</span>, <span class="type">V</span>.<span class="type">Stride</span>: <span class="type">BinaryFloatingPoint</span>
  
  <span class="keyword">init</span>&lt;V&gt;(
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    <span class="keyword">in</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">V</span>&gt; = <span class="number">0</span>...<span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }
  ) <span class="keyword">where</span> <span class="type">V</span>: <span class="type">BinaryFloatingPoint</span>, <span class="type">V</span>.<span class="type">Stride</span>: <span class="type">BinaryFloatingPoint</span>
  
  <span class="keyword">init</span>&lt;V&gt;(
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    <span class="keyword">in</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">V</span>&gt;, 
    step: <span class="type">V</span>.<span class="type">Stride</span> = <span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }
  ) <span class="keyword">where</span> <span class="type">V</span>: <span class="type">BinaryFloatingPoint</span>, <span class="type">V</span>.<span class="type">Stride</span>: <span class="type">BinaryFloatingPoint</span>
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> value = <span class="number">5.0</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Slider</span>(value: $value, in: <span class="number">1</span>...<span class="number">10</span>) { isOnFocus <span class="keyword">in</span>
      <span class="comment">// ..</span>
    }
  }
}
</code></pre><blockquote><p>Did you know that <code>Slider</code> <a href="https://twitter.com/zntfdr/status/1382569553910059008">uses styles internally</a>? We might be able to define our own soon! (FB9079800)</p></blockquote><p>Similar to <code>TextField</code>, <code>Slider</code> comes with an <code>onEditingChanged</code> closure used to communicate the focus status. Besides this, the binding takes care of everything.</p><h2>Steppers</h2><p>Stepper comes in two forms:</p><ol><li>a binding form</li><li>a free form</li></ol><h3>Stepper binding form</h3><pre><code><span class="comment">// Definition</span>
<span class="keyword">extension</span> <span class="type">Stepper</span> {
  <span class="keyword">init</span>&lt;V: <span class="type">Strideable</span>&gt;(
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    step: <span class="type">V</span>.<span class="type">Stride</span> = <span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>
  )
        
  <span class="keyword">init</span>&lt;V: <span class="type">Strideable</span>&gt;(
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    <span class="keyword">in</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">V</span>&gt;, 
    step: <span class="type">V</span>.<span class="type">Stride</span> = <span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>
  )
}

<span class="keyword">extension</span> <span class="type">Stepper</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">Text</span> {
  <span class="keyword">init</span>&lt;V: <span class="type">Strideable</span>&gt;(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    step: <span class="type">V</span>.<span class="type">Stride</span> = <span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }
  )
  
  <span class="keyword">init</span>&lt;S: <span class="type">StringProtocol</span>, V: <span class="type">Strideable</span>&gt;(
    <span class="keyword">_</span> title: <span class="type">S</span>, 
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    step: <span class="type">V</span>.<span class="type">Stride</span> = <span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }
  )
  
  <span class="keyword">init</span>&lt;V: <span class="type">Strideable</span>&gt;(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    <span class="keyword">in</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">V</span>&gt;, 
    step: <span class="type">V</span>.<span class="type">Stride</span> = <span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }
  )
  
  <span class="keyword">init</span>&lt;S: <span class="type">StringProtocol</span>, V: <span class="type">Strideable</span>&gt;(
    <span class="keyword">_</span> title: <span class="type">S</span>, value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    <span class="keyword">in</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">V</span>&gt;, 
    step: <span class="type">V</span>.<span class="type">Stride</span> = <span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> value = <span class="number">5</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Stepper</span>(<span class="string">"Value:"</span>, value: $value, step: <span class="number">1</span>) { isOnFocus <span class="keyword">in</span>
      <span class="comment">// ..</span>
    }
  }
}
</code></pre><p>In this form, we're essentially looking at a component similar to <code>Slider</code>, just with a different look.</p><h3>Stepper free form</h3><pre><code><span class="comment">// Definition</span>
<span class="keyword">extension</span> <span class="type">Stepper</span> {
  <span class="keyword">init</span>(
    onIncrement: (() -&gt; <span class="type">Void</span>)?, 
    onDecrement: (() -&gt; <span class="type">Void</span>)?, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>
  )
}

<span class="keyword">extension</span> <span class="type">Stepper</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">Text</span> {
  <span class="keyword">init</span>(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
    onIncrement: (() -&gt; <span class="type">Void</span>)?, 
    onDecrement: (() -&gt; <span class="type">Void</span>)?, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }
  )
  
  <span class="keyword">init</span>&lt;S: <span class="type">StringProtocol</span>&gt;(
    <span class="keyword">_</span> title: <span class="type">S</span>, 
    onIncrement: (() -&gt; <span class="type">Void</span>)?, 
    onDecrement: (() -&gt; <span class="type">Void</span>)?, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Stepper</span>(
      <span class="string">"Value"</span>,
      onIncrement: {
        <span class="comment">// called on increment tap</span>
      }, onDecrement: {
        <span class="comment">// called on decrement tap</span>
      }) { isOnFocus <span class="keyword">in</span>
      <span class="comment">//</span>
    }
  }
}
</code></pre><p>The SwiftUI team could have stopped at the <code>@Binding</code> form, instead, they went ahead and provided us a more generic and stateless <code>Stepper</code> to be used as we please.</p><p>This form offers three closures:</p><ol><li><code>onIncrement</code>, triggered when the user taps the increment button</li><li><code>onDecrement</code>, equivalent to the above for the decrement button</li><li><code>onEditingChanged</code>, for the usual focus event</li></ol><p><code>onIncrement</code> and <code>onDecrement</code> closures replace <code>UIStepper</code>'s single <code>.valueChanged</code> event, removing the need for our views to distinguish and manage these events ourselves.</p><p>Note also how <code>onIncrement</code> and <code>onDecrement</code> do not come with a default value, meaning that we cannot mistakenly define a stepper that does nothing, e.g. <code>Stepper("Value")</code>.</p><p>Instead, while both <code>onIncrement</code> and <code>onDecrement</code> are optional, we're required to define them ourselves.</p><p>If we really want a <code>Stepper</code> that does nothing, we'd need to write <code>Stepper("Value", onIncrement: nil, onDecrement: nil)</code>. I'm sure any PR reviewer would have some questions, though!</p><h2>SubscriptionView</h2><p>For completeness's sake, the last public SwiftUI view making uses of closures is a view that has no UIKit equivalent, as it's a SwiftUI implementation detail:</p><pre><code><span class="keyword">struct</span> SubscriptionView&lt;PublisherType: <span class="type">Publisher</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">PublisherType</span>.<span class="type">Failure</span> == <span class="type">Never</span> {
  <span class="keyword">init</span>(
    content: <span class="type">Content</span>, 
    publisher: <span class="type">PublisherType</span>, 
    action: <span class="keyword">@escaping</span> (<span class="type">PublisherType</span>.<span class="type">Output</span>) -&gt; <span class="type">Void</span>
  )
}
</code></pre><p><code>SubscriptionView</code> is a view that takes in:</p><ul><li>another view via the <code>content</code> parameter, which is what we will display on the screen</li><li>a publisher, which <code>SubscriptionView</code> will subscribe to</li><li>an <code>action</code> closure, triggered when said publisher publishes anything</li></ul><p>In other words, it associates an observer + action to another view, for example:</p><pre><code><span class="type">SubscriptionView</span>(
  content: <span class="type">FSView</span>(),
  publisher: <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">publisher</span>(for: <span class="type">UIApplication</span>.<span class="property">didBecomeActiveNotification</span>),
  action: { output <span class="keyword">in</span>
    <span class="comment">// received didBecomeActiveNotification</span>
  }
)
</code></pre><p>Which is equivalent to writing:</p><pre><code><span class="type">FSView</span>()
  .<span class="call">onReceive</span>(<span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">publisher</span>(for: <span class="type">UIApplication</span>.<span class="property">didBecomeActiveNotification</span>)) { <span class="keyword">_ in</span>
    <span class="comment">// received didBecomeActiveNotification</span>
  }
</code></pre><p>Using the same technique from <a href="https://www.fivestars.blog/articles/inspecting-views/">Inspecting SwiftUI views</a>, we see that these two views are indeed identical, making <code>SubscriptionView</code> an implementation detail of <code>onReceive(_:perform:)</code>, here's the <code>Mirror</code> output for both views:</p><pre><code><span class="type">SubscriptionView</span>&lt;<span class="type">Publisher</span>, <span class="type">FSView</span>&gt;(
  content: <span class="type">FSView</span>,
  publisher: <span class="type">Publisher</span>(
    center: <span class="type">NSNotificationCenter</span>,
    name: <span class="type">NSNotificationName</span>(
      _rawValue: <span class="type">__NSCFConstantString</span>
    ),
    object: <span class="type">Optional</span>&lt;<span class="type">AnyObject</span>&gt;
  ),
  action: (<span class="type">Notification</span>) -&gt; ()
)
</code></pre><p>When building our own views, the preferred way is using <code>onReceive(_:perform:)</code>.</p><h2>Recap</h2><p>It's always interesting to see how SwiftUI takes old patterns and replaces them with a more modern approach. Here's a quick summary of all view closures used in SwiftUI views:</p><ul><li><code>Button</code> definitions take in an <code>action: @escaping () -&gt; Void</code> parameter</li><li><code>TextField</code>s come with two closure with default values <code>onEditingChanged: @escaping (Bool) -&gt; Void = { _ in }</code>, and <code>onCommit: @escaping () -&gt; Void = {}</code></li><li><code>SecureField</code>s come only with the <code>onCommit: @escaping () -&gt; Void = {}</code> closure</li><li><code>Slider</code>s also come with <code>onEditingChanged: @escaping (Bool) -&gt; Void = { _ in }</code></li><li><code>Stepper</code>s come in two forms:<ul><li>in the binding form, they come only with <code>onEditingChanged: @escaping (Bool) -&gt; Void = { _ in }</code></li><li>in the free form, beside the usual <code>onEditingChanged</code> closure, they also have optional <code>onIncrement: (() -&gt; Void)?</code> and <code>onDecrement: (() -&gt; Void)?</code> closures</li></ul></li></ul><ul><li>Lastly, SwiftUI's implementation detail <code>SubscriptionView</code> comes with a <code>action: @escaping (PublisherType.Output) -&gt; Void</code> closure parameter</li></ul><p>The rule seems to be:</p><ul><li>use <code>action</code> when the closure is a core part of the view definition</li><li>use <code>onEditingChanged: @escaping (Bool) -&gt; Void = { _ in }</code> for the view focus</li><li>use <code>on...</code> when the closure is triggered only on associated event (in the name of the parameter), and provide a default implementation when it's not a core part of the view definition</li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>This article explored how SwiftUI has replaced UIKit's <code>Target-Action</code> pattern with bindings and Swift closures.</p><p>These replacements are a core part of what makes SwiftUI what it is:</p><ul><li>by using bindings, we eliminate all possible inconsistencies that come with having multiple sources of truth</li><li>by requiring all view closures directly in their initializers, it's clear from the start what each view offers out of the box, and it's far less likely to misuse or misunderstand any view</li></ul><p>What other patterns have you seen emerge or sunset?<br>Please let me know via <a href="mailto:hello@fivestars.blog">email</a> or <a href="https://twitter.com/zntfdr">twitter</a>, thank you for reading!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-introspect</guid><title>SwiftUI Introspect</title><description>A deep dive into one of the must-have libraries for any SwiftUI app!</description><link>https://www.fivestars.blog/articles/swiftui-introspect</link><pubDate>Tue, 18 May 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>When it comes to building apps, SwiftUI guarantees iteration times that were not possible before.</p><p>SwiftUI can probably cover about 95% of any modern app needs, with the last 5% being polishing SwiftUI's rough edges by falling back on one of the previous UI frameworks.</p><p>In <a href="https://www.fivestars.blog/articles/how-to-customize-textfields/">Four ways to customize TextFields</a>, we've seen the two main fallback methods:</p><ul><li>SwiftUI's <code>UIViewRepresentable</code>/<code>NSViewRepresentable</code></li><li><a href="https://github.com/siteline/SwiftUI-Introspect ">SwiftUI Introspect</a></li></ul><p>In this article, let's take a look at SwiftUI Introspect.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>What's SwiftUI Introspect</h2><p>SwiftUI Introspect is an <a href="https://github.com/siteline/SwiftUI-Introspect ">open-source library</a> created by <a href="https://loisdiqual.com">Lo√Øs Di Qual</a>. Its primary purpose is to fetch and modify the underlying UIKit or AppKit elements of any SwiftUI view.</p><p>This is possible thanks to many SwiftUI views (still) relying on their UIKit/AppKit counterparts, for example:</p><ul><li>in macOS, <code>Button</code> uses <code>NSButton</code> behind the scenes</li><li>in iOS, <code>TabView</code> uses a <code>UITabBarController</code> behind the scenes</li></ul><p>We rarely need to know such implementation details. However, knowing so gives us yet another powerful tool we can reach for when needed. This is precisely where SwiftUI Introspect comes in.</p><h2>Using SwiftUI Introspect</h2><p>SwiftUI Introspect provides us a <a href="https://github.com/siteline/SwiftUI-Introspect/blob/72a509c93166540c0adf8323fd2652daade7f9f6/Introspect/ViewExtensions.swift">series of view modifiers</a> following the <code>func introspectX(customize: @escaping (Y) -&gt; ()) -&gt; some View</code> pattern, where:</p><ul><li><code>X</code> is the view we're targeting</li><li><code>Y</code> is the underlying UIKit/AppKit view/view-controller type we'd like to reach for</li></ul><p>Let's say that we'd like to remove the bouncing effect from a <code>ScrollView</code>.<br>Currently, there's no SwiftUI parameter/modifier letting us do so (FB9106829).</p><p><code>ScrollView</code> uses UIKit's <code>UIScrollView</code> behind the scenes, and AppKit's <code>NSScrollView</code> in macOS. We can use Introspect's <code>func introspectScrollView(customize: @escaping (UIScrollView) -&gt; ()) -&gt; some View</code> to grab the underlying <code>UIScrollView</code>, and disable the bouncing:</p><pre><code><span class="keyword">import</span> Introspect
<span class="keyword">import</span> SwiftUI

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {
      <span class="type">VStack</span> {
        <span class="type">Color</span>.<span class="property">red</span>.<span class="call">frame</span>(height: <span class="number">300</span>)
        <span class="type">Color</span>.<span class="property">green</span>.<span class="call">frame</span>(height: <span class="number">300</span>)
        <span class="type">Color</span>.<span class="property">blue</span>.<span class="call">frame</span>(height: <span class="number">300</span>)
      }
      .<span class="call">introspectScrollView</span> { $0.<span class="property">bounces</span> = <span class="keyword">false</span> }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-introspect/scroll.gif"/><p>In iOS, users can dismiss sheets by swiping them down. In UIKit, we can prevent this behavior via the <a href="https://developer.apple.com/documentation/uikit/uiviewcontroller/3229894-ismodalinpresentation"><code>isModalInPresentation</code></a> <code>UIViewController</code> property, letting our app logic control the sheet presentation. In SwiftUI, we don't have an equivalent way to do so yet (FB9106857).</p><p>Once again, we can use Introspect to grab the presenting sheet <code>UIViewController</code>, and set the <code>isModalInPresentation</code> property:</p><pre><code><span class="keyword">import</span> Introspect
<span class="keyword">import</span> SwiftUI

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showingSheet = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(<span class="string">"Show sheet"</span>) { showingSheet.<span class="call">toggle</span>() }
      .<span class="call">sheet</span>(isPresented: $showingSheet) {
        <span class="type">Button</span>(<span class="string">"Dismiss sheet"</span>) { showingSheet.<span class="call">toggle</span>() }
          .<span class="call">introspectViewController</span> { $0.<span class="property">isModalInPresentation</span> = <span class="keyword">true</span> }
      }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-introspect/sheet.gif"/><p>Other examples:</p><ul><li>add <a href="https://github.com/siteline/SwiftUIRefresh/blob/fa8fac7b5eb5c729983a8bef65f094b5e0d12014/Sources/PullToRefresh.swift">pull to refresh</a> to <code>List</code>s (FB8506858)</li><li>add <a href="https://www.fivestars.blog/articles/how-to-customize-textfields/">toolbars</a> to <code>TextField</code>s (see <a href="https://www.fivestars.blog/articles/how-to-customize-textfields/"><code>The introspect way</code> paragraph</a>, FB9081641)</li><li>...and <a href="https://github.com/siteline/SwiftUI-Introspect/blob/master/IntrospectExamples/ContentView.swift">much more</a>.</li></ul><p>Imagine having to re-implement a whole complex screen in UIKit/AppKit because of a minor feature missing in SwiftUI: Introspect is an incredible time (life?) saver.</p><p>We've seen its clear benefits: next, let's uncover how SwiftUI Introspect works.</p><h2>How SwiftUI Introspect works</h2><blockquote><p>We will take the UIKit route: beside the <code>UI</code>/<code>NS</code> prefixes, AppKit's code is identical.</p></blockquote><p>The code shown in the article has been slightly adjusted for clarity's sake. The original implementation is available in <a href="https://github.com/siteline/SwiftUI-Introspect ">SwiftUI Introspect's repository</a>.</p><h3>The injection</h3><p>As shown in the examples above, Introspect provides us various view modifiers. If we look at their implementation, they all follow a similar pattern. Here's one example:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="comment">/// Finds a `UITextView` from a `TextEditor`</span>
  public <span class="keyword">func</span> introspectTextView(
    customize: <span class="keyword">@escaping</span> (<span class="type">UITextView</span>) -&gt; ()
  ) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">introspect</span>(
      selector: <span class="type">TargetViewSelector</span>.<span class="property">siblingContaining</span>, 
      customize: customize
    )
  }
}
</code></pre><p>All these public <code>introspectX(customize:)</code> view modifiers are convenience implementations of a more generic <code>introspect(selector:customize:)</code> one:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {   
  <span class="comment">/// Finds a `TargetView` from a `SwiftUI.View`</span>
  public <span class="keyword">func</span> introspect&lt;TargetView: <span class="type">UIView</span>&gt;(
    selector: <span class="keyword">@escaping</span> (<span class="type">IntrospectionUIView</span>) -&gt; <span class="type">TargetView</span>?,
    customize: <span class="keyword">@escaping</span> (<span class="type">TargetView</span>) -&gt; ()
  ) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">inject</span>(
      <span class="type">UIKitIntrospectionView</span>(
        selector: selector,
        customize: customize
      )
    )
  }
}
</code></pre><p>Here we see the introduction of one more <code>inject(_:)</code> <code>View</code> modifier, and the first Introspect view, <code>UIKitIntrospectionView</code>:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">public func</span> inject&lt;SomeView: <span class="type">View</span>&gt;(<span class="keyword">_</span> view: <span class="type">SomeView</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">overlay</span>(view.<span class="call">frame</span>(width: <span class="number">0</span>, height: <span class="number">0</span>))
  }
}
</code></pre><p><code>inject(_:)</code> takes our original view and adds on top an overlay with the given view, with its frame minimized.</p><p>For example, if we have the following view:</p><pre><code><span class="type">TextView</span>(...)
  .<span class="call">introspectTextView</span> { ... }
</code></pre><p>The final view will be:</p><pre><code><span class="type">TextView</span>(...)
  .<span class="call">overlay</span>(<span class="type">UIKitIntrospectionView</span>(...).<span class="call">frame</span>(width: <span class="number">0</span>, height: <span class="number">0</span>))
</code></pre><p>Let's take a look at <code>UIKitIntrospectionView</code> next:</p><pre><code><span class="keyword">public struct</span> UIKitIntrospectionView&lt;TargetViewType: <span class="type">UIView</span>&gt;: <span class="type">UIViewRepresentable</span> {
  <span class="keyword">let</span> selector: (<span class="type">IntrospectionUIView</span>) -&gt; <span class="type">TargetViewType</span>?
  <span class="keyword">let</span> customize: (<span class="type">TargetViewType</span>) -&gt; <span class="type">Void</span>

  <span class="keyword">public func</span> makeUIView(
    context: <span class="type">UIViewRepresentableContext</span>&lt;<span class="type">UIKitIntrospectionView</span>&gt;
  ) -&gt; <span class="type">IntrospectionUIView</span> {
    <span class="keyword">let</span> view = <span class="type">IntrospectionUIView</span>()
    view.<span class="property">accessibilityLabel</span> = <span class="string">"IntrospectionUIView&lt;</span>\(<span class="type">TargetViewType</span>.<span class="keyword">self</span>)<span class="string">&gt;"</span>
    <span class="keyword">return</span> view
  }

  <span class="keyword">public func</span> updateUIView(
    <span class="keyword">_</span> uiView: <span class="type">IntrospectionUIView</span>,
    context: <span class="type">UIViewRepresentableContext</span>&lt;<span class="type">UIKitIntrospectionView</span>&gt;
  ) {
    <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> {
      <span class="keyword">guard let</span> targetView = <span class="keyword">self</span>.<span class="call">selector</span>(uiView) <span class="keyword">else</span> { <span class="keyword">return</span> }
      <span class="keyword">self</span>.<span class="call">customize</span>(targetView)
    }
  }
}
</code></pre><p><code>UIKitIntrospectionView</code> is Introspect's bridge to UIKit, which does two things:</p><ol><li>injects an <code>IntrospectionUIView</code> <code>UIView</code> in the hierarchy</li><li>reacts to <code>UIViewRepresentable</code>'s <code>updateUIView</code> life-cycle event (more on this later)</li></ol><p>This is <code>IntrospectionUIView</code>'s definition:</p><pre><code><span class="keyword">public class</span> IntrospectionUIView: <span class="type">UIView</span> {
  <span class="keyword">required init</span>() {
    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: .<span class="dotAccess">zero</span>)
    isHidden = <span class="keyword">true</span>
    isUserInteractionEnabled = <span class="keyword">false</span>
  }
}
</code></pre><p><code>IntrospectionUIView</code> is a minimal, hidden, and noninteractive <code>UIView</code>: its whole purpose is to give SwiftUI Introspect an entry point into UIKit's hierarchy.</p><p>In conclusion, all <code>.introspectX(customize:)</code> view modifiers overlay a tiny, invisible, noninteractive view on top of our original view, making sure that it doesn't affect our final UI.</p><h3>The crawling</h3><p>We've now seen how SwiftUI Introspect reaches the UIKit hierarchy. All it's left to do for the library is to find the UIKit view/view-controller we're looking for.</p><p>Going back to <code>UIKitIntrospectionView</code>'s implementation, the magic happens in <code>updateUIView(_:context)</code>, which is one of the <code>UIViewRepresentable</code> life-cycle methods:</p><pre><code><span class="keyword">public struct</span> UIKitIntrospectionView&lt;TargetViewType: <span class="type">UIView</span>&gt;: <span class="type">UIViewRepresentable</span> {
  <span class="keyword">let</span> selector: (<span class="type">IntrospectionUIView</span>) -&gt; <span class="type">TargetViewType</span>?
  <span class="keyword">let</span> customize: (<span class="type">TargetViewType</span>) -&gt; <span class="type">Void</span>

  ...

  <span class="keyword">public func</span> updateUIView(
    <span class="keyword">_</span> uiView: <span class="type">IntrospectionUIView</span>,
    context: <span class="type">UIViewRepresentableContext</span>&lt;<span class="type">UIKitIntrospectionView</span>&gt;
  ) {
    <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> {
      <span class="keyword">guard let</span> targetView = <span class="keyword">self</span>.<span class="call">selector</span>(uiView) <span class="keyword">else</span> { <span class="keyword">return</span> }
      <span class="keyword">self</span>.<span class="call">customize</span>(targetView)
    }
  }
}
</code></pre><p>In <code>UIKitIntrospectionView</code>'s case, this method is called by SwiftUI mainly in two scenarios:</p><ul><li>when <code>IntrospectionUIView</code> is about to be added into the view hierarchy</li><li>when <code>IntrospectionUIView</code> is about to be removed from the view hierarchy</li></ul><p>The <code>async</code> dispatch has two functions:</p><ol><li>if the method is called when the view is about to be added into the view hierarchy, we need to wait for the current runloop cycle to complete before our view is actually added (into the view hierarchy), then, and only then, we can start our search for our target view</li></ol><ol start="2"><li>if the method is called when the view is about to be removed from the view hierarchy, waiting for the runloop cycle to complete assures that our view has been removed (thus making our search fail)</li></ol><p>When SwiftUI triggers <code>updateUIView(_:context)</code>, <code>UIKitIntrospectionView</code> calls the <code>selector</code> method that we've been carrying over from the the original convenience modifier implementation:<br><code>selector</code> has a <code>(IntrospectionUIView) -&gt; TargetViewType?</code> signature, a.k.a. it takes in Introspect's <code>IntrospectionUIView</code>'s view as input, and returns an optional <code>TargetViewType</code>, which is a generic representation of our original view/view-controller type that we'd like to reach for.</p><p>If this search succeeds, then we call <code>customize</code> on it, which is the method we pass/define when we apply an Introspect's view modifier on our views, thus making our change to the underlying UIKit/AppKit view/view-controller.</p><p>Going back to our <code>introspectTextView(customize:)</code> example, we pass <code>TargetViewSelector.siblingContaining</code> to our <code>selector</code>:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="comment">/// Finds a `UITextView` from a `TextEditor`</span>
  public <span class="keyword">func</span> introspectTextView(
    customize: <span class="keyword">@escaping</span> (<span class="type">UITextView</span>) -&gt; ()
  ) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">introspect</span>(
      selector: <span class="type">TargetViewSelector</span>.<span class="property">siblingContaining</span>, 
      customize: customize
    )
  }
}
</code></pre><p><code>TargetViewSelector</code> is a caseless Swift <code>enum</code>, making it a container of <code>static</code> methods meant to be called directly, all <code>TargetViewSelector</code> methods, more or less, follow the same pattern as our <code>siblingContaing(from:)</code>:</p><pre><code><span class="keyword">public enum</span> TargetViewSelector {
  <span class="keyword">public static func</span> siblingContaining&lt;TargetView: <span class="type">UIView</span>&gt;(from entry: <span class="type">UIView</span>) -&gt; <span class="type">TargetView</span>? {
    <span class="keyword">guard let</span> viewHost = <span class="type">Introspect</span>.<span class="call">findViewHost</span>(from: entry) <span class="keyword">else</span> {
      <span class="keyword">return nil</span>
    }
    <span class="keyword">return</span> <span class="type">Introspect</span>.<span class="call">previousSibling</span>(containing: <span class="type">TargetView</span>.<span class="keyword">self</span>, from: viewHost)
  }

  ...
}
</code></pre><p>The first step is finding a view host:<br>SwiftUI wraps each <code>UIViewRepresentable</code> view within a host view, something along the lines of <code>PlatformViewHost&lt;PlatformViewRepresentableAdaptor&lt;IntrospectionUIView&gt;&gt;</code>, which is then wrapped into a "hosting view" of type <code>_UIHostingView</code>, representing an <code>UIView</code> capable of hosting a SwiftUI view.</p><p>To get the view host, Introspect uses a <code>findViewHost(from:)</code> static method from another caseless <code>Introspect</code> <code>enum</code>:</p><pre><code><span class="keyword">enum</span> Introspect {
  <span class="keyword">public static func</span> findViewHost(from entry: <span class="type">UIView</span>) -&gt; <span class="type">UIView</span>? {
    <span class="keyword">var</span> superview = entry.<span class="property">superview</span>
    <span class="keyword">while let</span> s = <span class="call">superview</span> {
      <span class="keyword">if</span> <span class="type">NSStringFromClass</span>(<span class="call">type</span>(of: s)).<span class="call">contains</span>(<span class="string">"ViewHost"</span>) {
        <span class="keyword">return</span> s
      }
      superview = s.<span class="property">superview</span>
    }
    <span class="keyword">return nil</span>
  }

  ...
}
</code></pre><p>This method starts from our <code>IntrospectionUIView</code> and recursively queries each <code>superview</code>s until a view host is found: if we cannot find a view host, our <code>IntrospectionUIView</code> is not yet part of the screen hierarchy, and our crawling stops right away.</p><p>Once we have our view host, we have our starting point to look for our target view, which is exactly what <code>TargetViewSelector.siblingContaing</code> does via the next <code>Introspect.previousSibling(containing: TargetView.self, from: viewHost)</code> command:</p><pre><code><span class="keyword">enum</span> Introspect {
  <span class="keyword">public static func</span> previousSibling&lt;AnyViewType: <span class="type">UIView</span>&gt;(
    containing type: <span class="type">AnyViewType</span>.<span class="type">Type</span>,
    from entry: <span class="type">UIView</span>
  ) -&gt; <span class="type">AnyViewType</span>? {

    <span class="keyword">guard let</span> superview = entry.<span class="property">superview</span>,
          <span class="keyword">let</span> entryIndex = superview.<span class="property">subviews</span>.<span class="call">firstIndex</span>(of: entry),
          entryIndex &gt; <span class="number">0</span>
    <span class="keyword">else</span> {
      <span class="keyword">return nil</span>
    }

    <span class="keyword">for</span> subview <span class="keyword">in</span> superview.<span class="property">subviews</span>[<span class="number">0</span>..&lt;entryIndex].<span class="call">reversed</span>() {
      <span class="keyword">if let</span> typed = <span class="call">findChild</span>(ofType: type, in: subview) {
        <span class="keyword">return</span> typed
      }
    }

    <span class="keyword">return nil</span>
  }

  ...
}
</code></pre><p>This new static method takes all <code>viewHost</code>'s parent's subviews (a.k.a. <code>viewHost</code>'s siblings), filter the subviews that come before <code>viewHost</code>, and recursively search for our target view (passed as a <code>type</code> parameter), from closest to furthest sibling, via the final <code>findChild(ofType:in:)</code> method:</p><pre><code><span class="keyword">enum</span> Introspect {
  <span class="keyword">public static func</span> findChild&lt;AnyViewType: <span class="type">UIView</span>&gt;(
    ofType type: <span class="type">AnyViewType</span>.<span class="type">Type</span>,
    in root: <span class="type">UIView</span>
  ) -&gt; <span class="type">AnyViewType</span>? {
    <span class="keyword">for</span> subview <span class="keyword">in</span> root.<span class="property">subviews</span> {
      <span class="keyword">if let</span> typed = subview <span class="keyword">as</span>? <span class="type">AnyViewType</span> {
        <span class="keyword">return</span> typed
      } <span class="keyword">else if let</span> typed = <span class="call">findChild</span>(ofType: type, in: subview) {
        <span class="keyword">return</span> typed
      }
    }
    <span class="keyword">return nil</span>
  }

  ...
}
</code></pre><p>This method, called by passing our target view and one of our <code>viewHost</code> siblings, will crawl each sibling complete subtree view hierarchy looking for our target view, and return the first match, if any.</p><h2>Analysis</h2><p>Now that we've uncovered all the inner workings of SwiftUI Introspect, it's much easier to answer common questions that we might have:</p><ul><li>Is it safe to use?</li></ul><p>As long as we don't do <em>too daring</em> things, yes. It's important to understand that we do not own the underlying AppKit/UIKit views, SwiftUI does. Changes applied via Introspect should work, however SwiftUI might override them at will and without notice.</p><ul><li>Is it future proof?</li></ul><p>No. As SwiftUI evolves, things might break and already have when new OS versions come out. The library is updated with new patches when this happens, however our users would need to update the app before they see a fix.</p><ul><li>Should we use it?</li></ul><p>If the choice is either a complete rewrite or SwiftUI Introspect, the answer is probably yes. Anyone who has read this far fully understands how the library works: if anything breaks, we should know where to look for and find a fix.</p><ul><li>Where does SwiftUI Introspect shine?</li></ul><p>Backward compatibility. Let's imagine, for example, that iOS 15 brings pull to refresh to <code>List</code> (fingers crossed! FB8506858):<br>we know that SwiftUI Introspect lets us <a href="https://github.com/siteline/SwiftUIRefresh/blob/fa8fac7b5eb5c729983a8bef65f094b5e0d12014/Sources/PullToRefresh.swift">add pull to refresh</a> to <code>List</code> in iOS 13 and 14. At that point, we can use Introspect when targeting older OS versions, and use the new SwiftUI way when targeting iOS 15 or later.</p><p>Doing so guarantees that things won't break, as newer OS version will use SwiftUI's "native" approach, and only past iOS versions use Introspect.</p><ul><li>When not to use SwiftUI Introspect?</li></ul><p>When we want complete control over a view and can't afford things to break with new OS releases: if this is our case, it's safer and more future-proof to go with <code>UIViewRepresentable</code>/<code>NSViewRepresentable</code>. Of course, we should always attempt as best we can to find a "pure" SwiftUI way first, and only when we're confident that it's not possible, look for alternatives.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>SwiftUI Introspect is one of the few SwiftUI libraries that is probably a must-have to any SwiftUI app. Its execution is elegant, safe, and its advantages far outweigh the cons of adding it as a dependency.</p><p>When adding a dependency to our project, we should understand as best as we can what that dependency does, and I hope this article helps you in doing so for SwiftUI Introspect.</p><p>What other SwiftUI library do you use in your projects? Please let me know via <a href="mailto:hello@fivestars.blog">email</a> or <a href="https://twitter.com/zntfdr">twitter</a>!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/wwdc21-wishlist</guid><title>My WWDC21 Wishlist</title><description>My hopes for WWDC21!</description><link>https://www.fivestars.blog/articles/wwdc21-wishlist</link><pubDate>Tue, 11 May 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>With WWDC21 less than a month away, this is a period of hope and excitement for Apple developers worldwide.</p><p>Every one of us has a long list of things we'd like to see announced, and probably an even longer list of Apple feedbacks that we cannot wait to close.</p><p>In this article, let's take a look at some of my wishes for this year's WWDC.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Floating panel component</h2><blockquote><p>FB8992718</p></blockquote><img src="https://www.fivestars.blog/assets/posts/wwdc20-wishlist/floating.png"/><blockquote><p>From left to right: A floating panel in the shortcuts.app, stocks.app, find-my.app, maps.app.</p></blockquote><p>If Apple gave me a magic wand and told me that I could make just one change, releasing an official floating panel UI element would be my pick.</p><p>Drawer, Floating Panel, Bottom Sheet are just a few of the names going around, this is a component heavily used in many stock apps (see screenshot above), it's very user/thumb-friendly, and it's making ways in many third-party apps as well (including <a href="https://itunes.apple.com/us/developer/federico-zanetello/id1053443073">my own</a>).</p><p>Apple already has a component named <a href="https://github.com/LeoNatan/Apple-Runtime-Headers/blob/5e50ad05dfd7d7b69fc2e0e685765fc054166b3c/iOS/PrivateFrameworks/UIKitCore.framework/_UISheetDetent.h"><code>UISheetDetents</code></a> for this. However, it's not public.</p><p>This element is tough to get right. There are several attempts out there, out of which <a href="https://github.com/scenee/FloatingPanel"><code>FloatingPanel</code></a> is the best one.</p><p>Having a native, standard floating panel would be incredibly beneficial:<br>last year we saw the consolidation on <a href="https://www.wwdcnotes.com/notes/wwdc20/10105/">how multiple column layouts look/work/behave</a>. This year I really want to see the same for this element.</p><h2>A way to "follow" Apple Developer Documentation updates</h2><blockquote><p>FB9096393</p></blockquote><img src="https://www.fivestars.blog/assets/posts/wwdc20-wishlist/docs.png"/><p>We saw a lot of <a href="https://twitter.com/zntfdr/status/1336534803017945088">new</a> <a href="https://twitter.com/zntfdr/status/1327099408345747456">SwiftUI</a> <a href="https://twitter.com/zntfdr/status/1356482517000278017">documentation</a> being added during the past year, including <a href="https://twitter.com/zntfdr/status/1336700623589318662">some technical articles</a>. However, there's no way to discover when new material is added, beside constantly monitoring all documentation pages.</p><p>Last year we obtained a feed RSS for the <a href="https://developer.apple.com/news/">Developer News</a>: maybe this year we can get another feed for the rest of the documentation?</p><h2>Automatic dark/light appearance switch based on ambient light</h2><blockquote><p>FB7602915</p></blockquote><img src="https://www.fivestars.blog/assets/posts/wwdc20-wishlist/books.png"/><p>The Books.app has been doing so even before Dark mode was announced two(!) years ago. While there are third-party tools doing this, having this functionality baked in with the rest of the system settings would be fantastic.</p><h2>System HUD(s) access</h2><blockquote><p>FB6534210</p></blockquote><img src="https://www.fivestars.blog/assets/posts/swiftui-hud/HUDImage.png"/><blockquote><p>Image from <a href="https://www.fivestars.blog/articles/swiftui-hud/">Custom HUDs in SwiftUI</a></p></blockquote><p>HUDs are one of these system components that every app needs to use at some point. Instead of reinventing the wheel over and over, it would be great if we could access the system's one(s).</p><p>Having access to system HUDs would guarantee apps to look more familiar, consistent, make them more accessible, and require way less work to third-party developers.</p><blockquote><p>There are almost <strong>1500 iOS HUD libraries</strong> on GitHub, split between <a href="https://github.com/search?l=Swift&q=hud&type=Repositories">Swift</a> and <a href="https://github.com/search?l=Objective-C&q=hud&type=Repositories">Objective-C</a>.</p></blockquote><h2>Health.app on iPadOS/macOS</h2><blockquote><p>FB9095458</p></blockquote><img src="https://www.fivestars.blog/assets/posts/wwdc20-wishlist/Health-icon.png"/><p>Apple's health efforts have been announced back in 2014 with HealthKit and the Health app:<br>from that point on, every year Apple's health capabilities broadened more and more, mainly pioneered by the Apple Watch.</p><p>While having access to all of this data on the phone is incredible, overviewing trends or stats such as resting heart rate, walking pace, etc., would be more valuable and productive on a bigger screen, especially when comparing large intervals of time.</p><h2>More proactive Apple crash reporting</h2><blockquote><p>FB7564366</p></blockquote><p>Until recently finding out about app crashes meant one of the following:</p><ul><li>opening Xcode's Organizer and download the available data from there, if the developer ever remembers to do so.</li><li>use a third-party framework/service.</li></ul><p>Two years ago Apple announced <a href="https://developer.apple.com/documentation/metrickit/">MetricKit</a>, a new system framework allowing app developers to collect their app diagnostics once per day per user, allowing faster reporting.</p><p>This is not yet as real time as getting a new crash report via email (almost) as soon as it happens, like other third-party SDKs/services nearly do, but it's a step forward. My wish for this year is to see MetricKit reports not being limited to once a day, allowing reports as fast as the competition.</p><h2>Xcode localization sanity checks</h2><blockquote><p>FB9095417</p></blockquote><p>App localization is a must-have for the best user experience:<br>it's probably impossible to guarantee at build time that our app will only use localization strings, however having some sanity checks would be most welcome.</p><p>For example, if all but one <code>.strings</code> file provides a <code>"home_title" = "...";</code> localization, triggering a warning would probably be the right thing to do.</p><p>Instead of these sanity checks being an extra build phase, they could be added as an external CLI tool, or triggered from time to time via an Xcode menu.</p><h2>A more proactive Feedback Assistant</h2><blockquote><p>FB9096364, FB9096366</p></blockquote><img src="https://www.fivestars.blog/assets/posts/wwdc20-wishlist/feedback.png"/><p>Currently we get a new email when an Apple engineer replies to a feedback of ours. However, we don't get notified when other feedback's statuses change (e.g., resolution, number of similar reports).</p><p>The only way we have to find out if anything has changed is by manually opening each feedback again, potentially discovering an update many weeks/months later, if ever.</p><p>It would be great if Feedback Assistant would send notifications/emails when any new update occurs, not just when there's a new reply to a feedback.</p><p>It's a small thing, but it'd help developers know their feedback has been received, and encourage them to use the app more, thus submitting more feedback.</p><h2>SwiftUI</h2><p>Lastly here's a <em>small</em> subset of my SwiftUI wishes:</p><ul><li>a new view similar to <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">CSS's Flexbox</a> (e.g. <code>HStack</code> <a href="https://www.fivestars.blog/articles/flexible-swiftui/">wrapping into multiple rows</a>) (FB9100345)</li><li>a way to access to and act upon a view proposed size (FB9100350)</li><li>have a native modifier to <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/">read a child view size</a> (FB9100353)</li><li>have access to <code>List</code>'s/<code>ScrollView</code>'s <a href="https://www.fivestars.blog/articles/scrollview-offset/">offset position</a> (FB9100361)</li><li><code>List</code>/<code>ScrollView</code> pull to refresh (FB8506858)</li><li><code>TextField</code> improvements:<ul><li>first responder control (FB9081556)</li><li>more keyboard input types, e.g. date and picker (FB9079186, FB9079187)</li><li>merge <code>TextField</code> and <code>SecureField</code> (FB8947595)</li></ul></li></ul><ul><li><a href="https://www.fivestars.blog/articles/programmatic-navigation/">a navigation revolution</a> (FB8722348, FB8910787, FB8997675)</li><li>a <code>Stack</code> view that can switch axis via parameter (FB9061954)</li><li>a way to snapshot SwiftUI views without having to go through AppKit/UIKit (FB9100363)</li><li>proper device landscape orientation for SwiftUI Previews (FB7636362)</li><li>native share sheet support (FB9088885)</li><li>new <code>onTapGesture</code> <code>Text</code> view modifier, which returns another <code>Text</code> (FB8917806)</li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>There we go! Most things are way easier said than done: I'd consider it a massive success if even 10% of these nearly 25+ wishes were to become true.</p><p>If my list has something that you'd like to see as well, I urge you to please <a href="http://feedbackassistant.apple.com">submit a feedback to Apple</a>: this is the best way to let their teams know. Thank you!</p><p>What else would you like to see at this year's WWDC? Please let me know via <a href="mailto:hello@fivestars.blog">email</a> or <a href="https://twitter.com/zntfdr">twitter</a>!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/textfieldstyle</guid><title>A TextFieldStyle API preview!</title><description>TextFieldStyle is not officially available yet, can we have a sneak peek at how it might look like?</description><link>https://www.fivestars.blog/articles/textfieldstyle</link><pubDate>Tue, 4 May 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Recently we've covered <a href="https://www.fivestars.blog/articles/how-to-customize-textfields/">four different ways to customize <code>TextField</code>s</a>:<br>ideally we wouldn't have to choose, as SwiftUI's <em>official</em> way to customize components is by using and creating associated styles.</p><p>While <code>TextFieldStyle</code>'s requirements are not public yet, we can take a sneak peek under the hood and guess at how an official API might look like: in this article, let's do just that!</p><blockquote><p>This article's code works, however please do consider it experimental and do not use it in production. As always, I have no insights on what the SwiftUI team is working on. This is entirely speculation with no inside knowledge.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>TextFieldStyle</h2><p>Here's the current internal <code>TextFieldStye</code> declaration (as of Xcode 12.5):</p><pre><code><span class="keyword">public protocol</span> TextFieldStyle {
  <span class="keyword">associatedtype</span> _Body: <span class="type">View</span>
  <span class="keyword">@ViewBuilder func</span> _body(configuration: <span class="type">TextField</span>&lt;<span class="type">Self</span>.<span class="type">_Label</span>&gt;) -&gt; <span class="type">Self</span>.<span class="type">_Body</span>
  <span class="keyword">typealias</span> _Label = <span class="type">_TextFieldStyleLabel</span>
}
</code></pre><p>Beside a small difference in the <code>typealias</code> this declaration closely follows all other public styles.</p><p>As a reminder/comparison here are the public style requirements for <code>Button</code> and <code>Label</code>:</p><pre><code><span class="keyword">public protocol</span> ButtonStyle {
  <span class="keyword">associatedtype</span> Body: <span class="type">View</span>
  <span class="keyword">@ViewBuilder func</span> makeBody(configuration: <span class="type">Self</span>.<span class="type">Configuration</span>) -&gt; <span class="type">Self</span>.<span class="type">Body</span>
  <span class="keyword">typealias</span> Configuration = <span class="type">ButtonStyleConfiguration</span>
}

<span class="keyword">public protocol</span> LabelStyle {
  <span class="keyword">associatedtype</span> Body: <span class="type">View</span>
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Self</span>.<span class="type">Configuration</span>) -&gt; <span class="type">Self</span>.<span class="type">Body</span>
  <span class="keyword">typealias</span> Configuration = <span class="type">LabelStyleConfiguration</span>
}
</code></pre><blockquote><p>We have dedicated articles to both styles in <a href="https://www.fivestars.blog/articles/button-styles/">Exploring SwiftUI's Button styles</a> and <a href="https://www.fivestars.blog/articles/label/">Label</a>.</p></blockquote><p>All these requirements come with a configuration, which dictates what we can achieve on the associated style. Let's have a look at that next.</p><h2>TextFieldStyleConfiguration</h2><p>The current <code>TextFieldStyle</code> configuration is a <code>TextField</code> instance, <code>TextField&lt;Self._Label&gt;</code>:</p><pre><code><span class="keyword">@ViewBuilder func</span> _body(configuration: <span class="type">TextField</span>&lt;<span class="type">Self</span>.<span class="type">_Label</span>&gt;) -&gt; <span class="type">Self</span>.<span class="type">_Body</span>
</code></pre><p>It might be surprising that <code>TextField</code> has an associated generic type, if we look at the <a href="https://developer.apple.com/documentation/swiftui/textfield">official declaration</a>, we see that this is indeed true, however as of today, <code>TextField</code> only exposes init methods where <code>Label == Text</code>.</p><pre><code><span class="keyword">public struct</span> TextField&lt;Label: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> { <span class="keyword">get</span> }
  <span class="keyword">public typealias</span> Body = <span class="keyword">some</span> <span class="type">View</span>
}

<span class="keyword">extension</span> <span class="type">TextField</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">Text</span> {
  <span class="keyword">public init</span>(
  	<span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
  	text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;, 
  	onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
  	onCommit: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span> = {}
  )

  ...
}
</code></pre><p><code>Label</code> represents the placeholder view: we will probably have more flexibility once SwiftUI drops <code>UITextField</code> and have its own independent implementation.</p><p>Using the same technique from <a href="https://www.fivestars.blog/articles/inspecting-views/">Inspecting SwiftUI views</a>, we can see what kind of details a <code>TextFieldStyle</code> configuration has:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">"FIVE STARS"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(
      <span class="string">"type something..."</span>,
      text: $text
    )
    .<span class="call">textFieldStyle</span>(<span class="type">InspectStyle</span>())
  }
}

<span class="keyword">struct</span> InspectStyle: <span class="type">TextFieldStyle</span> {
  <span class="keyword">@ViewBuilder
  func</span> _body(configuration: <span class="type">TextField</span>&lt;<span class="type">_Label</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> _ = <span class="call">print</span>(configuration)
    configuration
  }
}
</code></pre><p><code>InspectStyle</code> returns the configuration as is, just after letting us take a peek to what it looks like:</p><pre><code><span class="type">TextField</span>&lt;<span class="type">_TextFieldStyleLabel</span>&gt;(
  text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;,
  isSecure: <span class="type">Bool</span>,
  label: <span class="type">_TextFieldStyleLabel</span>,
  onEditingChanged: (<span class="type">Bool</span>) -&gt; (),
  onCommit: () -&gt; (),
  updatesContinuously: <span class="type">Bool</span>,
  uncommittedText: <span class="type">State</span>&lt;<span class="type">Optional</span>&lt;<span class="type">String</span>&gt;&gt;
)
</code></pre><blockquote><p>Formatted and simplified for clarity's sake.</p></blockquote><p>Most of what we see is expected, with a few exceptions:</p><ul><li><code>text</code>, <code>onEditingChanged</code>, and <code>onCommit</code> are the same parameters we pass to <code>TextField</code>'s <code>init</code></li><li><code>isSecure</code> tells us whether we're applying our style to a <code>TextField</code> or a <code>SecureField</code></li><li><code>label</code> is our placeholder view</li><li><code>updatesContinuously</code> and <code>uncommittedText</code> are implementation details (if you have any information on these, please <a href="mailto:hello@fivestars.blog">let me know!</a>)</li></ul><p><code>isSecure</code> is very interesting:<br>currently, if we'd like to swap between <code>TextField</code> and a <code>SecureField</code>, we'd need to replace the field with its counterpart. However, adding/replacing/removing views is frowned upon since it's one of the easiest ways to drop performance in SwiftUI.</p><p>Hopefully <code>SecureField</code> will get deprecated, and this <code>isSecure</code> property will be exposed as part of the <code>TextField</code> initializers instead (FB8947595).</p><h2>Playing with TextFieldStyle's Configuration</h2><p>Now that we've seen how the configuration looks like, we can use it as we please.</p><p>What about creating a style that adds a clear button?</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">"FIVE STARS"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(
      <span class="string">"type something..."</span>,
      text: $text
    )
    .<span class="call">textFieldStyle</span>(<span class="type">ClearStyle</span>())
  }
}

<span class="keyword">struct</span> ClearStyle: <span class="type">TextFieldStyle</span> {
  <span class="keyword">@ViewBuilder
  func</span> _body(configuration: <span class="type">TextField</span>&lt;<span class="type">_Label</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: configuration)
    <span class="keyword">let</span> text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt; = mirror.<span class="call">descendant</span>(<span class="string">"_text"</span>) <span class="keyword">as</span>! <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;
    configuration
      .<span class="call">overlay</span>(
        <span class="type">Button</span> { text.<span class="property">wrappedValue</span> = <span class="string">""</span> } label: { <span class="type">Image</span>(systemName: <span class="string">"clear"</span>) }
          .<span class="call">padding</span>(),
        alignment: .<span class="dotAccess">trailing</span>
      )
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/textfieldstyle/clear.gif"/><p>Or maybe we'd like to have different visuals based on whether our text fields requirements are met:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">"FIVE STARS"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(
      <span class="string">"type something..."</span>,
      text: $text
    )
    .<span class="call">textFieldStyle</span>(<span class="type">RequirementStyle</span>())
  }
}

<span class="keyword">struct</span> RequirementStyle: <span class="type">TextFieldStyle</span> {
  <span class="keyword">@ViewBuilder
  func</span> _body(configuration: <span class="type">TextField</span>&lt;<span class="type">_Label</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: configuration)
    <span class="keyword">let</span> text: <span class="type">String</span> = mirror.<span class="call">descendant</span>(<span class="string">"_text"</span>, <span class="string">"_value"</span>) <span class="keyword">as</span>! <span class="type">String</span>
    configuration
      .<span class="call">padding</span>()
      .<span class="call">background</span>(
        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">16</span>)
          .<span class="call">strokeBorder</span>(text.<span class="property">count</span> &gt; <span class="number">3</span> ? <span class="type">Color</span>.<span class="property">green</span> : <span class="type">Color</span>.<span class="property">red</span>)
      )
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/textfieldstyle/req.gif"/><p>We can also be mischievous and call <code>onEditingChanged</code> or <code>onCommit</code> at will:</p><pre><code><span class="keyword">struct</span> DeceiveStyle: <span class="type">TextFieldStyle</span> {
  <span class="keyword">@ViewBuilder
  func</span> _body(configuration: <span class="type">TextField</span>&lt;<span class="type">_Label</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: configuration)
    <span class="keyword">let</span> onCommit: () -&gt; <span class="type">Void</span> = mirror.<span class="call">descendant</span>(<span class="string">"onCommit"</span>) <span class="keyword">as</span>! () -&gt; <span class="type">Void

    VStack</span> {
      configuration
      <span class="type">Button</span>(<span class="string">"Trigger onCommit event"</span>, action: onCommit)
    }
  }
}
</code></pre><p>A limitation of this approach is that we can't subscribe our style to the <code>onEditingChanged</code> or <code>onCommit</code> events. This will probably be possible once the official APIs are public, maybe with a new <code>TextField</code> initializer accepting a <code>TextFieldConfiguration</code> along with two optional <code>onEditingChanged</code> or <code>onCommit</code> blocks.</p><h2>A preview</h2><p>So far we've played with our knowledge from <code>InspectStyle</code> and reached for each property by using Swift's <code>Mirror</code>: this works great.<br>Still, it's cumbersome to do so for every style we might define, instead, let's recreate a new <code>TextFieldStyle</code> that makes it easy to access all these properties.</p><p>First let's define our own configuration (we use <code>P</code> as suffix for "preview"):</p><pre><code><span class="keyword">struct</span> TextFieldStyleConfigurationP&lt;Label: <span class="type">View</span>&gt; {
  <span class="comment">/// The text to display and edit.</span>
  <span class="keyword">@Binding var</span> text: <span class="type">String</span>

  <span class="comment">/// Whether the text should be private (visible) or not.</span>
  <span class="keyword">let</span> isSecure: <span class="type">Bool</span>

  <span class="comment">/// A type-erased TextField.</span>
  <span class="keyword">let</span> label: <span class="type">Label</span>

  <span class="comment">/// The placeholder view.</span>
  <span class="keyword">let</span> placeholder: <span class="type">_TextFieldStyleLabel</span>

  <span class="comment">///  The action to perform when the user begins editing 
  ///  `text` and after the user finishes editing `text`.</span>
  <span class="keyword">let</span> onEditingChanged: (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>

  <span class="comment">/// The action to perform when the user hit the return key.</span>
  <span class="keyword">let</span> onCommit: () -&gt; <span class="type">Void</span>

  <span class="comment">/// (???)</span>
  <span class="keyword">let</span> updatesContinuously: <span class="type">Bool</span>

  <span class="comment">/// (???)</span>
  <span class="keyword">@State var</span> uncommittedText: <span class="type">String</span>?
}
</code></pre><p>Then our style:</p><pre><code><span class="keyword">protocol</span> TextFieldStyleP {
  <span class="keyword">associatedtype</span> Body: <span class="type">View</span>
  <span class="keyword">typealias</span> _Label = <span class="type">TextField</span>&lt;<span class="type">_TextFieldStyleLabel</span>&gt;
  <span class="keyword">@ViewBuilder func</span> makeBody(configuration: <span class="type">TextFieldStyleConfigurationP</span>&lt;<span class="type">_Label</span>&gt;) -&gt; <span class="type">Self</span>.<span class="type">Body</span>
}
</code></pre><p>At this point we need to bridge SwiftUI's text styles with our new one. Instead of reinventing the wheel, we can piggyback on SwiftUI's <code>TextFieldStyle</code> with the following <code>PreviewBridgeStyle</code>:</p><pre><code><span class="keyword">struct</span> PreviewBridgeStyle&lt;Style: <span class="type">TextFieldStyleP</span>&gt;: <span class="type">TextFieldStyle</span> {
  <span class="keyword">let</span> style: <span class="type">Style</span>

  <span class="keyword">@ViewBuilder
  func</span> _body(configuration: <span class="type">TextField</span>&lt;<span class="type">_Label</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> mirror = <span class="type">Mirror</span>(reflecting: configuration)
    <span class="keyword">let</span> text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt; = mirror.<span class="call">descendant</span>(<span class="string">"_text"</span>) <span class="keyword">as</span>! <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;
    <span class="keyword">let</span> isSecure: <span class="type">Bool</span> = mirror.<span class="call">descendant</span>(<span class="string">"isSecure"</span>) <span class="keyword">as</span>! <span class="type">Bool</span>
    <span class="keyword">let</span> label: <span class="type">_TextFieldStyleLabel</span> = mirror.<span class="call">descendant</span>(<span class="string">"label"</span>) <span class="keyword">as</span>! <span class="type">_TextFieldStyleLabel</span>
    <span class="keyword">let</span> onEditingChanged: (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = mirror.<span class="call">descendant</span>(<span class="string">"onEditingChanged"</span>) <span class="keyword">as</span>! (<span class="type">Bool</span>) -&gt; <span class="type">Void</span>
    <span class="keyword">let</span> onCommit: () -&gt; <span class="type">Void</span> = mirror.<span class="call">descendant</span>(<span class="string">"onCommit"</span>) <span class="keyword">as</span>! () -&gt; <span class="type">Void</span>
    <span class="keyword">let</span> updatesContinuously: <span class="type">Bool</span> = mirror.<span class="call">descendant</span>(<span class="string">"updatesContinuously"</span>) <span class="keyword">as</span>! <span class="type">Bool</span>
    <span class="keyword">let</span> uncommittedText: <span class="type">State</span>&lt;<span class="type">String</span>?&gt; = mirror.<span class="call">descendant</span>(<span class="string">"_uncommittedText"</span>) <span class="keyword">as</span>! <span class="type">State</span>&lt;<span class="type">String</span>?&gt;

    <span class="keyword">let</span> textStyleConfiguration = <span class="type">TextFieldStyleConfigurationP</span>(
      text: text,
      isSecure: isSecure,
      label: configuration,
      placeholder: label,
      onEditingChanged: onEditingChanged,
      onCommit: onCommit,
      updatesContinuously: updatesContinuously,
      uncommittedText: uncommittedText.<span class="property">wrappedValue</span>
    )

    style.<span class="call">makeBody</span>(configuration: textStyleConfiguration)
  }
}
</code></pre><p><code>PreviewBridgeStyle</code> is a <code>TextFieldStyle</code> that extracts our <code>TextFieldStyleConfigurationP</code> and passes it to our <code>TextFieldStyleP</code>.</p><p>Lastly we define the following <code>View</code> extension:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> textFieldStyleP&lt;S: <span class="type">TextFieldStyleP</span>&gt;(<span class="keyword">_</span> style: <span class="type">S</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">textFieldStyle</span>(<span class="type">PreviewBridgeStyle</span>(style: style))
  }
}
</code></pre><p>Which will do the transformation for us. From now on, we can define our styles with all the data immediately available.</p><p>Here's the <code>ClearStyle</code> again with this new approach:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">"FIVE STARS"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
      <span class="type">TextField</span>(
        <span class="string">"type something..."</span>,
        text: $text
      )
      .<span class="call">textFieldStyleP</span>(<span class="type">ClearStyleP</span>())
      <span class="comment">// note the P suffixes</span>
  }
}

<span class="keyword">struct</span> ClearStyleP: <span class="type">TextFieldStyleP</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">TextFieldStyleConfigurationP</span>&lt;<span class="type">_Label</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    configuration
      .<span class="dotAccess">label</span>
      .<span class="call">overlay</span>(
        <span class="type">Button</span> { configuration.<span class="property">text</span> = <span class="string">""</span> } label: { <span class="type">Image</span>(systemName: <span class="string">"clear"</span>) }
          .<span class="call">padding</span>(),
        alignment: .<span class="dotAccess">trailing</span>
      )
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/textfieldstyle/clear.gif"/><p>And here's the <code>RequirementStyle</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">"FIVE STARS"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(
      <span class="string">"type something..."</span>,
      text: $text
    )
    .<span class="call">textFieldStyleP</span>(<span class="type">RequirementStyleP</span>())
  }
}

<span class="keyword">struct</span> RequirementStyleP: <span class="type">TextFieldStyleP</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">TextFieldStyleConfigurationP</span>&lt;<span class="type">_Label</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    configuration
      .<span class="dotAccess">label</span>
      .<span class="call">padding</span>()
      .<span class="call">background</span>(
        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">16</span>)
          .<span class="call">strokeBorder</span>(configuration.<span class="property">text</span>.<span class="property">count</span> &gt; <span class="number">3</span> ? <span class="type">Color</span>.<span class="property">green</span> : <span class="type">Color</span>.<span class="property">red</span>)
      )
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/textfieldstyle/req.gif"/><p>In about one month (WWDC21!), we might get a similar official API:<br>it might be possible to use the approach above for retro compatibility (hopefully with just minor changes).</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>In this article we've explored what the future of <code>TextField</code> (and <code>SecureField</code>) might look like:<br>there are big expectations around this component for this year's WWDC, especially on aspects such as first responder control (FB9081556), June can't come soon enough!</p><p>What else are you looking forward to at WWDC21? Please let me know via <a href="https://twitter.com/zntfdr">twitter</a> or <a href="mailto:hello@fivestars.blog">email</a>.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/spm-5-4</guid><title>What's new in Swift Package Manager in Swift 5.4</title><description>A look into all main SPM changes for Xcode 12.5</description><link>https://www.fivestars.blog/articles/spm-5-4</link><pubDate>Tue, 27 Apr 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Along with the brand new Xcode 12.5, Swift 5.4 and its associated Swift Package Manager (SPM from now on) are now officially released. While 5.4 might look like a small release for SPM, there are actually a lot of changes, in this article let's have a look at the main ones.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The biggest release so far (?)</h2><p>Even before talking about the actual changes, this release is one of the biggest (if not <em>the</em> biggest) for SPM to date, this is also justified by the recent expansion of the dedicated team at Apple and the new support for Windows.</p><p>Here are all the stats of the most recent releases:</p><ul><li><a href="https://github.com/apple/swift-package-manager/compare/release/5.3...release/5.4">Swift 5.4 vs 5.3</a>: <strong>527</strong> changed files with <strong>34,434</strong> additions and <strong>36,806</strong> deletions.</li><li><a href="https://github.com/apple/swift-package-manager/compare/swift-5.2-branch...release/5.3">Swift 5.3 vs 5.2</a>: <strong>411</strong> changed files with <strong>19,920</strong> additions and <strong>8,186</strong> deletions.</li><li><a href="https://github.com/apple/swift-package-manager/compare/swift-5.1-branch...swift-5.2-branch ">Swift 5.2 vs 5.1</a>: <strong>441</strong> changed files with <strong>21,714</strong> additions and <strong>11,442</strong> deletions.</li><li><a href="https://github.com/apple/swift-package-manager/compare/swift-5.0-branch...swift-5.1-branch">Swift 5.1 vs 5.0</a>: <strong>169</strong> changed files with <strong>8,560</strong> additions and <strong>4,276</strong> deletions.</li><li><a href="https://github.com/apple/swift-package-manager/compare/swift-4.2-branch...swift-5.0-branch">Swift 5.0 vs 4.2</a>: <strong>420</strong> changed files with <strong>23,256</strong> additions and <strong>11,635</strong> deletions.</li><li><a href="https://github.com/apple/swift-package-manager/compare/swift-4.1-branch...swift-4.2-branch">Swift 4.2 vs 4.1</a>: <strong>232</strong> changed files with <strong>6,831</strong> additions and <strong>2,117</strong> deletions.</li><li><a href="https://github.com/apple/swift-package-manager/compare/swift-4.0-branch...swift-4.1-branch">Swift 4.1 vs 4.0</a>: <strong>326</strong> changed files with <strong>7,286</strong> additions and <strong>4,344</strong> deletions.</li><li><a href="https://github.com/apple/swift-package-manager/compare/swift-3.1-branch...swift-4.0-branch">Swift 4.0 vs 3.1</a>: <strong>319</strong> changed files with <strong>25,852</strong> additions and <strong>11,848</strong> deletions.</li><li><a href="https://github.com/apple/swift-package-manager/compare/swift-3.0-branch...swift-3.1-branch">Swift 3.1 vs 3.0</a>: <strong>331</strong> changed files with <strong>28,945</strong> additions and <strong>5,210</strong> deletions.</li></ul><p>Since we're at it, here's a sneak peek at SPM 5.5, which is still a few months away:</p><ul><li><a href="https://github.com/apple/swift-package-manager/compare/release/5.4...release/5.5">Swift 5.5 vs 5.4</a>: <strong>374</strong> changed files with <strong>28,185</strong> additions and <strong>6,539</strong> deletions (at the time of writing).</li></ul><p>While these stats alone don't mean much, it's clear that a lot is happening on this project, let's have a look at the actual changes next.</p><h2>External changes</h2><h3>Targets declaration</h3><p>Up to Swift 5.3 <a href="https://developer.apple.com/documentation/swift_packages/target">targets declarations</a> were separated in:</p><ul><li><code>.target(...)</code> for regular and executable targets</li><li><code>.binaryTarget(...)</code> for binary targets that reference an artifact on disk</li><li><code>.testTarget(...)</code> for testing targets</li><li><code>.systemLibrary(...)</code> for system library targets</li></ul><p>Where the difference between a regular target and an executable one was the presence (or not) of a <code>main.swift</code> file, which was then used as the entry point for an executable target.</p><p>In Swift 5.3 we've seen the introduction of the <code>@main</code> attribute, explicitly defining a new application entry point, regardless of the where its declaration is located.</p><p>In Swift 5.4 SPM gains a new <code>.executableTarget(...)</code> target, exclusively dedicated to executables, where SPM will support either having a <code>main.swift</code> entry point or a <code>@main</code> declaration (at any location).</p><p>From now on <code>.target(...)</code> will be used only for regular targets and nothing else, improving the package manifest readability.</p><h3>(Linux) Test discovery</h3><p>Until Swift 5.3 every package supporting Linux needed to have a <code>LinuxMain.swift</code> file in the <code>Tests</code> folder root: this file was needed to explicitly declare/list all the tests to be executed. From SPM 5.4 this <code>LinuxMain.swift</code> is no longer necessary.</p><p>This same file was previously not needed/used in macOS platforms, as macOS relies on the Objective-C runtime for such discovery, like it does for <code>.xcodeproj</code> test suites.</p><p>The way it now works is by building an <a href="https://github.com/apple/swift-tools-support-core/blob/435a2708a6e486d69ea7d7aaa3f4ad243bc3b408/Sources/TSCUtility/IndexStore.swift#L14"><code>IndexStore</code></a> of the tests and run the outcome through a <a href="https://github.com/apple/swift-package-manager/blob/72de2f50d45c360df8dac801a672bd0dab3ddb5f/Sources/Build/BuildOperationBuildSystemDelegateHandler.swift#L48"><code>TestDiscoveryCommand</code></a>, which will then generate the <code>LinuxMain.swift</code> file at build time.</p><blockquote><p>This functionality was previously available via a <code>--enable-test-discovery</code> flag to be passed on a <code>$ swift test</code> command, it's now enabled by default.</p></blockquote><h2>Package dependency cache</h2><p>Prior to Swift 5.4, if we had two completely separate packages with the same dependency, that dependency would have been downloaded twice and put in the <code>.build</code> folder of each of our packages.</p><p>From Swift 5.4 SPM keeps a per-user cache in a new <code>~/.swiftpm/cache</code> folder (or equivalent in other platforms), which will then be queried before fetching anything from the Internet: this will be a huge time/data saver, especially when using the same dependency in multiple, independent packages.</p><h2>Internal changes</h2><h3>Argument parser</h3><p>Apple's <a href="https://github.com/apple/swift-argument-parser/"><code>ArgumentParser</code></a> has been released <a href="https://www.fivestars.blog/articles/a-look-into-argument-parser/">a little over an year ago</a>, during this time it became the de-facto standard for every swift CLI tool out there: it should come with no surprise that <a href="https://github.com/apple/swift-package-manager/pull/2653">SPM has now adopted it</a>.</p><p>Previously SPM used <a href="https://github.com/apple/swift-tools-support-core/blob/435a2708a6e486d69ea7d7aaa3f4ad243bc3b408/Sources/TSCUtility/ArgumentParser.swift"><code>TSCUtility</code>'s <code>ArgumentParser</code></a> which we <a href="https://www.fivestars.blog/articles/executables-argument-kind/">covered here</a>.</p><h3>Good bye swift-tools-support-core</h3><p><a href="https://github.com/apple/swift-tools-support-core"><code>swift-tools-support-core</code></a> is a collection of utilities used within SPM and <a href="https://github.com/apple/swift-llbuild"><code>llbuild</code></a>: SPM kept a vendored copy of this package in its own repository, for CI/testing purposes.</p><p>Keeping this copy meant that <a href="https://github.com/apple/swift-tools-support-core/pull/44">every</a> <a href="https://github.com/apple/swift-package-manager/pull/2605">change</a> had to be synced between the two repositories: fortunately <a href="https://github.com/apple/swift-package-manager/pull/2991">this is no longer the case</a>, as SPM no longer needs such vendored copy.</p><h3>New module: Basics</h3><p>Basics is a new module that contains SPM specific utilities that shouldn't be part of <code>swift-tools-support-core</code>. For example the per-user cache location can be found <a href="https://github.com/apple/swift-package-manager/blob/a5f7859ef5d9b1ff97788e8fa0a71db65e011ce4/Sources/Basics/FileSystem%2BExtensions.swift#L16">in this module</a>.</p><p>This module name is a blast from the past: <code>swift-tools-support-core</code>'s <code>TSCBasic</code> was originally called <a href="https://github.com/apple/swift-package-manager/pull/346"><code>Basic</code></a>.</p><h3>New module: PackageCollections</h3><p><a href="https://github.com/apple/swift-package-manager/blob/a5f7859ef5d9b1ff97788e8fa0a71db65e011ce4/Documentation/PackageCollections.md">Package Collections</a> is the first module out of three of a new package discovery functionality being added into SPM, the other two being Package Registry and Package Index.</p><p>Package Collections focuses on handpicked packages lists, and provides a CLI tool, <code>$ swift package-collection</code>, in order to read and explore such lists.</p><p>While this functionality is officially being added in Swift 5.5, the ground work is already part of SPM as of Swift 5.4 (note that <code>$ swift package-collection</code> is not exposed in 5.4, making it inaccessible)</p><p>For more details on <code>PackageCollections</code>, refer to its <a href="https://github.com/apple/swift-evolution/blob/4b687970130fa33ed28c5f2eb86081312386c26d/proposals/0291-package-collections.md">Swift Evolution proposal</a> and <a href="https://github.com/apple/swift-package-manager/blob/a5f7859ef5d9b1ff97788e8fa0a71db65e011ce4/Documentation/PackageCollections.md">documentation</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>SPM has gotten a lot of attention in the last couple of years, and its development pace seems to be only increasing!</p><p>In this article we took a sneak peek to its main changes of the upcoming release, however there are many other changes not highlighted here: <a href="https://github.com/apple/swift-package-manager/compare/release/5.3...release/5.4">feel free to explore them yourself</a>!</p><p>What are you most excited about SPM future? Let me know via <a href="mailto:hello@fivestars.blog">email</a> or <a href="https://twitter.com/zntfdr">twitter</a>!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/how-to-customize-textfields</guid><title>Four ways to customize TextFields</title><description>SwiftUI is a dream for prototyping and building views: in this article, let‚Äôs see how we can customize a TextField.</description><link>https://www.fivestars.blog/articles/how-to-customize-textfields</link><pubDate>Tue, 20 Apr 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>SwiftUI is a dream for prototyping and building views: in this article, let‚Äôs see how we can customize a <code>TextField</code>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>TextFieldStyle</h2><p>Before thinking about customization, we should consider what SwiftUI offers. <code>TextField</code> comes with its own style which, despite not allowing creating our own (FB9078993), presents us some options:</p><ul><li><code>DefaultTextFieldStyle</code></li><li><code>PlainTextFieldStyle</code></li><li><code>RoundedBorderTextFieldStyle</code></li></ul><img src="https://www.fivestars.blog/assets/posts/how-to-customize-textfields/defaultstyles.png"/><pre><code><span class="type">VStack</span> {
  <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"DefaultTextFieldStyle"</span>).<span class="call">font</span>(.<span class="dotAccess">headline</span>)) {
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: .<span class="call">constant</span>(<span class="string">""</span>))
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: $text)
  }
  .<span class="call">textFieldStyle</span>(<span class="type">DefaultTextFieldStyle</span>())

  <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"PlainTextFieldStyle"</span>).<span class="call">font</span>(.<span class="dotAccess">headline</span>)) {
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: .<span class="call">constant</span>(<span class="string">""</span>))
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: $text)
  }
  .<span class="call">textFieldStyle</span>(<span class="type">PlainTextFieldStyle</span>())

  <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"RoundedBorderTextFieldStyle"</span>).<span class="call">font</span>(.<span class="dotAccess">headline</span>)) {
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: .<span class="call">constant</span>(<span class="string">""</span>))
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: $text)
  }
  .<span class="call">textFieldStyle</span>(<span class="type">RoundedBorderTextFieldStyle</span>())
}
</code></pre><p><code>DefaultTextFieldStyle</code> is applied to all <code>TextField</code>s where no different style has been set. In iOS, this matches applying the <code>PlainTextFieldStyle</code>.</p><p>The difference between <code>PlainTextFieldStyle</code> <code>RoundedBorderTextFieldStyle</code> seems to be just the presence of a rounded corner border, however a <code>TextField</code> with <code>RoundedBorderTextFieldStyle</code> also comes with a white/black background (depending on the environment appearance), while a <code>TextField</code> with <code>PlainTextFieldStyle</code> is transparent:</p><img src="https://www.fivestars.blog/assets/posts/how-to-customize-textfields/defaultstylesBackground.png"/><pre><code><span class="type">VStack</span> {
  <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"DefaultTextFieldStyle"</span>).<span class="call">font</span>(.<span class="dotAccess">headline</span>)) {
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: .<span class="call">constant</span>(<span class="string">""</span>))
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: $text)
  }
  .<span class="call">textFieldStyle</span>(<span class="type">DefaultTextFieldStyle</span>())

  <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"PlainTextFieldStyle"</span>).<span class="call">font</span>(.<span class="dotAccess">headline</span>)) {
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: .<span class="call">constant</span>(<span class="string">""</span>))
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: $text)
  }
  .<span class="call">textFieldStyle</span>(<span class="type">PlainTextFieldStyle</span>())

  <span class="type">Section</span>(header: <span class="type">Text</span>(<span class="string">"RoundedBorderTextFieldStyle"</span>).<span class="call">font</span>(.<span class="dotAccess">headline</span>)) {
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: .<span class="call">constant</span>(<span class="string">""</span>))
    <span class="type">TextField</span>(<span class="string">"Placeholder"</span>, text: $text)
  }
  .<span class="call">textFieldStyle</span>(<span class="type">RoundedBorderTextFieldStyle</span>())
}
.<span class="call">background</span>(<span class="type">Color</span>.<span class="property">yellow</span>)
</code></pre><p>This is all we have. Let‚Äôs talk about customization next.</p><h2>The SwiftUI way (part 1)</h2><p>Since there‚Äôs no public API to create new <code>TextField</code> styles at this time, the recommended way to customize <code>TextField</code>s is to wrap <code>TextField</code> in our definitions, similarly to what we did in <a href="https://www.fivestars.blog/articles/design-system-composing-views/">Composing SwiftUI views</a>:</p><pre><code><span class="keyword">public struct</span> FSTextField: <span class="type">View</span> {
  <span class="keyword">var</span> titleKey: <span class="type">LocalizedStringKey</span>
  <span class="keyword">@Binding var</span> text: <span class="type">String</span>

  <span class="comment">/// Whether the user is focused on this `TextField`.</span>
  <span class="keyword">@State private var</span> isEditing: <span class="type">Bool</span> = <span class="keyword">false

  public init</span>(<span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;) {
    <span class="keyword">self</span>.<span class="property">titleKey</span> = titleKey
    <span class="keyword">self</span>.<span class="property">_text</span> = text
  }

  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(titleKey, text: $text, onEditingChanged: { isEditing = $0 })
      <span class="comment">// Make sure no other style is mistakenly applied.</span>
      .<span class="call">textFieldStyle</span>(<span class="type">PlainTextFieldStyle</span>())
      <span class="comment">// Text alignment.</span>
      .<span class="call">multilineTextAlignment</span>(.<span class="dotAccess">leading</span>)
      <span class="comment">// Cursor color.</span>
      .<span class="call">accentColor</span>(.<span class="dotAccess">pink</span>)
      <span class="comment">// Text color.</span>
      .<span class="call">foregroundColor</span>(.<span class="dotAccess">blue</span>)
      <span class="comment">// Text/placeholder font.</span>
      .<span class="call">font</span>(.<span class="dotAccess">title</span>.<span class="call">weight</span>(.<span class="dotAccess">semibold</span>))
      <span class="comment">// TextField spacing.</span>
      .<span class="call">padding</span>(.<span class="dotAccess">vertical</span>, <span class="number">12</span>)
      .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>, <span class="number">16</span>)
      <span class="comment">// TextField border.</span>
      .<span class="call">background</span>(border)
  }

  <span class="keyword">var</span> border: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">16</span>)
      .<span class="call">strokeBorder</span>(
        <span class="type">LinearGradient</span>(
          gradient: .<span class="keyword">init</span>(
            colors: [
              <span class="type">Color</span>(red: <span class="number">163</span> / <span class="number">255.0</span>, green: <span class="number">243</span> / <span class="number">255.0</span>, blue: <span class="number">7</span> / <span class="number">255.0</span>),
              <span class="type">Color</span>(red: <span class="number">226</span> / <span class="number">255.0</span>, green: <span class="number">247</span> / <span class="number">255.0</span>, blue: <span class="number">5</span> / <span class="number">255.0</span>)
            ]
          ),
          startPoint: .<span class="dotAccess">topLeading</span>,
          endPoint: .<span class="dotAccess">bottomTrailing</span>
        ),
        lineWidth: isEditing ? <span class="number">4</span> : <span class="number">2</span>
      )
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/how-to-customize-textfields/customSwiftUI.gif"/><p>This is all we can officially customize in a <code>TextField</code> for now. There‚Äôs no way to change the placeholder text color, or have different fonts for the text and its placeholder (FB9079255):<br>we can work around some limitations by using external <code>Text</code>s or even applying masks to <code>TextField</code> while tracking its states, however we would enter in the ‚Äúhack‚Äù territory pretty fast.</p><blockquote><p>Other <code>TextField</code>s aspects that we can customize that are not strictly UI-related: the <code>TextField</code> associated <a href="https://developer.apple.com/documentation/swiftui/view/keyboardtype(_:)">keyboard type</a>, <a href="https://developer.apple.com/documentation/swiftui/view/textcontenttype(_:)-ufdv">content type</a>, <a href="https://developer.apple.com/documentation/swiftui/view/autocapitalization(_:)">auto capitalization</a>, and <a href="https://developer.apple.com/documentation/swiftui/view/disableautocorrection(_:)">auto correction</a>.</p></blockquote><h2>The SwiftUI way (part 2)</h2><p>When <code>TextField</code> doesn‚Äôt meet our needs, we can always fall back to UIKit‚Äôs <code>UITextField</code>. While it might not always be ideal, it doesn‚Äôt take too much to create a dedicated <code>UIViewRepresentable</code>:</p><pre><code><span class="keyword">struct</span> UIKitTextField: <span class="type">UIViewRepresentable</span> {
  <span class="keyword">var</span> titleKey: <span class="type">String</span>
  <span class="keyword">@Binding var</span> text: <span class="type">String</span>

  <span class="keyword">public init</span>(<span class="keyword">_</span> titleKey: <span class="type">String</span>, text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;) {
    <span class="keyword">self</span>.<span class="property">titleKey</span> = titleKey
    <span class="keyword">self</span>.<span class="property">_text</span> = text
  }

  <span class="keyword">func</span> makeUIView(context: <span class="type">Context</span>) -&gt; <span class="type">UITextField</span> {
    <span class="keyword">let</span> textField = <span class="type">UITextField</span>(frame: .<span class="dotAccess">zero</span>)
    textField.<span class="property">delegate</span> = context.<span class="property">coordinator</span>
    textField.<span class="call">setContentHuggingPriority</span>(.<span class="dotAccess">defaultHigh</span>, for: .<span class="dotAccess">vertical</span>)
    textField.<span class="call">setContentCompressionResistancePriority</span>(.<span class="dotAccess">defaultLow</span>, for: .<span class="dotAccess">horizontal</span>)
    textField.<span class="property">placeholder</span> = <span class="type">NSLocalizedString</span>(titleKey, comment: <span class="string">""</span>)

    <span class="keyword">return</span> textField
  }

  <span class="keyword">func</span> updateUIView(<span class="keyword">_</span> uiView: <span class="type">UITextField</span>, context: <span class="type">Context</span>) {
    <span class="keyword">if</span> text != uiView.<span class="property">text</span> {
        uiView.<span class="property">text</span> = text
    }
  }

  <span class="keyword">func</span> makeCoordinator() -&gt; <span class="type">Coordinator</span> {
    <span class="type">Coordinator</span>(<span class="keyword">self</span>)
  }

  <span class="keyword">final class</span> Coordinator: <span class="type">NSObject</span>, <span class="type">UITextFieldDelegate</span> {
    <span class="keyword">var</span> parent: <span class="type">UIKitTextField</span>

    <span class="keyword">init</span>(<span class="keyword">_</span> textField: <span class="type">UIKitTextField</span>) {
      <span class="keyword">self</span>.<span class="property">parent</span> = textField
    }

    <span class="keyword">func</span> textFieldDidChangeSelection(<span class="keyword">_</span> textField: <span class="type">UITextField</span>) {
      <span class="keyword">guard</span> textField.<span class="property">markedTextRange</span> == <span class="keyword">nil</span>, parent.<span class="property">text</span> != textField.<span class="property">text</span> <span class="keyword">else</span> {
        <span class="keyword">return</span>
      }
      parent.<span class="property">text</span> = textField.<span class="property">text</span> ?? <span class="string">""</span>
    }

    <span class="keyword">func</span> textFieldShouldReturn(<span class="keyword">_</span> textField: <span class="type">UITextField</span>) -&gt; <span class="type">Bool</span> {
      textField.<span class="call">resignFirstResponder</span>()
      <span class="keyword">return true</span>
    }
  }
}
</code></pre><p>And here it is compared to SwiftUI's <code>TextField</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">TextField</span>(<span class="string">"Type something... (SwiftUI)"</span>, text: $text)
      <span class="type">UIKitTextField</span>(<span class="string">"Type something... (UIKit)"</span>, text: $text)
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/how-to-customize-textfields/uikitswiftui.gif"/><p>Once we have this base text field, we can go ahead and grab all the UIKit functionality that we need, for example changing the placeholder text color is now a matter of adding the following code in <code>UIKitTextField</code>'s <code>makeUIView(context:)</code> method:</p><pre><code>textField.<span class="property">attributedPlaceholder</span> = <span class="type">NSAttributedString</span>(
  string: <span class="type">NSLocalizedString</span>(titleKey, comment: <span class="string">""</span>),
  attributes: [.<span class="dotAccess">foregroundColor</span>: <span class="type">UIColor</span>.<span class="property">red</span>]
)
</code></pre><img src="https://www.fivestars.blog/assets/posts/how-to-customize-textfields/red.png"/><p>With UIKit at our disposal, we can do much more than just simple customizations. For example, we can associate date/picker keyboard types to our text fields, both of which are not supported in SwiftUI (FB9079186 and FB9079187). More importantly, we can make any text field become/resign first responder (FB9081556).</p><blockquote><p>For an advanced <code>TextField</code> <code>UIViewRepresentable</code> example, I recommend to check out <a href="https://github.com/SwiftUIX/SwiftUIX/blob/b9d6c85b9379dc0f8887da80c3c8ab31b59845c3/Sources/Intramodular/Bridged/CocoaTextField.swift">SwiftUIX's <code>CocoaTextField</code></a>.</p></blockquote><h2>The introspect way</h2><p>Despite SwiftUI APIs being very different from their UIKit counterparts, oftentimes UIKit is still used behind the scenes.</p><p>As of iOS 14 this is still true for <code>TextField</code>, which uses <code>UITextField</code> under the hood:<br>keeping this in mind, we could traverse <code>TextField</code>‚Äôs UIKit hierarchy and look for the associated <code>UITextField</code>.</p><p>This is precisely what the <a href="https://github.com/siteline/SwiftUI-Introspect"><code>Introspect for SwiftUI</code> library</a> does, allowing us to reach for the UIKit counterparts of our SwiftUI views, thus letting us unlock UIKit‚Äôs power/control without having to create our own <code>UIViewRepresentable</code>:</p><pre><code><span class="keyword">import</span> Introspect

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(<span class="string">"Type something..."</span>, text: $text)
      .<span class="call">introspectTextField</span> { textField <span class="keyword">in</span>
        <span class="comment">// this method will be called with our view's UITextField (if found)</span>
        ...
      }
  }
}
</code></pre><p>As an example, SwiftUI doesn‚Äôt have a way to associate a tool bar to a given text field (FB9081641), we can use <code>Introspect</code> to patch that:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(<span class="string">"Type something..."</span>, text: $text)
      .<span class="call">introspectTextField</span>(customize: addToolbar)
  }

  <span class="keyword">func</span> addToolbar(to textField: <span class="type">UITextField</span>) {
    <span class="keyword">let</span> toolBar = <span class="type">UIToolbar</span>(
      frame: <span class="type">CGRect</span>(
        origin: .<span class="dotAccess">zero</span>,
        size: <span class="type">CGSize</span>(width: textField.<span class="property">frame</span>.<span class="property">size</span>.<span class="property">width</span>, height: <span class="number">44</span>)
      )
    )
    <span class="keyword">let</span> flexButton = <span class="type">UIBarButtonItem</span>(
      barButtonSystemItem: <span class="type">UIBarButtonItem</span>.<span class="type">SystemItem</span>.<span class="property">flexibleSpace</span>,
      target: <span class="keyword">nil</span>,
      action: <span class="keyword">nil</span>
    )
    <span class="keyword">let</span> doneButton = <span class="type">UIBarButtonItem</span>(
      title: <span class="string">"Done"</span>,
      style: .<span class="dotAccess">done</span>,
      target: <span class="keyword">self</span>,
      action: <span class="keyword">#selector</span>(textField.<span class="call">didTapDoneButton</span>(<span class="keyword">_</span>:))
    )
    toolBar.<span class="call">setItems</span>([flexButton, doneButton], animated: <span class="keyword">true</span>)
    textField.<span class="property">inputAccessoryView</span> = toolBar
  }
}

<span class="keyword">extension</span>  <span class="type">UITextField</span> {
  <span class="keyword">@objc func</span> didTapDoneButton(<span class="keyword">_</span> button: <span class="type">UIBarButtonItem</span>) -&gt; <span class="type">Void</span> {
    <span class="call">resignFirstResponder</span>()
  }
}
</code></pre><blockquote><p>Over 20 lines for a <code>Done</code> button!</p></blockquote><img src="https://www.fivestars.blog/assets/posts/how-to-customize-textfields/toolbar.gif"/><p>While this approach works today, it‚Äôs not guaranteed to work in future iOS releases, as we‚Äôre relying on SwiftUI‚Äôs private implementation details.</p><p>With that being said, using <code>Introspect</code> is safe: when SwiftUI‚Äôs <code>TextField</code> will no longer use <code>UITextField</code>, our customization method (<code>addToolbar(to:)</code> in the example above) will <em>not</em> be called.</p><h2>The TextFieldStyle way</h2><p>At the beginning of the article it‚Äôs mentioned how SwiftUI doesn‚Äôt allow us to create our own `TextFieldStyle‚Äôs yet.</p><p>As of Xcode 12.5, this is the complete <code>TextFieldStyle</code> declaration:</p><pre><code><span class="comment">/// A specification for the appearance and interaction of a text field.</span>
<span class="keyword">@available</span>(iOS <span class="number">13.0</span>, macOS <span class="number">10.15</span>, tvOS <span class="number">13.0</span>, watchOS <span class="number">6.0</span>, *)
<span class="keyword">public protocol</span> TextFieldStyle {

}
</code></pre><p>However it's actually possible to create our own style via a "hidden" <code>_body</code> method, therefore we could think about the actual <code>TextFieldStyle</code> declaration as following:</p><pre><code><span class="keyword">public protocol</span> TextFieldStyle {
  <span class="keyword">associatedtype</span> _Body: <span class="type">View</span>
  <span class="keyword">@ViewBuilder func</span> _body(configuration: <span class="type">TextField</span>&lt;<span class="type">Self</span>.<span class="type">_Label</span>&gt;) -&gt; <span class="type">Self</span>.<span class="type">_Body</span>
  <span class="keyword">typealias</span> _Label = <span class="type">_TextFieldStyleLabel</span>
}
</code></pre><p>...making it possible to create our own styles:</p><pre><code><span class="keyword">struct</span> FSTextFieldStyle: <span class="type">TextFieldStyle</span> {
  <span class="keyword">func</span> _body(configuration: <span class="type">TextField</span>&lt;<span class="type">_Label</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
     <span class="comment">//</span>
  }
}
</code></pre><p>Here's how we could replace our previous <code>FSTextField</code> declaration with a new <code>FSTextFieldStyle</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">""</span>

  <span class="comment">/// Whether the user is focused on this `TextField`.</span>
  <span class="keyword">@State private var</span> isEditing: <span class="type">Bool</span> = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(<span class="string">"Type something..."</span>, text: $text, onEditingChanged: { isEditing = $0 })
      .<span class="call">textFieldStyle</span>(<span class="type">FSTextFieldStyle</span>(isEditing: isEditing))
  }
}

<span class="keyword">struct</span> FSTextFieldStyle: <span class="type">TextFieldStyle</span> {
  <span class="comment">/// Whether the user is focused on this `TextField`.</span>
  <span class="keyword">var</span> isEditing: <span class="type">Bool</span>

  <span class="keyword">func</span> _body(configuration: <span class="type">TextField</span>&lt;<span class="type">_Label</span>&gt;) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    configuration
      .<span class="call">textFieldStyle</span>(<span class="type">PlainTextFieldStyle</span>())
      .<span class="call">multilineTextAlignment</span>(.<span class="dotAccess">leading</span>)
      .<span class="call">accentColor</span>(.<span class="dotAccess">pink</span>)
      .<span class="call">foregroundColor</span>(.<span class="dotAccess">blue</span>)
      .<span class="call">font</span>(.<span class="dotAccess">title</span>.<span class="call">weight</span>(.<span class="dotAccess">semibold</span>))
      .<span class="call">padding</span>(.<span class="dotAccess">vertical</span>, <span class="number">12</span>)
      .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>, <span class="number">16</span>)
      .<span class="call">background</span>(border)
  }

  <span class="keyword">var</span> border: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">16</span>)
      .<span class="call">strokeBorder</span>(
        <span class="type">LinearGradient</span>(
          gradient: .<span class="keyword">init</span>(
            colors: [
              <span class="type">Color</span>(red: <span class="number">163</span> / <span class="number">255.0</span>, green: <span class="number">243</span> / <span class="number">255.0</span>, blue: <span class="number">7</span> / <span class="number">255.0</span>),
              <span class="type">Color</span>(red: <span class="number">226</span> / <span class="number">255.0</span>, green: <span class="number">247</span> / <span class="number">255.0</span>, blue: <span class="number">5</span> / <span class="number">255.0</span>)
            ]
          ),
          startPoint: .<span class="dotAccess">topLeading</span>,
          endPoint: .<span class="dotAccess">bottomTrailing</span>
        ),
        lineWidth: isEditing ? <span class="number">4</span> : <span class="number">2</span>
      )
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/how-to-customize-textfields/customSwiftUI.gif"/><p>Unfortunately, this approach uses private API, making it unsafe to use: hopefully, we will get an official API soon (FB9078993).</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>SwiftUI lets us design views at a breakneck speed: when SwiftUI alone doesn‚Äôt meet all our needs, there are multiple alternatives out there that we can reach for.</p><p>In this article we‚Äôve covered four different ways to customize a <code>TextField</code>, but the same can be applied to many other SwiftUI components. Do you use any of these methods? Do you use something else altogether? Feel free to reach out and let me know via <a href="mailto:hello@fivestars.blog">email</a> or <a href="https://twitter.com/zntfdr">twitter</a>!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-protocols</guid><title>Every SwiftUI protocol explained</title><description>How many protocols does SwiftUI define? How many do we know about and actually use? Let's answer these questions, and more!</description><link>https://www.fivestars.blog/articles/swiftui-protocols</link><pubDate>Tue, 13 Apr 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Did you know that SwiftUI defines <strong>54</strong> protocols? Let's have a look at all of them!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Core protocols</h2><ul><li><code>View</code></li><li><code>ViewModifier</code></li><li><code>App</code></li><li><code>Scene</code></li></ul><p>SwiftUI is all about declaring and modifying views: it should come with no surprise that two of the most important protocols are <code>View</code> and <code>ViewModifier</code>, which let us define our own views and our own view modifiers.</p><p>Furthermore, from Xcode 12 SwiftUI has gained the complete app life cycle thanks to <code>App</code> and <code>Scene</code>, allowing us to build SwiftUI apps from the start.</p><pre><code><span class="keyword">@main
struct</span> FiveStarsApp: <span class="type">App</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
    <span class="type">WindowGroup</span> {
      <span class="type">ContentView</span>()
    }
  }
}
</code></pre><h2>Styles</h2><ul><li><code>ButtonStyle</code></li><li><code>DatePickerStyle</code> (iOS, macOS)</li><li><code>GaugeStyle</code> (watchOS)</li><li><code>GroupBoxStyle</code> (iOS, macOS)</li><li><code>IndexViewStyle</code> (iOS, tvOS)</li><li><code>LabelStyle</code></li><li><code>ListStyle</code></li><li><code>MenuButtonStyle</code> (macOS)</li><li><code>MenuStyle</code> (iOS, macOS)</li><li><code>NavigationViewStyle</code></li><li><code>PickerStyle</code></li><li><code>PrimitiveButtonStyle</code></li><li><code>ProgressViewStyle</code></li><li><code>ShapeStyle</code></li><li><code>TabViewStyle</code></li><li><code>TextFieldStyle</code></li><li><code>ToggleStyle</code></li><li><code>WindowStyle</code> (macOS)</li><li><code>WindowToolbarStyle</code> (macOS)</li></ul><p>With 19 definitions, this is the biggest category of SwiftUI protocols:<br>styles are similar to view modifiers, but instead of being applied to all views, they're applied only to specific views (e.g. <a href="https://www.fivestars.blog/articles/label/"><code>Label</code></a>s, <a href="https://www.fivestars.blog/articles/button-styles/"><code>Button</code></a>s, ...).</p><p>To apply a style we use the associated view modifier <code>xxStyle(_:)</code> (e.g. <a href="https://www.fivestars.blog/articles/button-styles/"><code>buttonStyle(_:)</code></a>), where we can pass any of the predefined SwiftUI styles, or even our own.</p><pre><code><span class="type">Button</span>(<span class="string">"Rounded rectangle + shadow button style"</span>) {
  <span class="comment">// button tapped</span>
}
.<span class="call">buttonStyle</span>(<span class="type">RoundedRectangleWithShadowedLabelButtonStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-protocols/roundedRectangle.gif"/><blockquote><p>Example from <a href="https://www.fivestars.blog/articles/button-styles/">Exploring SwiftUI's <code>Button</code> styles</a>.</p></blockquote><p>An important feature of styles is that their modifier can be applied to <em>any</em> view, and all matching subviews will automatically inherit said style:</p><pre><code><span class="type">VStack</span> {
  <span class="type">Label</span>(<span class="string">"One"</span>, systemImage: <span class="string">"1.circle.fill"</span>)
  <span class="type">Label</span>(<span class="string">"Two"</span>, systemImage: <span class="string">"2.circle.fill"</span>)
  <span class="type">Label</span>(<span class="string">"Three"</span>, systemImage: <span class="string">"3.circle.fill"</span>)
}
.<span class="call">labelStyle</span>(<span class="type">ShadowLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-protocols/labels.png"/><blockquote><p>Example from <a href="https://www.fivestars.blog/articles/label/">our <code>Label</code> deep dive</a>.</p></blockquote><h2>Widgets (iOS, macOS)</h2><ul><li><code>Widget</code></li><li><code>WidgetBundle</code></li><li><code>WidgetConfiguration</code></li></ul><blockquote><p>These are part of the <a href="https://www.fivestars.blog/articles/swiftui-widgetkit/">new SwiftUI features that we gained thanks to WidgetKit</a>.</p></blockquote><p>Widgets not only are one of the main highlights of iOS 14/macOS 11, but also come with their own set of protocols and definitions.</p><p>More specifically these protocols lets us declare and configure all our apps widgets via code:</p><pre><code><span class="keyword">@main
struct</span> FSWidgets: <span class="type">WidgetBundle</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Widget</span> {
    <span class="type">LatestArticleWidget</span>()
    <span class="type">NewArticlesListWidget</span>()
  }
}
</code></pre><p>This approach is a clear departure from previous declarations such as SiriKit intents (done via <code>.intentdefinition</code> files) and Core Data models (declared via a <code>.xcdatamodeld</code> file).</p><p>Having such declarations in code makes things more straightforward, and give developers easy and direct access to them, avoiding the need for Xcode to extract and generate them at build time, like it has to do for SiriKit intents and Core Data models. Hopefully we will see this trend continue at this year WWDC.</p><h2>Shapes</h2><ul><li><code>Shape</code></li><li><code>InsettableShape</code></li></ul><p>SwiftUI comes with many shapes such as <code>Rectangle</code> and <code>Circle</code>: instead of limiting our choices to the built-in offering, we can expand SwiftUI's catalog by defining our own shapes conforming to these shape protocols.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="type">Circle</span>()
        .<span class="call">stroke</span>(<span class="type">Color</span>.<span class="property">black</span>, lineWidth: <span class="number">10</span>)

      <span class="type">ProgressCircle</span>(progress: <span class="number">0.4</span>)
        .<span class="call">stroke</span>(<span class="type">Color</span>.<span class="property">yellow</span>, lineWidth: <span class="number">10</span>)
    }
  }
}

<span class="keyword">struct</span> ProgressCircle: <span class="type">Shape</span> {
  <span class="keyword">var</span> progress: <span class="type">CGFloat</span>

  <span class="keyword">func</span> path(in rect: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> {
    <span class="keyword">let</span> centerX: <span class="type">CGFloat</span> = rect.<span class="property">width</span> / <span class="number">2</span>
    <span class="keyword">let</span> centerY: <span class="type">CGFloat</span> = rect.<span class="property">height</span> / <span class="number">2</span>

    <span class="keyword">var</span> path = <span class="type">Path</span>()
    path.<span class="call">addArc</span>(
      center: <span class="type">CGPoint</span>(x: centerX, y: centerY),
      radius: <span class="call">min</span>(centerX, centerY),
      startAngle: <span class="type">Angle</span>(degrees: <span class="number">0</span>),
      endAngle: <span class="type">Angle</span>(degrees: <span class="number">360</span> * <span class="type">Double</span>(progress)),
      clockwise: <span class="keyword">false</span>
    )

    <span class="keyword">return</span> path
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-protocols/progress.png"/><h2>Animations</h2><ul><li><code>Animatable</code></li><li><code>AnimatableModifier</code></li><li><code>GeometryEffect</code></li><li><code>VectorArithmetic</code></li></ul><p>Thanks to SwiftUI's declarative nature, animation bugs have basically disappeared: no longer we need to track and manage canceling transitions, calculate the right spring value based on gestures speed, etc.</p><p>Animations in SwiftUI are state-based (like everything else): as long as our view is on screen, the right animation for the given state change will happen automatically.</p><p><a href="https://twitter.com/SwiftUILab">Javier Nigro</a> has a great <a href="https://swiftui-lab.com/swiftui-animations-part1/">Advanced SwiftUI Animations</a> deep dive into this.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> progress: <span class="type">CGFloat</span> = <span class="number">0</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="type">Circle</span>()
        .<span class="call">stroke</span>(<span class="type">Color</span>.<span class="property">black</span>, lineWidth: <span class="number">10</span>)

      <span class="type">ProgressCircle</span>(progress: progress)
        .<span class="call">stroke</span>(<span class="type">Color</span>.<span class="property">yellow</span>, lineWidth: <span class="number">10</span>)
        .<span class="call">animation</span>(<span class="type">Animation</span>.<span class="property">linear</span>.<span class="call">speed</span>(<span class="number">0.4</span>))
        .<span class="call">onAppear</span> {
          progress = <span class="number">1</span>
        }
    }
  }
}

<span class="keyword">struct</span> ProgressCircle: <span class="type">Shape</span> {
  <span class="keyword">var</span> progress: <span class="type">CGFloat</span>

  <span class="comment">// üëáüèª Animatable protocol requirement.</span>
  <span class="keyword">var</span> animatableData: <span class="type">CGFloat</span> {
    <span class="keyword">get</span> { progress }
    <span class="keyword">set</span> { progress = newValue }
  }

  <span class="keyword">func</span> path(in rect: <span class="type">CGRect</span>) -&gt; <span class="type">Path</span> {
    <span class="keyword">let</span> centerX: <span class="type">CGFloat</span> = rect.<span class="property">width</span> / <span class="number">2</span>
    <span class="keyword">let</span> centerY: <span class="type">CGFloat</span> = rect.<span class="property">height</span> / <span class="number">2</span>

    <span class="keyword">var</span> path = <span class="type">Path</span>()
    path.<span class="call">addArc</span>(
      center: <span class="type">CGPoint</span>(x: centerX, y: centerY),
      radius: <span class="call">min</span>(centerX, centerY),
      startAngle: <span class="type">Angle</span>(degrees: <span class="number">0</span>),
      endAngle: <span class="type">Angle</span>(degrees: <span class="number">360</span> * <span class="type">Double</span>(progress)),
      clockwise: <span class="keyword">false</span>
    )

    <span class="keyword">return</span> path
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-protocols/progress.gif"/><h2>Environment</h2><ul><li><code>EnvironmentKey</code></li><li><code>EnvironmentalModifier</code></li></ul><p>SwiftUI's environment is one of the many ways we use to <a href="https://www.fivestars.blog/articles/app-state/">pass data within our view hierarchy</a>, <code>EnvironmentKey</code> lets us inject our own data in the environment, while <code>EnvironmentalModifier</code> lets us return view modifiers based on the current environment:</p><pre><code><span class="keyword">struct</span> AnimatableEnvModifier: <span class="type">EnvironmentalModifier</span> {
  <span class="keyword">func</span> resolve(in environment: <span class="type">EnvironmentValues</span>) -&gt; <span class="keyword">some</span> <span class="type">ViewModifier</span> {
    <span class="type">AnimatableModifier</span>(
    	isReduceMotionEnabled: environment.<span class="property">accessibilityReduceMotion</span>
    )
  }

  <span class="keyword">struct</span> AnimatableModifier: <span class="type">ViewModifier</span> {
    <span class="keyword">let</span> isReduceMotionEnabled: <span class="type">Bool</span>

    <span class="keyword">func</span> body(content: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
      content
        .<span class="call">animation</span>(isReduceMotionEnabled ? .<span class="dotAccess">none</span> : .<span class="dotAccess">easeInOut</span>)
    }
  }
}

<span class="type">FSView</span>()
  .<span class="call">modifier</span>(<span class="type">AnimatableEnvModifier</span>())
</code></pre><h2>Previews</h2><ul><li><code>PreviewContext</code></li><li><code>PreviewContextKey</code></li><li><code>PreviewProvider</code></li></ul><p>With SwiftUI's introduction we have also gained Xcode previews, which speeds up immensely building and testing views right from Xcode, without the need to launch our app.</p><p>Xcode previews come with a set of protocols that let us declare and set the right context for each preview.</p><pre><code><span class="keyword">struct</span> FSWidget_Previews: <span class="type">PreviewProvider</span> {
  <span class="keyword">static var</span> previews: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Group</span> {
      <span class="type">LatestArticleWidgetView</span>(configuration: <span class="type">FSWidgetIntent</span>())
      <span class="type">LatestArticleWidgetView</span>(configuration: <span class="type">FSWidgetIntent</span>())
        .<span class="call">environment</span>(\.<span class="property">colorScheme</span>, .<span class="dotAccess">dark</span>)
    }
    .<span class="call">previewContext</span>(<span class="type">WidgetPreviewContext</span>(family: .<span class="dotAccess">systemSmall</span>))
  }
}
</code></pre><h2>Legacy bridges</h2><ul><li><code>UIViewControllerRepresentable</code> (iOS)</li><li><code>UIViewRepresentable</code> (iOS)</li><li><code>NSViewControllerRepresentable</code> (macOS)</li><li><code>NSViewRepresentable</code> (macOS)</li><li><code>WKInterfaceObjectRepresentable</code> (watchOS)</li></ul><p>While SwiftUI is incredibly powerful per se, at launch most Apple's frameworks did not offer a correspondent SwiftUI view: think <code>MFMailComposeViewController</code> or <code>UIImagePickerController</code> for example.</p><p>Instead of making it impossible to access such views, SwiftUI offers a set of protocols that functions as bridge to these legacy views that are not yet natively available in SwiftUI.</p><p>As a bonus, these protocols let us access our own legacy view definitions, making it easy to migrate to SwiftUI without having to re-write our own UI completely from scratch.</p><pre><code><span class="keyword">@available</span>(iOS, introduced: <span class="number">13</span>, deprecated: <span class="number">14</span>, message: <span class="string">"Use SwiftUI's ProgressView"</span>)
<span class="keyword">public struct</span> ActivityIndicator: <span class="type">UIViewRepresentable</span> {
  <span class="keyword">let</span> isAnimating: <span class="type">Bool</span>
  <span class="keyword">let</span> style: <span class="type">UIActivityIndicatorView</span>.<span class="type">Style</span>

  <span class="keyword">public init</span>(isAnimating: <span class="type">Bool</span>, style: <span class="type">UIActivityIndicatorView</span>.<span class="type">Style</span>) {
    <span class="keyword">self</span>.<span class="property">isAnimating</span> = isAnimating
    <span class="keyword">self</span>.<span class="property">style</span> = style
  }

  <span class="keyword">public func</span> makeUIView(
    context: <span class="type">UIViewRepresentableContext</span>&lt;<span class="type">ActivityIndicator</span>&gt;
  ) -&gt; <span class="type">UIActivityIndicatorView</span> {
    <span class="type">UIActivityIndicatorView</span>(style: style)
  }

  <span class="keyword">public func</span> updateUIView(
    <span class="keyword">_</span> uiView: <span class="type">UIActivityIndicatorView</span>,
    context: <span class="type">UIViewRepresentableContext</span>&lt;<span class="type">ActivityIndicator</span>&gt;
  ) {
    isAnimating ? uiView.<span class="call">startAnimating</span>() : uiView.<span class="call">stopAnimating</span>()
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-protocols/activity.gif"/><h2>Responder chain</h2><ul><li><code>Commands</code></li><li><code>FocusedValueKey</code></li></ul><p>The responder chain is one of the many SwiftUI victims: there's no exact equivalent for this concept, on the other hand SwiftUI offers various replacements such as <code>Commands</code> and <code>FocusedValueKey</code>.</p><p>These protocols let us define our own ways to deal with various events coming from different parts of the app, this is something I look forward to see further explored at this year's WWDC.</p><pre><code><span class="keyword">@main
struct</span> FSApp: <span class="type">App</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
    <span class="type">WindowGroup</span> {
      <span class="type">ContentView</span>()
    }
    .<span class="call">commands</span> {
      <span class="type">CommandMenu</span>(<span class="string">"Five Stars menu"</span>) {
        <span class="type">Button</span>(<span class="string">"Secret action"</span>) {
          <span class="comment">// "Five Stars menu/Secret action" has been triggered.</span>
        }.<span class="call">keyboardShortcut</span>(<span class="string">"f"</span>)
      }
    }
  }
}
</code></pre><h2>Toolbar</h2><ul><li><code>ToolbarContent</code></li><li><code>CustomizableToolbarContent</code></li></ul><p>When declaring toolbars, we add items via one of the three <code>.toolbar(content:)</code> view modifiers:<br>while one of them accepts any view via a <code>@ViewBuilder content: () -&gt; Content</code> parameter, the other two accept a <code>@ToolbarContentBuilder content: () -&gt; Content</code> parameter instead, where the content is either conforming to <code>ToolbarContent</code> or <code>CustomizableToolbarContent</code>.</p><p>These last two view modifiers will probably let SwiftUI further optimize/organize the toolbar.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">FSView</span>()
        .<span class="call">toolbar</span> {
          <span class="type">ToolbarItem</span>(id: <span class="string">"add-action"</span>) {
            <span class="type">Button</span>(<span class="string">"Add"</span>, action: {
              <span class="comment">// add action triggered</span>
            })
          }
        }
      .<span class="call">navigationTitle</span>(<span class="string">"FIVE STARS"</span>)
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-protocols/add.png"/><h2>Documents (iOS, macOS)</h2><ul><li><code>FileDocument</code></li><li><code>ReferenceFileDocument</code></li></ul><p>Both protocols are used to define the supported file type in a document based app:</p><pre><code><span class="keyword">@main
struct</span> FSApp: <span class="type">App</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
    <span class="type">DocumentGroup</span>(newDocument: <span class="type">TextDocument</span>()) { file <span class="keyword">in</span>
      <span class="type">ContentView</span>(document: file.<span class="property">$document</span>)
    }
  }
}

<span class="keyword">struct</span> TextDocument: <span class="type">FileDocument</span> {
  <span class="keyword">static var</span> readableContentTypes = [<span class="type">UTType</span>.<span class="property">plainText</span>]
  <span class="keyword">var</span> text = <span class="string">""</span>

  <span class="keyword">init</span>(configuration: <span class="type">ReadConfiguration</span>) <span class="keyword">throws</span> {
    <span class="keyword">if let</span> data = configuration.<span class="property">file</span>.<span class="property">regularFileContents</span>{
      text = <span class="type">String</span>(data: data, encoding: .<span class="dotAccess">utf8</span>) ?? <span class="string">""</span>
    } <span class="keyword">else</span> {
      <span class="keyword">throw</span> <span class="type">CocoaError</span>(.<span class="dotAccess">fileReadCorruptFile</span>)
    }
  }

  <span class="keyword">func</span> fileWrapper(configuration: <span class="type">WriteConfiguration</span>) <span class="keyword">throws</span> -&gt; <span class="type">FileWrapper</span> {
    <span class="keyword">let</span> data = text.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)!
    <span class="keyword">return</span> .<span class="keyword">init</span>(regularFileWithContents: data)
  }

  <span class="keyword">init</span>(initialText: <span class="type">String</span> = <span class="string">""</span>) {
    text = initialText
  }
}
</code></pre><h2>One-off protocols</h2><p>Lastly, we have a few protocols that do not belong to any particular group, let's have a run through all of them!</p><h3>Custom alignment</h3><ul><li><code>AlignmentID</code></li></ul><p>When <a href="https://www.fivestars.blog/articles/stack-spacer-alternatives/">playing with frames and spacers</a> doesn't cut it, SwiftUI lets us define our own powerful alignments, applicable among multiple views in different stacks.</p><pre><code><span class="keyword">public extension</span> <span class="type">VerticalAlignment</span> {
  <span class="keyword">struct</span> CustomAlignment: <span class="type">AlignmentID</span> {
    <span class="keyword">public static func</span> defaultValue(in context: <span class="type">ViewDimensions</span>) -&gt; <span class="type">CGFloat</span> {
      context[<span class="type">VerticalAlignment</span>.<span class="property">center</span>]
    }
  }

  <span class="keyword">static let</span> navigationTitle = <span class="type">VerticalAlignment</span>(<span class="type">CustomAlignment</span>.<span class="keyword">self</span>)
}


<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span>(alignment: <span class="type">Alignment</span>(horizontal: .<span class="dotAccess">center</span>, vertical: .<span class="dotAccess">navigationTitle</span>)) {
      <span class="type">Color</span>.<span class="property">yellow</span>
        .<span class="call">frame</span>(width: <span class="number">200</span>, height: <span class="number">40</span>)
        .<span class="call">alignmentGuide</span>(.<span class="dotAccess">navigationTitle</span>) { $0[<span class="type">VerticalAlignment</span>.<span class="property">top</span>] }

      <span class="type">Text</span>(<span class="string">"FIVE STARS"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">title</span>)
        .<span class="call">alignmentGuide</span>(.<span class="dotAccess">navigationTitle</span>) { $0[<span class="type">VerticalAlignment</span>.<span class="property">center</span>] }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-protocols/middle.png"/><h3>Reading child values</h3><ul><li><code>PreferenceKey</code></li></ul><p>While most SwiftUI communications are propagated from parent to child views, sometimes it's the children that need to communicate to their parents. In such cases there's <code>PreferenceKey</code>, which we took a deep dive on in <a href="https://www.fivestars.blog/articles/preferencekey-reduce/"><code>PreferenceKey</code>'s reduce method demystified</a>.</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">@warn_unqualified_access
  func</span> readSize(onChange: <span class="keyword">@escaping</span> (<span class="type">CGSize</span>) -&gt; <span class="type">Void</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">background</span>(
      <span class="type">GeometryReader</span> {
        <span class="type">Color</span>.<span class="property">clear</span>
          .<span class="call">preference</span>(key: <span class="type">SizePreferenceKey</span>.<span class="keyword">self</span>, value: $0.<span class="property">size</span>)
      }
    )
    .<span class="call">onPreferenceChange</span>(<span class="type">SizePreferenceKey</span>.<span class="keyword">self</span>, perform: onChange)
  }
}

<span class="keyword">private struct</span> SizePreferenceKey: <span class="type">PreferenceKey</span> {
  <span class="keyword">static var</span> defaultValue = <span class="type">CGSize</span>.<span class="property">zero</span>
  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">Value</span>, nextValue: () -&gt; <span class="type">Value</span>) { }
}
</code></pre><blockquote><p>We created this extension in <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/">Sharing layout information in SwiftUI</a>, with the addition of the <a href="https://www.fivestars.blog/articles/warn_unqualified_access/"><code>@warn_unqualified_access</code> attribute</a>.</p></blockquote><h3>Advanced drop management</h3><ul><li><code>DropDelegate</code></li></ul><p>While the delegation pattern has been replaced by closures in SwiftUI (e.g. <code>onAppear(perform:)</code>), there's one exception: <code>DropDelegate</code>.</p><p>This protocol lets us receive various drop events and even filter/stop drops in our views.</p><p><a href="https://twitter.com/SwiftUILab">Javer</a> has a <a href="https://swiftui-lab.com/drag-drop-with-swiftui/">great writeup</a> into this.</p><pre><code><span class="keyword">struct</span> FSDropDelegate: <span class="type">DropDelegate</span> {

  <span class="keyword">func</span> validateDrop(info: <span class="type">DropInfo</span>) -&gt; <span class="type">Bool</span> {
    <span class="keyword">true</span> <span class="comment">// Accept or reject the drop here.</span>
  }

  <span class="keyword">func</span> dropEntered(info: <span class="type">DropInfo</span>) {
    <span class="comment">// "Drop entered the view" event. Use this to shows that the view can accept
    // the object.</span>
  }

  <span class="keyword">func</span> performDrop(info: <span class="type">DropInfo</span>) -&gt; <span class="type">Bool</span> {
    <span class="keyword">true</span> <span class="comment">// Executed when the user "drops" their object into the view.</span>
  }
}
</code></pre><h3>SwiftUI property wrappers</h3><ul><li><code>DynamicProperty</code></li></ul><p>As covered in <a href="https://www.fivestars.blog/articles/swiftui-graph/">A sneak peek into SwiftUI's graph</a>, SwiftUI uses this protocol to find all views whose data needs to be managed and observed by SwiftUI itself.</p><p>Furthermore, as we've seen in <a href="articles/lets-build-state/">Let's build <code>@State</code></a>, we can use this protocol ourselves to define our own property wrappers recognized by SwiftUI.</p><pre><code><span class="keyword">@propertyWrapper
struct</span> AlternativeState&lt;V&gt;: <span class="type">DynamicProperty</span> {
  <span class="keyword">@State var</span> wrappedValue: <span class="type">V</span>

  <span class="keyword">var</span> projectedValue: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt; {
    <span class="type">Binding</span>(
      get: { wrappedValue },
      set: { wrappedValue = $0 }
    )
  }
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@AlternativeState var</span> text = <span class="string">"Five Stars"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Text</span>(text)
      <span class="type">Button</span>(<span class="string">"change"</span>) {
        text = [<span class="string">"five"</span>, <span class="string">"stars"</span>].<span class="call">randomElement</span>()!
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-protocols/change.gif"/><h3>Data collection views</h3><ul><li><code>DynamicViewContent</code></li></ul><p><code>DynamicViewContent</code> is used by special views that come with an associated and generic <code>data</code> collection:<br>views that conform to this method gains various modifiers such as <code>onInsert</code> and others, letting SwiftUI change the underlying data.</p><p>So far it's conformed only by <code>ForEach</code>, but our own view definitions can conform to it, too.</p><pre><code><span class="type">ForEach</span>(items) { item <span class="keyword">in</span>
  <span class="type">Text</span>(item.<span class="property">title</span>)
}
.<span class="call">onDelete</span>(perform: { ... })
.<span class="call">onMove</span>(perform: { ... })
</code></pre><h3>Gestures</h3><ul><li><code>Gesture</code></li></ul><p>Last but not least, SwiftUI comes with many gestures, which are all grouped together under the <code>Gesture</code> protocol.<br>This protocol also comes with various events our views can subscribe to, such as <code>onEnded(_:)</code> and <code>updating(_:body:)</code>.</p><p>Just like <code>View</code>s, we can compose multiple gestures together, combining <a href="https://developer.apple.com/documentation/swiftui/gesture/simultaneously(with:)">simultaneous</a>, <a href="https://developer.apple.com/documentation/swiftui/gesture/sequenced(before:)">sequential</a>, or <a href="https://developer.apple.com/documentation/swiftui/gesture/exclusively(before:)">exclusive</a> gestures.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="comment">// üëáüèª a Gesture</span>
    <span class="keyword">let</span> longPressDragGesture = <span class="type">LongPressGesture</span>(minimumDuration: <span class="number">0.5</span>)
      .<span class="call">sequenced</span>(before: <span class="type">DragGesture</span>())
      .<span class="call">onEnded</span> { value <span class="keyword">in</span>
        <span class="comment">// gesture has ended event.</span>
      }

    <span class="type">Text</span>(<span class="string">"Five Stars"</span>)
      .<span class="call">gesture</span>(longPressDragGesture)
  }
}
</code></pre><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>There you have it! In this article we've covered all fifty-four public protocols that make SwiftUI what it is today.</p><p>We definitely don't need to know all of them in order to build amazing products, still it's quite handy to know what to reach for whenever we have a new challenge in front of us.</p><p>If I've missed anything or if you have any feedback please feel free to reach me out via <a href="mailto:hello@fivestars.blog">email</a> or <a href="https://twitter.com/zntfdr">Twitter</a>, thank you!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/five-stars-2</guid><title>Welcome to FIVE STARS 2.0!</title><description>Come and discover everything that's new in this first FIVE STARS overhaul, there's also an announcement for people that would like to support the website, and more!</description><link>https://www.fivestars.blog/articles/five-stars-2</link><pubDate>Tue, 6 Apr 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>The first FIVE STARS overhaul is here!</p><p>Since relaunching the website back in 2019, FIVE STARS went on with <a href="https://twitter.com/zntfdr/status/1123464490341761024?s=12">small iterations</a> here and there, in the meanwhile, the content has outgrown the simple jekyll template that was being used.</p><p>Instead of continuing iterating, I took this opportunity to rewrite the whole website from the ground up with <a href="https://github.com/johnsundell/publish"><code>Publish</code></a>: let's have a look at what's new!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Home page</h2><p>The first challenge I wanted to tackle was articles navigation: the homepage has been completely redesigned and now comes with a <code>What's New</code> section, highlighting the latest six articles, followed by the five most popular categories, each showcasing their own most recent articles.</p><p>All sections come with a <code>Browse all</code> button, which filters and highlights all articles for said category.</p><h2>Article page</h2><p>The focus has always been the content, which now takes even more screen estate than before.</p><p>Every article displays its categories right under the title, making it clear from the start what the article is about.</p><p>These categories also function as buttons/filters: tapping on any of them will show all articles under that category.</p><p>Continuing with navigation enhancements, all articles come with a <code>Related articles</code> section at the bottom of their page, these articles are hand-picked and feature both older and newer articles, letting the reader go deeper into the topic covered in the main article.</p><p>After this section we have even more recommended articles, all from the same category (or categories) as the current one, allowing readers to explore other topics.</p><h2>Support &amp; sponsorship</h2><p>Something that has been asked more and more lately, and I'm very thankful for: FIVE STARS now accepts sponsors!</p><p>Whether you're a company or an individual, if you have ever benefited from my work and would like to support me, or if you would like to reach out the FIVE STARS audience with your awesome products, it's now possible:<br>please check out the new <a href="https://www.fivestars.blog/sponsor/">sponsor</a> page for more details and perks.</p><p>A big THANK YOU to everyone that has been asking for this!</p><h2>...and more!</h2><p>There are plenty of improvements scattered around, and I'm sure I have forgotten some as this overhaul has been ongoing for several months, here are some important updates:</p><ul><li>FIVE STARS has now a new twitter account! Follow <a href="https://twitter.com/fivestarsblog">@FiveStarsBlog</a> to be alerted on new articles, and more</li><li>@fivestars.blog emails! If you have any comments/feedback you can now reach out via email at <a href="mailto:hello@fivestars.blog">hello@fivestars.blog</a></li><li>FIVE STARS is a <a href="http://github.com/FiveStarsBlog/">GitHub organization</a>! All past and future projects will be hosted <a href="http://github.com/FiveStarsBlog/">here</a>.</li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Despite having completely changed format, both <a href="https://www.fivestars.blog/feed.rss">feed RSS</a> and previous links to articles should be handled correctly.</p><p>With that being said, as this is a big change, things might have broken here and there: please feel free to reach out (via <a href="mailto:hello@fivestars.blog">email</a> or <a href="https://twitter.com/zntfdr">twitter</a>) and let me know of any issue you might encounter, I will be very happy to fix everything!</p><p>If there's anything else you would like to see, or if you have any feedback and/or suggestion to make this website even better, feel free to reach out as well!</p><p>This is just the beginning: I'm incredibly grateful for how much FIVE STARS has grown in just two years, and I cannot wait to see where it will bring us next, thank you for reading!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-graph</guid><title>A sneak peek into SwiftUI's graph</title><description>Let's explore how SwiftUI knows what and when to observe view-specific publishers at any given time!</description><link>https://www.fivestars.blog/articles/swiftui-graph</link><pubDate>Tue, 30 Mar 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>One performance tip that the SwiftUI team has given us <a href="https://www.wwdcnotes.com/notes/wwdc20/10040/">during last year's WWDC</a> is to make views initializers as light as possible: this is because our views can be created and destroyed multiple times every second.</p><p>From another perspective, our <code>View</code>s are not actual views, they should be seen more as recipes to how views look and behave, but their actual implementation is handled behind the scenes by SwiftUI.</p><p>Furthermore, this explains why we use property wrappers such as <code>@State</code> and <code>@StateObject</code>: our <code>View</code>s do not own/hold such values, it's their SwiftUI implementation counterparts that do so.</p><p>SwiftUI is a state-driven framework: things happens because something changes, and something else is observing that change.</p><p>In <a href="https://www.fivestars.blog/articles/lets-build-state/">Let's build @State</a> we've covered how we can create our own property wrappers observed by SwiftUI, in this new article let's explore how SwiftUI knows what to observe in the first place.</p><blockquote><p>As usual, I have no access to the actual SwiftUI code/implementation. What we find here is a best guess/mock of the original behavior, there‚Äôs probably much more to it in the real implementation.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The SwiftUI graph</h2><blockquote><p>In <a href="https://en.wikipedia.org/wiki/Graph_theory">graph theory</a> a tree is a specific type of graph. This article uses both 'graph' and 'tree': even when it's just written 'graph', we're talking about a 'tree graph'.</p></blockquote><p>When we display a SwiftUI view, SwiftUI creates and tracks its associated view graph.</p><p>Imagine that this is our app main view:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">HStack</span> {
        <span class="type">NavigationLink</span>(
          <span class="string">"Go to A"</span>,
          destination: <span class="type">ViewA</span>()
        )

        <span class="type">NavigationLink</span>(
          <span class="string">"Go to B"</span>,
          destination: <span class="type">ViewB</span>()
        )
      }
    }
  }
}
</code></pre><p>Where <code>ViewA</code> and <code>ViewB</code> are defined as following:</p><pre><code><span class="keyword">struct</span> ViewA: <span class="type">View</span> {
  <span class="keyword">@State var</span> stringState: <span class="type">String</span> = <span class="string">"A"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Text</span>(stringState)
      <span class="type">Button</span>(<span class="string">"Change string"</span>) {
        stringState = [<span class="string">"A"</span>, <span class="string">"AA"</span>, <span class="string">"AAA"</span>, <span class="string">"AAAA"</span>].<span class="call">randomElement</span>()!
      }
    }
  }
}

<span class="keyword">struct</span> ViewB: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(<span class="string">"B"</span>)
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-graph/demo.gif"/><p>Using the same approach in <a href="https://www.fivestars.blog/articles/inspecting-views/">Inspecting SwiftUI views</a>, we can explore the associated view tree, which roughly matches SwiftUI's internal graph:</p><pre><code><span class="type">NavigationView</span>&lt;
  <span class="type">HStack</span>&lt;
    <span class="type">TupleView</span>&lt;
      (
        <span class="type">NavigationLink</span>&lt;<span class="type">Text</span>, <span class="type">ViewA</span>&gt;, 
        <span class="type">NavigationLink</span>&lt;<span class="type">Text</span>, <span class="type">ViewB</span>&gt;
      )
    &gt;
  &gt;
&gt;
</code></pre><blockquote><p>Formatted for better readability.</p></blockquote><p>Where <code>NavigationView</code> is the <em>root</em> of our tree, and each <code>NavigationLink</code> is a <em>leaf node</em>.</p><p>When the user views <code>ContentView</code>, the tree above is all SwiftUI needs to worry about.</p><p>Let's assume that the user taps on <code>Go to A</code> next, at that point the <em>active</em> SwiftUI graph will expand to contain <code>ViewA</code>'s own tree:</p><pre><code><span class="type">VStack</span>&lt;
  <span class="type">TupleView</span>&lt;
    (
      <span class="type">Text</span>, 
      <span class="type">Button</span>&lt;<span class="type">Text</span>&gt;
    )
  &gt;
&gt;
</code></pre><p>The new active SwiftUI graph:</p><pre><code><span class="type">NavigationView</span>&lt;
  <span class="type">HStack</span>&lt;
    <span class="type">TupleView</span>&lt;
      (
        <span class="type">NavigationLink</span>&lt;
          <span class="type">Text</span>, 
          <span class="type">VStack</span>&lt;
            <span class="type">TupleView</span>&lt;
              (
                <span class="type">Text</span>, 
                <span class="type">Button</span>&lt;<span class="type">Text</span>&gt;
              )
            &gt;
          &gt;
        &gt;, 
        <span class="type">NavigationLink</span>&lt;<span class="type">Text</span>, <span class="type">ViewB</span>&gt;
      )
    &gt;
  &gt;
&gt;
</code></pre><p><code>ViewA</code> is not a <em>static</em> view, but comes with its own <code>@State</code> property wrapper, which in turn comes with its own storage and publisher:</p><ul><li>as long as <code>ViewA</code> is part of the <em>active</em> graph, SwiftUI will need to allocate, hold, and subscribe to <code>ViewA</code>'s dynamic properties.</li><li>when the user moves back to <code>ContentView</code>, <code>ViewA</code> will be removed from SwiftUI's active graph, and all <code>ViewA</code>'s dynamic properties and associated storage/publishers will need to be freed as well.</li></ul><p>How does SwiftUI know which storage/publishers is associated to each view? Let's answer that next.</p><h2>Dynamic vs. static views</h2><p>Imagine that our app needs to display <code>ViewA</code>:<br>before doing so, SwiftUI needs to figure out whether <code>ViewA</code> is dynamic (a.k.a. has its own storage/publishers) or static (a.k.a. it's a set of primitives such as <code>Int</code>, <code>String</code> etc).</p><p>The answer to this question lays on the view's property wrappers (or the lack of them).</p><p>It's important to note how SwiftUI's property wrappers do not come with the actual associated values, but only with a reference to them: these values are not part of the <code>View</code> itself.</p><p>This is to say, we can initialize a dynamic <code>View</code> even when its associated storage has not been allocated yet.</p><p>With this in mind, SwiftUI can use reflection to figure out which dynamic properties a view has, before the view becomes part of the active graph:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="comment">/// Finds and returns the dynamic properties of a view instance.</span>
  <span class="keyword">func</span> dynamicProperties() -&gt; [(<span class="type">String</span>, <span class="type">DynamicProperty</span>)] {
    <span class="type">Mirror</span>(reflecting: <span class="keyword">self</span>)
      .<span class="dotAccess">children</span>
      .<span class="call">compactMap</span> { child <span class="keyword">in
        if var</span> name = child.<span class="property">label</span>,
           <span class="keyword">let</span> property = child.<span class="property">value</span> <span class="keyword">as</span>? <span class="type">DynamicProperty</span> {

          <span class="comment">// Property wrappers have underscore-prefixed names.</span>
          name = <span class="type">String</span>(name.<span class="property">first</span> == <span class="string">"_"</span> ? name.<span class="call">dropFirst</span>(<span class="number">1</span>) : name.<span class="call">dropFirst</span>(<span class="number">0</span>))

          <span class="keyword">return</span> (name, property)
        }
        <span class="keyword">return nil</span>
      }
  }
}
</code></pre><p>This new <code>View</code> method:</p><ul><li>gets a <code>Mirror</code> representation of the view</li><li>extracts the view properties via the mirror's <code>children</code> property</li><li>filters and returns the name and and value of each <code>DynamicProperty</code> of the view.</li></ul><blockquote><p>As we've seen in <a href="https://www.fivestars.blog/articles/lets-build-state/">Let's build @State</a>, all SwiftUI's property wrappers conform to the <code>DynamicProperty</code> protocol.</p></blockquote><p>With <code>dynamicProperties()</code> (or a similar method) SwiftUI can determine whether a view is static or dynamic, and can add such findings to the associated view node in its internal graph.</p><p>Thanks to this knowledge SwiftUI has what it needs to let the user navigate within its graph, and knows what and when to instantiate and/or destroy at each movement.</p><h2>ViewA example</h2><p>To make things clearer, let's call <code>dynamicProperties()</code> on <code>ViewA</code>.</p><p>First, let's do so in <code>ViewA</code>'s initializer:</p><pre><code><span class="keyword">struct</span> ViewA: <span class="type">View</span> {
  <span class="keyword">@State var</span> stringState: <span class="type">String</span> = <span class="string">"A"</span>

  <span class="keyword">init</span>() {
    <span class="call">print</span>(<span class="call">dynamicProperties</span>())
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    ...
  }
}
</code></pre><p>The first time this gets executed is when SwiftUI evaluates <code>ContentView</code>'s body, as <code>ViewA()</code> is part of one <code>NavigationLink</code> declaration. This is <code>dynamicProperties()</code>'s output:</p><pre><code>[
  (
    <span class="string">"stringState"</span>,
    <span class="type">SwiftUI</span>.<span class="type">State</span>&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;(_value: <span class="string">"A"</span>, _location: <span class="keyword">nil</span>)
  )
]
</code></pre><p><code>dynamicProperties()</code> correctly finds <code>ViewA</code>'s <code>@State</code> property (named <code>stringState</code> by us), however at this point <code>ViewA</code> is not part of SwiftUI's active graph, therefore there's no associated storage yet (a.k.a. <code>_location: nil</code>).</p><p>Let's now call <code>dynamicProperties()</code> anywhere during <code>ViewA</code>'s life cycle, for example on <code>onAppear</code>:</p><pre><code><span class="keyword">struct</span> ViewA: <span class="type">View</span> {
  <span class="keyword">@State var</span> stringState: <span class="type">String</span> = <span class="string">"A"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      ...
    }
    .<span class="call">onAppear</span>(perform: {
      <span class="call">print</span>(<span class="call">dynamicProperties</span>())
    })
  }
}
</code></pre><p>The only way for <code>ViewA</code>'s <code>onAppear</code> to trigger is for the view to be about to be shown to the user, making <code>ViewA</code> part of SwiftUI's <em>active</em> graph, in this case <code>dynamicProperties()</code>'s output is as following:</p><pre><code>[
  (
    <span class="string">"stringState"</span>, 
    <span class="type">SwiftUI</span>.<span class="type">State</span>&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;(
      _value: <span class="string">"A"</span>, 
      _location: <span class="type">Optional</span>(<span class="type">SwiftUI</span>.<span class="type">StoredLocation</span>&lt;<span class="type">Swift</span>.<span class="type">String</span>&gt;)
    )
  )
]
</code></pre><p>Our <code>@State</code> property is found again however, as <code>ViewA</code> is now part of SwiftUI's active graph, its associated state is fully initialized and managed, which we can confirm from the new <code>location</code> value.</p><p>Once the user goes back to <code>ContentView</code>, this <code>@State</code> (and its <code>SwiftUI.StoredLocation</code>) will be destroyed and will not be re-created until <code>ViewA</code> will be part of active graph once more.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>In this article we took another <em>behind the scenes</em> look at how SwiftUI works and manages our views:<br>most of the time we won't need to dive this deep, however it's great knowledge to have and might help us understand why things sometimes do not work the way we expect.</p><p>I have no "inside knowledge" beside my own experimentation/experience: there's no doubt that this article over-simplifies and neglects some aspects. Regardless, it's been very helpful during my own app development, and I hope it will be for you as well.</p><p>If there's anything that you'd like me to amend/add/further-clarify, <a href="https://twitter.com/zntfdr">feel free to reach me out</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/inspecting-views</guid><title>Inspecting SwiftUI views</title><description>SwiftUI composition on steroids: let's see how we can inspect and change any given view.</description><link>https://www.fivestars.blog/articles/inspecting-views</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>In <a href="https://www.fivestars.blog/articles/design-system-composing-views/">Composing SwiftUI views</a> and <a href="https://www.fivestars.blog/articles/swiftui-patter-passing-views/">SwiftUI patterns: passing &amp; accepting views</a> we've covered how composition is one of SwiftUI's most powerful tools at our disposal.</p><p>So far we've always accepted the given input, usually in the form of a <code>@ViewBuilder content: () -&gt; Content</code> parameter, as a black box: it's a view, that's all we needed to know.</p><p>But what if we wanted to know more about that view? In this article, let's explore how we can do so.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>A new picker component</h2><p>Let's imagine that we've been tasked to build a new picker/segmented control:</p><img src="https://www.fivestars.blog/assets/posts/inspecting-views/custom.gif"/><p>A good place to start is SwiftUI's <a href="https://developer.apple.com/documentation/swiftui/picker"><code>Picker</code></a>:</p><pre><code><span class="keyword">public struct</span> Picker&lt;Label: <span class="type">View</span>, SelectionValue: <span class="type">Hashable</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">public init</span>(
    selection: <span class="type">Binding</span>&lt;<span class="type">SelectionValue</span>&gt;,
    label: <span class="type">Label</span>,
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  )
}
</code></pre><p>Which we can use this way:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> selection = <span class="number">0</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Picker</span>(selection: $selection, label: <span class="type">Text</span>(<span class="string">""</span>)) {
      <span class="type">Text</span>(<span class="string">"First"</span>).<span class="call">tag</span>(<span class="number">0</span>)
      <span class="type">Text</span>(<span class="string">"Second"</span>).<span class="call">tag</span>(<span class="number">1</span>)
      <span class="type">Text</span>(<span class="string">"Third"</span>).<span class="call">tag</span>(<span class="number">2</span>)
    }
    .<span class="call">pickerStyle</span>(<span class="type">SegmentedPickerStyle</span>())
  }
}
</code></pre><blockquote><p>For simplicity's sake we will ignore the <code>label</code> parameter.</p></blockquote><img src="https://www.fivestars.blog/assets/posts/inspecting-views/original.gif"/><p><code>Picker</code> uses <a href="https://developer.apple.com/documentation/swiftui/view/tag(_:)"><code>tag(_:)</code></a> to identify which element corresponds to which <code>selection</code> value.</p><p>This is very important, as the picker needs to:</p><ul><li>highlight the selected element at any time</li><li>add a tap gesture to each element</li><li>update the current selection based on the user interaction.</li></ul><h2>FSPickerStyle</h2><p>At first we might try to create a new <a href="https://developer.apple.com/documentation/swiftui/pickerStyle"><code>PickerStyle</code></a>, as we did with <a href="https://www.fivestars.blog/articles/label/"><code>Label</code></a> and <a href="https://www.fivestars.blog/articles/button-styles/"><code>Button</code></a>, here's <code>PickerStyle</code> definition:</p><pre><code><span class="keyword">public protocol</span> PickerStyle {
}
</code></pre><p>Cool, no requirements! Let's create our picker style then:</p><pre><code><span class="keyword">struct</span> FSPickerStyle: <span class="type">PickerStyle</span> {
}
</code></pre><p>This won't build. While there are no public requirements, <code>PickerStyle</code> actually has some private/internal ones, which look like this:</p><pre><code><span class="keyword">protocol</span> PickerStyle {
  <span class="keyword">static func</span> _makeView&lt;SelectionValue&gt;(
    value: <span class="type">_GraphValue</span>&lt;<span class="type">_PickerValue</span>&lt;<span class="type">FSPickerStyle</span>, <span class="type">SelectionValue</span>&gt;&gt;, 
    inputs: <span class="type">_ViewInputs</span>
  ) -&gt; <span class="type">_ViewOutputs</span> <span class="keyword">where</span> <span class="type">SelectionValue</span>: <span class="type">Hashable</span>

  <span class="keyword">static func</span> _makeViewList&lt;SelectionValue&gt;(
    value: <span class="type">_GraphValue</span>&lt;<span class="type">_PickerValue</span>&lt;<span class="type">FSPickerStyle</span>, <span class="type">SelectionValue</span>&gt;&gt;,
    inputs: <span class="type">_ViewListInputs</span>
  ) -&gt; <span class="type">_ViewListOutputs</span> <span class="keyword">where</span> <span class="type">SelectionValue</span>: <span class="type">Hashable</span>
}
</code></pre><p>The alarming number of <code>_</code> underscores, a.k.a. "<em>private stuff</em>", should tell us that is the <em>not</em> the way we want to go:<br>exploring such APIs is left for the curious/adventurous (if you uncover anything cool, <a href="https://twitter.com/zntfdr">please let me know</a>!).</p><p>With <code>PickerStyle</code> not being a viable option, let's move to build our own SwiftUI picker from scratch.</p><h2>FSPicker</h2><p>Despite creating our own component, we still want to mimic SwiftUI's <code>Picker</code> APIs as close as possible:</p><pre><code><span class="keyword">public struct</span> FSPicker&lt;SelectionValue: <span class="type">Hashable</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@Binding var</span> selection: <span class="type">SelectionValue</span>
  <span class="keyword">let</span> content: <span class="type">Content</span>

  <span class="keyword">public init</span>(
    selection: <span class="type">Binding</span>&lt;<span class="type">SelectionValue</span>&gt;, 
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  ) {
    <span class="keyword">self</span>.<span class="property">_selection</span> = selection
    <span class="keyword">self</span>.<span class="property">content</span> = <span class="call">content</span>()
  }

  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    ...
  }
}
</code></pre><p>So far so good, thanks to this declaration we can go back to original example, add a <code>FS</code> prefix to the <code>Picker</code>, and everything would build fine:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> selection = <span class="number">0</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="comment">// üëáüèª our picker!</span>
    <span class="type">FSPicker</span>(selection: $selection) {
      <span class="type">Text</span>(<span class="string">"First"</span>).<span class="call">tag</span>(<span class="number">0</span>)
      <span class="type">Text</span>(<span class="string">"Second"</span>).<span class="call">tag</span>(<span class="number">1</span>)
      <span class="type">Text</span>(<span class="string">"Third"</span>).<span class="call">tag</span>(<span class="number">2</span>)
    }
  }
}
</code></pre><p>Now comes the challenge: implementing <code>FSPicker</code>'s <code>body</code>.</p><h3>FSPicker's body</h3><p>When we see a parameter such as <code>@ViewBuilder content: () -&gt; Content</code>, we normally treat it as something that we put somewhere in our own view <code>body</code>, however we can't do just that for our (and SwiftUI's) picker.</p><p>This is because our picker's <code>body</code> needs take this <code>content</code>, highlight the selected element, and add gestures to react to user selections.</p><p>A workaround for this challenge would be to replace our generic <code>Content</code> parameter with something that we can directly play with. For example we could replace <code>Content</code> with an array of tuples, where each tuple contains a <code>String</code> and an associated <code>SelectionValue</code>:</p><pre><code><span class="keyword">public struct</span> FSPicker&lt;SelectionValue: <span class="type">Hashable</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@Binding var</span> selection: <span class="type">SelectionValue</span>
  <span class="keyword">let</span> content: [(<span class="type">String</span>, <span class="type">SelectionValue</span>)]

  <span class="keyword">public init</span>(
    selection: <span class="type">Binding</span>&lt;<span class="type">SelectionValue</span>&gt;,
    content: [(<span class="type">String</span>, <span class="type">SelectionValue</span>)]
  ) {
    <span class="keyword">self</span>.<span class="property">_selection</span> = selection
    <span class="keyword">self</span>.<span class="property">content</span> = content
  }

  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
      <span class="type">ForEach</span>(content, id: \.<span class="number">1</span>) { (title, value) <span class="keyword">in</span>
        <span class="type">Button</span>(title) { selection = value }
      }
    }
  }
}
</code></pre><p>However we wouldn't follow SwiftUI's <code>Picker</code> APIs anymore.</p><p>Instead, let's make things more interesting: let's embrace our "black box" <code>Content</code> and use Swift's reflection!</p><h3>Mirrors all the way down</h3><p>While it's not always possible for our picker to know the actual <code>content</code> at build time, Swift lets us inspect this value at run time via <a href="https://developer.apple.com/documentation/swift/mirror"><code>Mirror</code></a>.</p><p>Let's update our <code>FSPicker</code> declaration with the following:</p><pre><code><span class="keyword">public struct</span> FSPicker&lt;SelectionValue: <span class="type">Hashable</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  ...
  <span class="keyword">public init</span>(...) { ... }

  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> contentMirror = <span class="type">Mirror</span>(reflecting: content)
    <span class="keyword">let</span> _ = <span class="call">print</span>(contentMirror)
    <span class="type">EmptyView</span>()
  }
}
</code></pre><p>If we now run this with our original example, we will see the following logs in Xcode's Debug Area Console (formatted for better readability):</p><pre><code><span class="type">Mirror</span> <span class="keyword">for</span> <span class="type">TupleView</span>&lt;
  (
    <span class="type">ModifiedContent</span>&lt;<span class="type">Text</span>, <span class="type">_TraitWritingModifier</span>&lt;<span class="type">TagValueTraitKey</span>&lt;<span class="type">Int</span>&gt;&gt;&gt;, 
    <span class="type">ModifiedContent</span>&lt;<span class="type">Text</span>, <span class="type">_TraitWritingModifier</span>&lt;<span class="type">TagValueTraitKey</span>&lt;<span class="type">Int</span>&gt;&gt;&gt;, 
    <span class="type">ModifiedContent</span>&lt;<span class="type">Text</span>, <span class="type">_TraitWritingModifier</span>&lt;<span class="type">TagValueTraitKey</span>&lt;<span class="type">Int</span>&gt;&gt;&gt;
  )
&gt;
</code></pre><p>...which shouldn't surprise us too much, beside maybe some unfamiliar terms.<br>For context, here's our original <code>content</code>:</p><pre><code><span class="type">Text</span>(<span class="string">"First"</span>).<span class="call">tag</span>(<span class="number">0</span>)
<span class="type">Text</span>(<span class="string">"Second"</span>).<span class="call">tag</span>(<span class="number">1</span>)
<span class="type">Text</span>(<span class="string">"Third"</span>).<span class="call">tag</span>(<span class="number">2</span>)
</code></pre><p>We can see that:</p><ul><li><code>@ViewBuilder</code> took our three <code>Text</code>s and put them in a <code>TupleView</code> with three blocks.</li><li>each "block" is formed by a <code>ModifiedContent</code> instance, which is the result of applying a <code>tag(_:)</code> view modifier to each <code>Text</code>.</li></ul><p>These are already very good insights! Let's print the <code>content</code> instance next:</p><pre><code><span class="keyword">public struct</span> FSPicker&lt;SelectionValue: <span class="type">Hashable</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  ...
  <span class="keyword">public init</span>(...) { ... }

  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> contentMirrorValue = <span class="type">Mirror</span>(reflecting: content).<span class="call">descendant</span>(<span class="string">"value"</span>)!
    <span class="keyword">let</span> _ = <span class="call">print</span>(contentMirrorValue)
    <span class="type">EmptyView</span>()
  }
}
</code></pre><blockquote><p>We're force-unwrapping for brevity's sake: proper handling is left as a homework to the reader.</p></blockquote><p>This time the console shows:</p><pre><code>(
  <span class="type">ModifiedContent</span>(
    content: <span class="type">Text</span>(
      storage: <span class="type">Text</span>.<span class="type">Storage</span>.<span class="call">anyTextStorage</span>(
        <span class="type">LocalizedTextStorage</span>
      ), 
      modifiers: []
    ), 
    modifier: <span class="type">_TraitWritingModifier</span>(
      value: <span class="type">TagValueTraitKey</span>.<span class="type">Value</span>.<span class="call">tagged</span>(<span class="number">0</span>)
    )
  ), 
  <span class="type">ModifiedContent</span>(
    content: <span class="type">Text</span>(
      storage: <span class="type">Text</span>.<span class="type">Storage</span>.<span class="call">anyTextStorage</span>(
        <span class="type">LocalizedTextStorage</span>
      ), 
      modifiers: []
    ), 
    modifier: <span class="type">_TraitWritingModifier</span>(
      value: <span class="type">TagValueTraitKey</span>.<span class="type">Value</span>.<span class="call">tagged</span>(<span class="number">1</span>)
    )
  ), 
  <span class="type">ModifiedContent</span>(
    content: <span class="type">Text</span>(
      storage: <span class="type">Text</span>.<span class="type">Storage</span>.<span class="call">anyTextStorage</span>(
        <span class="type">LocalizedTextStorage</span>
      ), 
      modifiers: []
    ), 
    modifier: <span class="type">_TraitWritingModifier</span>(
      value: <span class="type">TagValueTraitKey</span>.<span class="type">Value</span>.<span class="call">tagged</span>(<span class="number">2</span>)
    )
  )
)
</code></pre><blockquote><p>Output formatted and slightly simplified for clarity's sake.</p></blockquote><p>...which also shouldn't surprise us too much: this is the same output as before, where instead of <code>TupleView</code>'s type we now see the actual value.</p><p>Note how everything we need is right there: all the <code>Text</code>s, and their associated <code>.tag</code> values.</p><p>Next we can use <code>Mirror</code> to navigate and pick each single <code>Text</code> and <code>tag</code> value separately:</p><pre><code><span class="keyword">public struct</span> FSPicker&lt;SelectionValue: <span class="type">Hashable</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  ...
  <span class="keyword">public init</span>(...) { ... }

  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> contentMirror = <span class="type">Mirror</span>(reflecting: content)
    <span class="comment">// üëáüèª The number of `TupleView` blocks.</span>
    <span class="keyword">let</span> blocksCount = <span class="type">Mirror</span>(reflecting: contentMirror.<span class="call">descendant</span>(<span class="string">"value"</span>)!).<span class="property">children</span>.<span class="property">count</span>

    <span class="type">HStack</span> {
      <span class="type">ForEach</span>(<span class="number">0</span>..&lt;blocksCount) { index <span class="keyword">in</span>
        <span class="comment">// üëáüèª A single `TupleView` block.</span>
        <span class="keyword">let</span> tupleBlock = contentMirror.<span class="call">descendant</span>(<span class="string">"value"</span>, <span class="string">".</span>\(index)<span class="string">"</span>)
        <span class="keyword">let</span> text: <span class="type">Text</span> = <span class="type">Mirror</span>(reflecting: tupleBlock!).<span class="call">descendant</span>(<span class="string">"content"</span>) <span class="keyword">as</span>! <span class="type">Text</span>
        <span class="keyword">let</span> tag: <span class="type">SelectionValue</span> = <span class="type">Mirror</span>(reflecting: tupleBlock!).<span class="call">descendant</span>(<span class="string">"modifier"</span>, <span class="string">"value"</span>, <span class="string">"tagged"</span>) <span class="keyword">as</span>! <span class="type">SelectionValue</span>

        ...
      }
    }
  }
}
</code></pre><p>At this point we have gained access to each original <code>Text</code> and <code>tag</code> value, which we can use to build our view:</p><pre><code><span class="keyword">struct</span> FSPicker&lt;SelectionValue: <span class="type">Hashable</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@Namespace var</span> ns
  <span class="keyword">@Binding var</span> selection: <span class="type">SelectionValue</span>
  <span class="keyword">@ViewBuilder let</span> content: <span class="type">Content</span>

  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> contentMirror = <span class="type">Mirror</span>(reflecting: content)
    <span class="keyword">let</span> blocksCount = <span class="type">Mirror</span>(reflecting: contentMirror.<span class="call">descendant</span>(<span class="string">"value"</span>)!).<span class="property">children</span>.<span class="property">count</span> <span class="comment">// How many children?</span>
    <span class="type">HStack</span> {
      <span class="type">ForEach</span>(<span class="number">0</span>..&lt;blocksCount) { index <span class="keyword">in
        let</span> tupleBlock = contentMirror.<span class="call">descendant</span>(<span class="string">"value"</span>, <span class="string">".</span>\(index)<span class="string">"</span>)
        <span class="keyword">let</span> text = <span class="type">Mirror</span>(reflecting: tupleBlock!).<span class="call">descendant</span>(<span class="string">"content"</span>) <span class="keyword">as</span>! <span class="type">Text</span>
        <span class="keyword">let</span> tag = <span class="type">Mirror</span>(reflecting: tupleBlock!).<span class="call">descendant</span>(<span class="string">"modifier"</span>, <span class="string">"value"</span>, <span class="string">"tagged"</span>) <span class="keyword">as</span>! <span class="type">SelectionValue

        Button</span> {
          selection = tag
        } label: {
          text
            .<span class="call">padding</span>(.<span class="dotAccess">vertical</span>, <span class="number">16</span>)
        }
        .<span class="call">background</span>(
          <span class="type">Group</span> {
            <span class="keyword">if</span> tag == selection {
              <span class="type">Color</span>.<span class="property">purple</span>.<span class="call">frame</span>(height: <span class="number">2</span>)
                .<span class="call">matchedGeometryEffect</span>(id: <span class="string">"selector"</span>, in: ns)
            }
          },
          alignment: .<span class="dotAccess">bottom</span>
        )
        .<span class="call">accentColor</span>(tag == selection ? .<span class="dotAccess">purple</span> : .<span class="dotAccess">black</span>)
        .<span class="call">animation</span>(.<span class="dotAccess">easeInOut</span>)
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/inspecting-views/custom.gif"/><p>Thanks to this definition <code>FSPicker</code> works with any <code>SelectionValue</code> and matches <code>Picker</code>'s APIs.</p><h3>Further improvements</h3><p>As it currently stands, <code>FSPicker</code> works great as long as the given content follows the same format as our example (a.k.a. a list of two or more <code>Text</code>s + <code>tag</code>s).</p><p>This could be actually what we wanted: instead of trying to support every possible SwiftUI component, we can consider other components as bad inputs and ignore them as long as it's clearly documented.</p><p>If we'd like to support more components (e.g. <code>Image</code>s), we could do so by expanding our inspection to also handle such elements, or even create our own view builder.</p><p>Of course, this is just the tip of the iceberg:<br>handling any <code>content</code> means handling more components, edge cases, multiple levels of <code>ModifiedContent</code>, and much, much more.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>While Swift is known for being a <em>statically typed</em> language, it doesn't mean that we can only play with our build-time knowledge: thanks to <code>Mirror</code> we took another sneak peek into how dynamic both Swift and SwiftUI actually are.</p><p>Have you ever had to do this kind of inspection yourself? In which scenarios? <a href="https://twitter.com/zntfdr">Please let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/codable-swift-dictionaries</guid><title>Encoding and decoding Swift dictionaries with custom key types</title><description>Sometimes even very well known APIs can still surprise us.</description><link>https://www.fivestars.blog/articles/codable-swift-dictionaries</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Pretty much every project out there nowadays uses <code>Codable</code>, introduced in 2017 with Swift 4.</p><p>Fast forward to 2021 and <code>Codable</code> can still surprise us:<br>in this article let's have a look at a little known behavior when it comes to dictionaries with custom key types.</p><blockquote><p>We will focus on json examples, the same can be applied to plists.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Dictionary 101</h2><p>Swift dictionaries are a generic collection of key-value elements, where the <code>Key</code> type needs to conform to <code>Hashable</code> (for performance reasons), and the <code>Value</code> type has no restrictions.</p><p>Here's an example with four key-value pairs:</p><pre><code><span class="keyword">let</span> dictionary: [<span class="type">String</span>: <span class="type">Int</span>] = [
  <span class="string">"f"</span>: <span class="number">1</span>,
  <span class="string">"i"</span>: <span class="number">2</span>,
  <span class="string">"v"</span>: <span class="number">3</span>,
  <span class="string">"e"</span>: <span class="number">4</span>
]
</code></pre><p>When it comes to json, the same dictionary above will have the following format:</p><pre><code>{
  <span class="string">"f"</span>: <span class="number">1</span>,
  <span class="string">"i"</span>: <span class="number">2</span>,
  <span class="string">"v"</span>: <span class="number">3</span>,
  <span class="string">"e"</span>: <span class="number">4</span>
}
</code></pre><p>Where the keys must be quoted.</p><h2>The surprise</h2><p>Let's imagine that we're building a small app where each model has different names in different languages, all to be displayed to the user at will.</p><p>A way to store all name variants is to introduce a new <code>Codable</code> <code>Language</code> type, to be used as the dictionary key for the name of our models:</p><pre><code><span class="keyword">enum</span> Language: <span class="type">String</span>, <span class="type">Codable</span> {
  <span class="keyword">case</span> english
  <span class="keyword">case</span> japanese
  <span class="keyword">case</span> thai
}
</code></pre><p>Then we'd use it this way:</p><pre><code><span class="keyword">let</span> names: [<span class="type">Language</span>: <span class="type">String</span>] = [
  .<span class="dotAccess">english</span>:  <span class="string">"Victory Monument"</span>,
  .<span class="dotAccess">japanese</span>: <span class="string">"Êà¶ÂãùË®òÂøµÂ°î"</span>,
  .<span class="dotAccess">thai</span>:     <span class="string">"‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"</span>
]
</code></pre><p>This is all great...until it's time to encode it to json:</p><pre><code><span class="keyword">let</span> encodedDictionary = <span class="keyword">try</span> <span class="type">JSONEncoder</span>().<span class="call">encode</span>(names)
<span class="comment">// ["english", "Victory Monument", "japanese", "Êà¶ÂãùË®òÂøµÂ°î", "thai", "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"]</span>
</code></pre><p>That's...an array, not exactly a dictionary.</p><p>What about decoding it?</p><pre><code><span class="keyword">let</span> jsonData = <span class="string">"""
{
 "english":  "Victory Monument",
 "japanese": "Êà¶ÂãùË®òÂøµÂ°î",
 "thai":     "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
}
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)!

<span class="keyword">let</span> decoded = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>([<span class="type">Language</span>: <span class="type">String</span>].<span class="keyword">self</span>, from: jsonData)
<span class="comment">// typeMismatch(
//   Swift.Array&lt;Any&gt;, 
//   Swift.DecodingError.Context(
//     codingPath: [],
//     debugDescription: "Expected to decode Array&lt;Any&gt; but found a dictionary instead.", 
//     underlyingError: nil
//    )
//  )</span>
</code></pre><p>The decoding fails: despite trying to decode into a dictionary (<code>[Language: String]</code>), Swift was expecting to decode an array.</p><p>If we replace the key type <code>Language</code> with <code>String</code>, then everything works as expected: why is that?</p><p>After some digging it turns out that <a href="https://github.com/apple/swift/blob/d2085d8b0ed69e40a10e555669bb6cc9b450d0b3/stdlib/public/core/Codable.swift.gyb#L1967">this behavior is actually expected</a>:<br><br>- as a <code>Codable</code> type can encode into anything (including another dictionary), Swift will encode Swift dictionaries into json/plist dictionaries only when the <code>Key</code> type is <code>String</code> or <code>Int</code>.</p><ul><li>all other Swift dictionaries with non-<code>String</code> or non-<code>Int</code> <code>Key</code> types will be encoded into an array of alternating keys and values.</li></ul><p>This explain both the error in the decoding above and the "unexpected" encoding.</p><h2>Four solutions</h2><p>At this point we know that Swift dictionaries will encode into/decode from json dictionaries only when its key is either a <code>String</code> or a <code>Int</code>, how can we overcome this in our example? Let's see a few solutions.</p><h3>Bend to Swift's way</h3><p>The first is to give up on the json dictionary representation of our model, and embrace the expected <em>alternating keys and values</em> array:</p><pre><code><span class="comment">// Encoding</span>
<span class="keyword">let</span> names: [<span class="type">Language</span>: <span class="type">String</span>] = [
  .<span class="dotAccess">english</span>:  <span class="string">"Victory Monument"</span>,
  .<span class="dotAccess">japanese</span>: <span class="string">"Êà¶ÂãùË®òÂøµÂ°î"</span>,
  .<span class="dotAccess">thai</span>:     <span class="string">"‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"</span>
]

<span class="keyword">let</span> encoded = <span class="keyword">try</span> <span class="type">JSONEncoder</span>().<span class="call">encode</span>(names)
<span class="comment">// ["english", "Victory Monument", "japanese", "Êà¶ÂãùË®òÂøµÂ°î", "thai", "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"]

// Decoding</span>
<span class="keyword">let</span> jsonData = <span class="string">"""
[
 "english",  "Victory Monument",
 "japanese", "Êà¶ÂãùË®òÂøµÂ°î",
 "thai",     "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
]
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)!

<span class="keyword">let</span> decoded = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>([<span class="type">Language</span>: <span class="type">String</span>].<span class="keyword">self</span>, from: jsonData)
<span class="comment">// [
//   .english: "Victory Monument",
//   .japanese: "Êà¶ÂãùË®òÂøµÂ°î", 
//   .thai: "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
// ]</span>
</code></pre><p>This works great when it's the app that both stores and reads the data:<br>at this point we do not really care how the data is stored, Swift will take care of both the encoding and decoding for us.</p><h3>Use Int/String</h3><p>While the above solution works great when the data is used only locally, for probably most uses the json object will come from a server, meaning that we will receive a json dictionary.</p><p>The easiest way to patch this without changing the expected json structure is to use <code>String</code> or <code>Int</code> instead of our custom type:</p><pre><code><span class="comment">// Encoding</span>
<span class="keyword">let</span> names: [<span class="type">String</span>: <span class="type">String</span>] = [
  <span class="string">"english"</span>:  <span class="string">"Victory Monument"</span>,
  <span class="string">"japanese"</span>: <span class="string">"Êà¶ÂãùË®òÂøµÂ°î"</span>,
  <span class="string">"thai"</span>:     <span class="string">"‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"</span>
]
<span class="keyword">let</span> encodedDictionary = <span class="keyword">try</span> <span class="type">JSONEncoder</span>().<span class="call">encode</span>(names)
<span class="comment">// {
//   "english":  "Victory Monument",
//   "japanese": "Êà¶ÂãùË®òÂøµÂ°î",
//   "thai":     "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
// }

// Decoding</span>
<span class="keyword">let</span> jsonData = <span class="string">"""
{
 "english":  "Victory Monument",
 "japanese": "Êà¶ÂãùË®òÂøµÂ°î",
 "thai":     "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
}
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)!
<span class="keyword">let</span> decoded = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>([<span class="type">String</span>: <span class="type">String</span>].<span class="keyword">self</span>, from: jsonData)
<span class="comment">// [
//   "english":  "Victory Monument",
//   "japanese": "Êà¶ÂãùË®òÂøµÂ°î",
//   "thai":     "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
// ]</span>
</code></pre><p>However this would mean:</p><ul><li>giving up on our clear declaration/expectation, a.k.a. the list of possible cases in the <code>Language</code> example</li><li>introducing the possibility of invalid/unexpected keys (both from and to the server).</li></ul><p>So far neither solution is ideal in the general case, let's see what we can do next.</p><h3>Custom encoding/Decoding</h3><p>There's no way around it:<br>if we want to encode-into/decode-from a json dictionary, we will have to go through a Swift dictionary with either <code>String</code> or <code>Int</code> as its <code>Key</code> type.</p><p>With this being said, we could use such key types just for encoding/decoding, but then store it in Swift using our custom type.</p><p>Let's create a new wrapper around our dictionary, <em>lazily</em> named <code>DictionaryWrapper</code>, which will:</p><ul><li>turn our keys into <code>String</code>s before encoding them</li><li>decode a <code>[String: String]</code> dictionary and then turn into a <code>[Language: String]</code> dictionary</li></ul><pre><code><span class="keyword">public struct</span> DictionaryWrapper: <span class="type">Codable</span> {
  <span class="keyword">var</span> dictionary: [<span class="type">Language</span>: <span class="type">String</span>]

  <span class="keyword">init</span>(dictionary: [<span class="type">Language</span>: <span class="type">String</span>]) {
    <span class="keyword">self</span>.<span class="property">dictionary</span> = dictionary
  }

  <span class="keyword">public init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
    <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">singleValueContainer</span>()
    <span class="keyword">let</span> stringDictionary = <span class="keyword">try</span> container.<span class="call">decode</span>([<span class="type">String</span>: <span class="type">String</span>].<span class="keyword">self</span>)

    dictionary = [:]
    <span class="keyword">for</span> (stringKey, value) <span class="keyword">in</span> stringDictionary {
      <span class="keyword">guard let</span> key = <span class="type">Language</span>(rawValue: stringKey) <span class="keyword">else</span> {
        <span class="keyword">throw</span> <span class="type">DecodingError</span>.<span class="call">dataCorruptedError</span>(
          in: container,
          debugDescription: <span class="string">"Invalid key '</span>\(stringKey)<span class="string">'"</span>
        )
      }
      dictionary[key] = value
    }
  }

  <span class="keyword">public func</span> encode(to encoder: <span class="type">Encoder</span>) <span class="keyword">throws</span> {
    <span class="keyword">let</span> stringDictionary: [<span class="type">String</span>: <span class="type">String</span>] = <span class="type">Dictionary</span>(
      uniqueKeysWithValues: dictionary.<span class="call">map</span> { ($0.<span class="property">rawValue</span>, $1) }
    )
    <span class="keyword">var</span> container = encoder.<span class="call">singleValueContainer</span>()
    <span class="keyword">try</span> container.<span class="call">encode</span>(stringDictionary)
  }
}
</code></pre><p>Thanks to this definition:</p><ul><li>we can no longer encode/decode invalid keys</li><li>match our original expectations</li></ul><p>We can now go back to the original example and see that this new definition will work as expected:</p><pre><code><span class="comment">// Encoding</span>
<span class="keyword">let</span> names = <span class="type">DictionaryWrapper</span>(
  dictionary: [
    .<span class="dotAccess">english</span>:  <span class="string">"Victory Monument"</span>,
    .<span class="dotAccess">japanese</span>: <span class="string">"Êà¶ÂãùË®òÂøµÂ°î"</span>,
    .<span class="dotAccess">thai</span>:     <span class="string">"‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"</span>
  ]
)
<span class="keyword">let</span> encodedDictionary = <span class="keyword">try</span> <span class="type">JSONEncoder</span>().<span class="call">encode</span>(names)
<span class="comment">// {
//   "english":  "Victory Monument",
//   "japanese": "Êà¶ÂãùË®òÂøµÂ°î",
//   "thai":     "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
// }

// Decoding</span>
<span class="keyword">let</span> jsonData = <span class="string">"""
{
 "english":  "Victory Monument",
 "japanese": "Êà¶ÂãùË®òÂøµÂ°î",
 "thai":     "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
}
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)!
<span class="keyword">let</span> decoded = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">DictionaryWrapper</span>.<span class="keyword">self</span>, from: jsonData)
<span class="comment">// [
//   .english: "Victory Monument",
//   .japanese: "Êà¶ÂãùË®òÂøµÂ°î", 
//   .thai: "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
// ]</span>
</code></pre><h3>RawRapresentable</h3><p>The last solution worked perfectly, however it was hard coded for a specific dictionary type. A way to expand it to the more general case is to use Swift's <a href="https://developer.apple.com/documentation/swift/rawrepresentable"><code>RawRepresentable</code></a> protocol, which represents a type that can be converted to and from an associated raw value:</p><pre><code><span class="keyword">public protocol</span> RawRepresentable {
  <span class="comment">/// The raw type that can be used to represent all values of the conforming type.</span>
  <span class="keyword">associatedtype</span> RawValue

  <span class="comment">/// Creates a new instance with the specified raw value.</span>
  <span class="keyword">init</span>?(rawValue: <span class="type">Self</span>.<span class="type">RawValue</span>)

  <span class="comment">/// The corresponding value of the raw type.</span>
  <span class="keyword">var</span> rawValue: <span class="type">Self</span>.<span class="type">RawValue</span> { <span class="keyword">get</span> }
}
</code></pre><p>We can define a generic <code>DictionaryWrapper</code> where we require the dictionary <code>Key</code> to conform to <code>RawRepresentable</code>, and where we will use its associated <code>RawValue</code> type for the dictionary encoding/decoding:</p><pre><code><span class="keyword">public struct</span> DictionaryWrapper&lt;Key: <span class="type">Hashable</span> &amp; <span class="type">RawRepresentable</span>, Value: <span class="type">Codable</span>&gt;: <span class="type">Codable</span> <span class="keyword">where</span> <span class="type">Key</span>.<span class="type">RawValue</span>: <span class="type">Codable</span> &amp; <span class="type">Hashable</span> {
  <span class="keyword">public var</span> dictionary: [<span class="type">Key</span>: <span class="type">Value</span>]

  <span class="keyword">public init</span>(dictionary: [<span class="type">Key</span>: <span class="type">Value</span>]) {
    <span class="keyword">self</span>.<span class="property">dictionary</span> = dictionary
  }

  <span class="keyword">public init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
    <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">singleValueContainer</span>()
    <span class="keyword">let</span> rawKeyedDictionary = <span class="keyword">try</span> container.<span class="call">decode</span>([<span class="type">Key</span>.<span class="type">RawValue</span>: <span class="type">Value</span>].<span class="keyword">self</span>)

    dictionary = [:]
    <span class="keyword">for</span> (rawKey, value) <span class="keyword">in</span> rawKeyedDictionary {
      <span class="keyword">guard let</span> key = <span class="type">Key</span>(rawValue: rawKey) <span class="keyword">else</span> {
        <span class="keyword">throw</span> <span class="type">DecodingError</span>.<span class="call">dataCorruptedError</span>(
          in: container,
          debugDescription: <span class="string">"Invalid key: cannot initialize '</span>\(<span class="type">Key</span>.<span class="keyword">self</span>)<span class="string">' from invalid '</span>\(<span class="type">Key</span>.<span class="type">RawValue</span>.<span class="keyword">self</span>)<span class="string">' value '</span>\(rawKey)<span class="string">'"</span>)
      }
      dictionary[key] = value
    }
  }

  <span class="keyword">public func</span> encode(to encoder: <span class="type">Encoder</span>) <span class="keyword">throws</span> {
    <span class="keyword">let</span> rawKeyedDictionary = <span class="type">Dictionary</span>(uniqueKeysWithValues: dictionary.<span class="call">map</span> { ($0.<span class="property">rawValue</span>, $1) })
    <span class="keyword">var</span> container = encoder.<span class="call">singleValueContainer</span>()
    <span class="keyword">try</span> container.<span class="call">encode</span>(rawKeyedDictionary)
  }
}
</code></pre><blockquote><p>I couldn't find a way to restrict this exclusively for <code>Key.RawValue == String</code> or <code>Key.RawValue == Int</code>, mainly because of Swift's ban on <a href="https://github.com/apple/swift-evolution/blob/5752a43ba5ddd6c53a5fd48d1551aa89864df827/proposals/0143-conditional-conformances.md#overlapping-conformances">overlapping conformances</a>, if you find a way, please <a href="https://twitter.com/zntfdr">let me know</a>.</p></blockquote><p>Thanks to this new definition <code>DictionaryWrapper</code> will encode any Swift dictionary into a json/plist dictionary as long as the key used has an associated <code>RawValue</code> of type <code>String</code> or <code>Int</code>.</p><h3>Bonus: a property wrapper!</h3><blockquote><p>Credits to <a href="https://jarrodldavis.com">Jarrod Davis</a> for <a href="https://gist.github.com/jarrodldavis/8c9e7e6e487991279c2df2d452baaf16">this solution</a>.</p></blockquote><p>Most likely our dictionary will be part of a model that needs to be encoded/decoded. Instead of adding <code>DictionaryWrapper</code> as part of each property type definition, we can also update <code>DictionaryWrapper</code> definition by:</p><ul><li>adding the <code>@propertyWrapper</code> attribute to our <code>DictionaryWrapper</code> declaration</li><li>replacing the internal <code>dictionary</code> property name with <code>wrappedValue</code></li></ul><p>That's all it's needed to make <code>DictionaryWrapper</code> a property wrapper:</p><pre><code><span class="keyword">@propertyWrapper
public struct</span> DictionaryWrapper&lt;Key: <span class="type">Hashable</span> &amp; <span class="type">RawRepresentable</span>, Value: <span class="type">Codable</span>&gt;: <span class="type">Codable</span> <span class="keyword">where</span> <span class="type">Key</span>.<span class="type">RawValue</span>: <span class="type">Codable</span> &amp; <span class="type">Hashable</span> {
  <span class="keyword">public var</span> wrappedValue: [<span class="type">Key</span>: <span class="type">Value</span>]

  <span class="keyword">public init</span>() {
    wrappedValue = [:]
  }

  <span class="keyword">public init</span>(wrappedValue: [<span class="type">Key</span>: <span class="type">Value</span>]) {
    <span class="keyword">self</span>.<span class="property">wrappedValue</span> = wrappedValue
  }

  <span class="keyword">public init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
    <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">singleValueContainer</span>()
    <span class="keyword">let</span> rawKeyedDictionary = <span class="keyword">try</span> container.<span class="call">decode</span>([<span class="type">Key</span>.<span class="type">RawValue</span>: <span class="type">Value</span>].<span class="keyword">self</span>)

    wrappedValue = [:]
    <span class="keyword">for</span> (rawKey, value) <span class="keyword">in</span> rawKeyedDictionary {
      <span class="keyword">guard let</span> key = <span class="type">Key</span>(rawValue: rawKey) <span class="keyword">else</span> {
        <span class="keyword">throw</span> <span class="type">DecodingError</span>.<span class="call">dataCorruptedError</span>(
          in: container,
          debugDescription: <span class="string">"Invalid key: cannot initialize '</span>\(<span class="type">Key</span>.<span class="keyword">self</span>)<span class="string">' from invalid '</span>\(<span class="type">Key</span>.<span class="type">RawValue</span>.<span class="keyword">self</span>)<span class="string">' value '</span>\(rawKey)<span class="string">'"</span>)
      }
      wrappedValue[key] = value
    }
  }

  <span class="keyword">public func</span> encode(to encoder: <span class="type">Encoder</span>) <span class="keyword">throws</span> {
    <span class="keyword">let</span> rawKeyedDictionary = <span class="type">Dictionary</span>(uniqueKeysWithValues: wrappedValue.<span class="call">map</span> { ($0.<span class="property">rawValue</span>, $1) })
    <span class="keyword">var</span> container = encoder.<span class="call">singleValueContainer</span>()
    <span class="keyword">try</span> container.<span class="call">encode</span>(rawKeyedDictionary)
  }
}
</code></pre><p>With this change, we can go on and declare any model with this new property wrapper:</p><pre><code><span class="keyword">struct</span> FSModel: <span class="type">Codable</span> {
  <span class="keyword">@DictionaryWrapper var</span> names: [<span class="type">Language</span>: <span class="type">String</span>]
  ...
}
</code></pre><p>...and then access directly to the dictionary without having to go thorough <code>DictionaryWrapper</code>:</p><pre><code><span class="keyword">let</span> jsonData = <span class="string">"""
{
 "names": {
   "english": "Victory Monument",
   "japanese": "Êà¶ÂãùË®òÂøµÂ°î",
   "thai":     "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
  },
  ...
}
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)!

<span class="keyword">let</span> model = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">FSModel</span>.<span class="keyword">self</span>, from: jsonData)
model.<span class="property">names</span> <span class="comment">// [Language: String]
// [
//   .english: "Victory Monument",
//   .japanese: "Êà¶ÂãùË®òÂøµÂ°î", 
//   .thai: "‡∏≠‡∏ô‡∏∏‡∏™‡∏≤‡∏ß‡∏£‡∏µ‡∏¢‡πå‡∏ä‡∏±‡∏¢‡∏™‡∏°‡∏£‡∏†‡∏π‡∏°‡∏¥"
// ]</span>
</code></pre><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>The introduction of <code>Codable</code> in Swift was a blessing: despite having a few shortcoming here and there, it's also flexible enough for us to extend it and make it work for our needs.</p><p>What challenges have you faced while working with <code>Codable</code>? How did you solve it? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p><h2>Further reading</h2><ul><li><a href="https://bugs.swift.org/browse/SR-7788">(SR-7788) Enum with String or Int RawRepresentable not encoded / decoded properly</a></li><li><a href="https://forums.swift.org/t/json-encoding-decoding-weird-encoding-of-dictionary-with-enum-values/12995/5">(Swift forums) JSON Encoding / Decoding weird encoding of dictionary with enum values</a></li><li><a href="https://forums.swift.org/t/decoding-a-dictionary-with-a-custom-type-not-string-as-key/35290/3">(Swift forums) Decoding a dictionary with a custom type (not String) as key</a></li><li><a href="https://forums.swift.org/t/bug-or-pebkac/33796">(Swift forums) Bug or PEBKAC?</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/app-state</guid><title>App-wide state in SwiftUI</title><description>An introduction to a common app architecture used in SwiftUI, and how to avoid one of its most common pitfalls.</description><link>https://www.fivestars.blog/articles/app-state</link><pubDate>Tue, 9 Mar 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>With the adoption of SwiftUI, a new trend of creating an app-wide state has been gaining momentum. This is very justified, as it's one of the few ways to properly handle deep linking, <a href="https://www.fivestars.blog/articles/swiftui-hud/">HUDs</a>, and more.</p><p>In this article, let's have a look at this approach, and how to avoid one of its most common pitfalls.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The app</h2><p>We will build a small app with just two tabs: a home and settings tab.</p><blockquote><p>While we will use a <code>TabView</code> as an example, the same approach can be used for navigation, sheets, all other SwiftUI view presentations, and much more.</p></blockquote><img src="https://www.fivestars.blog/assets/posts/app-state/simple.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
   <span class="type">TabView</span> {
      <span class="type">HomeView</span>()
        .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Home"</span>, systemImage: <span class="string">"house.fill"</span>) }

      <span class="type">SettingsView</span>()
        .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Settings"</span>, systemImage: <span class="string">"gear"</span>) }
    }
  }
}

<span class="keyword">struct</span> HomeView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(<span class="string">"Home"</span>)
  }
}

<span class="keyword">struct</span> SettingsView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(<span class="string">"Settings"</span>)
  }
}
</code></pre><p>Here we have declared a <code>TabView</code> with our two views, <code>HomeView</code> and <code>SettingsView</code>, each with an associated <code>Text</code>.</p><h2>Controlling the selected tab</h2><p>Our app has the requirement to select the active tab programmatically: for example we'd like to have a shortcut from Home allowing the user to jump into the settings tab, or perhaps we'd like to switch tabs as a response of a deep link, etc.</p><p>We will need to manage the <code>TabView</code> state ourselves, which we can do via the <code>TabView</code> initializer offering a <code>Binding</code> parameter (we covered this and more in <a href="https://www.fivestars.blog/articles/swiftui-patterns-bindings/">SwiftUI patterns: @Bindings</a>):</p><img src="https://www.fivestars.blog/assets/posts/app-state/goto.gif"/><pre><code><span class="keyword">enum</span> Tab: <span class="type">Hashable</span> {
  <span class="keyword">case</span> home
  <span class="keyword">case</span> settings
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> selectedTab: <span class="type">Tab</span> = .<span class="dotAccess">home</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TabView</span>(selection: $selectedTab) {
      <span class="type">HomeView</span>(selectedTab: $selectedTab)
        .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Home"</span>, systemImage: <span class="string">"house.fill"</span>) }
        .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">home</span>)

      <span class="type">SettingsView</span>()
        .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Settings"</span>, systemImage: <span class="string">"gear"</span>) }
        .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">settings</span>)
    }
  }
}

<span class="keyword">struct</span> HomeView: <span class="type">View</span> {
  <span class="keyword">@Binding var</span> selectedTab: <span class="type">Tab</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Button</span>(<span class="string">"go to settings"</span>) {
        selectedTab = .<span class="dotAccess">settings</span>
      }
      <span class="type">Text</span>(<span class="string">"Home"</span>)
        .<span class="call">onAppear</span>(perform: { <span class="call">print</span>(<span class="string">"home on appear"</span>)})
    }
  }
}

<span class="keyword">struct</span> SettingsView: <span class="type">View</span> {
  ... <span class="comment">// same as before</span>
}
</code></pre><p>In this update we have..</p><ul><li>..declared a <code>Tab</code> enum with all possible <code>TabView</code> states</li><li>..added a new <code>ContentView</code> <code>selectedTab</code> property, controlling the <code>TabView</code> state</li><li>..added a button in Home that will let us jump to the settings tab</li></ul><p>While this works great and it lets us change the tab state programmatically, we still need to have direct access to <code>ContentView</code>'s <code>selectedTab</code> property before we can change the tab bar state.</p><p>More importantly, as the app grows, it won't be practical to pass the tab bar state from view to view: this is where we move the state out of any view, and put it in the environment via our app-wide state.</p><h2>App-wide state</h2><p>The current limitation is the <code>TabView</code> state accessibility, we can overcome this challenge by creating a global state and set it in the environment:</p><pre><code><span class="keyword">class</span> AppWideState: <span class="type">ObservableObject</span> {
  <span class="keyword">@Published var</span> selectedTab: <span class="type">Tab</span> = .<span class="dotAccess">home</span>
}
</code></pre><p><code>AppWideState</code> holds just the tab state and sends a new publish event every time <code>selectedTab</code> is about to change.</p><p>We want this state to be accessible from anywhere, we will attach it to our main <code>App</code> (or scene delegate) and then inject it in the environment:</p><pre><code><span class="keyword">@main
struct</span> FiveStarsApp: <span class="type">App</span> {
  <span class="keyword">@StateObject var</span> appWideState = <span class="type">AppWideState</span>()

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
    <span class="type">WindowGroup</span> {
      <span class="type">ContentView</span>()
        .<span class="call">environmentObject</span>(appWideState) <span class="comment">// injected in the environment</span>
    }
  }
}
</code></pre><p>Everything is ready, let's update our views to take advantage of this new state:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@EnvironmentObject var</span> state: <span class="type">AppWideState</span> <span class="comment">// environment object</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TabView</span>(selection: $state.<span class="property">selectedTab</span>) { <span class="comment">// state from the environment object</span>
      <span class="type">HomeView</span>()
        .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Home"</span>, systemImage: <span class="string">"house.fill"</span>) }
        .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">home</span>)

      <span class="type">SettingsView</span>()
        .<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Settings"</span>, systemImage: <span class="string">"gear"</span>) }
        .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">settings</span>)
    }
  }
}

<span class="keyword">struct</span> HomeView: <span class="type">View</span> {
  <span class="keyword">@EnvironmentObject var</span> state: <span class="type">AppWideState</span> <span class="comment">// environment object</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Button</span>(<span class="string">"go to settings"</span>) {
        state.<span class="property">selectedTab</span> = .<span class="dotAccess">settings</span> <span class="comment">// sets the state from the environment object</span>
      }
      <span class="type">Text</span>(<span class="string">"Home"</span>)
    }
  }
}

<span class="keyword">struct</span> SettingsView: <span class="type">View</span> {
  ... <span class="comment">// same as before</span>
}
</code></pre><blockquote><p><code>HomeView</code> could have still used a <code>@Binding</code>, however imagine that this view was a few levels deep.</p></blockquote><p>This new structure works exactly as before, however we can now change the selected tab from the main <code>App</code> and anywhere else the environment reaches:<br>we're very happy with this solution and we move on to the build other features.</p><h2>A few weeks later (a.k.a. The pitfall)</h2><p>A few weeks pass, our <code>AppWideState</code> has gained some new <code>@Published</code> properties, more views observe this object...and our app starts to slow down: every time we change the app-wide state we notice a slight lag before changing tabs or a new navigation is pushed, etc.</p><p>What's happening?</p><p>We can investigate this mystery with just our example. Let's add a small side effect in our <code>HomeView</code>, a <code>print</code> statement telling us when the <code>HomeView</code> body is executed:</p><pre><code><span class="keyword">struct</span> HomeView: <span class="type">View</span> {
  <span class="keyword">@EnvironmentObject var</span> state: <span class="type">AppWideState</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> _ = <span class="call">print</span>(<span class="string">"HomeView body"</span>) <span class="comment">// side effect</span>
    <span class="type">VStack</span> {
      <span class="type">Button</span>(<span class="string">"go to settings"</span>) {
        state.<span class="property">selectedTab</span> = .<span class="dotAccess">settings</span>
      }
      <span class="type">Text</span>(<span class="string">"Home"</span>)
    }
  }
}
</code></pre><blockquote><p><em>"Coincidentally"</em> we covered this kind of side effects in <a href="https://www.fivestars.blog/articles/embracing-viewbuilder/">Quick tips on embracing @ViewBuilder</a>, alternatively we can use breakpoints as well.</p></blockquote><p>With this small change, we can run the app again and we will notice that every time we change tabs (by tapping the tab bar or via the <code>go to settings</code> button) the <code>HomeView</code> <code>body</code> is recomputed: this is true despite <code>HomeView</code> not actually reading the state but just setting it.</p><img src="https://www.fivestars.blog/assets/posts/app-state/print.gif"/><p>If we remove the button action, thus not doing anything at all with the <code>@EnvironmentObject</code> state, this will still happen:</p><pre><code><span class="keyword">struct</span> HomeView: <span class="type">View</span> {
  <span class="keyword">@EnvironmentObject var</span> state: <span class="type">AppWideState</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> _ = <span class="call">print</span>(<span class="string">"HomeView body"</span>) <span class="comment">// side effect</span>
    <span class="type">VStack</span> {
      <span class="type">Button</span>(<span class="string">"go to settings"</span>) {
        <span class="comment">// does nothing</span>
      }
      <span class="type">Text</span>(<span class="string">"Home"</span>)
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/app-state/print.gif"/><p>Let's now imagine that:</p><ul><li>we have a navigation stack (or multiple navigation stacks)</li><li>some of the screens in the stack(s) use our <code>AppWideState</code> environment object</li><li>the user is multiple levels deep into the stack(s)</li></ul><p>Every change we make to <code>AppWideState</code> will trigger a new <code>body</code> evaluation for <strong>all</strong> views observing <code>AppWideState</code> that are part of our stack(s), not just the last view the user is currently viewing.</p><p>It's now easy to tell why the app is getting slower and slower: the more we use and expand <code>AppWideState</code>, the more views will have their <code>body</code> re-evaluated at every change.</p><p>This pitfall is actually to be expected, as <code>EnvironmentObject</code> is just another <code>ObservableObject</code> instance that our views subscribe to, SwiftUI is doing just what it has always promised to be doing: automatically subscribing and reacting to state changes.</p><h2>The solution</h2><p>While most views will probably need to reach for <code>AppWideState</code> to set it, very few will actually need to observe its state: taking the tab bar state as an example, only <code>TabView</code> needs to observe it, all other views only need to change it.</p><p>A way to make this happen is to create a container of app-wide states, where the container itself doesn't publish anything:</p><pre><code><span class="keyword">class</span> AppStateContainer: <span class="type">ObservableObject</span> {
  ...
}
</code></pre><p>Instead of declaring each state as a <code>@Published</code> property of this container, each state will be nested into its own <code>ObservableObject</code>, which then will be part of the container:</p><pre><code><span class="keyword">class</span> TabViewState: <span class="type">ObservableObject</span> {
  <span class="keyword">@Published var</span> selectedTab: <span class="type">Tab</span> = .<span class="dotAccess">home</span>
}

<span class="keyword">class</span> AppStateContainer: <span class="type">ObservableObject</span> {
  <span class="keyword">var</span> tabViewState = <span class="type">TabViewState</span>()
}
</code></pre><p>The container conforms to <code>ObservableObject</code> because it's a requirement for environment objects, however it doesn't publish anything, meanwhile we moved the <code>selectedTab</code> state to its own <code>TabViewState</code>.</p><p>This approach also isolates each <em>app-wise</em> state into its own "mini-container" (<code>TabViewState</code> above), therefore we can focus all the logic (if any) for each specific state to its own class, instead of having it all shared in one big class.</p><p>With this in place, we now can set both <code>AppStateContainer</code> and <code>TabViewState</code> into the environment:</p><pre><code><span class="keyword">@main
struct</span> FiveStarsApp: <span class="type">App</span> {
  <span class="keyword">@StateObject var</span> appStateContainer = <span class="type">AppStateContainer</span>()

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
    <span class="type">WindowGroup</span> {
      <span class="type">ContentView</span>()
        .<span class="call">environmentObject</span>(appStateContainer)
        .<span class="call">environmentObject</span>(appStateContainer.<span class="property">tabViewState</span>)
    }
  }
}
</code></pre><p>Views that need to observe the state change will directly observe <code>TabViewState</code>, while views that only need to change its state will reach for the container:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@EnvironmentObject var</span> state: <span class="type">TabViewState</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TabView</span>(selection: $state.<span class="property">selectedTab</span>) {
      <span class="type">HomeView</span>()
        .<span class="call">tabItem</span> {
          <span class="type">Label</span>(<span class="string">"Home"</span>, systemImage: <span class="string">"house.fill"</span>)
        }
        .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">home</span>)

      <span class="type">SettingsView</span>()
        .<span class="call">tabItem</span> {
          <span class="type">Label</span>(<span class="string">"Settings"</span>, systemImage: <span class="string">"gear"</span>)
        }
        .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">settings</span>)
    }
  }
}

<span class="keyword">struct</span> HomeView: <span class="type">View</span> {
  <span class="keyword">@EnvironmentObject var</span> container: <span class="type">AppStateContainer</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">let</span> _ = <span class="call">print</span>(<span class="string">"Home body"</span>)
    <span class="type">VStack</span> {
      <span class="type">Button</span>(<span class="string">"go to settings"</span>) {
        container.<span class="property">tabViewState</span>.<span class="property">selectedTab</span> = .<span class="dotAccess">settings</span>
      }
      <span class="type">Text</span>(<span class="string">"Home"</span>)
        .<span class="call">onAppear</span>(perform: { <span class="call">print</span>(<span class="string">"home on appear"</span>)})
    }
  }
}
</code></pre><p>And with this change we have our app performance back, no extra view <code>body</code> unnecessarily computed.</p><p>In this example we have <code>HomeView</code> directly reach for and change the <code>TabView</code> state itself, however we could also add some convenience API on top of our container to make this more straightforward (similarly to what we did in <a href="https://www.fivestars.blog/articles/swiftui-hud/">Custom HUDs in SwiftUI</a>).</p><p>The final gist can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/App-State-In-SwiftUI">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Along with SwiftUI we have new paradigms, while it's very good to explore and experiment with new architectures, we always need to be aware of "hidden" pitfalls that we might encounter.</p><p>Do you use a "global" state in your apps? What approach do you use? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/embracing-viewbuilder</guid><title>Quick tips on embracing @ViewBuilder</title><description>With Swift 5.3, @ViewBuilder is now more powerful than ever! Let's see how we can take advantage of the latest new features.</description><link>https://www.fivestars.blog/articles/embracing-viewbuilder</link><pubDate>Tue, 2 Mar 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>With the release of Xcode 12 and Swift 5.3, <a href="https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID630"><code>@resultBuilder</code></a>, at the time called <code>@_functionBuilder</code>, has learned quite a few tricks:</p><ul><li><a href="https://github.com/apple/swift/pull/30045">Support for <code>if let</code> &amp; <code>if case</code></a></li><li><a href="https://github.com/apple/swift/pull/29409">Support for multiple Boolean conditions in 'if' statements</a></li><li><a href="https://github.com/apple/swift/pull/30174"><code>switch</code> support</a></li><li><a href="https://github.com/apple/swift/pull/29419"><code>if #available</code> support</a></li><li><a href="https://github.com/apple/swift/pull/28606"><code>#warning</code> and <code>#error</code> handling</a></li><li><a href="https://github.com/apple/swift/pull/29786">Support for <code>let</code>/<code>var</code> declarations</a></li><li>...probably more (please <a href="https://twitter.com/zntfdr">let me know</a> if I missed anything!)</li></ul><p>As <code>@ViewBuilder</code> is SwiftUI's <code>@resultBuilder</code> dedicated to building views, all these enhancements have helped immensely with views's declaration expressiveness.</p><p>Another gain is that SwiftUI's <a href="https://developer.apple.com/documentation/swiftui/anyview"><code>AnyView</code></a> is no longer necessary in most cases:<br>in this article, let's see how we can improve our codebase thanks to these advances.</p><blockquote><p>This article goes hand in hand with <a href="https://twitter.com/johnsundell">John Sundell</a>`s <a href="https://swiftbysundell.com/articles/avoiding-anyview-in-swiftui/">Avoiding SwiftUI‚Äôs AnyView</a>, I suggest to read John's article first.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The road to @ViewBuilder</h2><p>As an example, let's take a function returning a sheet, named <code>presentSheet</code>:</p><pre><code><span class="keyword">enum</span> SettingsSheet: <span class="type">Identifiable</span> {
  <span class="keyword">case</span> languagePicker
  <span class="keyword">case</span> securityPin
  <span class="keyword">case</span> signIn

  <span class="keyword">var</span> id: <span class="type">Int</span> { hashValue }
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> showingSheet: <span class="type">SettingsSheet</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    content
      .<span class="call">sheet</span>(item: $showingSheet, content: presentSheet)
  }

  <span class="keyword">var</span> content: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="comment">// ...</span>
  }

  <span class="keyword">func</span> presentSheet(<span class="keyword">_</span> sheet: <span class="type">SettingsSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="comment">// ...</span>
  }
}
</code></pre><p>When <code>presentSheet(_:)</code> is called, we need to return a view for the given <code>SettingsSheet</code>.<br>The most direct thing that we'd do is probably use a <code>switch</code> statement and return a different view for each case:</p><pre><code><span class="keyword">func</span> presentSheet(<span class="keyword">_</span> sheet: <span class="type">SettingsSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
   <span class="keyword">switch</span> sheet {
     <span class="keyword">case</span> .<span class="dotAccess">languagePicker</span>:
       <span class="keyword">return</span> <span class="type">LanguagePicker</span>()
     <span class="keyword">case</span> .<span class="dotAccess">securityPin</span>:
       <span class="keyword">return</span> <span class="type">SecurityPinView</span>()
     <span class="keyword">case</span> .<span class="dotAccess">signIn</span>:
       <span class="keyword">return</span> <span class="type">SignInScreen</span>()
   }
}
</code></pre><p>However this is not possible and won't build, as the function promises to return <code>some View</code>, a.k.a. the same opaque type in each case of the <code>switch</code>, but we're returning different views instead.</p><p>Prior to Xcode 12 (and the new <code>@resultBuilder</code> enhancements) we had mainly two solutions, the most straightforward was to wrap each returned view with <code>AnyView</code>:</p><pre><code><span class="keyword">func</span> presentSheet(<span class="keyword">_</span> sheet: <span class="type">SettingsSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
  <span class="keyword">switch</span> sheet {
    <span class="keyword">case</span> .<span class="dotAccess">languagePicker</span>:
      <span class="keyword">return</span> <span class="type">AnyView</span>(<span class="type">LanguagePicker</span>())
    <span class="keyword">case</span> .<span class="dotAccess">securityPin</span>:
      <span class="keyword">return</span> <span class="type">AnyView</span>(<span class="type">SecurityPinView</span>())
    <span class="keyword">case</span> .<span class="dotAccess">signIn</span>:
      <span class="keyword">return</span> <span class="type">AnyView</span>(<span class="type">SignInScreen</span>())
  }
}
</code></pre><p>This works, as we're type-erasing everything and returning <code>AnyView</code> in all possible paths (keeping the same opaque type promise).</p><p>Another solution, that would avoid using <code>AnyView</code>, was to attach <code>@ViewBuilder</code> to the function, and replace the switch statement with a long list of <code>if-else</code> statements:</p><pre><code><span class="keyword">@ViewBuilder
func</span> presentSheet(<span class="keyword">_</span> sheet: <span class="type">SettingsSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
  <span class="keyword">if</span> sheet == .<span class="dotAccess">languagePicker</span> {
    <span class="type">LanguagePicker</span>()
  } <span class="keyword">else if</span> sheet == .<span class="dotAccess">securityPin</span> {
    <span class="type">SecurityPinView</span>()
  } <span class="keyword">else if</span> sheet == .<span class="dotAccess">signIn</span> {
    <span class="type">SignInScreen</span>()
  }
}
</code></pre><p>This works because simple single boolean conditions were supported by <code>@ViewBuilder</code> before Swift 5.3, however this solution is not going to work when our enum also has associated types:<br>due to this limitation, most projects stuck with the <code>AnyView</code> solution instead.</p><p>Speaking of <code>@ViewBuilder</code> and moving to Xcode 12 and Swift 5.3, things got better as we can now go back to the our original attempt, remove the <code>return</code> statements, and things will work right away:</p><pre><code><span class="keyword">@ViewBuilder
func</span> presentSheet(<span class="keyword">_</span> sheet: <span class="type">SettingsSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
  <span class="keyword">switch</span> sheet {
    <span class="keyword">case</span> .<span class="dotAccess">languagePicker</span>:
      <span class="type">LanguagePicker</span>()
    <span class="keyword">case</span> .<span class="dotAccess">securityPin</span>:
      <span class="type">SecurityPinView</span>()
    <span class="keyword">case</span> .<span class="dotAccess">signIn</span>:
      <span class="type">SignInScreen</span>()
  }
}
</code></pre><p>This is much better and would work even when our enum has associated types.</p><h2>Side effects</h2><p>Let's imagine that we need to add some side effects into the function, like pushing an analytics event:</p><pre><code><span class="keyword">@ViewBuilder
func</span> presentSheet(<span class="keyword">_</span> sheet: <span class="type">SettingsSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">Analytics</span>.<span class="call">log</span>(.<span class="call">presenting</span>(sheet)) <span class="comment">// &lt;-- side effect</span>
  <span class="keyword">switch</span> sheet {
    <span class="keyword">case</span> .<span class="dotAccess">languagePicker</span>:
      <span class="type">LanguagePicker</span>()
    <span class="keyword">case</span> .<span class="dotAccess">securityPin</span>:
      <span class="type">SecurityPinView</span>()
    <span class="keyword">case</span> .<span class="dotAccess">signIn</span>:
      <span class="type">SignInScreen</span>()
  }
}
</code></pre><p>This won't work, as <code>@ViewBuilder</code> doesn't know how to handle the return type of our analytics log (likely <code>Void</code>).</p><blockquote><p>The preferred solution is to <em>not</em> have this kind of side effects in the view at all, however sometimes we will face such challenges, the analytics one is just an example.</p></blockquote><p>In this case we can overcome the challenge by separating the side effect logic from the view presentation, and return the view presentation result in <code>presentSheet(_:)</code>:</p><pre><code><span class="keyword">func</span> presentSheet(<span class="keyword">_</span> sheet: <span class="type">SettingsSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">Analytics</span>.<span class="call">log</span>(.<span class="call">presenting</span>(sheet)) <span class="comment">// &lt;-- side effect</span>
  <span class="keyword">return</span> <span class="call">_presentSheet</span>(sheet)
}

<span class="comment">// üëáüèª Our original implementation</span>
<span class="keyword">@ViewBuilder
func</span> _presentSheet(<span class="keyword">_</span> sheet: <span class="type">SettingsSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
  <span class="keyword">switch</span> sheet {
    <span class="keyword">case</span> .<span class="dotAccess">languagePicker</span>:
      <span class="type">LanguagePicker</span>()
    <span class="keyword">case</span> .<span class="dotAccess">securityPin</span>:
      <span class="type">SecurityPinView</span>()
    <span class="keyword">case</span> .<span class="dotAccess">signIn</span>:
      <span class="type">SignInScreen</span>()
  }
}
</code></pre><p>The new <code>presentSheet(_:)</code> function still returns what our original <code>presentSheet(_:)</code> returned, but now we can add any amount of arbitrary logic beside it.</p><p>What if the side effect is in the middle of our switch statement?</p><pre><code><span class="keyword">@ViewBuilder
func</span> presentSheet(<span class="keyword">_</span> sheet: <span class="type">SettingsSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
  <span class="keyword">switch</span> sheet {
    <span class="keyword">case</span> .<span class="dotAccess">languagePicker</span>:
      <span class="type">LanguagePicker</span>()
    <span class="keyword">case</span> .<span class="dotAccess">securityPin</span>:
      <span class="call">doSomething</span>() <span class="comment">// &lt;-- side effect</span> 
      <span class="type">SecurityPinView</span>()
    <span class="keyword">case</span> .<span class="dotAccess">signIn</span>:
      <span class="type">SignInScreen</span>()
  }
}
</code></pre><p>Once again we can separate this logic by splitting the <code>presentSheet(_:)</code> presentation from the side effects, similarly to how we did above.<br>In this case we might need to refactor the side effects logic into a new function (with a new switch statement) and call that from the <code>presentSheet(_:)</code>.</p><p>However when these side effects have actually something to do with the view presentation, we might not wish to separate the logic, in such scenarios we can use a small trick by remembering that:</p><ul><li><code>@resultBuilder</code> has gained support for <code>let</code> and <code>var</code> declarations</li><li>Swift functions are first-class citizens</li></ul><p>...which is a fancy way to say that we can declare a new variable with the result of our side effect, and just not use it:</p><pre><code><span class="keyword">@ViewBuilder
func</span> presentSheet(<span class="keyword">_</span> sheet: <span class="type">SettingsSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
  <span class="keyword">switch</span> sheet {
    <span class="keyword">case</span> .<span class="dotAccess">languagePicker</span>:
      <span class="type">LanguagePicker</span>()
    <span class="keyword">case</span> .<span class="dotAccess">securityPin</span>:
      <span class="keyword">let</span> _ = <span class="call">doSomething</span>() <span class="comment">// &lt;-- side effect</span> 
      <span class="type">SecurityPinView</span>()
    <span class="keyword">case</span> .<span class="dotAccess">signIn</span>:
      <span class="type">SignInScreen</span>()
  }
}
</code></pre><p>This is completely legal swift code and will work as expected.</p><h2>Is AnyView still needed?</h2><p>We've seen how thanks to the latest advancements in <code>@resultBuilder</code> we can get rid of most workarounds we needed prior to Xcode 12, however there are still some scenarios where <code>AnyView</code> is necessary:</p><ul><li>when using iOS availability with a pre-iOS 14 condition, as <a href="https://developer.apple.com/documentation/swiftui/viewbuilder/buildlimitedavailability(_:)"><code>buildLimitedAvailability(_:)</code></a> is iOS 14+ only:</li></ul><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="keyword">if #available</span>(iOS <span class="number">13.4</span>, *) {
    <span class="keyword">return</span> <span class="type">AnyView</span>(
      ... <span class="comment">// A view for iOS 13.4+</span>
    )
  } <span class="keyword">else</span> {
    <span class="keyword">return</span> <span class="type">AnyView</span>(
      ... <span class="comment">// A different view for iOS 13.0 - 13.3</span>
    )
  }
}
</code></pre><ul><li>when type erasure is necessary: we've covered an example in <a href="https://www.fivestars.blog/articles/custom-view-styles/">Custom SwiftUI view styles</a></li><li>...and probably more: if you're aware of any other situation, please <a href="https://twitter.com/zntfdr">let me know</a>!</li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>SwiftUI has completely revolutionized how we declare UI in our apps, with Xcode 12 we've made big steps forward for even more elegant expressiveness, and I'm sure this trend will continue this year with new API allowing us to do more, with less code.</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/function-builder-attribute-can-only-be-applied-to-a-property-if-it-defines-a-getter</guid><title>Function builder attribute 'ViewBuilder' can only be applied to a property if it defines a getter</title><description>A quick follow-up and a sneak peek of a new Swift 5.4/Xcode 12.5 @resultBuilder feature.</description><link>https://www.fivestars.blog/articles/function-builder-attribute-can-only-be-applied-to-a-property-if-it-defines-a-getter</link><pubDate>Fri, 26 Feb 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>This is a quick follow up on the last two entries, as I've received multiple feedbacks around this error.</p></blockquote><p>New in Swift 5.4/Xcode 12.5, <code>@resultBuilder</code> has gained <a href="https://github.com/apple/swift/pull/34097">support for stored properties</a>.</p><p>This makes it possible to associate <code>@ViewBuilder</code>, SwiftUI's <code>@resultBuilder</code> for building views, to view properties:</p><pre><code><span class="keyword">struct</span> FSView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="comment">// üëáüèª new in Swift 5.4</span>
  <span class="keyword">@ViewBuilder let</span> content: <span class="type">Content</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    ...
  }
}
</code></pre><p>As this declaration requires Swift 5.4, trying to build it with Xcode 12.4/Swift 5.3 or earlier will trigger a <code>Function builder attribute 'ViewBuilder' can only be applied to a property if it defines a getter</code> build error.</p><blockquote><p>Function builder, a.k.a. <code>@_functionBuilder</code>, was the <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">former name of <code>@resultBuilder</code></a>, which has been renamed on the <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0289-result-builders.md">latest Swift evolution proposal</a>.</p></blockquote><p>If we'd like to build this code with previous versions of Xcode/Swift, we need to remove the property <code>@ViewBuilder</code> association, and declare a new initializer with a <code>@ViewBuilder</code> parameter instead:</p><pre><code><span class="comment">// Before Swift 5.4</span>
<span class="keyword">struct</span> FSView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="comment">// üëáüèª We can't add @ViewBuilder in stored properties before Swift 5.4</span>
  <span class="keyword">let</span> content: <span class="type">Content</span>

  <span class="comment">// üëáüèª Explicit init with @ViewBuilder parameter</span>
  <span class="keyword">init</span>(<span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>) {
    <span class="keyword">self</span>.<span class="property">content</span> = <span class="call">content</span>()
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    ...
  }
}
</code></pre><p>Beside the different declaration, the views will look and behave exactly the same.</p><p>In other words, from Xcode 12.5, Swift 5.4 will automatically synthesize this initializer, allowing us to write even more compact views.</p><p>Hope this clear things up! Thank you for reading and please <a href="https://twitter.com/zntfdr">let me know</a> if you have any other question :)</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-hud</guid><title>Custom HUDs in SwiftUI</title><description>Let's see how we can create our own app-wide HUDs in SwiftUI!</description><link>https://www.fivestars.blog/articles/swiftui-hud</link><pubDate>Tue, 23 Feb 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>iOS has always had some kind of system HUD:<br>we can see one every time we send an email from the Mail.app, when we toggle iOS's Silent Mode, and in many other ways.</p><p>Unfortunately, <a href="https://www.fivestars.blog/articles/large-content-viewer/">beside for accessibility</a>, iOS has yet to open an API for developers to display those HUDs at will (FB6534210).</p><p>Fortunately, Apple has also brought us SwiftUI, which makes recreating such HUDs not too troublesome: in this article, let's see how we can build one ourselves!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The HUD</h2><img src="https://www.fivestars.blog/assets/posts/swiftui-hud/HUDImage.png"/><p>We will recreate the "Silent Mode" HUD (or the "<em>airpods are connected</em>" HUD, or..), for maximum flexibility we will let the developers input the HUD content, while the HUD definition will take care of the shape and shadow:</p><pre><code><span class="keyword">struct</span> HUD&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@ViewBuilder let</span> content: <span class="type">Content</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    content
      .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>, <span class="number">12</span>)
      .<span class="call">padding</span>(<span class="number">16</span>)
      .<span class="call">background</span>(
        <span class="type">Capsule</span>()
          .<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">white</span>)
          .<span class="call">shadow</span>(color: <span class="type">Color</span>(.<span class="dotAccess">black</span>).<span class="call">opacity</span>(<span class="number">0.16</span>), radius: <span class="number">12</span>, x: <span class="number">0</span>, y: <span class="number">5</span>)
      )
  }
}
</code></pre><p>For example we can create the preview above with:</p><pre><code><span class="type">HUD</span> {
  <span class="type">Label</span>(<span class="string">"Five stars"</span>, systemImage: <span class="string">"star.fill"</span>)
}
</code></pre><p>Great! Now that we have our design, let's add it in a view and implement its show/hide animation.</p><h2>Showing &amp; hiding the HUD</h2><p>We will embed the HUD in a <code>ZStack</code>, where it will be the top-most element:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span>(alignment: .<span class="dotAccess">top</span>) {
      <span class="type">NavigationView</span> {
        <span class="type">Button</span>(<span class="string">"Show/hide HUD"</span>) { }
      }

      <span class="type">HUD</span> {
        <span class="type">Label</span>(<span class="string">"Five stars"</span>, systemImage: <span class="string">"star.fill"</span>)
      }
      .<span class="call">zIndex</span>(<span class="number">1</span>)
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-hud/HUDalwaysshown.png"/><p>At this point we have our HUD always displayed, let's introduce a new state controlling whether the HUD is shown:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> showingHUD = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span>(alignment: .<span class="dotAccess">top</span>) {
      <span class="type">NavigationView</span> {
        <span class="type">Button</span>(<span class="string">"Show/hide HUD"</span>) {
          showingHUD.<span class="call">toggle</span>()
        }
      }

      <span class="keyword">if</span> showingHUD {
        <span class="type">HUD</span> {
          <span class="type">Label</span>(<span class="string">"Five stars"</span>, systemImage: <span class="string">"star.fill"</span>)
        }
        .<span class="call">zIndex</span>(<span class="number">1</span>)
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-hud/showHideHUD.gif"/><p>Great, this works, however we probably would like some fancier animation, we can achieve that by:</p><ul><li>using the <code>withAnimation</code> modifier in the button action</li><li>declaring a transition where we display our HUD from the top of the screen, along with the default opacity effect</li></ul><p>Lastly, the HUD needs to have an automatic dismissal after a few seconds, we can trigger so by adding a countdown via the <code>onAppear</code> modifier:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> showingHUD = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span>(alignment: .<span class="dotAccess">top</span>) {
      <span class="type">NavigationView</span> {
        <span class="type">Button</span>(<span class="string">"Show/hide HUD"</span>) {
          <span class="call">withAnimation</span> {
            showingHUD.<span class="call">toggle</span>()
          }
        }
      }

      <span class="keyword">if</span> showingHUD {
        <span class="type">HUD</span> {
          <span class="type">Label</span>(<span class="string">"Five stars"</span>, systemImage: <span class="string">"star.fill"</span>)
        }
        .<span class="call">transition</span>(<span class="type">AnyTransition</span>.<span class="call">move</span>(edge: .<span class="dotAccess">top</span>).<span class="call">combined</span>(with: .<span class="dotAccess">opacity</span>))
        .<span class="call">onAppear</span> {
          <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">asyncAfter</span>(deadline: .<span class="call">now</span>() + <span class="number">3</span>) {
            <span class="call">withAnimation</span> {
              showingHUD = <span class="keyword">false</span>
            }
          }
        }
        .<span class="call">zIndex</span>(<span class="number">1</span>)
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-hud/GoodAnimationHUD.gif"/><p>From the user point of view, this is so much better! However our relatively simple view code is now overwhelmed with HUD logic, let's tackle that by creating a new <code>hud</code> view modifier:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> hud&lt;Content: <span class="type">View</span>&gt;(
    isPresented: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;,
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  ) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span>(alignment: .<span class="dotAccess">top</span>) {
      <span class="keyword">self

      if</span> isPresented.<span class="property">wrappedValue</span> {
        <span class="type">HUD</span>(content: content)
          .<span class="call">transition</span>(<span class="type">AnyTransition</span>.<span class="call">move</span>(edge: .<span class="dotAccess">top</span>).<span class="call">combined</span>(with: .<span class="dotAccess">opacity</span>))
          .<span class="call">onAppear</span> {
            <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">asyncAfter</span>(deadline: .<span class="call">now</span>() + <span class="number">3</span>) {
              <span class="call">withAnimation</span> {
                isPresented.<span class="property">wrappedValue</span> = <span class="keyword">false</span>
              }
            }
          }
          .<span class="call">zIndex</span>(<span class="number">1</span>)
      }
    }
  }
}
</code></pre><p>Thanks to this new definition our main view declaration focuses solely on the actual content:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> showingHUD = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">Button</span>(<span class="string">"Show/hide HUD"</span>) {
        <span class="call">withAnimation</span> {
          showingHUD.<span class="call">toggle</span>()
        }
      }
    }
    .<span class="call">hud</span>(isPresented: $showingHUD) {
      <span class="type">Label</span>(<span class="string">"Five stars"</span>, systemImage: <span class="string">"star.fill"</span>)
    }
  }
}
</code></pre><p>Note how we've put the <code>.hud(isPresented:content:)</code> view modifier on top of <code>NavigationView</code>, meaning that our HUD will persist even when navigating multiple screens:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-hud/HUDNavigation.gif"/><h2>App-wise HUD</h2><p>Since the HUD content is a parameter, it can be swapped whenever we please. This is especially useful if we would like our app to have a <em>global</em> HUD:<br>thanks to this dynamicity we can create an environment object for our HUD, and only views that need or want to trigger the HUD will reach for it.</p><p>For example let's make it possible to change both the title and the image of our HUD <code>Label</code>, we do so by creating a new <code>HUDState</code> <code>ObservableObject</code>:</p><pre><code><span class="keyword">final class</span> HUDState: <span class="type">ObservableObject</span> {
  <span class="keyword">@Published var</span> isPresented: <span class="type">Bool</span> = <span class="keyword">false
  var</span> title: <span class="type">String</span> = <span class="string">""</span>
  <span class="keyword">var</span> systemImage: <span class="type">String</span> = <span class="string">""</span>
}
</code></pre><p>Then we move our <code>.hud(isPresented:content:)</code> modifier to the <code>App</code> level (or the <code>SceneDelegate</code> if we're still using the UIKit life cycle), along with the new state:</p><pre><code><span class="keyword">@main
struct</span> RatingApp: <span class="type">App</span> {
  <span class="keyword">@StateObject var</span> hudState = <span class="type">HUDState</span>()

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
    <span class="type">WindowGroup</span> {
      <span class="type">ContentView</span>()
        .<span class="call">environmentObject</span>(hudState)
        .<span class="call">hud</span>(isPresented: $hudState.<span class="property">isPresented</span>) {
          <span class="type">Label</span>(hudState.<span class="property">title</span>, systemImage: hudState.<span class="property">systemImage</span>)
        }
    }
  }
}
</code></pre><p>At this point <code>HUDState</code> is part of the environment, which makes it possible to trigger the HUD from any view, for example, we can go back to our original view and update it with these new changes:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@EnvironmentObject var</span> hudState: <span class="type">HUDState</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">Button</span>(<span class="string">"Show/hide HUD"</span>) {
        hudState.<span class="property">title</span> = <span class="string">"Five stars"</span>
        hudState.<span class="property">systemImage</span> = <span class="string">"star.fill"</span>
        <span class="call">withAnimation</span> {
          hudState.<span class="property">isPresented</span>.<span class="call">toggle</span>()
        }
      }
    }
  }
}
</code></pre><p>There's still room for improvement at call site, as the developer may forget to update the hud image for example, or to wrap the <code>isPresented</code> change within <code>withAnimation</code>.</p><p>To avoid such scenarios, instead of asking developers to manually change each parameter by themselves, we can let them trigger the HUD via a convenience <code>show(title:systemImage:)</code> function:</p><pre><code><span class="keyword">final class</span> HUDState: <span class="type">ObservableObject</span> {
  <span class="keyword">@Published var</span> isPresented: <span class="type">Bool</span> = <span class="keyword">false
  private(set) var</span> title: <span class="type">String</span> = <span class="string">""</span>
  <span class="keyword">private(set) var</span> systemImage: <span class="type">String</span> = <span class="string">""</span>

  <span class="keyword">func</span> show(title: <span class="type">String</span>, systemImage: <span class="type">String</span>) {
    <span class="keyword">self</span>.<span class="property">title</span> = title
    <span class="keyword">self</span>.<span class="property">systemImage</span> = systemImage
    <span class="call">withAnimation</span> {
      isPresented = <span class="keyword">true</span>
    }
  }
}
</code></pre><p>Going back to our original view:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@EnvironmentObject private var</span> hud: <span class="type">HUDState</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">Button</span>(<span class="string">"Show/hide HUD"</span>) {
        hud.<span class="call">show</span>(title: <span class="string">"Five stars"</span>, systemImage: <span class="string">"star.fill"</span>)
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-hud/GoodAnimationHUD.gif"/><p>Now we truly have a global HUD and almost no HUD logic if not the bare minimum to trigger it from any view. Of course there's still room for improvements (you win Internet points if you spot some of these and <a href="https://twitter.com/zntfdr">let me know</a>), however this is already a good setup.</p><p>The final gist, both for the local and global example, can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/SwiftUI-HUD">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>HUDs have been part of the iOS visual language for many years, while we don't have access to the native ones, SwiftUI lets us create elegant solutions that can go well beyond what a system API would ever offer.</p><p>While we focused on just one kind of HUD, the same flow can be applied to any other kind, and can even be applied for custom alerts, and much more.</p><p>Do you display HUDs in your apps? What approach do you use? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-patter-passing-views</guid><title>SwiftUI patterns: passing &amp; accepting views</title><description>Let's see how SwiftUI itself uses composition in its own APIs.</description><link>https://www.fivestars.blog/articles/swiftui-patter-passing-views</link><pubDate>Tue, 16 Feb 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>When building advanced screens, at some point our view definitions will need to accept external views as parameters for maximum flexibility.</p><p>This is something SwiftUI solves beautifully via composition, which we covered in <a href="https://www.fivestars.blog/articles/design-system-composing-views/">Composing SwiftUI views</a>.</p><p>In this article let's explore how SwiftUI itself use this pattern, and what kind of variants there are.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Explicit types</h2><p>When a view wants to offer some flexibility but still expect a certain view instance, this can be achieved by explicitly asking for that instance type.</p><p>Some views use <a href="https://developer.apple.com/documentation/swiftui/Text"><code>Text</code></a> as labels and for accessibility, in such cases it doesn't make sense to accept <em>any</em> view, as <a href="https://www.apple.com/voiceover/info/guide/_1121.html">VoiceOver</a> needs to read <em>text</em> out loud:</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">extension</span> <span class="type">Image</span> {
  <span class="keyword">public init</span>(<span class="keyword">_</span> name: <span class="type">String</span>, bundle: <span class="type">Bundle</span>? = <span class="keyword">nil</span>, label: <span class="type">Text</span>)
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Image</span>(
      <span class="string">"wwdc20-10040-header"</span>, 
      label: <span class="type">Text</span>(<span class="string">"Session title: Data Essentials in SwiftUI"</span>)
    )
  }
}
</code></pre><blockquote><p>Kind reminder to use the <code>init(decorative:bundle:)</code> <a href="https://developer.apple.com/documentation/swiftui/Image"><code>Image</code></a> initializer when an image should be ignored for accessibility purposes.</p></blockquote><p>A view might also offer some extra features only when specific views are passed, for example new in iOS 14 we can inline images within <a href="https://developer.apple.com/documentation/swiftui/Text"><code>Text</code></a>:</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">extension</span> <span class="type">Text</span> {
  <span class="keyword">@available</span>(iOS <span class="number">14.0</span>, macOS <span class="number">11.0</span>, tvOS <span class="number">14.0</span>, watchOS <span class="number">7.0</span>, *)
  <span class="keyword">public init</span>(<span class="keyword">_</span> image: <span class="type">Image</span>)
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(<span class="string">"Five"</span>)
    +
    <span class="type">Text</span>(<span class="type">Image</span>(systemName: <span class="string">"star.circle.fill"</span>)) 
    + 
    <span class="type">Text</span>(<span class="string">"Stars"</span>)
  }
}
</code></pre><h2>Generic views</h2><p>Similarly to above, when a view expects just one "simple" generic view, this is achieved by asking for a generic view instance:</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">struct</span> Picker&lt;Label: <span class="type">View</span>, SelectionValue: <span class="type">Hashable</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">init</span>(
    selection: <span class="type">Binding</span>&lt;<span class="type">SelectionValue</span>&gt;, 
    label: <span class="type">Label</span>, <span class="comment">// &lt;- here</span>
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">enum</span> PizzaTopping: <span class="type">String</span>, <span class="type">CaseIterable</span>, <span class="type">Identifiable</span> {
    <span class="keyword">case</span> üçç, üçÑ, ü´í, üêì
    <span class="keyword">var</span> id: <span class="type">String</span> { rawValue }
  }

  <span class="keyword">@State var</span> flavor: <span class="type">PizzaTopping</span> = .üçç

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">Form</span> {
        <span class="type">Picker</span>(
          selection: $flavor,
          <span class="comment">// üëáüèª Our simple view.</span>
          label: <span class="type">Label</span>(<span class="string">"Pick your topping:"</span>, systemImage: <span class="string">"plus.circle"</span>)
        ) {
          <span class="type">ForEach</span>(<span class="type">PizzaTopping</span>.<span class="property">allCases</span>) { topping <span class="keyword">in</span>
            <span class="type">Text</span>(topping.<span class="property">rawValue</span>.<span class="property">capitalized</span>)
              .<span class="call">tag</span>(topping)
          }
        }
      }
    }
  }
}
</code></pre><p>Since <a href="https://developer.apple.com/documentation/swiftui/Picker"><code>Picker</code></a> accepts a generic <code>label</code> instance, nothing stops us to pass a <a href="https://developer.apple.com/documentation/swiftui/ScrollView"><code>ScrollView</code></a>, or a <a href="https://developer.apple.com/documentation/swiftui/Button"><code>Button</code></a>, etc, or even a combination of all of them together: SwiftUI will try its best to make it work (and it does!).<br>However, when the view asks for a view instance, this is probably meant to be a single simple view.</p><blockquote><p>Views using this pattern: <a href="https://developer.apple.com/documentation/swiftui/Picker">Picker</a>, <a href="https://developer.apple.com/documentation/swiftui/GroupBox">GroupBox</a>.</p></blockquote><h2>@ViewBuilder</h2><p>This is by far the most popular way to pass views in SwiftUI. <code>@ViewBuilder</code> is SwiftUI's <code>@resultBuilder</code>, enabling us to construct views from closures:<br>when a view accepts a <code>@ViewBuilder</code> parameter, in most cases said parameter will be a core part of the new view.</p><p>The most generic definition of <a href="https://developer.apple.com/documentation/swiftui/Button"><code>Button</code></a> uses this pattern, where the button <code>label</code> can be anything we desire:</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">struct</span> Button&lt;Label&gt; : <span class="type">View</span> <span class="keyword">where</span> <span class="type">Label</span> : <span class="type">View</span> {
  <span class="keyword">init</span>(action: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>, <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>)
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(action: { <span class="call">print</span>(<span class="string">"button tapped"</span>) }) {
      ... <span class="comment">// Anything goes!</span>
    }
  }
}
</code></pre><p>All SwiftUI stacks use this approach as well, where our content will be distributed in a different axis based on the stack used:</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">struct</span> VStack&lt;Content&gt; : <span class="type">View</span> <span class="keyword">where</span> <span class="type">Content</span> : <span class="type">View</span> {
  <span class="keyword">init</span>(
    alignment: <span class="type">HorizontalAlignment</span> = .<span class="dotAccess">center</span>, 
    spacing: <span class="type">CGFloat</span>? = <span class="keyword">nil</span>, 
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      ... <span class="comment">// Anything goes!</span>
    }
  }
}
</code></pre><blockquote><p>Views using this pattern: <a href="https://developer.apple.com/documentation/swiftui/ColorPicker"><code>ColorPicker</code></a>, <a href="https://developer.apple.com/documentation/swiftui/CommandGroup"><code>CommandGroup</code></a>, <a href="https://developer.apple.com/documentation/swiftui/CommandMenu"><code>CommandMenu</code></a>, <a href="https://developer.apple.com/documentation/swiftui/DatePicker"><code>DatePicker</code></a>, <a href="https://developer.apple.com/documentation/swiftui/Form"><code>Form</code></a>, <a href="https://developer.apple.com/documentation/swiftui/Group"><code>Group</code></a>, <a href="https://developer.apple.com/documentation/swiftui/HStack"><code>HStack</code></a>, <a href="https://developer.apple.com/documentation/swiftui/LazyHStack"><code>LazyHStack</code></a>, <a href="https://developer.apple.com/documentation/swiftui/LazyVStack"><code>LazyVStack</code></a>, <a href="https://developer.apple.com/documentation/swiftui/Link"><code>Link</code></a>, <a href="https://developer.apple.com/documentation/swiftui/List"><code>List</code></a>, <a href="https://developer.apple.com/documentation/swiftui/NavigationView"><code>NavigationView</code></a>, <a href="https://developer.apple.com/documentation/swiftui/Picker"><code>Picker</code></a>, <a href="https://developer.apple.com/documentation/swiftui/ProgressView"><code>ProgressView</code></a>, <a href="https://developer.apple.com/documentation/swiftui/ScrollView"><code>ScrollView</code></a>, <a href="https://developer.apple.com/documentation/swiftui/Section"><code>Section</code></a>, <a href="https://developer.apple.com/documentation/swiftui/Slider"><code>Slider</code></a>, <a href="https://developer.apple.com/documentation/swiftui/Stepper"><code>Stepper</code></a>, <a href="https://developer.apple.com/documentation/swiftui/TabView"><code>TabView</code></a>, <a href="https://developer.apple.com/documentation/swiftui/Toggle"><code>Toggle</code></a>, <a href="https://developer.apple.com/documentation/swiftui/VStack"><code>VStack</code></a>, <a href="https://developer.apple.com/documentation/swiftui/ZStack"><code>ZStack</code></a>.</p></blockquote><h3>Double @ViewBuilder</h3><p>Some views sport separate generic components, where each can be as complicated as needed. In such scenarios the view will ask for a separate <code>@ViewBuilders</code> parameter for each component:</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">struct</span> Label&lt;Title, Icon&gt; : <span class="type">View</span> <span class="keyword">where</span> <span class="type">Title</span> : <span class="type">View</span>, <span class="type">Icon</span> : <span class="type">View</span> {
  <span class="keyword">init</span>(<span class="keyword">@ViewBuilder</span> title: () -&gt; <span class="type">Title</span>, <span class="keyword">@ViewBuilder</span> icon: () -&gt; <span class="type">Icon</span>)
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Label</span>(
      title: { <span class="type">VStack</span> { ... } },
      icon: { <span class="type">ScrollView</span> { ... } }
    )
  }
}
</code></pre><blockquote><p>Views using this pattern: <a href="https://developer.apple.com/documentation/swiftui/Label">Label</a>, <a href="https://developer.apple.com/documentation/swiftui/Menu">Menu</a>, <a href="https://developer.apple.com/documentation/swiftui/ProgressView">ProgressView</a>.</p></blockquote><h3>@escaping @Viewbuilder</h3><p>We have a particular <code>@Viewbuilder</code> use case when the closure is marked as <code>@escaping</code>, meaning that it won't be used right during the view initialization.</p><p>Most of these cases will also pass a parameter to the closure, allowing us to change the view with this parameter.</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">extension</span> <span class="type">ForEach</span> <span class="keyword">where</span> <span class="type">Content</span>: <span class="type">View</span>  {
  <span class="keyword">public init</span>(
    <span class="keyword">_</span> data: <span class="type">Data</span>, 
    id: <span class="type">KeyPath</span>&lt;<span class="type">Data</span>.<span class="type">Element</span>, <span class="type">ID</span>&gt;, 
    <span class="keyword">@ViewBuilder</span> content: <span class="keyword">@escaping</span> (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">Content</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
      <span class="type">ForEach</span>((<span class="number">0</span>...<span class="number">9</span>), id: \.<span class="keyword">self</span>) { number <span class="keyword">in</span>
        <span class="type">Text</span>(<span class="string">"</span>\(number)<span class="string">"</span>)
      }
    }
  }
}
</code></pre><p><code>ForEach</code>, similarly to <a href="https://developer.apple.com/documentation/swiftui/List"><code>List</code></a>, shows how this closure can be called multiple times when building the view body, therefore our closure will (potentially) be used to add multiple views to the final view.</p><p>Another interesting use case of <code>@escaping</code> is in SwiftUI readers, namely <a href="https://developer.apple.com/documentation/swiftui/GeometryReader">GeometryReader</a> and <a href="https://developer.apple.com/documentation/swiftui/ScrollViewReader">ScrollViewReader</a>, where our closure is called every time a redraw is needed, giving us access to runtime information that is not available at build time:</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">struct</span> GeometryReader&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@inlinable init</span>(<span class="keyword">@ViewBuilder</span> content: <span class="keyword">@escaping</span> (<span class="type">GeometryProxy</span>) -&gt; <span class="type">Content</span>)
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">GeometryReader</span> { proxy <span class="keyword">in</span>
      <span class="type">Text</span>(
        <span class="string">"The parent proposed size is</span> \(proxy.<span class="property">size</span>.<span class="property">width</span>)<span class="string">x</span>\(proxy.<span class="property">size</span>.<span class="property">height</span>)<span class="string">"</span>
      )
      .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>, maxHeight: .<span class="dotAccess">infinity</span>)
    }
  }
}
</code></pre><blockquote><p>Views using this pattern: <a href="https://developer.apple.com/documentation/swiftui/ForEach">ForEach</a>, <a href="https://developer.apple.com/documentation/swiftui/List">List</a>, <a href="https://developer.apple.com/documentation/swiftui/GeometryReader">GeometryReader</a>, <a href="https://developer.apple.com/documentation/swiftui/ScrollViewReader">ScrollViewReader</a>, <a href="https://developer.apple.com/documentation/swiftui/OutlineGroup">OutlineGroup</a>.</p></blockquote><h3>One-off exceptions</h3><p>There are a couple of views that have their own pattern not used by any other view, they both are interesting so let's highlight them here.</p><h4>@ViewBuilder &amp; @escaping @ViewBuilder</h4><p><a href="https://developer.apple.com/documentation/swiftui/DisclosureGroup"><code>DisclosureGroup</code></a>, which we built from scratch in <a href="https://www.fivestars.blog/articles/optional-binding/">Adding optional @Bindings to SwiftUI views</a>, is the only view that accepts both a non-escaping <code>@ViewBuilder</code> and an escaping one.</p><p>This is to make the view as light as possible, and only generate the content when (and if) it's shown/disclosed:</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">struct</span> DisclosureGroup&lt;Label: <span class="type">View</span>, Content: <span class="type">View</span>&gt; : <span class="type">View</span> {
  <span class="keyword">init</span>(
    <span class="comment">// üëáüèª This closure will run only when/if the user taps on the disclosure group.</span>
    <span class="keyword">@ViewBuilder</span> content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>, 
    <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">List</span> {
      <span class="type">DisclosureGroup</span> {
        <span class="comment">// This closure will run only when/if the user taps on the disclosure group.</span>
        <span class="type">Text</span>(<span class="string">"Lazy-loaded content"</span>)
      } label: {
        <span class="type">Text</span>(<span class="string">"Tap to show content"</span>)
      }
    }
  }
}
</code></pre><p><code>List</code> uses the same approach for its hierarchy variants, which we covered and built from scratch in <a href="https://www.fivestars.blog/articles/swiftui-hierarchy-list/">SwiftUI Hierarchy List</a>:<br>in <a href="https://developer.apple.com/documentation/swiftui/List"><code>List</code></a>'s case there's only one <code>@escaping @ViewBuilder</code> parameter, as the "label" is also generated with that same parameter (from an item in the level above in the hierarchy).</p><h4>Generic view + @ViewBuilder</h4><p>The last exception is <a href="https://developer.apple.com/documentation/swiftui/NavigationLink"><code>NavigationLink</code></a> which, funnily enough, contradicts everything we've seen above. Let's look at its simplest definition:</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">struct</span> NavigationLink&lt;Label: <span class="type">View</span>, Destination: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">init</span>(destination: <span class="type">Destination</span>, <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>)
}
</code></pre><p><a href="https://developer.apple.com/documentation/swiftui/NavigationLink"><code>NavigationLink</code></a> asks for two parameters:<br><br>- a <code>destination</code> generic view, which is the view that will be shown when the link is triggered - a <code>@ViewBuilder label</code>, which, similar to <a href="https://developer.apple.com/documentation/swiftui/Button"><code>Button</code></a>, is used to actually compose the link</p><p>This view contradicts everything above for three main reasons:</p><ul><li>the <code>destination</code>, which probably is the most complicated component (vs. the <code>label</code>), is just a generic view instead of a <code>@ViewBuilder</code>: this can be probably seen as an invitation from the SwiftUI team to define this view separately, and not having the actual implementation in the <a href="https://developer.apple.com/documentation/swiftui/NavigationLink"><code>NavigationLink</code></a> definition</li></ul><ul><li>the <code>destination</code> should not be used until the link is triggered, yet we need to pass a fully initialized instance as a parameter in the <a href="https://developer.apple.com/documentation/swiftui/NavigationLink"><code>NavigationLink</code></a> (this is one of the reasons why the smart people at <a href="https://www.objc.io/">objc.io</a> have created <a href="https://www.objc.io/blog/2019/07/02/lazy-loading/"><code>LazyView</code></a>, which work wonders in <code>NavigationLink</code>s).</li></ul><ul><li>the <code>label</code> component is the one that comes with a <code>@ViewBuilder</code> modifier, this is consistent with <a href="https://developer.apple.com/documentation/swiftui/Button"><code>Button</code></a>'s definition, however the difference here is that <code>label</code> should be probably be considered the <em>secondary</em> component, with <code>destination</code> being the most important one.</li></ul><p><a href="https://www.fivestars.blog/articles/hashable-bindings/">Once</a> <a href="https://www.fivestars.blog/articles/swiftui-patterns-bindings/">again</a> <a href="https://developer.apple.com/documentation/swiftui/NavigationLink"><code>NavigationLink</code></a> reveals itself as an <a href="https://www.fivestars.blog/articles/swift-protocols/">exception</a> among all SwiftUI definitions:<br>as we covered in <a href="https://www.fivestars.blog/articles/programmatic-navigation/">The future of SwiftUI navigation (?)</a>, I don't think it's long for this world.</p><h2>Main takeaways</h2><p>In this article we‚Äôve explored how all SwiftUI native components accept an external view, here are some of the most important takeaways:</p><ul><li>If a view needs a specific type instance, ask for that type directly</li><li>If a view needs a secondary, simple view instance (mainly used as a <code>label</code>), ask for a generic instance.</li><li>If a view asks for a core part of the final view, which can be as complex as needed, use <code>@ViewBuilder</code>.</li><li>If a view needs to build multiple parts of the final view via closures, maybe not even all at once, use <code>@escaping @Viewbuilder</code><ul><li>it's totally fine to pass parameters to the closure when/if needed</li></ul></li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Accepting external views is probably one of the most powerful patterns that we can use to make our apps and design truly composable:<br>SwiftUI itself uses this pattern a lot, sometime it's even hidden via convenience API, so developers don't even need to be aware of it happening.</p><p>Do you use composition in your apps? Where do you find it working (or not) well? <a href="https://twitter.com/zntfdr">Please let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p><h2>Bonus track: Swift 5.4</h2><blockquote><p>Credits to <a href="https://twitter.com/kingatarthur/">Matt Young</a> for the tip!</p></blockquote><p>New in Swift 5.4 we have <code>@resultBuilder</code> support for stored properties, which makes our internal views more convenient to write, take the following view for example:</p><pre><code><span class="keyword">struct</span> CardView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="comment">// üëáüèª New in Swift 5.4</span>
  <span class="keyword">@ViewBuilder let</span> content: <span class="type">Content</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    content
  }
}
</code></pre><p>Thanks to this definition Swift now synthesizes the following initializer:</p><pre><code><span class="keyword">internal init</span>(<span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>) {
  <span class="keyword">self</span>.<span class="property">content</span> = <span class="call">content</span>()
}
</code></pre><p>The only way to obtain the same initializer before Swift 5.4 was to explicitly declare it ourselves:</p><pre><code><span class="comment">// Before Swift 5.4</span>
<span class="keyword">struct</span> CardView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="comment">// üëáüèª We can't add @ViewBuilder in stored properties before Swift 5.4</span>
  <span class="keyword">let</span> content: <span class="type">Content</span>

  <span class="keyword">init</span>(<span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>) {
    <span class="keyword">self</span>.<span class="property">content</span> = <span class="call">content</span>()
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    content
  }
}
</code></pre><blockquote><p>As the rest of Swift synthesization, this generates an <code>internal</code> initializer: anything <code>public</code> will still need to have an explicit initializer.</p></blockquote>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-keyboard</guid><title>SwiftUI keyboard avoidance</title><description></description><link>https://www.fivestars.blog/articles/swiftui-keyboard</link><pubDate>Tue, 9 Feb 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>One of the things I was most surprised with when starting my iOS career was the lack of a baked-in, system-wide keyboard avoidance:<br>every app needs to show a keyboard at some point, and every app has to either <a href="https://www.vadimbulavin.com/how-to-move-swiftui-view-when-keyboard-covers-text-field/">re-invent the wheel</a> or pick one of the <a href="https://github.com/hackiftekhar/IQKeyboardManager">de-facto standard open source solutions</a> out there.</p><p>Fortunately, in iOS 14, SwiftUI ends it all by gaining automatic keyboard avoidance.</p><p>In this article, let's have a rundown on how to manage this long-awaited, very welcome feature.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Opting-out</h2><p>This feature is opt-out, meaning it's on by default.<br><br>Unlike for system appearances (a.k.a dark/light mode), there's no way to entirely opt out of this feature via an <code>info.plist</code> key (FB8756741), instead, we will need to use the new <a href="https://developer.apple.com/documentation/swiftui/roundedrectangle/ignoressafearea(_:edges:)?changes=latest_beta"><code>ignoresSafeArea(_:edges:)</code></a> view modifier when needed:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  myView
    .<span class="call">ignoresSafeArea</span>(.<span class="dotAccess">keyboard</span>)
}
</code></pre><blockquote><p>More examples below.</p></blockquote><p>However I recommend against this and to embrace SwiftUI's new feature:<br>let the SwiftUI team deal with it, while we can focus on delivering the best app to our users!</p><h2>iOS 13 compatibility</h2><p>As this is an iOS 14+ feature, we still need to implement our own keyboard avoidance when/if targeting iOS 13.<br><br>This is mostly a matter of enabling the custom/3rd-party keyboard avoidance only on iOS 13:</p><pre><code><span class="keyword">if #available</span>(iOS <span class="number">14.0</span>, *) {
  <span class="comment">// do nothing, use SwiftUI's keyboard avoidance.</span>
} <span class="keyword">else</span> {
  <span class="comment">// enable custom/3rd-party keyboard avoidance.</span>
}
</code></pre><blockquote><p>To be found in your app/scene delegate.</p></blockquote><h2>How keyboard avoidance works</h2><p>Every device has a safe area: when a system keyboard is shown, this safe area will grow, reducing the space proposed to our SwiftUI views, which will need to compress in order to make room for the keyboard.</p><p>In the following example we can see how activating the <code>TextField</code> compresses the colors heights:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-keyboard/colorCompressionImage.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> redSize: <span class="type">CGSize</span> = .<span class="dotAccess">zero</span>
  <span class="keyword">@State private var</span> yellowSize: <span class="type">CGSize</span> = .<span class="dotAccess">zero</span>
  <span class="keyword">@State private var</span> name: <span class="type">String</span> = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Color</span>.<span class="property">red</span>
        .<span class="call">overlay</span>(<span class="type">Text</span>(verbatim: <span class="string">"</span>\(redSize)<span class="string">"</span>))
        .<span class="call">readSize</span> {
          redSize = $0
        }

      <span class="type">TextField</span>(<span class="string">"Name:"</span>, text: $name)

      <span class="type">Color</span>.<span class="property">yellow</span>
        .<span class="call">overlay</span>(<span class="type">Text</span>(verbatim: <span class="string">"</span>\(yellowSize)<span class="string">"</span>))
        .<span class="call">readSize</span> {
          yellowSize = $0
        }
    }
    .<span class="call">padding</span>()
  }
}
</code></pre><blockquote><p>We're using our <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/"><code>.readSize(onChange:)</code> view modifier</a> to get the child view size.</p></blockquote><p>This is possible because we had two "compressible" views (our colors), if all views are not flexible, then SwiftUI will shift the whole view up:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-keyboard/colorNoCompressionImage.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> name: <span class="type">String</span> = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Color</span>.<span class="property">red</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)

      <span class="type">TextField</span>(<span class="string">"Name:"</span>, text: $name)

      <span class="type">Color</span>.<span class="property">yellow</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)
    }
    .<span class="call">padding</span>()
  }
}
</code></pre><p>This happens because our view height exceeds the parent proposed size:<br>in these situations SwiftUI will center our view in the middle of the available area, and our view will vertically leak this area both at the bottom and at the top.</p><p>What if we move the text field to the top of the colors?</p><img src="https://www.fivestars.blog/assets/posts/swiftui-keyboard/colorNoCompressionFailImage.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> name: <span class="type">String</span> = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">TextField</span>(<span class="string">"Name:"</span>, text: $name)

      <span class="type">Color</span>.<span class="property">red</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)

      <span class="type">Color</span>.<span class="property">yellow</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)
    }
    .<span class="call">padding</span>()
  }
}
</code></pre><p>Wops, the text field is completely hidden!</p><p>The easiest (and recommended) solution is to use wrap our views in a <a href="https://www.fivestars.blog/articles/scrollview-offset/">scroll view</a> (<code>ScrollView</code>, <code>List</code>, <code>Form</code>) instead of a <code>VStack</code>:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-keyboard/colorScrollImage.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> name: <span class="type">String</span> = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {
      <span class="type">TextField</span>(<span class="string">"Name:"</span>, text: $name)

      <span class="type">Color</span>.<span class="property">red</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)

      <span class="type">Color</span>.<span class="property">yellow</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)
    }
    .<span class="call">padding</span>()
  }
}
</code></pre><p>Scroll views, <a href="https://www.fivestars.blog/articles/scrollview-offset/">as we've seen before</a>, are composed by two layers:</p><ul><li>a frame layer, used to position the scroll view itself in the view hierarchy</li><li>a "scrollable" content layer, where all its content is placed</li></ul><p>When a keyboard is shown, only the frame layer is affected, our content (<code>TextField</code> and colors) is not.</p><p>SwiftUI manages the scroll view offset for us, and it will make sure that our text input is visible, regardless of where it is located:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-keyboard/colorScrollBottomImage.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> name: <span class="type">String</span> = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {
      <span class="type">Color</span>.<span class="property">red</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)

      <span class="type">Color</span>.<span class="property">yellow</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)

      <span class="type">TextField</span>(<span class="string">"Name:"</span>, text: $name)
    }
    .<span class="call">padding</span>()
  }
}
</code></pre><h2>Ignoring the keyboard</h2><p>Let's say that, for some reason we don't want our view to move when the keyboard shows up, going back to our original example we can add the view modifier <code>.ignoresSafeArea(.keyboard)</code> and it will work as expected:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-keyboard/ignoreCompressableColorImage.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> name: <span class="type">String</span> = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Color</span>.<span class="property">red</span>

      <span class="type">TextField</span>(<span class="string">"Name:"</span>, text: $name)

      <span class="type">Color</span>.<span class="property">yellow</span>
    }
    .<span class="call">padding</span>()
    .<span class="call">ignoresSafeArea</span>(.<span class="dotAccess">keyboard</span>)
  }
}
</code></pre><p>If we make all our views heights not flexible, the whole view will shift up once again, despite <code>.ignoresSafeArea(.keyboard)</code> being there:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-keyboard/colorNoCompressionImage.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> name: <span class="type">String</span> = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Color</span>.<span class="property">red</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)

      <span class="type">TextField</span>(<span class="string">"Name:"</span>, text: $name)

      <span class="type">Color</span>.<span class="property">yellow</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)
    }
    .<span class="call">padding</span>()
    .<span class="call">ignoresSafeArea</span>(.<span class="dotAccess">keyboard</span>)
  }
}
</code></pre><p>After some experimentation it seems like SwiftUI shifts the view up when the view body has not enough compressible vertical space:<br>in other words, if our content height cannot be reduced to accommodate the keyboard, <code>.ignoresSafeArea(.keyboard)</code> won't work.</p><blockquote><p>If you figure out the right formula, please <a href="https://twitter.com/zntfdr">let me know</a>!</p></blockquote><p>In either case, no components will be actually compressed with <code>.ignoresSafeArea(.keyboard)</code>:<br>the only difference is whether the view is shifted up or not.</p><p>The recommended way to avoid such issues is by using a scroll view, which makes the previous example work as expected:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-keyboard/ignoreCompressableColorImage.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> name: <span class="type">String</span> = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {  <span class="comment">// this is now a ScrollView instead of a VStack.</span>
      <span class="type">Color</span>.<span class="property">red</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)

      <span class="type">TextField</span>(<span class="string">"Name:"</span>, text: $name)

      <span class="type">Color</span>.<span class="property">yellow</span>
        .<span class="call">frame</span>(height: <span class="number">314</span>)
    }
    .<span class="call">padding</span>()
    .<span class="call">ignoresSafeArea</span>(.<span class="dotAccess">keyboard</span>)
  }
}
</code></pre><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Avoiding the keyboard is something pretty much every iOS developer has had to deal with at some point, thanks to iOS 14 and SwiftUI this is now a thing of the past, allowing us developers to focus even more on app features instead.</p><p>Have you found the transition to iOS 14 smooth? Any pitfalls? <a href="https://twitter.com/zntfdr">Please let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/custom-view-styles</guid><title>Custom SwiftUI view styles</title><description></description><link>https://www.fivestars.blog/articles/custom-view-styles</link><pubDate>Tue, 2 Feb 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>When building new SwiftUI components, it's common to offer variants for different purposes/screens.</p><p>One way to manage such variants is via styles, for example by using instances conforming to <a href="https://www.fivestars.blog/articles/label/"><code>LabelStyle</code></a> or <a href="https://www.fivestars.blog/articles/button-styles/"><code>ButtonStyle</code></a>:</p><pre><code><span class="type">HStack</span> {
  <span class="type">Label</span>(<span class="string">"The title will be hidden"</span>, systemImage: <span class="string">"moon.circle.fill"</span>) 
    .<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())

  <span class="type">Button</span>(<span class="string">"Tap me"</span>) {
    <span class="comment">// handle button tap</span>
  }
  .<span class="call">buttonStyle</span>(<span class="type">BorderlessButtonStyle</span>())
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/custom-view-styles/labelButtonImage.png"/><blockquote><p>We took deep dives on both components styling <a href="https://www.fivestars.blog/articles/label/">here</a> (for <a href="https://www.fivestars.blog/articles/label/"><code>Label</code></a>) and <a href="https://www.fivestars.blog/articles/button-styles/">here</a> (for <a href="https://www.fivestars.blog/articles/button-styles/"><code>Button</code></a>).</p></blockquote><p>These styles are set in SwiftUI's environment. Instead of declaring them for each component, we could set them on a parent view, making its children inherit the styles automatically:</p><pre><code><span class="type">VStack</span> {
  <span class="comment">// All `Label`s declared here will have the title hidden.</span>

  <span class="type">Label</span>(<span class="string">"Sun"</span>, systemImage: <span class="string">"sun.min.fill"</span>) 
  <span class="type">Label</span>(<span class="string">"Moon"</span>, systemImage: <span class="string">"moon.fill"</span>) 

  ...
}
.<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/custom-view-styles/labelSunMoonImage.png"/><p>Moreover, as each view will have its environment passed down from the parent, we can always override a style when needed:</p><pre><code><span class="type">VStack</span> {
  <span class="type">Label</span>(<span class="string">"Sun"</span>, systemImage: <span class="string">"sun.min.fill"</span>) 
  <span class="type">Label</span>(<span class="string">"Moon"</span>, systemImage: <span class="string">"moon.fill"</span>) 

  <span class="comment">// This `Label` will display both title and icon.</span>
  <span class="type">Label</span>(<span class="string">"Rainy &amp; cloudy"</span>, systemImage: <span class="string">"cloud.sun.rain.fill"</span>)
    .<span class="call">labelStyle</span>(<span class="type">TitleAndIconLabelStyle</span>())

  ...
}
.<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/custom-view-styles/labelRainyImage.png"/><p>Wouldn't it be cool if we could have the same elasticity in our own SwiftUI views? In this article, let's learn how to do just that!</p><p>Here's a sneak peek of the view and styles we will build:</p><img src="https://www.fivestars.blog/assets/posts/custom-view-styles/final.png"/><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The view</h2><p>We're going to build a generic <code>Card</code> component:</p><pre><code><span class="keyword">struct</span> Card&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">var</span> content: () -&gt; <span class="type">Content</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">content</span>()
  }
}
</code></pre><blockquote><p>We've covered this technique in <a href="https://www.fivestars.blog/articles/design-system-composing-views/">Composing SwiftUI views</a>.</p></blockquote><p><code>Card</code> takes in a method returning a <code>View</code>, this view is our <code>Card</code>'s body (for the moment). Here are a couple of examples:</p><pre><code><span class="type">Card</span> {
  <span class="type">Text</span>(<span class="string">"Hello"</span>)
}

<span class="type">Card</span> {
  <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">8</span>)
    .<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">orange</span>)
    .<span class="call">frame</span>(width: <span class="number">44</span>, height: <span class="number">44</span>)
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/custom-view-styles/cardMirrorImage.png"/><p>No magic yet, let's move on to the next step.</p><h2>The view style protocol</h2><p>With our view declared it's time to define its style, we will call it <code>CardStyle</code>, consistent with SwiftUI's styles naming. <code>CardStyle</code> is going to be the <code>protocol</code> all our styles will conform to.</p><p><code>CardStyle</code> contains only one requirement: a <code>makeBody(configuration:)</code> function returning the original <code>Card</code> with our style applied.</p><p>As we're defining a protocol, we will use an <code>associatedtype</code> to require the function to return a <code>View</code> (we can't directly use generics in protocol definitions):</p><pre><code><span class="keyword">protocol</span> CardStyle {
  <span class="keyword">associatedtype</span> Body: <span class="type">View</span>
  <span class="keyword">typealias</span> Configuration = <span class="type">CardStyleConfiguration</span>

  <span class="keyword">func</span> makeBody(configuration: <span class="type">Self</span>.<span class="type">Configuration</span>) -&gt; <span class="type">Self</span>.<span class="type">Body</span>
}
</code></pre><blockquote><p>Every customizable SwiftUI style follows the same signature as above, here are all of them:<a href="https://developer.apple.com/documentation/swiftui/ButtonStyle"><code>ButtonStyle</code></a>, <a href="https://developer.apple.com/documentation/swiftui/GroupBoxStyle"><code>GroupBoxStyle</code></a>, <a href="https://developer.apple.com/documentation/swiftui/LabelStyle"><code>LabelStyle</code></a>, <a href="https://developer.apple.com/documentation/swiftui/MenuStyle"><code>MenuStyle</code></a>, <a href="https://developer.apple.com/documentation/swiftui/PrimitiveButtonStyle"><code>PrimitiveButtonStyle</code></a>, <a href="https://developer.apple.com/documentation/swiftui/ProgressViewStyle"><code>ProgressViewStyle</code></a>, <a href="https://developer.apple.com/documentation/swiftui/ToggleStyle"><code>ToggleStyle</code></a>.</p></blockquote><p><code>makeBody(configuration:)</code> needs a way to access to the original <code>Card</code> <code>body</code>:<br>this is why the method accepts a <code>CardStyleConfiguration</code> parameter, let's define that next.</p><blockquote><p>The <code>typealias</code> is there mainly to have a consistent signature between all <code>makeBody(configuration:)</code> across all styles of all views. We could remove it, but our style implementations would become more verbose and inconsistent with the rest of SwiftUI styles.</p></blockquote><h2>The view style configuration</h2><p>The style configuration has two main goals:</p><ol><li>give us access to the original view <code>body</code></li><li>give us access to any relevant property of the view</li></ol><p>In <code>CardStyleConfiguration</code> we don't need any relevant property (as it's a very generic view), however here are some examples from other SwiftUI views:</p><ul><li><code>ToggleStyleConfiguration</code> exposes the (<code>Toggle</code>'s) <code>isOn</code> state</li><li><code>ButtonStyleConfiguration</code> exposes the (<code>Button</code>'s) <code>isPressed</code> state</li><li><code>ProgressViewStyleConfiguration</code> exposes the (<code>ProgressView</code>'s) <code>fractionCompleted</code> value</li></ul><p>In most configurations the original <code>body</code> is exposed via a <code>label</code> property, we will follow the same pattern here.</p><p>It's not possible for <code>label</code> (a.k.a. our original <code>Card</code> body) to know in advance what its type is going to be, for this reason <code>label</code> will be exposed as a type-erased <code>View</code> (we cannot store a generic, non-computed <code>some View</code> value):</p><pre><code><span class="keyword">struct</span> CardStyleConfiguration {
  <span class="comment">/// A type-erased label of a Card.</span>
  <span class="keyword">struct</span> Label: <span class="type">View</span> {
    <span class="keyword">init</span>&lt;Content: <span class="type">View</span>&gt;(content: <span class="type">Content</span>) {
      body = <span class="type">AnyView</span>(content)
    }

    <span class="keyword">var</span> body: <span class="type">AnyView</span>
  }

  <span class="keyword">let</span> label: <span class="type">CardStyleConfiguration</span>.<span class="type">Label</span>
}
</code></pre><blockquote><p>Once again, this signature follows other SwiftUI configurations.</p></blockquote><h2>View styles</h2><blockquote><p>Our view is not ready to accept styles yet, however for clarity's sake there will be some images showing the final outcome when the style is applied.</p></blockquote><p>We now have everything we need to start defining our own styles! Let's waste no time:</p><pre><code><span class="keyword">struct</span> RoundedRectangleCardStyle: <span class="type">CardStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    configuration.<span class="property">label</span>
      .<span class="call">font</span>(.<span class="dotAccess">title</span>)
      .<span class="call">padding</span>()
      .<span class="call">background</span>(<span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">16</span>).<span class="call">strokeBorder</span>())
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/custom-view-styles/RoundedRectangleCardStyle.png"/><pre><code><span class="keyword">struct</span> CapsuleCardStyle: <span class="type">CardStyle</span> {
  <span class="keyword">var</span> color: <span class="type">Color</span>

  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    configuration.<span class="property">label</span>
      .<span class="call">font</span>(.<span class="dotAccess">title</span>)
      .<span class="call">foregroundColor</span>(.<span class="dotAccess">white</span>)
      .<span class="call">padding</span>()
      .<span class="call">background</span>(
        <span class="type">Capsule</span>().<span class="call">fill</span>(color)
      )
      .<span class="call">background</span>(
        <span class="type">Capsule</span>().<span class="call">fill</span>(color.<span class="call">opacity</span>(<span class="number">0.4</span>)).<span class="call">rotationEffect</span>(.<span class="keyword">init</span>(degrees: -<span class="number">8</span>))
      )
      .<span class="call">background</span>(
        <span class="type">Capsule</span>().<span class="call">fill</span>(color.<span class="call">opacity</span>(<span class="number">0.4</span>)).<span class="call">rotationEffect</span>(.<span class="keyword">init</span>(degrees: <span class="number">4</span>))
      )
      .<span class="call">background</span>(
        <span class="type">Capsule</span>().<span class="call">fill</span>(color.<span class="call">opacity</span>(<span class="number">0.4</span>)).<span class="call">rotationEffect</span>(.<span class="keyword">init</span>(degrees: <span class="number">8</span>))
      )
      .<span class="call">background</span>(
        <span class="type">Capsule</span>().<span class="call">fill</span>(color.<span class="call">opacity</span>(<span class="number">0.4</span>)).<span class="call">rotationEffect</span>(.<span class="keyword">init</span>(degrees: -<span class="number">4</span>))
      )
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/custom-view-styles/CapsuleCardStyle.png"/><pre><code><span class="keyword">struct</span> ShadowCardStyle: <span class="type">CardStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    configuration.<span class="property">label</span>
      .<span class="call">font</span>(.<span class="dotAccess">title</span>)
      .<span class="call">foregroundColor</span>(.<span class="dotAccess">black</span>)
      .<span class="call">padding</span>()
      .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">white</span>.<span class="call">cornerRadius</span>(<span class="number">16</span>))
      .<span class="call">shadow</span>(color: <span class="type">Color</span>.<span class="property">black</span>.<span class="call">opacity</span>(<span class="number">0.2</span>), radius: <span class="number">8</span>, x: <span class="number">0</span>, y: <span class="number">4</span>)
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/custom-view-styles/ShadowCardStyle.png"/><pre><code><span class="keyword">struct</span> ColorfulCardStyle: <span class="type">CardStyle</span> {
  <span class="keyword">var</span> color: <span class="type">Color</span>

  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    configuration.<span class="property">label</span>
      .<span class="call">font</span>(.<span class="dotAccess">title</span>)
      .<span class="call">foregroundColor</span>(.<span class="dotAccess">white</span>)
      .<span class="call">shadow</span>(color: <span class="type">Color</span>.<span class="property">white</span>.<span class="call">opacity</span>(<span class="number">0.8</span>), radius: <span class="number">4</span>, x: <span class="number">0</span>, y: <span class="number">2</span>)
      .<span class="call">padding</span>()
      .<span class="call">background</span>(color.<span class="call">cornerRadius</span>(<span class="number">16</span>))
      .<span class="call">shadow</span>(color: color, radius: <span class="number">8</span>, x: <span class="number">0</span>, y: <span class="number">4</span>)
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/custom-view-styles/ColorfulCardStyle.png"/><p>These are just a few examples but <em>sky's the limit</em>: we can always add more <code>CardStyle</code> implementations (or let other developers using <code>Card</code> do so).</p><h3>The default view style</h3><p>We should provide a default style that all <code>Card</code>s will reach for when no other style has been applied.</p><p>We could pick one of the current styles, however we probably would like to have different default styles based on <a href="https://www.fivestars.blog/articles/adaptive-swiftui-views/">the current context</a>, here's an example where we pick a different style based on whether we're on a mac or on an iOS device:</p><pre><code><span class="keyword">struct</span> DefaultCardStyle: <span class="type">CardStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="preprocessing">#if os(iOS)</span>
      <span class="keyword">return</span> <span class="type">ShadowCardStyle</span>().<span class="call">makeBody</span>(configuration: configuration)
    <span class="preprocessing">#else</span>
      <span class="keyword">return</span> <span class="type">RoundedRectangleCardStyle</span>().<span class="call">makeBody</span>(configuration: configuration)
    <span class="preprocessing">#endif</span>
  }
}
</code></pre><p>This definition is just a proxy to other styles we have defined earlier, however it shows how we can dynamically change styles if/when necessary.</p><h2>The environment style value</h2><p><code>CardStyle</code> is not directly handed to <code>Card</code> via a parameter: instead, the style is passed down to the view via SwiftUI's environment.</p><p>There are two steps that we must take in order to add <code>CardStyle</code> in the environment:</p><ol><li>Create a card style <a href="https://developer.apple.com/documentation/swiftui/environmentkey"><code>EnvironmentKey</code></a></li><li>Add a card style among the <a href="https://developer.apple.com/documentation/swiftui/environmentvalues"><code>EnvironmentValues</code></a></li></ol><p><code>EnvironmentValues</code> is the collection of environment values that a given view sees, as these values are propagated through the view hierarchy, different views will potentially see different values.</p><p>Internally each value is accessed via an <code>EnvironmentKey</code>, which also declares the default value (and type) associated to the key.</p><p>Let's start by defining our <code>EnvironmentKey</code>, these are the protocol requirements:</p><pre><code><span class="keyword">public protocol</span> EnvironmentKey {
  <span class="keyword">associatedtype</span> Value
  <span class="keyword">static var</span> defaultValue: <span class="type">Self</span>.<span class="type">Value</span> { <span class="keyword">get</span> }
}
</code></pre><p>Ideally we would like to declare the following <code>CardStyle</code> key:</p><pre><code><span class="keyword">struct</span> CardStyleKey: <span class="type">EnvironmentKey</span> {
  <span class="keyword">static var</span> defaultValue: <span class="type">CardStyle</span> = <span class="type">DefaultCardStyle</span>()
}
</code></pre><p>However, similarly to <code>CardStyleConfiguration</code>, we cannot declare a stored property with a protocol type, instead, <code>CardStyleKey</code> needs a concrete type (and value) for its <code>defaultValue</code> property.</p><p><code>CardStyleKey</code> not only will be used to propagate <em>any</em> card style in the view hierarchy, but it also needs to accept <em>any</em> card style as well. The solution lies once more with type erasure, which we apply by defining a new <code>AnyCardStyle</code>:</p><pre><code><span class="keyword">struct</span> AnyCardStyle: <span class="type">CardStyle</span> {
  <span class="keyword">private var</span> _makeBody: (<span class="type">Configuration</span>) -&gt; <span class="type">AnyView</span>

  <span class="keyword">init</span>&lt;S: <span class="type">CardStyle</span>&gt;(style: <span class="type">S</span>) {
    _makeBody = { configuration <span class="keyword">in</span>
      <span class="type">AnyView</span>(style.<span class="call">makeBody</span>(configuration: configuration))
    }
  }

  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">_makeBody</span>(configuration)
  }
}
</code></pre><p><code>AnyCardStyle</code> is a special style that piggy-backs on another <code>CardStyle</code> implementation:<br>to create an <code>AnyCardStyle</code> instance we need to pass another <code>CardStyle</code> instance, which then will be used internally by <code>AnyCardStyle</code> to define its own <code>makeBody(configuration:)</code>.</p><p>In other words, <code>AnyCardStyle</code> is a type-erased <code>CardStyle</code>, which is exactly what we wanted to achieve. Thanks to this new definition we have a concrete <code>CardStyle</code> that we can pass in the environment:</p><pre><code><span class="keyword">struct</span> CardStyleKey: <span class="type">EnvironmentKey</span> {
  <span class="keyword">static var</span> defaultValue = <span class="type">AnyCardStyle</span>(style: <span class="type">DefaultCardStyle</span>())
}
</code></pre><p>We can now add <code>CardStyle</code> among the <code>EnvironmentValues</code>:</p><pre><code><span class="keyword">extension</span> <span class="type">EnvironmentValues</span> {
  <span class="keyword">var</span> cardStyle: <span class="type">AnyCardStyle</span> {
    <span class="keyword">get</span> { <span class="keyword">self</span>[<span class="type">CardStyleKey</span>.<span class="keyword">self</span>] }
    <span class="keyword">set</span> { <span class="keyword">self</span>[<span class="type">CardStyleKey</span>.<span class="keyword">self</span>] = newValue }
  }
}
</code></pre><p>With this extension our environment setup is complete!</p><h2>The convenience view modifier</h2><p>Thanks to our new definitions we can set <code>cardStyle</code> anywhere by using the <a href="https://developer.apple.com/documentation/swiftui/view/environment(_:_:)"><code>environment(_:_:)</code></a> view modifier:</p><pre><code><span class="type">MyView</span>()
  .<span class="call">environment</span>(\.<span class="property">cardStyle</span>, <span class="type">AnyCardStyle</span>(style: <span class="type">BorderCardStyle</span>(color: .<span class="dotAccess">blue</span>)))
</code></pre><p>And we can read it in any view via the <a href="https://developer.apple.com/documentation/swiftui/environment"><code>@Environment</code></a> property wrapper:</p><pre><code><span class="type">MyView</span>: <span class="type">View</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">cardStyle</span>) <span class="keyword">var</span> cardStyle

  ...
}
</code></pre><p>While the reading side is great, the writing side requires developers to know about our <code>AnyCardStyle</code> type erasure, which really is an implementation detail.</p><p>This is one of the reasons why SwiftUI defines some <code>xxxStyle(_:)</code> convenience view modifiers (e.g. <code>myView.buttonStyle(BorderlessButtonStyle())</code>), let's do the same for our style:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> cardStyle&lt;S: <span class="type">CardStyle</span>&gt;(<span class="keyword">_</span> style: <span class="type">S</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">environment</span>(\.<span class="property">cardStyle</span>, <span class="type">AnyCardStyle</span>(style: style))
  }
}
</code></pre><p>Thanks to this new view modifier, which can applied to any view, we can set the <code>cardStyle</code> environment via:</p><pre><code><span class="type">MyView</span>()
  .<span class="call">cardStyle</span>(<span class="type">ColorfulCardStyle</span>(color: .<span class="dotAccess">red</span>))
</code></pre><p>Which is more concise, clear, and doesn't require knowing any details of the original implementation.</p><h2>Updating our view</h2><p>The full infrastructure is complete, the last thing left is to make sure the correct style is applied to our view, here's how we can update our <code>Card</code> definition:</p><pre><code><span class="keyword">struct</span> Card&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">cardStyle</span>) <span class="keyword">var</span> style
  <span class="keyword">var</span> content: () -&gt; <span class="type">Content</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    style
      .<span class="call">makeBody</span>(
        configuration: <span class="type">CardStyleConfiguration</span>(
          label: <span class="type">CardStyleConfiguration</span>.<span class="type">Label</span>(content: <span class="call">content</span>())
        )
      )
  }
}
</code></pre><p>Beside fetching the card style from the environment, the view body has completely changed:<br>instead of <code>content()</code>, <code>body</code> now returns the environment style's <code>makeBody(configuration:)</code> output, where we pass the original body <code>content()</code> as a parameter of the style configuration.</p><p>With this last step we're now ready to use all our styles in any <code>Card</code> we'd like in any way we please, here's the code for the sneak peek at the beginning of the article:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {
      <span class="type">LazyVStack</span> {
        <span class="comment">// Default style</span>
        <span class="type">Section</span> {
          sectionContent
        }

        <span class="comment">// RoundedRectangleCardStyle</span>
        <span class="type">Section</span> {
          sectionContent
        }
        .<span class="call">cardStyle</span>(<span class="type">RoundedRectangleCardStyle</span>())

        <span class="comment">// CapsuleCardStyle - green</span>
        <span class="type">Section</span> {
          sectionContent
        }
        .<span class="call">cardStyle</span>(<span class="type">CapsuleCardStyle</span>(color: .<span class="dotAccess">green</span>))

        <span class="comment">// CapsuleCardStyle - blue</span>
        <span class="type">Section</span> {
          sectionContent
        }
        .<span class="call">cardStyle</span>(<span class="type">CapsuleCardStyle</span>(color: .<span class="dotAccess">blue</span>))

        <span class="comment">// ColorfulCardStyle - purple</span>
        <span class="type">Section</span> {
          sectionContent
        }
        .<span class="call">cardStyle</span>(<span class="type">ColorfulCardStyle</span>(color: .<span class="dotAccess">purple</span>))

        <span class="comment">// ColorfulCardStyle - pink</span>
        <span class="type">Section</span> {
          sectionContent
        }
        .<span class="call">cardStyle</span>(<span class="type">ColorfulCardStyle</span>(color: .<span class="dotAccess">pink</span>))

        <span class="comment">// ColorfulCardStyle - red</span>
        <span class="type">Section</span> {
          sectionContent
        }
        .<span class="call">cardStyle</span>(<span class="type">ColorfulCardStyle</span>(color: .<span class="dotAccess">red</span>))
      }
    }
  }

  <span class="keyword">var</span> sectionContent: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span>(.<span class="dotAccess">horizontal</span>) {
      <span class="type">LazyHStack</span> {
        <span class="type">ForEach</span>(<span class="number">1</span>..&lt;<span class="number">5</span>) { <span class="keyword">_ in</span>
          <span class="type">Card</span> {
            <span class="type">Text</span>(verbatim: <span class="string">"Five Stars"</span>)
          }
        }
      }
      .<span class="call">padding</span>()
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/custom-view-styles/final.png"/><h2>Steps recap</h2><p>It took us a while to complete the whole picture, but both the final API and data flow matches SwiftUI's without compromises.</p><p>In short, these are the steps we took:</p><ol><li>Create view</li><li>Create view style protocol</li><li>Create style configuration</li><li>Implement base view styles</li><li>Define view default style</li><li>Setup style environment (key + environment value + style eraser)</li><li>Define <code>.xxxStyle(_:)</code> convenience view modifier</li><li>Update view to take advantage of environment style</li></ol><p>The final gist, with the steps above highlighted along the way, can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/Custom-SwiftUI-Styles">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Regardless of whether we're planning to build our own styles or not, it's hard to not appreciate how much work is hidden behind just an <code>@Environment</code> property wrapper and a <code>.xxxStyle(_:)</code> view modifier:<br>at the end of the day this is all developers using SwiftUI's styles (or ours) will see, and really this is all they should need to know.</p><p>Have you built or are you planning to build a component with styles this way? Have you see any other interesting approaches? <a href="https://twitter.com/zntfdr">I'd love to hear</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/button-styles</guid><title>Exploring SwiftUI's Button styles</title><description></description><link>https://www.fivestars.blog/articles/button-styles</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p><a href="https://developer.apple.com/documentation/swiftui/button"><code>Button</code></a> is no doubt one of the most popular SwiftUI elements, it's also very special, as it is the only component with two different style protocols: <a href="https://developer.apple.com/documentation/swiftui/buttonstyle"><code>ButtonStyle</code></a> and <a href="https://developer.apple.com/documentation/swiftui/primitivebuttonstyle"><code>PrimitiveButtonStyle</code></a>.</p><p>In this article, let's explore everything there's to know about button styling, and more.</p><blockquote><p>As usual the focus is on iOS, the same concepts can be applied to all platforms with little change.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Starting up</h2><p>SwiftUI comes with three built-in styles: <a href="https://developer.apple.com/documentation/swiftui/defaultbuttonstyle"><code>DefaultButtonStyle</code></a>, <a href="https://developer.apple.com/documentation/swiftui/borderlessbuttonstyle"><code>BorderlessButtonStyle</code></a>, and <a href="https://developer.apple.com/documentation/swiftui/plainbuttonstyle"><code>PlainButtonStyle</code></a>.</p><p>When declaring a simple button, <a href="https://developer.apple.com/documentation/swiftui/defaultbuttonstyle"><code>DefaultButtonStyle</code></a> is applied:</p><pre><code><span class="type">Button</span>(<span class="string">"Simple button"</span>) { 
  <span class="comment">// button tapped</span>
  ...
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/simplebutton.gif"/><p><code>DefaultButtonStyle</code> is not a style per se: it's our way to let SwiftUI pick the style for us (based on the context, platform, parent views, and more).</p><p>The actual <em>default</em> style is <a href="https://developer.apple.com/documentation/swiftui/borderlessbuttonstyle"><code>BorderlessButtonStyle</code></a>, which applies a blue tint on top of our button, or the app accent color if we're on iOS 14, along with some visual effects when tapped, focused, etc.</p><p>Unless we are in an exception (I haven't found one yet, <a href="https://twitter.com/zntfdr">please let me know if you do</a>), the following three declarations are equivalent:</p><pre><code><span class="type">Button</span>(<span class="string">"Simple button"</span>) { 
  ...
}

<span class="type">Button</span>(<span class="string">"Simple button"</span>) { 
  ...
}
.<span class="call">buttonStyle</span>(<span class="type">DefaultButtonStyle</span>())

<span class="type">Button</span>(<span class="string">"Simple button"</span>) { 
  ...
}
.<span class="call">buttonStyle</span>(<span class="type">BorderlessButtonStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/simplebutton.gif"/><blockquote><p>In iOS 13 the (blue) tint is applied to images declared within our button <code>label</code>, to avoid so we need to either add a rendering modifier to our images (e.g. <code>Image("image").renderingMode(.original)</code>) or declare <a href="https://developer.apple.com/library/archive/documentation/Xcode/Reference/xcode_ref-Asset_Catalog_Format/ImageSetType.html">the proper rendering in the image asset catalog</a>.From iOS 14 only template images will be tinted by default.</p></blockquote><p>Lastly, SwiftUI offers <a href="https://developer.apple.com/documentation/swiftui/plainbuttonstyle"><code>PlainButtonStyle</code></a>, which displays the button label without a tint, but still applies visual effects in different states:</p><pre><code><span class="type">Button</span>(<span class="string">"Plain style button"</span>) { 
  <span class="comment">// button tapped</span>
  ...
}
.<span class="call">buttonStyle</span>(<span class="type">PlainButtonStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/plainbutton.gif"/><p>These are all the styles SwiftUI provides us in iOS: thankfully we can create new ones with <a href="https://developer.apple.com/documentation/swiftui/buttonstyle"><code>ButtonStyle</code></a> and <a href="https://developer.apple.com/documentation/swiftui/primitivebuttonstyle"><code>PrimitiveButtonStyle</code></a>, let's start with <code>ButtonStyle</code>.</p><h2>ButtonStyle</h2><p><a href="https://developer.apple.com/documentation/swiftui/button">The documentation</a> suggests us to use <code>ButtonStyle</code> when we're declaring the button appearance ourselves, but the button interaction behaves as any other standard button (a.k.a. its action is triggered when tapped).</p><pre><code><span class="keyword">public protocol</span> ButtonStyle {
  <span class="keyword">associatedtype</span> Body: <span class="type">View</span>

  <span class="keyword">func</span> makeBody(configuration: <span class="type">Self</span>.<span class="type">Configuration</span>) -&gt; <span class="type">Self</span>.<span class="type">Body</span>

  <span class="keyword">typealias</span> Configuration = <span class="type">ButtonStyleConfiguration</span>
}
</code></pre><p>The only requirement of <code>ButtonStyle</code> is to return a view from <code>makeBody(configuration:)</code>, the function takes in a <a href="https://developer.apple.com/documentation/swiftui/buttonstyleconfiguration"><code>ButtonStyleConfiguration</code></a> instance:</p><pre><code><span class="keyword">public struct</span> ButtonStyleConfiguration {
  <span class="keyword">public let</span> label: <span class="type">ButtonStyleConfiguration</span>.<span class="type">Label</span>
  <span class="keyword">public let</span> isPressed: <span class="type">Bool</span>
}
</code></pre><p>This configuration comes with two properties:</p><ul><li><code>label</code> is the button <code>label</code>, for example if our button is <code>Button(action: {}, label: { Text("Hello world") })</code>, then <code>Text("Hello world")</code> will be our <code>label</code></li></ul><ul><li><code>isPressed</code> is the current state of the button, which can be used in <code>ButtonStyle</code>'s <code>makeBody(configuration:)</code> for visual effects</li></ul><p>Let's define a few examples:</p><pre><code><span class="keyword">struct</span> RoundedRectangleButtonStyle: <span class="type">ButtonStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
      <span class="type">Spacer</span>()
      configuration.<span class="property">label</span>.<span class="call">foregroundColor</span>(.<span class="dotAccess">black</span>)
      <span class="type">Spacer</span>()
    }
    .<span class="call">padding</span>()
    .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">yellow</span>.<span class="call">cornerRadius</span>(<span class="number">8</span>))
    .<span class="call">scaleEffect</span>(configuration.<span class="property">isPressed</span> ? <span class="number">0.95</span> : <span class="number">1</span>)
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/roundedRectangle.gif"/><pre><code><span class="keyword">struct</span> ShadowButtonStyle: <span class="type">ButtonStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    configuration.<span class="property">label</span>
      .<span class="call">shadow</span>(
        color: configuration.<span class="property">isPressed</span> ? <span class="type">Color</span>.<span class="property">blue</span> : <span class="type">Color</span>.<span class="property">black</span>,
        radius: <span class="number">4</span>, x: <span class="number">0</span>, y: <span class="number">5</span>
      )
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/shadow.gif"/><p>Note how these new buttons do not come with the default effects when tapped, focused, etc: it's now up to us to add such effects in out buttons.</p><p>This is all there's about <code>ButtonStyle</code>. It lets us customize any button appearance, and the main advantages are:</p><ul><li>can apply the same style to multiple buttons without code duplication</li><li>access to the <code>isPressed</code> event</li><li>keeps the standard interaction/behavior</li></ul><h3>Applying and composing multiple styles</h3><p><code>Button</code> doesn't have an initializer accepting a <code>ButtonStyleConfiguration</code> instance (FB8979053), making things complicated when composing multiple styles together.<br><br>As per our current declarations, applying multiple <code>ButtonStyle</code>s has no effect, and only the closest style will be used (the <code>makeBody(configuration:)</code> of other styles won't even be called):</p><pre><code><span class="comment">// Only RoundedRectangleButtonStyle is applied</span>
<span class="type">Button</span>(<span class="string">"Rounded rectangle button style"</span>) {
  <span class="comment">// button tapped</span>
  ...
}
.<span class="call">buttonStyle</span>(<span class="type">RoundedRectangleButtonStyle</span>())
.<span class="call">buttonStyle</span>(<span class="type">ShadowButtonStyle</span>())
.<span class="call">buttonStyle</span>(<span class="type">BorderlessButtonStyle</span>())
.<span class="call">buttonStyle</span>(<span class="type">DefaultButtonStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/roundedRectangle.gif"/><p>A "workaround" for this limitation is to return a new <code>Button</code> in our <code>ButtonStyle</code> <code>makeBody(configuration:)</code> function, for example we could update <code>RoundedRectangleButtonStyle</code> as following:</p><pre><code><span class="keyword">struct</span> RoundedRectangleButtonStyle: <span class="type">ButtonStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(action: {}, label: {
      <span class="type">HStack</span> {
        <span class="type">Spacer</span>()
        configuration.<span class="property">label</span>.<span class="call">foregroundColor</span>(.<span class="dotAccess">black</span>)
        <span class="type">Spacer</span>()
      }
    })
    <span class="comment">// üëáüèª makes all taps go to the the original button</span>
    .<span class="call">allowsHitTesting</span>(<span class="keyword">false</span>)
    .<span class="call">padding</span>()
    .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">yellow</span>.<span class="call">cornerRadius</span>(<span class="number">8</span>))
    .<span class="call">scaleEffect</span>(configuration.<span class="property">isPressed</span> ? <span class="number">0.95</span> : <span class="number">1</span>)
  }
}
</code></pre><p>With this new definition the previous example <em>almost</em> works:</p><pre><code><span class="type">Button</span>(<span class="string">"Rounded rectangle + shadow button style"</span>) {
  <span class="comment">// button tapped</span>
  ...
}
.<span class="call">buttonStyle</span>(<span class="type">RoundedRectangleButtonStyle</span>())
.<span class="call">buttonStyle</span>(<span class="type">ShadowButtonStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/roundedShadow.gif"/><p>The main drawback is that further styles are applied to fictitious and not tappable buttons, thus not receiving any <code>isPressed</code> events.</p><p>There are more advanced solutions for these drawbacks, but at this point we're fighting the framework:<br>instead, it's better to consider each <code>.buttonStyle(..)</code> as a complete override of previous ones.</p><p>An easy fix for such limitations, at least for the moment, is to create and use a new style which combines the desired effects, for example:</p><pre><code><span class="keyword">struct</span> RoundedRectangleWithShadowedLabelButtonStyle: <span class="type">ButtonStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
      <span class="type">Spacer</span>()
      configuration.<span class="property">label</span>.<span class="call">foregroundColor</span>(.<span class="dotAccess">black</span>)
        .<span class="call">shadow</span>(
          color: configuration.<span class="property">isPressed</span> ? <span class="type">Color</span>.<span class="property">red</span> : <span class="type">Color</span>.<span class="property">black</span>,
          radius: <span class="number">4</span>, x: <span class="number">0</span>, y: <span class="number">5</span>
        )
      <span class="type">Spacer</span>()
    }
    .<span class="call">padding</span>()
    .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">yellow</span>.<span class="call">cornerRadius</span>(<span class="number">8</span>))
    .<span class="call">scaleEffect</span>(configuration.<span class="property">isPressed</span> ? <span class="number">0.95</span> : <span class="number">1</span>)
  }
}
</code></pre><p>Which we can use as following:</p><pre><code><span class="type">Button</span>(<span class="string">"Rounded rectangle + shadow button style"</span>) {
  <span class="comment">// button tapped</span>
  ...  
}
.<span class="call">buttonStyle</span>(<span class="type">RoundedRectangleWithShadowedLabelButtonStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/roundedShadow2.gif"/><blockquote><p>A kind reminder that this is a technical article, not a design article.</p></blockquote><h2>PrimitiveButtonStyle</h2><p>While <code>ButtonStyle</code> was all about customizing the appearance and keeping the standard interaction behavior, <code>PrimitiveButtonStyle</code> lets us customize both, meaning that it's up to us to define the button appearance <strong>and</strong> to decide when and how to trigger the button action.</p><p>The <code>PrimitiveButtonStyle</code> definition is nearly identical to <code>ButtonStyle</code>:</p><pre><code><span class="keyword">public protocol</span> PrimitiveButtonStyle {
    <span class="keyword">associatedtype</span> Body : <span class="type">View</span>

    <span class="keyword">func</span> makeBody(configuration: <span class="type">Self</span>.<span class="type">Configuration</span>) -&gt; <span class="type">Self</span>.<span class="type">Body</span>

    <span class="keyword">typealias</span> Configuration = <span class="type">PrimitiveButtonStyleConfiguration</span>
}
</code></pre><p>The only difference stands in the <code>makeBody(configuration:)</code> parameter, which is now a <a href="https://developer.apple.com/documentation/swiftui/primitivebuttonstyleconfiguration"><code>PrimitiveButtonStyleConfiguration</code></a> type:</p><pre><code><span class="keyword">public struct</span> PrimitiveButtonStyleConfiguration {
  <span class="keyword">public let</span> label: <span class="type">PrimitiveButtonStyleConfiguration</span>.<span class="type">Label</span>
  <span class="keyword">public func</span> trigger()
}
</code></pre><p>This configuration once again comes with the button <code>label</code> as a property, however <code>isPressed</code> is now replaced by a <code>trigger()</code> function:<br>invoking <code>trigger()</code> is how we call the button action, and it's now up to us to define the right time to do so.</p><p>For example, if we would like a button to trigger only when double tapped, we could define the following style:</p><pre><code><span class="keyword">struct</span> DoubleTapOnlyStyle: <span class="type">PrimitiveButtonStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    configuration.<span class="property">label</span>
      .<span class="call">onTapGesture</span>(count: <span class="number">2</span>, perform: configuration.<span class="property">trigger</span>)
  }
}
</code></pre><p>Which we can then use like any other style:</p><pre><code><span class="type">Button</span>(<span class="string">"Double tap me"</span>) {
  <span class="comment">// button double tapped</span>
  ...  
}
.<span class="call">buttonStyle</span>(<span class="type">DoubleTapOnlyStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/doubletap.gif"/><h3>Applying and composing multiple (primitive) styles</h3><p>Unlike for <code>ButtonStyleConfiguration</code>, <code>Button</code> does have an initializer accepting a <code>PrimitiveButtonStyleConfiguration</code> instance, allowing us to compose/apply multiple (primitive) styles to the same button.</p><p>For example, consider the following styles:</p><pre><code><span class="comment">// The button action triggers on double taps.</span>
<span class="keyword">struct</span> DoubleTapStyle: <span class="type">PrimitiveButtonStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(configuration) <span class="comment">// &lt;- Button instead of configuration.label</span>
      .<span class="call">onTapGesture</span>(count: <span class="number">2</span>, perform: configuration.<span class="property">trigger</span>)
  }
}

<span class="comment">// The button action triggers on swipes.
// (even when terminated outside the button)</span>
<span class="keyword">struct</span> SwipeButtonStyle: <span class="type">PrimitiveButtonStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(configuration)
      .<span class="call">gesture</span>(
        <span class="type">DragGesture</span>()
          .<span class="call">onEnded</span> { <span class="keyword">_ in</span>
            configuration.<span class="call">trigger</span>()
          }
      )
  }
}
</code></pre><p>As each style returns a button, they can be combined and work together no problem:</p><pre><code><span class="type">Button</span>(
  <span class="string">"Double tap or swipe"</span>, 
  action: { 
    <span class="comment">// handle action here</span>
    ...
  }
)
.<span class="call">buttonStyle</span>(<span class="type">DoubleTapStyle</span>())
.<span class="call">buttonStyle</span>(<span class="type">SwipeButtonStyle</span>())
</code></pre><p>There's a small side-effect of this approach:<br><code>Button(configuration)</code> comes with the default button interaction and style, thankfully we can remove both of these by defining yet another "plain" style.</p><pre><code><span class="keyword">struct</span> PlainNoTapStyle: <span class="type">PrimitiveButtonStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(configuration)
      .<span class="call">buttonStyle</span>(<span class="type">PlainButtonStyle</span>()) <span class="comment">// removes any default appearance</span>
      .<span class="call">allowsHitTesting</span>(<span class="keyword">false</span>)         <span class="comment">// no more triggers on taps</span>
      .<span class="call">contentShape</span>(<span class="type">Rectangle</span>())       <span class="comment">// let other interactions work</span>
  }
}
</code></pre><p>If we now add this style to our button definition, we will truly make it work with just double taps and swipes:</p><pre><code><span class="type">Button</span>(
  <span class="string">"Double tap or swipe"</span>, 
  action: {
    <span class="comment">// handle action here</span>
    ...
  }
)
.<span class="call">buttonStyle</span>(<span class="type">DoubleTapStyle</span>())
.<span class="call">buttonStyle</span>(<span class="type">SwipeButtonStyle</span>())
.<span class="call">buttonStyle</span>(<span class="type">PlainNoTapStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/gest.gif"/><p>However we'd probably want to keep the single tap default interaction enabled to most buttons.</p><h2>Using PrimitiveButtonStyle and ButtonStyle</h2><p>We've covered how each <code>ButtonStyle</code> can be considered a complete override of previous styles, while <code>PrimitiveButtonStyle</code> allows us to compose multiple styles (when defined correctly), what about combining the two?</p><p>We can apply and have active both a <code>ButtonStyle</code> and (multiple) <code>PrimitiveButtonStyle</code> at the same time, for example:</p><pre><code><span class="type">Button</span>(
  <span class="string">"Primitive + button style"</span>, 
  action: { 
    <span class="comment">// handle action here</span>
    ...
  }
)
<span class="comment">// üëáüèª triggers the button even when dragging our finger out of the button</span>
.<span class="call">buttonStyle</span>(<span class="type">SwipeButtonStyle</span>()) 
.<span class="call">buttonStyle</span>(<span class="type">RoundedRectangleButtonStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/button-styles/combo.gif"/><p>In these situations it's important to have the <code>ButtonStyle</code> (<code>RoundedRectangleButtonStyle</code> above) declared last, as otherwise it would <em>erase</em> the <code>PrimitiveButtonStyle</code> as well.</p><p>Note that our <code>ButtonStyle</code> will only receive the <code>isPressed</code> event on the standard tap gesture, it won't know when the button action is triggered thanks to any other <code>PrimitiveButtonStyle</code>: it's our duty to define any visual clue on those styles when/if needed.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Buttons are the SwiftUI component with the simplest interaction: tap to trigger them.</p><p>In this article we've seen how we can turn any button into much more advanced elements with completely different appearances and gestures:<br>we won't need to go beyond a custom <a href="https://developer.apple.com/documentation/swiftui/buttonstyle"><code>ButtonStyle</code></a> most of the time, but it's always good to know that more powerful tools are there when needed.</p><p>Have you ever extended a button interaction? What other uses/needs do you see for such styles? <a href="https://twitter.com/zntfdr">Please let me know!</a></p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-patterns-bindings</guid><title>SwiftUI patterns: @Bindings</title><description></description><link>https://www.fivestars.blog/articles/swiftui-patterns-bindings</link><pubDate>Tue, 19 Jan 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Every time we create a new view, we're defining a new API: regardless of whether those views will be used just by us or by several people around the world, it's very important to keep all definitions consistent.</p><p>More importantly, our views signature should follow SwiftUI's own definitions and patterns:<br>doing so ensures that using our views feels natural, as anyone familiar with SwiftUI will automatically be familiar with our definitions.</p><p>In order to achieve this, we need to analyze and understand SwiftUI's APIs: let's start by exploring SwiftUI's use of <a href="https://developer.apple.com/documentation/swiftui/binding">@Binding</a> in views initializers!</p><blockquote><p>This article contains quite a bit of definitions and examples, if you'd rather have a TL:DR; check out the "Main takeaways" chapter at the bottom.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Value: Binding&lt;V&gt;</h2><p>Used in:</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/slider"><code>Slider</code></a> (six initializers), <code>V</code> must conform to <a href="https://developer.apple.com/documentation/swift/binaryfloatingpoint"><code>BinaryFloatingPoint</code></a><ul><li><a href="https://developer.apple.com/documentation/swiftui/stepper"><code>Stepper</code></a> (six initializers), <code>V</code> must conform to <a href="https://developer.apple.com/documentation/swift/Strideable"><code>Strideable</code></a></li><li><a href="https://developer.apple.com/documentation/swiftui/textfield"><code>TextField</code></a> (two initializers)</li></ul></li></ul><p>Examples:</p><pre><code><span class="comment">// MARK: Slider

// Definition</span>
<span class="keyword">extension</span> <span class="type">Slider</span> {
  <span class="keyword">public init</span>&lt;V&gt;(
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    <span class="keyword">in</span> bounds: <span class="type">ClosedRange</span>&lt;<span class="type">V</span>&gt; = <span class="number">0</span>...<span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }
  ) <span class="keyword">where</span> <span class="type">V</span>: <span class="type">BinaryFloatingPoint</span>, <span class="type">V</span>.<span class="type">Stride</span>: <span class="type">BinaryFloatingPoint</span>
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> value: <span class="type">Float</span> = <span class="number">0</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Slider</span>(value: $value)
  }
}

<span class="comment">// MARK: Stepper

// Definition</span>
<span class="keyword">extension</span> <span class="type">Stepper</span> {
  <span class="keyword">public init</span>&lt;V: <span class="type">Strideable</span>&gt;(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
    value: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt;, 
    step: <span class="type">V</span>.<span class="type">Stride</span> = <span class="number">1</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> value: <span class="type">Float</span> = <span class="number">0</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Stepper</span>(<span class="string">"Stepper title"</span>, value: $value)
  }
}

<span class="comment">// MARK: TextField

// Definition</span>
<span class="keyword">extension</span> <span class="type">TextField</span> {
  <span class="keyword">public init</span>&lt;S: <span class="type">StringProtocol</span>, T&gt;(
    <span class="keyword">_</span> title: <span class="type">S</span>, 
    value: <span class="type">Binding</span>&lt;<span class="type">T</span>&gt;, 
    formatter: <span class="type">Formatter</span>, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    onCommit: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span> = {}
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> nameComponents = <span class="type">PersonNameComponents</span>()

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(
      <span class="string">"Person name:"</span>,
      value: $nameComponents,
      formatter: <span class="type">PersonNameComponentsFormatter</span>()
    )
  }
}
</code></pre><p>Notes:</p><ul><li>the <code>value</code> <code>Binding</code> is always associated with generic types</li><li>the <code>value</code> <code>Binding</code> may (or not) require a protocol conformance to its associated generic type</li><li>the <code>value</code> <code>Binding</code> parameter always comes either first or second, right after the view <code>title</code></li><li>Both <code>Slider</code> and <code>Stepper</code> use <code>V</code> as their generic type, probably as a reference to "<strong>V</strong>alue"</li><li><code>TextField</code> uses <code>T</code> as its generic type, probably as a reference to "arbitrary <strong>T</strong>ype" (this is inconsistent with the views above, FB8972305)</li></ul><h2>Text: Binding&lt;String&gt;</h2><p>Used in:</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/securefield"><code>SecureField</code></a> (two initializers)</li><li><a href="https://developer.apple.com/documentation/swiftui/texteditor"><code>TextEditor</code></a> (one initializer)</li><li><a href="https://developer.apple.com/documentation/swiftui/textfield"><code>TextField</code></a> (one initializer)</li></ul><p>Examples:</p><pre><code><span class="comment">// MARK: SecureField

// Definition</span>
<span class="keyword">extension</span> <span class="type">SecureField</span> {
  <span class="keyword">public init</span>(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
    text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;, 
    onCommit: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span> = {}
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> password = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(<span class="string">"Password:"</span>, text: $password)
  }
}

<span class="comment">// MARK: TextEditor

// Definition</span>
<span class="keyword">extension</span> <span class="type">TextEditor</span> {
  <span class="keyword">public init</span>(text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;)
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> text = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextEditor</span>(text: $text)
  }
}

<span class="comment">// MARK: TextField

// Definition</span>
<span class="keyword">extension</span> <span class="type">TextField</span> {
  <span class="keyword">public init</span>(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
    text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;, 
    onEditingChanged: <span class="keyword">@escaping</span> (<span class="type">Bool</span>) -&gt; <span class="type">Void</span> = { <span class="keyword">_ in</span> }, 
    onCommit: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span> = {}
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> name = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(<span class="string">"Name:"</span>, text: $name)
  }
}
</code></pre><p>Notes:</p><ul><li>the <code>text</code> <code>Binding</code> parameter is always associated with <code>String</code></li><li>the <code>text</code> <code>Binding</code> parameter always comes either first or second, right after the view <code>title</code></li></ul><h2>Selection: Binding</h2><p>The <code>selection: Binding&lt;...&gt;</code> pattern is the most common pattern found in SwiftUI, for this reason the section has been further split in multiple chapters.</p><h3>Non-optional binding, non-optional type</h3><p>Used in:</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/colorpicker"><code>ColorPicker</code></a> (six initializers), <code>Binding</code> with either <code>Color</code> or <code>CGColor</code></li><li><a href="https://developer.apple.com/documentation/swiftui/datepicker"><code>DatePicker</code></a> (twelve initializers), <code>Binding</code> with <code>Date</code></li><li><a href="https://developer.apple.com/documentation/swiftui/picker"><code>Picker</code></a> (three initializers), <code>Binding</code> with a generic <a href="https://developer.apple.com/documentation/swift/hashable"><code>Hashable</code></a> <code>SelectionValue</code></li></ul><p>Examples:</p><pre><code><span class="comment">// MARK: ColorPicker

// Definition</span>
<span class="keyword">extension</span> <span class="type">ColorPicker</span> {
  <span class="keyword">public init</span>(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
    selection: <span class="type">Binding</span>&lt;<span class="type">Color</span>&gt;, 
    supportsOpacity: <span class="type">Bool</span> = <span class="keyword">true</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> color: <span class="type">Color</span> = .<span class="dotAccess">yellow</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ColorPicker</span>(<span class="string">"Choose color:"</span>, selection: $color)
  }
}

<span class="comment">// MARK: DatePicker

// Definition</span>
<span class="keyword">extension</span> <span class="type">DatePicker</span> {
  <span class="keyword">public init</span>(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, 
    selection: <span class="type">Binding</span>&lt;<span class="type">Date</span>&gt;, 
    displayedComponents: <span class="type">DatePicker</span>&lt;<span class="type">Label</span>&gt;.<span class="type">Components</span> = [.<span class="dotAccess">hourAndMinute</span>, .<span class="dotAccess">date</span>]
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> date = <span class="type">Date</span>()

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">DatePicker</span>(<span class="string">"Your birthday:"</span>, selection: $date)
  }
}

<span class="comment">// MARK: Picker

// Definition</span>
<span class="keyword">extension</span> <span class="type">Picker</span> {
  <span class="keyword">public init</span>(
    selection: <span class="type">Binding</span>&lt;<span class="type">SelectionValue</span>: <span class="type">Hashable</span>&gt;, 
    label: <span class="type">Label</span>, 
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">enum</span> PizzaTopping: <span class="type">String</span>, <span class="type">CaseIterable</span>, <span class="type">Identifiable</span> {
    <span class="keyword">case</span> üçç, üçÑ, ü´í, üêì
    <span class="keyword">var</span> id: <span class="type">String</span> { rawValue }
  }

  <span class="keyword">@State var</span> pizzaTopping: <span class="type">PizzaTopping</span> = .üçç

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Picker</span>(
      selection: $pizzaTopping,
      label: <span class="type">Text</span>(<span class="string">"Best pizza topping:"</span>)
    ) {
      <span class="type">ForEach</span>(<span class="type">PizzaTopping</span>.<span class="property">allCases</span>) { flavor <span class="keyword">in</span>
        <span class="type">Text</span>(flavor.<span class="property">rawValue</span>)
      }
    }
  }
}
</code></pre><p>Notes:</p><ul><li>all non-optional <code>selection</code> <code>Binding</code> with non-optional types are used exclusively by (all) SwiftUI pickers</li><li>the <code>selection</code> <code>Binding</code> parameter always comes either first or second, right after the picker <code>title</code></li></ul><h3>Non-optional binding, optional type</h3><p>Used in:</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/navigationlink"><code>NavigationLink</code></a> (three initializers), <code>Binding</code> with a generic <a href="https://developer.apple.com/documentation/swift/hashable"><code>Hashable</code></a> <code>V?</code> type</li></ul><p>Examples:</p><pre><code><span class="comment">// Definition</span>
<span class="keyword">extension</span> <span class="type">NavigationLink</span> {
  <span class="keyword">public init</span>&lt;V: <span class="type">Hashable</span>&gt;(
    destination: <span class="type">Destination</span>, 
    tag: <span class="type">V</span>, 
    selection: <span class="type">Binding</span>&lt;<span class="type">V</span>?&gt;, 
    <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">enum</span> ScreenNavigation: <span class="type">Hashable</span> {
    <span class="keyword">case</span> a, b
  }

  <span class="keyword">@State var</span> showingNavigation: <span class="type">ScreenNavigation</span>? = <span class="keyword">nil

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">NavigationLink</span>(
        destination: <span class="type">Text</span>(<span class="string">"Screen A"</span>),
        tag: .<span class="dotAccess">a</span>,
        selection: $showingNavigation,
        label: { <span class="type">Text</span>(<span class="string">"Go to Screen A"</span>) }
      )
    }
  }
}
</code></pre><p>Notes:</p><p>As this is used only in one view, and as we covered in <a href="https://www.fivestars.blog/articles/hashable-bindings/">Hashable SwiftUI bindings</a> and <a href="https://www.fivestars.blog/articles/programmatic-navigation/">The future of SwiftUI navigation (?)</a>, this can be considered an exception instead of a pattern.</p><h3>Optional binding</h3><p>Used in:</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/list"><code>List</code></a> (twelve initializers), <code>Binding</code> with either <code>Set&lt;SelectionValue&gt;</code> or <code>SelectionValue?</code> type, where <code>SelectionValue</code> is a generic type conforming to <a href="https://developer.apple.com/documentation/swift/hashable"><code>Hashable</code></a></li><li><a href="https://developer.apple.com/documentation/swiftui/tabview"><code>TabView</code></a> (one initializer), <code>Binding</code> with <code>SelectionValue</code> as a generic <a href="https://developer.apple.com/documentation/swift/hashable"><code>Hashable</code></a> type</li></ul><p>Examples:</p><pre><code><span class="comment">// MARK: List

// Definition</span>
<span class="keyword">extension</span> <span class="type">List</span> {
  <span class="keyword">public init</span>(
    selection: <span class="type">Binding</span>&lt;<span class="type">Set</span>&lt;<span class="type">SelectionValue</span>&gt;&gt;?, 
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">enum</span> MyListElement: <span class="type">Hashable</span> {
    <span class="keyword">case</span> a, b, c
  }

  <span class="keyword">@State var</span> selectedElements: <span class="type">Set</span>&lt;<span class="type">MyListElement</span>&gt; = []

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">List</span>(selection: $selectedElements) {
      <span class="type">Text</span>(<span class="string">"Element a"</span>).<span class="call">tag</span>(<span class="type">MyListElement</span>.<span class="property">a</span>)
      <span class="type">Text</span>(<span class="string">"Element b"</span>).<span class="call">tag</span>(<span class="type">MyListElement</span>.<span class="property">b</span>)
      <span class="type">Text</span>(<span class="string">"Element c"</span>).<span class="call">tag</span>(<span class="type">MyListElement</span>.<span class="property">c</span>)
    }
    .<span class="call">environment</span>(\.<span class="property">editMode</span>, .<span class="dotAccess">constant</span>(<span class="type">EditMode</span>.<span class="property">active</span>))
    .<span class="call">onReceive</span>(selectedElements.<span class="property">publisher</span>, perform: { <span class="keyword">_ in</span>
      <span class="call">print</span>(<span class="string">"Selected elements:</span> \(selectedElements)<span class="string">"</span>)
    })
  }
}

<span class="comment">// MARK: TabView

// Definition</span>
<span class="keyword">extension</span> <span class="type">TabView</span> {
  <span class="keyword">public init</span>(
    selection: <span class="type">Binding</span>&lt;<span class="type">SelectionValue</span>&gt;?, 
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">enum</span> MyTab: <span class="type">Hashable</span> {
    <span class="keyword">case</span> home, news, settings
  }

  <span class="keyword">@State var</span> selectedTab: <span class="type">MyTab</span> = .<span class="dotAccess">home</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TabView</span>(selection: $selectedTab) {
      <span class="type">Text</span>(<span class="string">"Home View"</span>).<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Home"</span>, systemImage: <span class="string">"house"</span>) }.<span class="call">tag</span>(<span class="type">MyTab</span>.<span class="property">home</span>)
      <span class="type">Text</span>(<span class="string">"News View"</span>).<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"News"</span>, systemImage: <span class="string">"newspaper"</span>) }.<span class="call">tag</span>(<span class="type">MyTab</span>.<span class="property">news</span>)
      <span class="type">Text</span>(<span class="string">"Settings View"</span>).<span class="call">tabItem</span> { <span class="type">Label</span>(<span class="string">"Settings"</span>, systemImage: <span class="string">"gear"</span>) }.<span class="call">tag</span>(<span class="type">MyTab</span>.<span class="property">settings</span>)
    }
  }
}
</code></pre><p>Notes:</p><ul><li>all these views work with or without passing a binding (refer to <a href="https://www.fivestars.blog/articles/optional-binding/">Adding optional @Bindings to SwiftUI views</a> for more details)</li><li>the <code>SelectionValue</code> naming is back, used to indicate something that can be selected/picked</li><li>similar to all pickers, <code>TabView</code> requires a value to be selected at any given time</li><li>in <code>List</code> case, <code>Binding&lt;Set&lt;SelectionValue&gt;&gt;</code> is used to show the possibility to have multiple selections at the same time, while <code>Binding&lt;SelectionValue?&gt;</code> is used to indicate the possibility to choose up to one element at any given time</li><li><code>List</code> is the only(?) view where the <code>selection: Binding&lt;..&gt;?</code> parameter can be found at the 2nd, 3rd and 4th position (depending on the initializer)</li><li>all these views work with <code>Hashable</code> tags (explicitly or implicitly), used in their <code>content</code> to distinguish which view belongs to which element/tag</li></ul><h2>is...: Binding&lt;Bool&gt;</h2><p>Used in:</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/navigationlink"><code>NavigationLink</code></a> (four initializer), <code>isActive: Binding&lt;Bool&gt;</code></li><li><a href="https://developer.apple.com/documentation/swiftui/DisclosureGroup"><code>DisclosureGroup</code></a> (tree initializers), <code>isExpanded: Binding&lt;Bool&gt;</code></li><li><a href="https://developer.apple.com/documentation/swiftui/toggle"><code>Toggle</code></a> (tree initializers), <code>isOn: Binding&lt;Bool&gt;</code></li></ul><p>Examples:</p><pre><code><span class="comment">// MARK: NavigationLink

// Definition</span>
<span class="keyword">extension</span> <span class="type">NavigationLink</span> {
  <span class="keyword">public init</span>(
    destination: <span class="type">Destination</span>, 
    isActive: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;, 
    <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showingDetails = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">NavigationLink</span>(
        destination: <span class="type">Text</span>(<span class="string">"Detail Screen"</span>),
        isActive: $showingDetails,
        label: {
          <span class="type">Text</span>(<span class="string">"See more details"</span>)
        }
      )
    }
  }
}

<span class="comment">// MARK: DisclosureGroup

// Definition</span>
<span class="keyword">extension</span> <span class="type">DisclosureGroup</span> {
  <span class="keyword">public init</span>(
    <span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>,
    isExpanded: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;,
    <span class="keyword">@ViewBuilder</span> content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>
  )
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showingDetails = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">DisclosureGroup</span>(<span class="string">"See more details"</span>, isExpanded: $showingDetails) {
      <span class="type">Text</span>(<span class="string">"More details here"</span>)
    }
  }
}

<span class="comment">// MARK: Toggle

// Definition</span>
<span class="keyword">extension</span> <span class="type">Toggle</span> {
  <span class="keyword">public init</span>(isOn: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;, <span class="keyword">@ViewBuilder</span> label: () -&gt; <span class="type">Label</span>)
}

<span class="comment">// Use</span>
<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> isOn = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Toggle</span>(isOn: $isOn) {
      <span class="type">Text</span>(<span class="string">"Add extra topping:"</span>)
    }
  }
}
</code></pre><p>Notes:</p><ul><li>the <code>is...</code> <code>Binding</code> parameter is always associated with <code>Bool</code></li><li>the <code>is...</code> <code>Binding</code> parameter always represents straightforward yes/no states</li><li>there's not a single repetition, each view defines its own word (<code>isActive</code>/<code>isExpanded</code>/<code>isOn</code>)</li><li>the <code>is...</code> <code>Binding</code> parameter always comes either first or second, right after the view <code>title</code></li></ul><h2>Main takeaways</h2><p>In this article we've explored all SwiftUI views that accept a <code>@Binding</code> parameter, here are some of the most important takeaways:</p><ul><li>use <code>value: Binding&lt;V&gt;</code> for generic bindings, require the generic type <code>V</code> to conform to protocols if needed</li><li>use <code>text: Binding&lt;String&gt;</code> for bindings associated with text</li><li>use <code>selection: Binding&lt;...&gt;</code> when zero, one, or more elements can be selected/picked<ul><li>when binding to generic types, use <code>SelectionValue</code> as the type name</li><li>nearly all <code>selection: Binding&lt;..&gt;</code> require the associated type to conform to <code>Hashable</code></li><li>when a value must always be selected at any given time (like in all SwiftUI pickers), associate the binding with a non-optional type, <code>selection: Binding&lt;Color&gt;</code> for example</li><li>when zero or up to one element can be picked, associate the binding with an optional type, <code>selection: Binding&lt;Color?&gt;</code> for example</li><li>when zero or more elements can be picked, associate the binding with a set, <code>selection: Binding&lt;Set&lt;SelectionValue&gt;&gt;</code> for example</li><li>when the view can manage the selection state by itself but also expose such selection externally, offer an optional binding, <code>selection: Binding&lt;SelectionValue&gt;?</code> for example (refer to <a href="https://www.fivestars.blog/articles/optional-binding/">Adding optional @Bindings to SwiftUI views</a> for guidance on how to do this)</li></ul></li></ul><ul><li>use <code>is...: Binding&lt;Bool&gt;</code> for simple yes/no states (<code>isActive</code>, <code>isExpanded</code>, <code>isOn</code> etc)</li><li>no view accepts more than one <code>@Binding</code></li><li>if the view has/accepts a <code>title</code>, make sure its the first parameter of the initializer</li><li>most bindings are the first parameter of a view (or second if the view has a <code>title</code>)</li><li>if the view accepts optional closures (e.g. <code>onCommit</code>, <code>onEditingChanged</code>), provide a default implementation and put such parameters at the end of the initializer</li><li>if your case doesn't match any of the above, create your own pattern and be consistent with it</li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>SwiftUI is a young framework, there's no doubt that new patters will emerge as it grows, and old patterns will sunset as it evolves.</p><p>When expanding SwiftUI with our own definitions, we should be careful and try to follow and respect the patterns that the framework gives us as best as we can.</p><p>What other patterns have you spotted while using SwiftUI? Do you like/use any in particular? What patterns would you like me to cover next? <a href="https://twitter.com/zntfdr">Please let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/trucated-text</guid><title>How to check if Text is truncated in SwiftUI?</title><description></description><link>https://www.fivestars.blog/articles/trucated-text</link><pubDate>Tue, 12 Jan 2021 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>When displaying text of various lengths, our design needs to be clear on whether there should be a maximum number of displayable lines, or if the full text should always be shown.</p><p><a href="https://developer.apple.com/documentation/swiftui/text"><code>Text</code></a> doesn't always behave predictably: sometimes the text gets truncated for no apparent reason, despite having plenty of space at our disposal (e.g. within <a href="https://developer.apple.com/documentation/swiftui/form"><code>Form</code></a>s and <a href="https://developer.apple.com/documentation/swiftui/list"><code>List</code></a>s).</p><p>In this article, let's have a look at how we can deal with these scenarios, and more.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>lineLimit</h2><p><code>Text</code> offers the instance method <a href="https://developer.apple.com/documentation/swiftui/text/linelimit(_:)"><code>lineLimit(_:)</code></a>:</p><pre><code><span class="comment">// This text instance won't exceed 3 rows.</span>
<span class="type">Text</span>(myString).<span class="call">lineLimit</span>(<span class="number">3</span>)
</code></pre><p>This method guarantees that our text instance will not exceed the given number of rows.</p><p>We can also pass <code>nil</code> as the <code>lineLimit</code> parameter, asking <code>Text</code> to take as many rows as needed:</p><pre><code><span class="type">Text</span>(myString).<span class="call">lineLimit</span>(<span class="keyword">nil</span>)
</code></pre><p>Unfortunately, passing <code>nil</code> means that <code>Text</code> will follow its default behavior and nothing more:<br>our <code>Text</code> will still get truncated if SwiftUI decides that this is the right thing to do.</p><blockquote><p>If the text is "five lines long" and we set <code>.lineLimit(3)</code>, this doesn't guarantee that <code>Text</code> will take three rows, it just guarantees that <code>Text</code> won't exceed three lines.</p></blockquote><h2>fixedSize(horizontal:vertical:)</h2><p><a href="https://developer.apple.com/documentation/swiftui/button/fixedsize(horizontal:vertical:)">fixedSize</a>, which we <a href="https://www.fivestars.blog/articles/flexible-swiftui/">used</a> <a href="https://www.fivestars.blog/articles/adaptive-swiftui-views/">multiple</a> <a href="https://www.fivestars.blog/articles/content-friendly-layouts/">times</a>, lets any view take as much space as needed, completely disregarding the proposed size.</p><p><code>fixedSize</code> accepts two booleans, <code>horizontal</code> and <code>vertical</code>, letting us decide whether the view should disregard both axes proposed size, just one axis, or neither.</p><blockquote><p><code>fixedSize</code> also comes with a convenience <a href="https://developer.apple.com/documentation/swiftui/button/fixedsize()"><code>fixedSize()</code></a> method, which is equivalent to <code>fixedSize(horizontal: true, vertical: true)</code>.</p></blockquote><p>To my knowledge, using <code>Text</code> with <code>.fixedSize</code> is the only way to <strong>guarantee</strong> <code>Text</code> to be always fully displayed (if you're aware of other ways, <a href="https://twitter.com/zntfdr">please let me know!</a>).</p><pre><code><span class="comment">// This Text will respect the proposed horizontal space 
// and take as much vertical space as needed.</span>
<span class="type">Text</span>(myLongString).<span class="call">fixedSize</span>(horizontal: <span class="keyword">false</span>, vertical: <span class="keyword">true</span>)
</code></pre><img src="https://www.fivestars.blog/assets/posts/truncable-text/fixed.png"/><p>There's a catch: while using <code>.fixedSize</code> guarantees the full text to be displayed entirely, if there actually is not enough space, this will break the UI:</p><pre><code><span class="type">Rectangle</span>()
  .<span class="call">stroke</span>()
  .<span class="call">frame</span>(width: <span class="number">200</span>, height: <span class="number">100</span>)
  .<span class="call">overlay</span>(<span class="type">Text</span>(myLongString).<span class="call">fixedSize</span>(horizontal: <span class="keyword">false</span>, vertical: <span class="keyword">true</span>))
</code></pre><img src="https://www.fivestars.blog/assets/posts/truncable-text/broken.png"/><h2>Putting it all together</h2><p>Now that we have covered the main two methods, let's see how we can answer the "How to check if Text is truncated?" question.</p><p>Similarly to UIKit, what we will need to know is whether the <a href="https://developer.apple.com/documentation/uikit/uiview/1622600-intrinsiccontentsize">intrinsic size</a> of our <code>Text</code> is the same as the actual size of the <code>Text</code> in the layout.</p><p>To get both the intrinsic and the actual size of our <code>Text</code> we will need to add both cases in our view hierarchy, however we only want to display one of these two cases/<code>Text</code>s, a trick to hide views while still computing their layout is to:</p><ul><li>add them as a <a href="https://developer.apple.com/documentation/swiftui/view/background(_:alignment:)"><code>background</code></a> of another view, background views don't participate in the size of their parent</li><li>apply the <a href="https://developer.apple.com/documentation/swiftui/form/hidden()"><code>hidden()</code></a> modifier on them, hidden views are not drawn by SwiftUI</li></ul><p>Here's our final layout:</p><pre><code><span class="type">Text</span>(myString)
  .<span class="call">lineLimit</span>(myLineLimit)
  .<span class="call">background</span>(
    <span class="type">Text</span>(myString)
      .<span class="call">fixedSize</span>(horizontal: <span class="keyword">false</span>, vertical: <span class="keyword">true</span>)
      .<span class="call">hidden</span>()
  )
</code></pre><p>We now need to get the sizes of both <code>Text</code>s, to do so we will use <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/"><code>readSize</code></a>, which we <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/">introduced here</a>:</p><pre><code><span class="type">Text</span>(myString)
  .<span class="call">lineLimit</span>(myLineLimit)
  .<span class="call">readSize</span> { size <span class="keyword">in</span>
    <span class="call">print</span>(<span class="string">"truncated size:</span> \(size)<span class="string">"</span>)
  }
  .<span class="call">background</span>(
    <span class="type">Text</span>(myString)
      .<span class="call">fixedSize</span>(horizontal: <span class="keyword">false</span>, vertical: <span class="keyword">true</span>)
      .<span class="call">hidden</span>()
      .<span class="call">readSize</span> { size <span class="keyword">in</span>
      	<span class="call">print</span>(<span class="string">"intrinsic size:</span> \(size)<span class="string">"</span>)
      }
  )
</code></pre><p>Lastly, we can save those two values in our view and use them at will:</p><pre><code><span class="keyword">struct</span> TruncableText: <span class="type">View</span> {
  <span class="keyword">let</span> text: <span class="type">Text</span>
  <span class="keyword">let</span> lineLimit: <span class="type">Int</span>?
  <span class="keyword">@State private var</span> intrinsicSize: <span class="type">CGSize</span> = .<span class="dotAccess">zero</span>
  <span class="keyword">@State private var</span> truncatedSize: <span class="type">CGSize</span> = .<span class="dotAccess">zero</span>
  <span class="keyword">let</span> isTruncatedUpdate: (<span class="keyword">_</span> isTruncated: <span class="type">Bool</span>) -&gt; <span class="type">Void</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    text
      .<span class="call">lineLimit</span>(lineLimit)
      .<span class="call">readSize</span> { size <span class="keyword">in</span>
        truncatedSize = size
        <span class="call">isTruncatedUpdate</span>(truncatedSize != intrinsicSize)
      }
      .<span class="call">background</span>(
        text
          .<span class="call">fixedSize</span>(horizontal: <span class="keyword">false</span>, vertical: <span class="keyword">true</span>)
          .<span class="call">hidden</span>()
          .<span class="call">readSize</span> { size <span class="keyword">in</span>
            intrinsicSize = size
            <span class="call">isTruncatedUpdate</span>(truncatedSize != intrinsicSize)
          }
      )
  }
}
</code></pre><p><code>TruncableText</code> invokes an <code>isTruncatedUpdate</code> block with the latest truncated state at every size change, this information can then be used to adapt the UI in various situations.</p><p>For example, here's a view that displays a "Show All" button when the <code>Text</code> content is truncated, and displays the full text when tapped:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> isTruncated: <span class="type">Bool</span> = <span class="keyword">false
  @State var</span> forceFullText: <span class="type">Bool</span> = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="keyword">if</span> forceFullText {
        text
          .<span class="call">fixedSize</span>(horizontal: <span class="keyword">false</span>, vertical: <span class="keyword">true</span>)
      } <span class="keyword">else</span> {
        <span class="type">TruncableText</span>(
          text: text,
          lineLimit: <span class="number">3</span>
        ) {
          isTruncated = $0
        }
      }
      <span class="keyword">if</span> isTruncated &amp;&amp; !forceFullText {
        <span class="type">Button</span>(<span class="string">"show all"</span>) {
          forceFullText = <span class="keyword">true</span>
        }
      }
    }
    .<span class="call">padding</span>()
  }

  <span class="keyword">var</span> text: <span class="type">Text</span> {
    <span class="type">Text</span>(
      <span class="string">"Introducing a new kind of fitness experience. One that dynamically integrates your personal metrics from Apple Watch, along with music from your favorite artists, to inspire like no other workout in the world."</span>
    )
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/truncable-text/example.gif"/><p>The complete gist can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/Truncable-Text">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Finding out whether a displayed text is truncated wasn't easy in UIKit and, for the moment, it's not straightforward in SwiftUI neither.</p><p>Fortunately, SwiftUI provides us all the tools needed to overcome this limitation: have you found yourself in a similar situation? how did you solve it? <a href="https://twitter.com/zntfdr">I'd love to know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/apple-year-2020-review</guid><title>Apple 2020 Year In Review</title><description></description><link>https://www.fivestars.blog/articles/apple-year-2020-review</link><pubDate>Wed, 23 Dec 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>2020 didn't go as planned, it came and went, but boy was it a tough year for everyone.</p><p>In this article I've collected the most interesting stories about Apple in chronological order:<br>if you believe I missed something, please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>See previous years:</p><ul><li><a href="https://www.fivestars.blog/articles/apple-year-2019-review/">Apple 2019 Year In Review</a></li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>January</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/tim-cook-laughing.jpg" alt="large-contents"/><p>With modem components assured by Qualcomm for the next several years, <a href="https://www.cnbc.com/2020/01/23/broadcom-will-sell-apple-wireless-parts-for-three-years-as-5g-launches.html">Apple signed a $15 billion deal with Broadcom</a> to receive wireless components for the next three and half years.</p><p>Apple reported <a href="https://www.macstories.net/news/apple-q1-2020-results-91-8-billion-revenue/">its highest quarterly revenue ever</a>.</p><h3>References</h3><ul><li><a href="https://www.cnbc.com/2020/01/23/broadcom-will-sell-apple-wireless-parts-for-three-years-as-5g-launches.html">Broadcom strikes $15 billion deal with Apple to sell it iPhone parts</a></li><li><a href="https://www.macstories.net/news/apple-q1-2020-results-91-8-billion-revenue/">Apple Q1 2020 Results - $91.8 Billion Revenue</a></li></ul><h2>February</h2><p>Apple quietly announced <a href="https://www.macrumors.com/2020/02/05/ios-macos-universal-purchases/">universal apps for macOS/iOS/watchOS/tvOS</a>:<br>from now on users can purchase an app once and have it available in all platforms.</p><p>Because of the COVID-19 pandemic, Apple warned that things <a href="https://www.apple.com/newsroom/2020/02/investor-update-on-quarterly-guidance/">have and will slow down</a>. Meanwhile, Apple moved part of its <a href="https://9to5mac.com/2020/02/19/china-to-taiwan/">production out of China</a>.</p><p>#BatteryGate keeps coming back, first with a <a href="https://www.theverge.com/2020/3/2/21161271/apple-settlement-500-million-throttling-batterygate-class-action-lawsuit">$500M class (US) action settlement</a>, and then with a <a href="https://techcrunch.com/2020/02/07/apple-fined-27-million-for-throttling-old-iphones-without-telling-users/">$27M fine</a> from the French government.</p><p>Apple has also lost its appeal against the <a href="https://www.patentlyapple.com/patently-apple/2020/03/apple-loses-appeal-to-invalidate-a-caltech-patent-and-is-ordered-to-pay-the-us11-billion-verdict.html">Caltech Wi-fi patent lawsuit</a>, where Apple has been ordered to pay $838M.</p><p>Lastly, some good news: Apple's market share in India <a href="https://www.livemint.com/technology/tech-news/apple-logs-75-6-market-share-in-india-premium-segment-in-oct-dec-quarter-idc-11581863358604.html">grew 40% year over year</a>. Despite the fact that this meant capturing merely a 2% of the total market, Apple share in India's premium segment ($500 or ‚Çπ36,000 and above) was <a href="https://www.livemint.com/technology/tech-news/apple-logs-75-6-market-share-in-india-premium-segment-in-oct-dec-quarter-idc-11581863358604.html">75.6%</a> in Q4 of 2019.</p><h3>References</h3><ul><li><a href="https://www.macrumors.com/2020/02/05/ios-macos-universal-purchases/">Apple Adds Universal Purchases for iOS, tvOS and macOS Apps in Xcode 11.4</a></li><li><a href="https://www.apple.com/newsroom/2020/02/investor-update-on-quarterly-guidance/">Investor update on quarterly guidance</a></li><li><a href="https://techcrunch.com/2020/02/07/apple-fined-27-million-for-throttling-old-iphones-without-telling-users/">Apple fined $27 million in France for throttling old iPhones without telling users</a></li><li><a href="https://www.theverge.com/2020/3/2/21161271/apple-settlement-500-million-throttling-batterygate-class-action-lawsuit">Apple agrees to $500 million settlement for throttling older iPhones</a></li><li><a href="https://www.patentlyapple.com/patently-apple/2020/03/apple-loses-appeal-to-invalidate-a-caltech-patent-and-is-ordered-to-pay-the-us11-billion-verdict.html">Apple loses Appeal to invalidate a Caltech Patent and is ordered to pay the $US1.1 Billion verdict</a></li><li><a href="https://www.livemint.com/technology/tech-news/apple-logs-75-6-market-share-in-india-premium-segment-in-oct-dec-quarter-idc-11581863358604.html">Apple logs 75.6% market share in India premium segment in Oct-Dec quarter: IDC</a></li></ul><h2>March</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/france.jpg" alt="large-contents"/><p>The Coronavirus crisis continues with Apple letting its staff work <a href="https://www.bloomberg.com/news/articles/2020-03-06/apple-encourages-silicon-valley-staff-to-work-from-home-on-virus">from</a> <a href="https://www.bloomberg.com/news/articles/2020-03-08/apple-s-cook-offers-work-from-home-this-week-to-most-staff">home</a>.</p><p>France keeps hitting Apple with sanctions, this time with a <a href="https://9to5mac.com/2020/03/16/france-fine-apple-1-1-billion-euros-for-anticompetitive-monopoly-practices/">1.1B ‚Ç¨ ($1.35B) fine</a> for anticompetitive monopoly practices.</p><p>In a quiet iOS 13.4 release, Apple might have launched <a href="https://www.theverge.com/2020/3/18/21185188/ipad-trackpad-how-to-support-mouse-cursor">the first pointer revolution</a> in decades.</p><h3>References</h3><ul><li><a href="https://www.bloomberg.com/news/articles/2020-03-06/apple-encourages-silicon-valley-staff-to-work-from-home-on-virus">Apple Encourages Silicon Valley Staff to Work From Home on Virus</a></li><li><a href="https://www.bloomberg.com/news/articles/2020-03-08/apple-s-cook-offers-work-from-home-this-week-to-most-staff">Apple‚Äôs Cook Offers Work From Home This Week to Many Global Employees</a></li><li><a href="https://9to5mac.com/2020/03/16/france-fine-apple-1-1-billion-euros-for-anticompetitive-monopoly-practices/">France fines Apple 1.1 billion euros for anticompetitive monopoly practices, Apple to appeal</a></li><li><a href="https://www.theverge.com/2020/3/18/21185188/ipad-trackpad-how-to-support-mouse-cursor">Here‚Äôs how the iPad‚Äôs new trackpad actually works</a></li></ul><h2>April</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/covid-tracing.jpg" alt="large-contents"/><p>In a rare move, Apple and Google partnered to work on a <a href="https://www.apple.com/newsroom/2020/04/apple-and-google-partner-on-covid-19-contact-tracing-technology/">COVID-19 Exposure Notification</a> <a href="https://www.apple.com/covid19/contacttracing/">technology</a> to work seamlessly on all platforms.</p><p>On brighter news, Apple <a href="https://blog.darksky.net/dark-sky-has-a-new-home/">has acquired Dark Sky</a>, removing yet another third-party dependency (Apple has been using The Weather Channel for its weather data <a href="https://9to5mac.com/2014/06/20/why-apple-switched-from-yahoo-to-weather-channel-for-weather-data-in-ios-8/">since iOS 8</a>)</p><p>A <a href="https://www.apple.com/newsroom/2020/04/iphone-se-a-powerful-new-smartphone-in-a-popular-design/">new iPhone SE has been released</a> four years after the original one, with a price tag of $399 and top of the line hardware: this is Apple's clear attempt to butcher the mid-range market.</p><p>Despite Covid concerns, Apple <a href="https://www.patentlyapple.com/patently-apple/2020/05/highlights-from-apples-financial-call-for-q2-2020.html">reported</a> a stronger financial Q2 earning than the same quarter last year.</p><h3>References</h3><ul><li><a href="https://www.apple.com/newsroom/2020/04/apple-and-google-partner-on-covid-19-contact-tracing-technology/">Apple and Google partner on COVID-19 contact tracing technology</a></li><li><a href="https://blog.darksky.net/dark-sky-has-a-new-home/">Dark Sky Has a New Home</a></li><li><a href="https://www.apple.com/newsroom/2020/04/iphone-se-a-powerful-new-smartphone-in-a-popular-design/">iPhone SE: A powerful new smartphone in a popular design</a></li><li><a href="https://www.patentlyapple.com/patently-apple/2020/05/highlights-from-apples-financial-call-for-q2-2020.html">Highlights from Apple's Financial Conference Call for Q2 2020</a></li></ul><h2>May</h2><p>Apple continues its diversifications with:</p><ul><li>a new <a href="https://thediplomat.com/2020/05/taiwan-chipmaker-announces-us-factory-as-apple-pledges-to-expand-taiwan-investment/">$334 million investment in a next-gen LED based displays factory</a> in Taiwan.</li><li><a href="https://www.macrumors.com/2020/05/13/apple-urges-chinese-airpods-assembler-to-expand/">pressing its suppliers to depend less on Foxconn</a>.</li></ul><p>China <a href="https://www.macrumors.com/2020/05/18/china-could-add-apple-to-unreliable-entity-list/">sends new <em>power</em> threats</a> in which Apple would be added to its '<em>Unreliable Entity List</em>', meaning that Apple would face legal and administrative measures, and the Chinese public would also be warned against dealing with the company "<em>to reduce risks</em>".</p><p>In a worrying note, leading exploit acquisition platform Zerodium <a href="https://www.macrumors.com/2020/05/14/zerodium-pauses-acquiring-ios-exploits/">announced that it will stop purchasing iOS exploits for the next two to three months</a> due to the high number of submissions.</p><p>After last month's announcement, Apple <a href="https://www.macstories.net/news/apple-releases-ios-135-with-covid-19-exposure-notifications-face-id-bypass-for-masks-facetime-setting-and-apple-music-stories-sharing/">releases iOS 13.5 with COVID-19 Exposure Notifications</a>.</p><h3>References</h3><ul><li><a href="https://thediplomat.com/2020/05/taiwan-chipmaker-announces-us-factory-as-apple-pledges-to-expand-taiwan-investment/">Taiwan Chipmaker Announces US Factory as Apple Pledges to Expand Taiwan Investment</a></li><li><a href="https://www.macrumors.com/2020/05/13/apple-urges-chinese-airpods-assembler-to-expand/">Apple Urges Chinese AirPods Supplier to Expand and Challenge Foxconn for iPhone Assembly</a></li><li><a href="https://www.macrumors.com/2020/05/14/zerodium-pauses-acquiring-ios-exploits/">Zerodium Temporarily Stops Purchasing iOS Exploits Due to High Number of Submissions</a></li><li><a href="https://www.macrumors.com/2020/05/18/china-could-add-apple-to-unreliable-entity-list/">China Threatens to Add Apple, Other US Companies to 'Unreliable Entity List'</a></li><li><a href="https://www.macstories.net/news/apple-releases-ios-135-with-covid-19-exposure-notifications-face-id-bypass-for-masks-facetime-setting-and-apple-music-stories-sharing/">Apple Releases iOS 13.5 with COVID-19 Exposure Notifications, Face ID Bypass for Masks, FaceTime Setting, and Apple Music Stories Sharing</a></li></ul><h2>June</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/wwdc20.jpg" alt="large-contents"/><p>After 33 years of Developer conferences hosted in California, Apple has held its annual Worldwide Developers Conference in an <a href="https://www.apple.com/newsroom/2020/03/apples-wwdc-2020-kicks-off-in-june-with-an-all-new-online-format/"><em>all-new online format</em></a>.</p><p>At the same conference Apple <a href="https://www.apple.com/newsroom/2020/06/apple-announces-mac-transition-to-apple-silicon/">announced a two-year transition to its own ARM chip sets</a> for the complete product lineup, ending a fifteen-years partnership with Intel and deprecating their x86 architecture.</p><h3>References</h3><ul><li><a href="https://www.apple.com/newsroom/2020/03/apples-wwdc-2020-kicks-off-in-june-with-an-all-new-online-format/">Apple‚Äôs Worldwide Developers Conference 2020 kicks off in June with an all-new online format</a></li><li><a href="https://www.apple.com/newsroom/2020/06/apple-announces-mac-transition-to-apple-silicon/">Apple announces Mac transition to Apple silicon</a></li></ul><h2>July</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/cook-hearing.jpg" alt="large-contents"/><p>Bloomberg has published its <a href="https://www.bloomberg.com/graphics/2020-highest-paid-ceos/">2019 Pay Index</a> showing Apple's CEO Tim Cook taking the 2nd place as highest-paid US CEO in 2019.</p><p>In another green push, Apple commits to have its entire supply-chain <a href="https://9to5mac.com/2020/07/21/100-carbon-neutral/">100% carbon neutral by 2030</a>.</p><p>Apple officially launched its <a href="https://developer.apple.com/programs/security-research-device/">Security Research Device Program</a>.</p><p>Apple also reported an <a href="https://www.macstories.net/news/apple-q3-2020-results-597-billion-revenue/">all time high third quarter</a>, smashing analysts expectations.</p><p>Meanwhile <a href="https://www.theverge.com/2020/7/29/21335706/antitrust-hearing-highlights-facebook-google-amazon-apple-congress-testimony">Apple is under US Congress scrutiny</a>, along with Amazon, Google, and Facebook, in the biggest tech antitrust case to date. All four companies CEOs have testified.</p><h3>References</h3><ul><li><a href="https://www.bloomberg.com/graphics/2020-highest-paid-ceos/">Wall Street Gets the Flak, But Tech CEOs Get Paid All the Money</a></li><li><a href="https://9to5mac.com/2020/07/21/100-carbon-neutral/">Apple commits to being 100% carbon neutral for entire supply-chain by 2030</a></li><li><a href="https://developer.apple.com/programs/security-research-device/">Apple Security Research Device Program</a></li><li><a href="https://www.macstories.net/news/apple-q3-2020-results-597-billion-revenue/">Apple Q3 2020 Results - $59.7 Billion Revenue</a></li><li><a href="https://www.theverge.com/2020/7/29/21335706/antitrust-hearing-highlights-facebook-google-amazon-apple-congress-testimony">Everything you need to know from the tech antitrust hearing</a></li></ul><h2>August</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/phil.jpg" alt="large-contents"/><p>In a one-day purge, nearly <a href="https://www.reuters.com/article/us-apple-china-videogames/apple-removes-thousands-of-game-apps-from-china-store-research-firm-idUSKBN24X3KE">30,000 apps have vanished from the Chinese App Store</a>, as China now requires a government-issued license in order to distribute apps with in-app purchases.</p><p>Following Jony Ive, SVP of Worldwide Marketing <a href="https://www.apple.com/newsroom/2020/08/phil-schiller-advances-to-apple-fellow/">Phil Schiller steps down</a> after over thirty years of career at Apple.</p><p>Apple has lost a case against a patent troll over 4G LTE patents, and had been ordered to <a href="https://www.law360.com/articles/1300409">pay $506M</a>.</p><p>Following last month US antitrust hearing, more Apple platforms developers have voiced their discontent on the current guidelines and Apple practices on the App Store: among them, <a href="https://www.macrumors.com/guide/epic-games-vs-apple/">Epic is the loudest</a>.</p><p>Meanwhile, Apple becomes the <a href="https://9to5mac.com/2020/08/19/apple-2-trillion-market-cap-2/">first public company to reach a $2 trillion market cap</a>.</p><h3>References</h3><ul><li><a href="https://www.reuters.com/article/us-apple-china-videogames/apple-removes-thousands-of-game-apps-from-china-store-research-firm-idUSKBN24X3KE">Apple removes thousands of game apps from China store: research firm</a></li><li><a href="https://www.apple.com/newsroom/2020/08/phil-schiller-advances-to-apple-fellow/">Phil Schiller advances to Apple Fellow</a></li><li><a href="https://www.law360.com/articles/1300409">Texas Jury Says Apple Owes $506M Over 4G LTE Patents</a></li><li><a href="https://www.macrumors.com/guide/epic-games-vs-apple/">Epic Games vs. Apple: Timeline of Events Surrounding Fortnite's Removal From App Store</a></li><li><a href="https://9to5mac.com/2020/08/19/apple-2-trillion-market-cap-2/">Apple becomes first public company to reach a $2 trillion market cap</a></li></ul><h2>September</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/coalition.png" alt="large-contents"/><p>The battle between Apple and Apple 3rd party developers continues:</p><ul><li>Apple has published a series of <a href="https://www.apple.com/app-store/">webpages</a> <a href="https://www.apple.com/app-store/developing-for-the-app-store/">showcasing</a> the benefits of Apple's App Store</li><li>Big developer names such as a Epic Games, Basecamp, Spotify, and Tile formed a <a href="https://appfairness.org/">Coalition for App Fairness</a> listing a <a href="https://appfairness.org/our-vision/">10-point principles/demands</a> to Apple's app ecosystem.</li></ul><p>Apple continues to promptly oblige to China's dictatorship demands, this time by <a href="https://9to5mac.com/2020/10/02/apple-removed-rss-apps/">removing more feed RSS reader apps</a> over <em>‚Äúillegal‚Äù</em> content.</p><h3>References</h3><ul><li><a href="https://www.apple.com/app-store/">App Store</a></li><li><a href="https://www.apple.com/app-store/developing-for-the-app-store/">Developing for the App Store</a></li><li><a href="https://appfairness.org/">App Fairness</a></li><li><a href="https://appfairness.org/our-vision/">our vision for the future</a></li><li><a href="https://9to5mac.com/2020/10/02/apple-removed-rss-apps/">Apple removes more RSS apps from Chinese App Store, likely at government behest</a></li></ul><h2>October</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/telegram.JPG" alt="large-contents"/><blockquote><p>Image credits: <a href="https://widerimage.reuters.com/photographer/dado-ruvic">REUTERS/Dado Ruvic</a>.</p></blockquote><p>Apple <a href="https://daringfireball.net/2020/10/telegram_apple_belarus">demanded Telegram</a> to take down some messages in their app, Telegram obliged and replaced them with a notice citing Apple's rule for such content. Once this was done, Apple reached out Telegram again saying they're not allowed to show users such notices because <a href="https://daringfireball.net/2020/10/telegram_apple_belarus">they are <em>‚Äúirrelevant‚Äù</em></a>.</p><p>Despite postponed new iPhones, Apple reported <a href="https://www.macstories.net/news/apple-q4-2020-results-647-billion-revenue/">its strongest Q4 financial results ever</a>.</p><p>Apple <a href="https://www.bloomberg.com/news/articles/2020-10-30/apple-told-to-pay-virnetx-503-million-in-security-patent-trial?srnd=markets-vp&sref=9hGJlFio">lost another case against a patent troll</a>, this time over VPN on Demand used in Facetime, bidding goodbye <a href="https://www.bloomberg.com/news/articles/2020-10-30/apple-told-to-pay-virnetx-503-million-in-security-patent-trial?srnd=markets-vp&sref=9hGJlFio">to $503M</a>.</p><h3>References</h3><ul><li><a href="https://daringfireball.net/2020/10/telegram_apple_belarus">Telegram, Apple, Belarus, and Conflating ‚ÄòIrrelevance‚Äô With ‚ÄòInconvenience‚Äô</a></li><li><a href="https://www.macstories.net/news/apple-q4-2020-results-647-billion-revenue/">Apple Q4 2020 Results - $64.7 Billion Revenue</a></li><li><a href="https://www.bloomberg.com/news/articles/2020-10-30/apple-told-to-pay-virnetx-503-million-in-security-patent-trial?srnd=markets-vp&sref=9hGJlFio">Apple Must Pay VirnetX $503 Million in Security-Patent Trial</a></li></ul><h2>November</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/m1.jpg" alt="large-contents"/><p>Apple halts business with Pegatron over <a href="https://www.bloomberg.com/news/articles/2020-11-09/apple-suspends-new-business-with-pegatron-over-labor-violations?sref=9hGJlFio">child labor violations</a>.</p><p>Apple <a href="https://www.apple.com/newsroom/2020/11/apple-unleashes-m1/ ">releases its first Apple Silicon-powered products</a>, delivering the <a href="https://www.apple.com/mac/m1/ ">biggest performance leap</a> after <a href="https://www.apple.com/newsroom/2020/11/introducing-the-next-generation-of-mac/ ">half a decade of stagnant Intel "upgrades"</a>.</p><p>With pressure by both developers and multiple antitrust cases around the world, Apple <a href="https://www.apple.com/newsroom/2020/11/apple-announces-app-store-small-business-program/">announces App Store Small Business Program</a>, halving App Store Commissions to 15% for developers earning less than $1M per year.</p><h3>References</h3><ul><li><a href="https://www.bloomberg.com/news/articles/2020-11-09/apple-suspends-new-business-with-pegatron-over-labor-violations?sref=9hGJlFio">Apple Freezes New Business for Pegatron on China Labor Abuse</a></li><li><a href="https://www.apple.com/newsroom/2020/11/apple-unleashes-m1/ ">Apple unleashes M1</a></li><li><a href="https://www.apple.com/mac/m1/ ">M1</a></li><li><a href="https://www.apple.com/newsroom/2020/11/introducing-the-next-generation-of-mac/ ">Introducing the next generation of Mac</a></li><li><a href="https://www.apple.com/newsroom/2020/11/apple-announces-app-store-small-business-program/">Apple announces App Store Small Business Program</a></li></ul><h2>December</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/red.jpg" alt="large-contents"/><p>Apple moves 100% of eligible proceeds from (PRODUCT)RED purchases to the <a href="https://www.apple.com/newsroom/2020/12/apple-expands-partnership-with-red-to-combat-hiv-aids-and-covid-19/">Global Fund‚Äôs COVID‚Äë19 Response until mid 2021</a>.</p><p><a href="https://9to5mac.com/2020/12/08/tripadvisor-app-pulled/">Over 100 more apps have disappeared from the Chinese App Store over illegal content</a>, with a promise that many more will follow suit on January 1st unless a government approval is presented.</p><p>Cloudfare <a href="https://blog.cloudflare.com/oblivious-dns/">announces a new Internet protocol</a>, <a href="https://github.com/cloudflare/odoh-rs/">ODoH</a>, co-developed with Apple and <a href="https://www.fastly.com">Fastly</a>, that will further Internet's user privacy.</p><p>The creator of the original iPhone's App Store, Jay Freeman, joins 3rd party developer's discontent with a <a href="https://www.washingtonpost.com/technology/2020/12/10/cydia-apple-lawsuit/">new lawsuit against Apple's anti-competitive manners</a>.</p><h3>References</h3><ul><li><a href="https://www.apple.com/newsroom/2020/12/apple-expands-partnership-with-red-to-combat-hiv-aids-and-covid-19/">Apple expands partnership with (RED) to combat HIV/AIDS and COVID-19</a></li><li><a href="https://9to5mac.com/2020/12/08/tripadvisor-app-pulled/">Tripadvisor app pulled from App Store in China, with 104 other apps</a></li><li><a href="https://blog.cloudflare.com/oblivious-dns/">Improving DNS Privacy with Oblivious DoH in 1.1.1.1</a></li><li><a href="https://www.washingtonpost.com/technology/2020/12/10/cydia-apple-lawsuit/">The ‚Äòapp store‚Äô before there was an App Store wants to liberate your iPhone‚Ä¶again</a></li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><img src="https://www.fivestars.blog/assets/posts/apple-2020/2020.gif" alt="large-contents"/><p>Despite the Coronavirus crisis, Apple's year has been nothing short than stellar:</p><ul><li>most (all?) 2020 financial quarters have been highest in Apple's history.</li><li>Apple became the first public company to reach a $2 trillion market cap.</li><li>Apple's long term roadmap didn't flinch:<ul><li>its independence effort from 3rd party wireless components manufacturers is going ahead at full steam.</li><li>Apple's Silicon transition is now official.</li><li>the trend to move more of Apple's production out of China continues.</li></ul></li></ul><p>Of course not everything is perfect:</p><ul><li>Apple lost billions of dollars to patent trolls, class action settlements, and other lawsuits.</li><li>Apple is facing antitrust scrutiny and monopoly investigations in multiple countries around the world.</li><li>Apple and its 3rd party developers/service providers have hit an all-time low relationship.</li><li>China's App Store censorship kept growing.</li></ul><p>And this wraps up 2020:<br>as always, this is just a small glimpse of what happened during the year, within and around Apple.<br>If you believe I've missed something of importance, <a href="https://twitter.com/zntfdr">please let me know</a>.</p><p>What new trends will we witness in 2021? Any major changes? <a href="https://twitter.com/zntfdr">I'd love to hear your thoughts</a>.</p><p>Thank you for reading and wish you a great new year!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/stack-spacer-alternatives</guid><title>An alternative to SwiftUI's stacks + Spacer combo</title><description></description><link>https://www.fivestars.blog/articles/stack-spacer-alternatives</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Apple has recently published <a href="https://twitter.com/zntfdr/status/1336700623589318662">some great new articles</a> around building layouts with SwiftUI's stacks in various situations.</p><p>There's no doubt that these articles showcase best practices/approaches on how to build views, and everybody should definitely make sure to read <a href="https://developer.apple.com/documentation/swiftui/building-layouts-with-stack-views">all</a> <a href="https://developer.apple.com/documentation/swiftui/creating-performant-scrollable-stacks">of</a> <a href="https://developer.apple.com/documentation/swiftui/aligning-views-across-stacks">them</a>.</p><p>In this article I would like to propose/highlight another pattern that I use daily, which is an alternative to Apple's <a href="https://developer.apple.com/documentation/swiftui/building-layouts-with-stack-views"><code>Building Layouts with Stack Views</code></a> article.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Overlay &amp; background</h2><p>When building a view with some components underneath/on top, instead of a <code>ZStack</code> we should use the <a href="https://developer.apple.com/documentation/swiftui/view/overlay(_:alignment:)"><code>overlay(_:alignment:)</code></a> or <a href="https://developer.apple.com/documentation/swiftui/view/background(_:alignment:)"><code>background(_:alignment:)</code></a> view modifiers on top of the main view, here it is in Apple's words:</p><blockquote><p>If your layout has one dominant view that defines the size of the layout, use the <a href="https://developer.apple.com/documentation/swiftui/view/overlay(_:alignment:)"><code>overlay(_:alignment:)</code></a> or <a href="https://developer.apple.com/documentation/swiftui/view/background(_:alignment:)"><code>background(_:alignment:)</code></a> view modifier on that view.</p></blockquote><p>A view defined within these modifiers will get a proposed size as big as the dominant view, and by default will be put in the middle of it, for example:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Color</span>.<span class="property">yellow</span>
      .<span class="call">frame</span>(width: <span class="number">200</span>, height: <span class="number">200</span>)
      .<span class="call">overlay</span>(<span class="type">Text</span>(<span class="string">"Five Stars"</span>))
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/stack-spacer-alternative/image1.png"/><p>Let's say that we would like <code>Text</code> to be put on the leading side of the dominant view instead, an easy way to do so is to embed the <code>Text</code> in a <code>HStack</code> and then use a <code>Spacer</code> to push the text to the preferred side:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Color</span>.<span class="property">yellow</span>
      .<span class="call">frame</span>(width: <span class="number">200</span>, height: <span class="number">200</span>)
      .<span class="call">overlay</span>(
        <span class="type">HStack</span> {
          <span class="type">Text</span>(<span class="string">"Five Stars"</span>)
          <span class="type">Spacer</span>()
        }
      )
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/stack-spacer-alternative/image2.png"/><p>While this works great, there's a more concise way to declare the same layout thanks to the <code>alignment</code> parameter available on both <a href="https://developer.apple.com/documentation/swiftui/view/overlay(_:alignment:)"><code>overlay(_:alignment:)</code></a> and <a href="https://developer.apple.com/documentation/swiftui/view/background(_:alignment:)"><code>background(_:alignment:)</code></a>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Color</span>.<span class="property">yellow</span>
      .<span class="call">frame</span>(width: <span class="number">200</span>, height: <span class="number">200</span>)
      .<span class="call">overlay</span>(<span class="type">Text</span>(<span class="string">"Five Stars"</span>), alignment: .<span class="dotAccess">leading</span>)
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/stack-spacer-alternative/image2.png"/><p>With this definition we've managed to remove five lines of code (our entire <code>body</code> is now three lines long!) while obtaining the exact same layout, no compromises.</p><p>This approach is recommended and showcased in <a href="https://developer.apple.com/documentation/swiftui/building-layouts-with-stack-views">Apple's article as well</a>.</p><h2>Frame</h2><p>Imagine now to not be on a container like <a href="https://developer.apple.com/documentation/swiftui/view/overlay(_:alignment:)"><code>overlay(_:alignment:)</code></a> or <a href="https://developer.apple.com/documentation/swiftui/view/background(_:alignment:)"><code>background(_:alignment:)</code></a>, but where we would still like to put our content on the leading side of the available space, in this case Apple's recommended way is to use <code>HStack</code> + <code>Spacer</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
      <span class="type">Text</span>(<span class="string">"Five Stars"</span>)
      <span class="type">Spacer</span>()
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/stack-spacer-alternative/image3.png"/><p>This works great, it's Apple's blessed way, and the layout is very clear.</p><p>However, when putting just a single element inside the stack, I prefer to use the <a href="https://developer.apple.com/documentation/swiftui/view/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)"><code>.frame(...)</code></a> view modifier instead:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(<span class="string">"Five Stars"</span>)
      .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>, alignment: .<span class="dotAccess">leading</span>)
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/stack-spacer-alternative/image3.png"/><p>By setting either <code>maxWidth</code> or <code>maxHeight</code> to <code>.infinity</code>, we're telling SwiftUI that this view will take as much space as available on the associated axis, and then put the frame content (the <code>Text</code> in our example) according to the declared <code>alignment</code> argument.</p><p>In short we're using <code>frame</code> to create a new container and use its <code>alignment</code> to move the content, all while halving our view definition (our <code>body</code> went from 4 to 2 lines of code).</p><p>I see this as an equivalent approach to Apple's suggested way for <code>.overlay(...)</code> and <code>.background(...)</code>, just for views without containers.</p><p>Other advantages of this approach:</p><ul><li>no need to define multiple stacks in complex layouts</li><li>easier to animate alignment changes (e.g. from <code>.leading</code> to <code>.trailing</code>)</li><li>less views definitions (no stacks and <code>Spacer</code>s!)</li></ul><h2>When to use stack + Spacer then?</h2><p>I believe the stack + <code>Spacer</code> combo is best used when we're distributing multiple components within the same stack, for example:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
      <span class="type">Text</span>(<span class="string">"Five"</span>)
      <span class="type">Spacer</span>()
      <span class="type">Text</span>(<span class="string">"Stars"</span>)
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/stack-spacer-alternative/image4.png"/><p>In this case <code>HStack</code> + <code>Spacer</code> is the way to go: the <code>.frame</code> approach would have an hard time declaring this layout while also making sure that the two <code>Text</code> instances wouldn't overlap.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>In this article we've covered an alternative approach on how to setup and distribute content in our SwiftUI layouts:<br>the outcome is exactly the same, which one you pick doesn't really matter as long as the choice stays consistent throughout your project.</p><p>Do you use any other alternatives? I'd love <a href="https://twitter.com/zntfdr">to know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/lets-build-state</guid><title>Let's build @State</title><description></description><link>https://www.fivestars.blog/articles/lets-build-state</link><pubDate>Tue, 8 Dec 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>Shout out to <a href="https://twitter.com/mikeash">Mike Ash</a> for the original, historic <a href="https://mikeash.com/pyblog/friday-qa-2013-01-25-lets-build-nsobject.html"><code>Let's build NSObject</code></a> article.</p></blockquote><p><a href="https://developer.apple.com/documentation/swiftui/state"><code>@State</code></a> is one of the many SwiftUI's pillars that, once understood, we take for granted and use pretty much everywhere without a second thought. But what is <code>@State</code>? What's happening behind the scenes?</p><p>In this article, let's try to answer those questions by re-building <code>@State</code>, and more.</p><blockquote><p>As usual, I have no access to the actual SwiftUI code/implementation:what we will find here is a best guess on mocking the original <code>@State</code> behavior, there's probably much more to it in the real implementation.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Property wrapper</h2><p>First of all, <code>@State</code> is a <a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID617">property wrapper</a>, which in short is a fancy getter and setter with extra logic and storage. Let's start by defining our state as following:</p><pre><code><span class="keyword">@propertyWrapper
struct</span> FSState {

}
</code></pre><p>A property wrapper requires a <code>wrappedValue</code>, letting us read/write the associated value.<br>Since we want to mock <code>@State</code>, we will make our property wrapper generic over a type <code>V</code>, and store the original value in a internal <code>value</code> property:</p><pre><code><span class="keyword">@propertyWrapper
struct</span> FSState&lt;V&gt; {
  <span class="comment">// This is where our value is actually stored.</span>
  <span class="keyword">var</span> value: <span class="type">V</span>
  
  <span class="comment">// And here are our getter/setters.</span>
  <span class="keyword">var</span> wrappedValue: <span class="type">V</span> {
    <span class="keyword">get</span> {
      value
    }
    <span class="keyword">set</span> {
      value = newValue
    }
  }
}
</code></pre><p>Lastly, if we want to provide the same syntax as <code>@State</code> and all other property wrappers (e.g. <code>@State var x = "hello"</code>), we will need to declare a special initializer:</p><pre><code><span class="keyword">@propertyWrapper
struct</span> FSState&lt;V&gt; {
  <span class="keyword">var</span> value: <span class="type">V</span>
  
  <span class="keyword">var</span> wrappedValue: <span class="type">V</span> {
    ...
  }

  <span class="keyword">init</span>(wrappedValue value: <span class="type">V</span>) {
    <span class="keyword">self</span>.<span class="property">value</span> = value
  }
}
</code></pre><p>With this definition we can now go ahead and start using <code>@FSState</code> in a view, for example:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@FSState var</span> text = <span class="string">"Hello Five Stars"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(text)
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/lets-build-state/image1.png"/><h2>nonmutating</h2><p>So far our definition is not much different than having a property defined directly in the view itself.<br>If we remove <code>@FSState</code> from our <code>ContentView</code> declaration, everything still works great:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> text = <span class="string">"Hello Five Stars"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(text)
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/lets-build-state/image1.png"/><p>Let's now try to change the text with a button for example:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@FSState var</span> text = <span class="string">"Hello Five Stars"</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Text</span>(text)

      <span class="type">Button</span>(<span class="string">"Change text"</span>) {
        text = [<span class="string">"hello"</span>, <span class="string">"five"</span>, <span class="string">"stars"</span>].<span class="call">randomElement</span>()!
      }
    }
  }
}
</code></pre><p>Unfortunately, this won't build:<br>we get a <code>Cannot assign to property: 'self' is immutable</code> error on the button action.</p><p>The issue is that assigning to <code>text</code> would mutate/change <code>ContentView</code>.</p><p>With structs we can declare <code>mutating</code> methods, but we cannot declare <code>mutating</code> computed properties (like <code>body</code>), nor we can call <code>mutating</code> methods in them.</p><p>To overcome this we must not change <code>ContentView</code>, which means we cannot change <code>FSState</code> neither, as our property wrapper is just another value type nested in our view.</p><p>First, let's declare our property wrapper setter as <code>nonmutating</code>, which tells Swift that setting this value won't change our <code>FSState</code> instance:</p><pre><code><span class="keyword">@propertyWrapper
struct</span> FSState&lt;V&gt; {
  <span class="keyword">var</span> value: <span class="type">V</span>
  
  <span class="keyword">var</span> wrappedValue: <span class="type">V</span> {
    <span class="keyword">get</span> { ... }
    <span class="keyword">nonmutating set</span> { <span class="comment">// our setter is now nonmutating</span>
      value = newValue
    }
  }

  ...
}
</code></pre><p>We've now moved the <code>Cannot assign to property: 'self' is immutable</code> build error from our <code>text</code> assignment to <code>FSState</code>'s <code>wrappedValue</code> setter.<br>This makes sense, as we're promising to not mutate the struct instance, but then we're setting <code>value = newValue</code>, which is mutating.</p><p>This is where Swift's reference types come in: if we replace <code>FSState</code>'s <code>value</code> property with a class type, and then update that class instance in our setter, we're effectively not changing <code>FSState</code> (as <code>FSState</code> would only contain the reference to that class, which always stays the same).</p><p>Let's define this "container" class type:</p><pre><code><span class="keyword">final class</span> Box&lt;V&gt; {
  <span class="keyword">var</span> value: <span class="type">V</span>

  <span class="keyword">init</span>(<span class="keyword">_</span> value: <span class="type">V</span>) {
    <span class="keyword">self</span>.<span class="property">value</span> = value
  }
}
</code></pre><p><code>Box</code> is a generic class that only has one function: hold and update our value.<br><br>Let's make <code>@FSState</code>'s declaration take advantage of this class:</p><pre><code><span class="keyword">@propertyWrapper
struct</span> FSState&lt;V&gt; {
  <span class="keyword">var</span> box: <span class="type">Box</span>&lt;<span class="type">V</span>&gt;

  <span class="keyword">var</span> wrappedValue: <span class="type">V</span> {
    <span class="keyword">get</span> {
      box.<span class="property">value</span>
    }
    <span class="keyword">nonmutating set</span> {
      box.<span class="property">value</span> = newValue
    }
  }

  <span class="keyword">init</span>(wrappedValue value: <span class="type">V</span>) {
    <span class="keyword">self</span>.<span class="property">box</span> = <span class="type">Box</span>(value)
  }
}
</code></pre><p>With this update we can build and run our app!</p><img src="https://www.fivestars.blog/assets/posts/lets-build-state/image2.gif"/><p>We tap the button but see no change, if we set breakpoints we will see that everything works: tapping the button correctly sets and updates our state, however the new challenge is letting SwiftUI know.</p><p>It's true that we're updating our data, but SwiftUI doesn't know that it should listen to such change and trigger a redraw of its body, let's tackle that next.</p><h2>DynamicProperty</h2><p>Similarly to how SwiftUI has a set of known <a href="https://www.fivestars.blog/articles/impossible-swiftui-views/">view primitives</a>, SwiftUI has also a set of known publishers that each view can listen to, based on the properties defined within that view.</p><p>The SwiftUI team has done an astonishing job at hiding SwiftUI's heavy use of Combine:<br>when we associate a view property with <code>@State</code>, <code>@ObservedObject</code>, etc SwiftUI will listen to all publishers connected to each property wrapper, which in turn tell SwiftUI when it's time to redraw.</p><p>In our case let's use <a href="https://developer.apple.com/documentation/swiftui/stateobject"><code>@StateObject</code></a> by conforming <code>Box</code> to <a href="https://developer.apple.com/documentation/Combine/ObservableObject"><code>ObservableObject</code></a>. Combine associates an <a href="https://developer.apple.com/documentation/combine/observableobject/objectwillchange-2oa5v"><code>objectWillChange</code></a> publisher to all <code>ObservableObject</code> instances, which we can then use to send events to SwiftUI by calling <a href="https://developer.apple.com/documentation/combine/observableobjectpublisher/send()"><code>send()</code></a>:</p><pre><code><span class="keyword">final class</span> Box&lt;V&gt;: <span class="type">ObservableObject</span> {
  <span class="keyword">var</span> value: <span class="type">V</span> {
    <span class="keyword">willSet</span> {
      <span class="comment">// This is where we send out our "hey, something has changed!" event</span>
      objectWillChange.<span class="call">send</span>()
    }
  }

  <span class="keyword">init</span>(<span class="keyword">_</span> value: <span class="type">V</span>) {
    <span class="keyword">self</span>.<span class="property">value</span> = value
  }
}
</code></pre><blockquote><p>There are easier ways to declare this, but in this article we're trying to see how things work by removing as much "<em>magic</em>" as possible.</p></blockquote><p>With <code>Box</code>'s definition updated, we can now go back to <code>@FSState</code> and associate <code>@StateObject</code> to the <code>box</code> property:</p><pre><code><span class="keyword">@propertyWrapper
struct</span> FSState&lt;V&gt; {
  <span class="keyword">@StateObject var</span> box: <span class="type">Box</span>&lt;<span class="type">V</span>&gt;

  <span class="keyword">var</span> wrappedValue: <span class="type">V</span> {
    ...
  }

  <span class="keyword">init</span>(wrappedValue value: <span class="type">V</span>) {
    <span class="keyword">self</span>.<span class="property">_box</span> = <span class="type">StateObject</span>(wrappedValue: <span class="type">Box</span>(value))
  }
}
</code></pre><p>Thanks to this update every time <code>box</code>'s value changes:</p><ul><li>an <a href="https://developer.apple.com/documentation/combine/observableobject/objectwillchange-2oa5v"><code>objectWillChange</code></a> event is fired</li><li>and an observer (SwiftUI?) of <code>box</code>'s publisher would know about it</li></ul><p>Let's run our app once again:</p><img src="https://www.fivestars.blog/assets/posts/lets-build-state/image2.gif"/><p>Unfortunately, we're not there yet. While it's true that the new publisher is sending out events when our value changes, we still need to tell SwiftUI about it:<br>from SwiftUI's point of view, <code>ContentView</code> has a <code>text</code> property of type <code>FSState&lt;String&gt;</code>, which is not something SwiftUI needs to pay attention to.</p><p>To change this, we need to make <code>FSState</code> conform to <a href="https://developer.apple.com/documentation/swiftui/dynamicproperty"><code>DynamicProperty</code></a>, described in the documentation as <code>An interface for a stored variable that updates an external property of a view.</code>.</p><p>Now, this is something SwiftUI is interested in! By making <code>FSState</code> conform to <code>DynamicProperty</code>, SwiftUI will listen to its events (if any) and trigger a redraw when needed.</p><p><code>DynamicProperty</code> requires only the implementation of an <code>update()</code> function, however SwiftUI already provides its default implementation, all we need to do is add the <code>DynamicProperty</code> conformance and we're good to go:</p><pre><code><span class="keyword">@propertyWrapper
struct</span> FSState&lt;V&gt;: <span class="type">DynamicProperty</span> {
  ...
}
</code></pre><p>With this last change let's try to run our app once again:</p><img src="https://www.fivestars.blog/assets/posts/lets-build-state/image3.gif"/><p>It works!<br>Despite adding this <code>DynamicProperty</code> conformance, we still didn't declare exactly which properties SwiftUI should listen to:<br><a href="https://www.fivestars.blog/articles/swift-protocols/">similarly to how view equatability works</a>, I suspect SwiftUI uses Swift's reflection to iterate over all stored properties and look for known property wrapper types to subscribe to.</p><blockquote><p>For an open source example on how to use reflection this way, refer to my <a href="https://www.fivestars.blog/articles/a-look-into-argument-parser/">deep dive into Apple's <code>ArgumentParser</code>'s implementation</a>, where the same approach is used to find the various command line arguments.</p></blockquote><h2>Binding</h2><p>An optional feature of property wrappers is to expose a projected value:<br>a projected value is an alternative look at the value stored within the property wrapper, exposed in a different manner.</p><p>Many SwiftUI views use bindings to refer to and potentially mutate values owned and stored somewhere else. An example of this is <a href="https://developer.apple.com/documentation/swiftui/textfield"><code>TextField</code></a> which uses a <code>Binding&lt;String&gt;</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@FSState var</span> text = <span class="string">""</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">TextField</span>(<span class="string">"Write something"</span>, text: $text) <span class="comment">// TextField's text is a binding</span>
    }
  }
}
</code></pre><p>As seen above, we can get a binding from a <code>@State</code> by calling the associate property with a <code>$</code> in front of the property name, what this symbol really does is reaching for the projected value instead of the wrapped one.</p><p>Therefore <code>@State</code>'s projected value is a generic <a href="https://developer.apple.com/documentation/swiftui/binding"><code>@Binding</code></a> over its type <code>V</code>, let's add the same projected value in <code>@FSState</code>:</p><pre><code><span class="keyword">@propertyWrapper
struct</span> FSState&lt;V&gt;: <span class="type">DynamicProperty</span> {
  <span class="keyword">@ObservedObject private var</span> box: <span class="type">Box</span>&lt;<span class="type">V</span>&gt;

  <span class="keyword">var</span> wrappedValue: <span class="type">V</span> {
    ...
  }

  <span class="keyword">var</span> projectedValue: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt; {
    <span class="type">Binding</span>(
      get: {
        wrappedValue
      },
      set: {
        wrappedValue = $0
      }
    )
  }

  ...
}
</code></pre><p>And voila', we can now use <code>@FSState</code> with bindings!</p><img src="https://www.fivestars.blog/assets/posts/lets-build-state/image4.gif"/><p>Here's the final <code>@FSState</code> definition:</p><pre><code><span class="keyword">@propertyWrapper
struct</span> FSState&lt;V&gt;: <span class="type">DynamicProperty</span> {
  <span class="keyword">@StateObject private var</span> box: <span class="type">Box</span>&lt;<span class="type">V</span>&gt;

  <span class="keyword">var</span> wrappedValue: <span class="type">V</span> {
    <span class="keyword">get</span> {
      box.<span class="property">value</span>
    }
    <span class="keyword">nonmutating set</span> {
      box.<span class="property">value</span> = newValue
    }
  }

  <span class="keyword">var</span> projectedValue: <span class="type">Binding</span>&lt;<span class="type">V</span>&gt; {
    <span class="type">Binding</span>(
      get: {
        wrappedValue
      },
      set: {
        wrappedValue = $0
      }
    )
  }

  <span class="keyword">init</span>(wrappedValue value: <span class="type">V</span>) {
    <span class="keyword">self</span>.<span class="property">_box</span> = <span class="type">StateObject</span>(wrappedValue: <span class="type">Box</span>(value))
  }
}

<span class="keyword">final class</span> Box&lt;T&gt;: <span class="type">ObservableObject</span> {
  <span class="keyword">var</span> value: <span class="type">T</span> {
    <span class="keyword">willSet</span> {
      objectWillChange.<span class="call">send</span>()
    }
  }

  <span class="keyword">init</span>(<span class="keyword">_</span> value: <span class="type">T</span>) {
    <span class="keyword">self</span>.<span class="property">value</span> = value
  }
}
</code></pre><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Once again the more we explore SwiftUI, the more it shows how much complexity can be hidden in a simple, elegant API.</p><p>Most developers won't ever need to worry about how things really work behind the scenes, however I cannot help but appreciate all the effort that has been done in order to get to this beautiful <em>state</em>.</p><p>I'm sure <code>@FSState</code> is not as complete as the real <code>@State</code>: if there's something that I missed or if you have more insights on something I glossed over, <a href="https://twitter.com/zntfdr">I'd love to know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/programmatic-navigation</guid><title>The future of SwiftUI navigation (?)</title><description></description><link>https://www.fivestars.blog/articles/programmatic-navigation</link><pubDate>Tue, 1 Dec 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>For a great overview on SwiftUI navigation, please check out <a href="https://www.hackingwithswift.com/articles/216/complete-guide-to-navigationview-in-swiftui">this article</a> by <a href="https://twitter.com/twostraws">Paul Hudson</a>.</p></blockquote><p>As it stands today, SwiftUI presents some limitations when dealing with <a href="https://developer.apple.com/documentation/swiftui/navigationlink"><code>NavigationLink</code></a>s.</p><p>In <a href="https://www.fivestars.blog/articles/swift-protocols/"><code>Swift protocols in SwiftUI</code></a> we've covered how SwiftUI uses <code>Identifiable</code> to manage sheets, alerts, and other views presentation, while <code>Hashable</code> is used for navigation:<br>this is the first limiting factor as, out of the box, it makes it hard to programmatically trigger a navigation while also passing dynamic data to the destination view.</p><p>The second limiting factor is that <code>NavigationLink</code>s really are buttons in disguise: their declaration requires a view of some kind, which will then be part of the view hierarchy.</p><p>In this article, let's try to overcome both these limitations.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Now you're here, now you're gone</h2><p><code>NavigationLink</code>s behave as triggers to push and pop views: internally they observe a <a href="https://www.fivestars.blog/articles/hashable-bindings/">boolean binding</a> (which can be <a href="https://www.fivestars.blog/articles/optional-binding/">exposed externally if needed</a>) to determine when to do so.</p><p>If we want to programmatically pop back from a pushed view, the most common way is by setting the <code>NavigationLink</code>'s binding to the proper state:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showingNavigation: <span class="type">Bool</span> = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">NavigationLink</span>(
        <span class="string">"Push view"</span>,
        destination: <span class="type">Button</span>(<span class="string">"Pop back"</span>, action: { showingNavigation = <span class="keyword">false</span> }),
        isActive: $showingNavigation
      )
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/programmatic-navigation/bool.gif"/><p>While this works great, we can also use another <em>hidden</em> trick to obtain the same effect:<br>entirely remove the <code>NavigationLink</code> from the view hierarchy.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showingNavigation: <span class="type">Bool</span> = <span class="keyword">true

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">VStack</span> {
        <span class="keyword">if</span> showingNavigation {
          <span class="type">NavigationLink</span>(
            <span class="string">"Go to destination"</span>,
            destination: <span class="type">Button</span>(<span class="string">"Hide navigation"</span>, action: { showingNavigation.<span class="call">toggle</span>() })
          )
        }

        <span class="keyword">if</span> !showingNavigation {
          <span class="type">Button</span>(<span class="string">"Show navigation"</span>, action: { showingNavigation.<span class="call">toggle</span>() })
        }
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/programmatic-navigation/navigationLink.gif"/><p>In this second case we use <code>showingNavigation</code> not as a <code>NavigationLink</code> binding, but to decide whether the <code>NavigationLink</code> is part of the view hierarchy.<br>If we remove the <code>NavigationLink</code> while it is presenting, this will also pop its destination.</p><h2>EmptyView</h2><p><code>NavigationLink</code>s require a view as their <code>Label</code>, however any view will do, therefore we can "<em>hide</em>" a <code>NavigationLink</code> by passing an <code>EmptyView</code> instance:</p><pre><code><span class="type">NavigationLink</span>(
  destination: ...,
  isActive: ...,
  label: { <span class="type">EmptyView</span>() }
)
</code></pre><p>By doing so we're effectively hiding the link from the view hierarchy, while still preserving its push/pop trigger effects.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showingNavigation: <span class="type">Bool</span> = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">VStack</span> {
        <span class="type">NavigationLink</span>(
          destination: <span class="type">Button</span>(<span class="string">"Pop back"</span>, action: { showingNavigation = <span class="keyword">false</span> }),
          isActive: $showingNavigation,
          label: { <span class="type">EmptyView</span>() }
        )

        <span class="type">Button</span>(<span class="string">"Push view"</span>, action: { showingNavigation = <span class="keyword">true</span> })
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/programmatic-navigation/emptyView.gif"/><p>In this example we're using a couple of buttons to trigger the navigation push and pop, but really the same could have been done via any other logic (for example after fetching something from the web).</p><p>While the <code>NavigationLink</code> is still part of the view hierarchy definition, it's now hidden and disconnected from the rest of the UI.</p><h2>Identifiable x NavigationLink</h2><p>Let's recap what we've covered so far:</p><ul><li>if a presenting <code>NavigationLink</code> is removed from the view hierarchy, its destination will pop back</li><li>using <code>EmptyView</code> as <code>NavigationLink</code>'s <code>Label</code> will <em>hide</em> the view from the UI, while preserving its push/pop triggers</li></ul><p>Now what we would like to have is a <code>NavigationLink</code> with an <code>Identifiable</code> binding instead of a <code>Bool</code> or <code>Hashable</code> one.</p><p>This is to align the navigation push/pop with the rest of SwiftUI view presentations (covered in the <code>Identifiable</code> chapter <a href="https://www.fivestars.blog/articles/swift-protocols/">here</a>), which would also enable us to easily pass data between different views.</p><p>While this is not offered by SwiftUI out of the box, as we've covered in <a href="https://www.fivestars.blog/articles/hashable-bindings/"><code>Hashable SwiftUI bindings</code></a>, nobody is stopping us to create a new extension.</p><p>We start with the following:</p><pre><code><span class="keyword">extension</span> <span class="type">NavigationLink</span> {
  <span class="keyword">public init</span>&lt;V: <span class="type">Identifiable</span>&gt;(
    item: <span class="type">Binding</span>&lt;<span class="type">V</span>?&gt;,
    destination: ...
  ) {
    ...
  }
}
</code></pre><p>Let's imagine to have an <code>Identifiable</code> type defined as following:</p><pre><code><span class="keyword">enum</span> ContentViewNavigation: <span class="type">Identifiable</span> {
  <span class="keyword">case</span> one
  <span class="keyword">case</span> two(number: <span class="type">Int</span>)
  <span class="keyword">case</span> three(text: <span class="type">String</span>)

  <span class="comment">// MARK: Identifiable</span>

  <span class="keyword">var</span> id: <span class="type">Int</span> {
    <span class="keyword">switch self</span> {
    <span class="keyword">case</span> .<span class="dotAccess">one</span>:
      <span class="keyword">return</span> <span class="number">1</span>
    <span class="keyword">case</span> .<span class="dotAccess">two</span>:
      <span class="keyword">return</span> <span class="number">2</span>
    <span class="keyword">case</span> .<span class="dotAccess">three</span>:
      <span class="keyword">return</span> <span class="number">3</span>
    }
  }
}
</code></pre><p>This "navigation" type has three possible destinations, where some of them (case <code>.two</code> and <code>.tree</code>) will also pass dynamic data to the destination view.</p><p>Our <code>NavigationLink</code> extension would need to generate a different destination for each possible <code>Identifiable</code> instance, therefore let's ask for a <em>view builder</em> function as our destination parameter:</p><pre><code><span class="keyword">extension</span> <span class="type">NavigationLink</span> {
  <span class="keyword">public init</span>&lt;V: <span class="type">Identifiable</span>&gt;(
    item: <span class="type">Binding</span>&lt;<span class="type">V</span>?&gt;,
    destination: <span class="keyword">@escaping</span> (<span class="type">V</span>) -&gt; <span class="type">Destination</span>
  ) {
    ...
  }
}
</code></pre><p>Thanks to this API we no longer need to declare a separate <code>NavigationLink</code> for each destination. Therefore let's <em>hide</em> this <code>NavigationLink</code> from the UI by declaring its <code>Label</code> as an <code>EmptyView</code>:</p><pre><code><span class="keyword">extension</span> <span class="type">NavigationLink</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">EmptyView</span> {
  <span class="keyword">public init</span>&lt;V: <span class="type">Identifiable</span>&gt;(
    item: <span class="type">Binding</span>&lt;<span class="type">V</span>?&gt;,
    destination: <span class="keyword">@escaping</span> (<span class="type">V</span>) -&gt; <span class="type">Destination</span>
  ) {
    ...
  }
}
</code></pre><p>This <code>NavigationLink</code> will generate a view with the correct destination only when the given <code>binding</code> in not <code>nil</code>: when the binding is <code>nil</code>, the initialization will fail.</p><p>To make this happen our extension will implement a failable initializer (note the <code>?</code> in the <code>init</code>):</p><pre><code><span class="keyword">extension</span> <span class="type">NavigationLink</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">EmptyView</span> {
  <span class="keyword">public init</span>?&lt;<span class="type">V</span>: <span class="type">Identifiable</span>&gt;(
    item: <span class="type">Binding</span>&lt;<span class="type">V</span>?&gt;,
    destination: <span class="keyword">@escaping</span> (<span class="type">V</span>) -&gt; <span class="type">Destination</span>
  ) {
     ...
  }
}
</code></pre><p>Now our <code>NavigationLink</code> will only be generated when the binding has a value (and a view is pushed): as soon as the binding is set to <code>nil</code> the <code>NavigationLink</code> will be removed from the view hierarchy, triggering a navigation pop.</p><pre><code><span class="keyword">extension</span> <span class="type">NavigationLink</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">EmptyView</span> {
  <span class="keyword">public init</span>?&lt;<span class="type">V</span>: <span class="type">Identifiable</span>&gt;(
    item: <span class="type">Binding</span>&lt;<span class="type">V</span>?&gt;,
    destination: <span class="keyword">@escaping</span> (<span class="type">V</span>) -&gt; <span class="type">Destination</span>
  ) {
    <span class="keyword">if let</span> value = item.<span class="property">wrappedValue</span> {
      <span class="keyword">self</span>.<span class="keyword">init</span>(...)
    } <span class="keyword">else</span> {
      <span class="keyword">return nil</span>
    }
  }
}
</code></pre><p>Lastly, we need to pass a binding to the initializer within our extension, let's make one that the official <code>NavigationLink</code> API accepts:</p><pre><code><span class="keyword">extension</span> <span class="type">NavigationLink</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">EmptyView</span> {
  <span class="keyword">public init</span>?&lt;<span class="type">V</span>: <span class="type">Identifiable</span>&gt;(
    item: <span class="type">Binding</span>&lt;<span class="type">V</span>?&gt;,
    destination: <span class="keyword">@escaping</span> (<span class="type">V</span>) -&gt; <span class="type">Destination</span>
  ) {
    <span class="keyword">if let</span> value = item.<span class="property">wrappedValue</span> {
      <span class="keyword">let</span> isActive: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt; = <span class="type">Binding</span>(
        get: { item.<span class="property">wrappedValue</span> != <span class="keyword">nil</span> },
        set: { value <span class="keyword">in</span>
          <span class="comment">// There's shouldn't be a way for SwiftUI to set `true` here.</span>
          <span class="keyword">if</span> !value {
            item.<span class="property">wrappedValue</span> = <span class="keyword">nil</span>
          }
        }
      )

      <span class="keyword">self</span>.<span class="keyword">init</span>(
        destination: <span class="call">destination</span>(value),
        isActive: isActive,
        label: { <span class="type">EmptyView</span>() }
      )
    } <span class="keyword">else</span> {
      <span class="keyword">return nil</span>
    }
  }
}
</code></pre><p>And with this, our extension is complete! Here's how we can use it:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> showingNavigation: <span class="type">ContentViewNavigation</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">VStack</span> {
        <span class="type">NavigationLink</span>(item: $showingNavigation, destination: presentNavigation)

        <span class="type">Button</span>(<span class="string">"Go to navigation one"</span>) {
          showingNavigation = .<span class="dotAccess">one</span>
        }
        <span class="type">Button</span>(<span class="string">"Go to navigation two"</span>) {
          showingNavigation = .<span class="call">two</span>(number: <span class="type">Int</span>.<span class="call">random</span>(in: <span class="number">1</span>...<span class="number">5</span>))
        }
        <span class="type">Button</span>(<span class="string">"Go to navigation three"</span>) {
          showingNavigation = .<span class="call">three</span>(text: [<span class="string">"five"</span>, <span class="string">"stars"</span>].<span class="call">randomElement</span>()!)
        }
      }
    }
  }

  <span class="keyword">@ViewBuilder
  func</span> presentNavigation(<span class="keyword">_</span> navigation: <span class="type">ContentViewNavigation</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">switch</span> navigation {
    <span class="keyword">case</span> .<span class="dotAccess">one</span>:
      <span class="type">Text</span>(verbatim: <span class="string">"one"</span>)
    <span class="keyword">case</span> .<span class="dotAccess">two</span>(<span class="keyword">let</span> number):
      <span class="type">Text</span>(<span class="string">"two</span> \(number)<span class="string">"</span>)
    <span class="keyword">case</span> .<span class="dotAccess">three</span>(<span class="keyword">let</span> text):
      <span class="type">Text</span>(<span class="string">"three</span> \(text)<span class="string">"</span>)
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/programmatic-navigation/identifiable.gif"/><h2>What NavigationLink?</h2><p>Thanks to our extension it's now simpler to pass data to any destination view, while also maintaining clarity in our view definition.</p><p>One aspect that our solution is still missing compared to other SwiftUI presentations is the complete removal of its definition from the view hierarchy, while this is currently not possible, we can certainly hide it in a very elegant way.</p><p>Looking at our previous example, the navigation link is still within our <code>VStack</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  ...

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">VStack</span> {
        <span class="type">NavigationLink</span>(item: $showingNavigation, destination: presentNavigation)

        <span class="type">Button</span>(...) { ... }
        <span class="type">Button</span>(...) { ... }
        <span class="type">Button</span>(...) { ... }
      }
    }
  }
  ...
}
</code></pre><p>However a <code>NavigationLink</code> can be placed anywhere, for example we can move it to the background and everything would still work fine:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  ...

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">VStack</span> {
        <span class="type">Button</span>(...) { ... }
        <span class="type">Button</span>(...) { ... }
        <span class="type">Button</span>(...) { ... }
      }
      .<span class="call">background</span>(
        <span class="type">NavigationLink</span>(item: $showingNavigation, destination: presentNavigation)
      )
    }
  }

  ...
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/programmatic-navigation/identifiable.gif"/><p>As this would probably be the ideal way to use our <code>NavigationLink</code> extension, we can define a helper <code>View</code> function that enables us to so:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> navigation&lt;V: <span class="type">Identifiable</span>, Destination: <span class="type">View</span>&gt;(
    item: <span class="type">Binding</span>&lt;<span class="type">V</span>?&gt;,
    destination: <span class="keyword">@escaping</span> (<span class="type">V</span>) -&gt; <span class="type">Destination</span>
  ) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">background</span>(<span class="type">NavigationLink</span>(item: item, destination: destination))
  }
}
</code></pre><p>Making our final API look very similar to other SwiftUI presentations (for sheets, alerts, etc):</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  ...

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">VStack</span> {
        <span class="type">Button</span>(...) { ... }
        <span class="type">Button</span>(...) { ... }
        <span class="type">Button</span>(...) { ... }
      }
      .<span class="call">navigation</span>(item: $showingNavigation, destination: presentNavigation)
    }
  }

  ...
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/programmatic-navigation/identifiable.gif"/><p>The complete working project can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/Identifiable-Navigation">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>The extensions introduced here probably won't cover 100% of the use cases, but I'd argue that a similar official API would be very welcome and would solve most of the implementation issues we face today.</p><p>We've seen no change on SwiftUI's navigation APIs at this year's WWDC, however I wouldn't be surprised if something new would pop up in a new Xcode 11.4-like release, or perhaps at the next WWDC. In the meanwhile, we can always try and solve these challenges ourselves!</p><p>Did you face or are you facing any SwiftUI challenge? How did you solve it? <a href="https://twitter.com/zntfdr">Please let me know!</a></p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swift-protocols</guid><title>Swift protocols in SwiftUI</title><description></description><link>https://www.fivestars.blog/articles/swift-protocols</link><pubDate>Wed, 25 Nov 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Like any other Swift framework, SwiftUI heavily relies on protocols as a core part of its definitions:<br>in previous articles we've covered examples of SwiftUI's own protocols such as <a href="https://www.fivestars.blog/articles/impossible-swiftui-views/"><code>View</code></a> or <a href="https://www.fivestars.blog/articles/label/"><code>LabelStyle</code></a>.</p><p>In this new article let's take a look at SwiftUI's usage of Swift standard library protocols: <code>Hashable</code>, <code>Identifiable</code>, and <code>Equatable</code>.</p><blockquote><p>This article is not an introduction to such protocols, if you need a quick refresher, <a href="https://twitter.com/mattt">Mattt</a>'s <a href="https://nshipster.com/">NSHipster</a> has your back: <a href="https://nshipster.com/equatable-and-comparable/"><code>Equatable</code> and <code>Comparable</code></a>, <a href="https://nshipster.com/hashable/"><code>Hashable</code> / <code>Hasher</code></a>, and <a href="https://nshipster.com/identifiable/"><code>Identifiable</code></a>.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Equatable</h2><p>SwiftUI is as lazy as it gets:<br>nothing is redrawn unless deemed necessary, <a href="https://www.fivestars.blog/articles/preferencekey-reduce/">nothing is computed unless there's demand for it</a>.</p><p><code>Equatable</code> is one of the unsung heroes of SwiftUI's performance. Computing layouts, drawing components, etc is expensive: the less SwiftUI does so, the better performance.</p><p><code>Equatable</code> is what's used by SwiftUI to take such decisions: even for views that do not declare <code>Equatable</code> conformance, SwiftUI traverses the view definition via Swift reflection and check for equatability of each property and decides if a redrawn is needed base on that.</p><p>This is just a sneak peek of what's happening behind the scenes: for a closer look, please refer to <a href="https://twitter.com/SwiftUILab">Javier Nigro</a>'s <a href="https://swiftui-lab.com/equatableview/">The Mystery Behind View Equality</a>.</p><h2>Identifiable</h2><p>While equatability is used to detect a view state change (therefore triggering a redraw), <code>Identifiable</code> separates a view identity from its state.</p><p>This is used in SwiftUI for example to track elements order in <a href="https://developer.apple.com/documentation/swiftui/list"><code>List</code></a> and <a href="https://developer.apple.com/documentation/swiftui/outlinegroup"><code>OutlineGroup</code></a>:</p><ul><li>imagine a list of elements where some reordering might happen. If the reordering doesn't involve any other change, only the list will need to update the cell order, but no cell will need to redraw.</li><li>on the other hand, if only a cell state changes but the ordering doesn't, just the specific cell will need to redraw, while the list itself doesn't have to do anything.</li></ul><p>Another example where <code>Identifiable</code> is used is in <a href="https://developer.apple.com/documentation/swiftui/picker"><code>Picker</code></a>:<br>in this case <code>Identifiable</code> is used to determine which element among the possible candidates is the selected one (if any), regardless of other possible states within the element type definition.</p><p>Lastly, <code>Identifiable</code> is used by all system alerts/sheets:</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/view/sheet(item:ondismiss:content:)"><code>sheet(item:onDismiss:content:)</code></a></li><li><a href="https://developer.apple.com/documentation/swiftui/view/fullscreencover(item:ondismiss:content:)"><code>fullScreenCover(item:onDismiss:content:)</code></a></li><li><a href="https://developer.apple.com/documentation/swiftui/view/popover(ispresented:attachmentanchor:arrowedge:content:)"><code>popover(item:attachmentAnchor:arrowEdge:content:)</code></a></li><li><a href="https://developer.apple.com/documentation/swiftui/view/alert(item:content:)"><code>alert(item:content:)</code></a></li><li><a href="https://developer.apple.com/documentation/swiftui/view/actionsheet(item:content:)"><code>actionSheet(item:content:)</code></a></li></ul><blockquote><p>All these also offer a simpler <code>isPresented</code> boolean alternative, using the same thought process we covered in <a href="https://www.fivestars.blog/articles/hashable-bindings/">Hashable SwiftUI bindings</a>.</p></blockquote><p>In this case (I believe) the idea to use <code>Identifiable</code> is to give us a chance to not only clearly define the possible different alerts/sheets, but also to pass more data if needed.</p><p>Imagine to have two different sheets:</p><pre><code><span class="keyword">enum</span> ContentViewSheet: <span class="type">Identifiable</span> {
  <span class="keyword">case</span> one
  <span class="keyword">case</span> two

  <span class="keyword">var</span> id: <span class="type">Int</span> {
    <span class="keyword">switch self</span> {
    <span class="keyword">case</span> .<span class="dotAccess">one</span>:
      <span class="keyword">return</span> <span class="number">1</span>
    <span class="keyword">case</span> .<span class="dotAccess">two</span>:
      <span class="keyword">return</span> <span class="number">2</span>
    }
  }
}
</code></pre><p><code>ContentViewSheet</code> has a case for each sheet, we can this definition along with <code>sheet(item:onDismiss:content:)</code> as following:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> showingSheet: <span class="type">ContentViewSheet</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Button</span>(<span class="string">"go to sheet 1"</span>) {
        showingSheet = .<span class="dotAccess">one</span>
      }

      <span class="type">Button</span>(<span class="string">"go to sheet 2"</span>) {
        showingSheet = .<span class="dotAccess">two</span>
      }
    }
    .<span class="call">sheet</span>(item: $showingSheet, content: presentSheet)
  }

  <span class="keyword">@ViewBuilder
  private func</span> presentSheet(for sheet: <span class="type">ContentViewSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">switch</span> sheet {
    <span class="keyword">case</span> .<span class="dotAccess">one</span>:
      <span class="type">Text</span>(<span class="string">"One"</span>)
    <span class="keyword">case</span> .<span class="dotAccess">two</span>:
      <span class="type">Text</span>(<span class="string">"Two"</span>)
    }
  }
}
</code></pre><p>This view shows a couple of buttons that, when tapped, will trigger the display of the associated sheet:</p><img src="https://www.fivestars.blog/assets/posts/swift-protocols/sheet.gif"/><p>Let's say that we would like to pass a value to the second sheet, a way to do so (which might not be the most correct/recommended) is by extending the second <code>ContentViewSheet</code> case with an associated value:</p><pre><code><span class="keyword">enum</span> ContentViewSheet: <span class="type">Identifiable</span> {
  <span class="keyword">case</span> one
  <span class="keyword">case</span> two(someData: <span class="type">Int</span>) <span class="comment">// new associated value

  /// The identity ignores the `someData` value.</span>
  <span class="keyword">var</span> id: <span class="type">Int</span> {
    <span class="keyword">switch self</span> {
    <span class="keyword">case</span> .<span class="dotAccess">one</span>:
      <span class="keyword">return</span> <span class="number">1</span>
    <span class="keyword">case</span> .<span class="dotAccess">two</span>:
      <span class="keyword">return</span> <span class="number">2</span>
    }
  }
}
</code></pre><p>Thanks to <code>someData</code>, we can now pass an <code>Int</code> value (or any other value really) when creating a new sheet:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  ...

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      ...

      <span class="type">Button</span>(<span class="string">"go to sheet 2"</span>) {
        showingSheet = .<span class="call">two</span>(someData: <span class="type">Int</span>.<span class="call">random</span>(in: <span class="number">1</span>...<span class="number">5</span>)) <span class="comment">// Pass data here</span>
      }
    }
    .<span class="call">sheet</span>(item: $showingSheet, content: presentSheet)
  }

  <span class="keyword">@ViewBuilder
  private func</span> presentSheet(for sheet: <span class="type">ContentViewSheet</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">switch</span> sheet {
      ...
    <span class="keyword">case</span> .<span class="dotAccess">two</span>(<span class="keyword">let</span> value): <span class="comment">// read and use the data here</span>
      <span class="type">Text</span>(<span class="string">"Sheet two with value</span> \(value)<span class="string">"</span>)
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swift-protocols/sheet2.gif"/><h2>Hashable</h2><p><code>Hashable</code> is used mainly in two views: <a href="https://developer.apple.com/documentation/swiftui/tabview"><code>TabView</code></a> and <a href="https://developer.apple.com/documentation/swiftui/navigationlink"><code>NavigationLink</code></a>.</p><p>These views work with tags, which are our way to connect view declarations to the values of the associated <code>Hashable</code> types SwiftUI needs to listen to.</p><p>In <code>TabView</code> case, we might declare each possible tab as following:</p><pre><code><span class="keyword">enum</span> Tab: <span class="type">Hashable</span> {
  <span class="keyword">case</span> home
  <span class="keyword">case</span> view2
  <span class="keyword">case</span> view3
  <span class="keyword">case</span> view4
}
</code></pre><p>Beside the type declaration, we now need a way to associate each view to each tab, and this is done via the <a href="https://developer.apple.com/documentation/swiftui/view/tag(_:)"><code>tag(_:)</code></a> method:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> tabBarState: <span class="type">Tab</span> = .<span class="dotAccess">home</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TabView</span>(selection: $tabBarState) {
      <span class="type">Text</span>(<span class="string">"Home"</span>)
        .<span class="call">tabItem</span> { <span class="type">Text</span>(<span class="string">"Home"</span>) }
        .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">home</span>)

      <span class="type">Text</span>(<span class="string">"View 2"</span>)
        .<span class="call">tabItem</span> { <span class="type">Text</span>(<span class="string">"View 2"</span>) }
        .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">view2</span>)

      <span class="type">Text</span>(<span class="string">"View 3"</span>)
        .<span class="call">tabItem</span> { <span class="type">Text</span>(<span class="string">"View 3"</span>) }
        .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">view3</span>)

      <span class="type">Text</span>(<span class="string">"View 4"</span>)
        .<span class="call">tabItem</span> { <span class="type">Text</span>(<span class="string">"View 4"</span>) }
        .<span class="call">tag</span>(<span class="type">Tab</span>.<span class="property">view4</span>)
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swift-protocols/tab.gif"/><p>In a similar manner, as <a href="https://www.fivestars.blog/articles/hashable-bindings/">we've seen previously</a>, we need to declare a new <code>NavigationLink</code> for each possible destination:</p><pre><code><span class="keyword">enum</span> ContentViewNavigation: <span class="type">Hashable</span> {
  <span class="keyword">case</span> a <span class="comment">// destination a</span>
  <span class="keyword">case</span> b <span class="comment">// destination b</span>
  <span class="keyword">case</span> c <span class="comment">// destination a</span>
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showingContent: <span class="type">ContentViewNavigation</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">VStack</span> {
        <span class="type">NavigationLink</span>(<span class="string">"Go to A"</span>, destination: <span class="type">Text</span>(<span class="string">"A"</span>), tag: .<span class="dotAccess">a</span>, selection: $showingContent)
        <span class="type">NavigationLink</span>(<span class="string">"Go to B"</span>, destination: <span class="type">Text</span>(<span class="string">"B"</span>), tag: .<span class="dotAccess">b</span>, selection: $showingContent)
        <span class="type">NavigationLink</span>(<span class="string">"Go to C"</span>, destination: <span class="type">Text</span>(<span class="string">"C"</span>), tag: .<span class="dotAccess">c</span>, selection: $showingContent)
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/hashable-bindings/destination.gif"/><p>While this tag approach makes total sense for <code>TabView</code>s, as of today, this is also the most advanced way to control navigation within an app thanks to <code>NavigationLink</code>:<br>this becomes cumbersome when we want to pass data to the destination view, especially when doing so programmatically (deep linking, anyone?).</p><p>This is probably one of the most awkward points when moving from UIKit to SwiftUI:<br>I'm sure the SwiftUI team had their reasons to choose this <em>route</em> just for navigation instead of the <code>Identifiable</code> approach used by all other view presentations (as seen above), but I sure hope we will see some evolutions on this in the future to streamline things (FB8910787).</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Similarly to how to really understand UIKit we need to grasp and understand Objective-C, learning and understanding SwiftUI requires us to learn and understand Swift: the more we learn about one, the more we learn about the other.</p><p>SwiftUI might not be "complete" nor "perfect" as it stands today, but as mentioned in the <a href="https://www.fivestars.blog/articles/content-friendly-layouts/">last article</a>, the current state presents us a great opportunity to learn in depth both the framework itself and the Swift language.</p><p>Do you have any leads on the reason behind the use of <code>Hashable</code> for Navigation? <a href="https://twitter.com/zntfdr">Please let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/content-friendly-layouts</guid><title>Build content-friendly layouts</title><description></description><link>https://www.fivestars.blog/articles/content-friendly-layouts</link><pubDate>Tue, 17 Nov 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>In <a href="https://www.fivestars.blog/articles/adaptive-swiftui-views/">Adaptive SwiftUI views</a> we've covered many approaches on how to make our layouts responsive to different external factors such as size classes, dynamic type, and more.</p><p>While these are awesome, they don't consider another important factor: the actual content size.</p><p>In this article let's see how we can address this!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The UIKit way</h2><p>WWDC20 session <a href="http://www.wwdcnotes.com/notes/wwdc20/10219/">Build localization-friendly layouts using Xcode</a> covers exactly how to do so in UIKit:<br>the session introduces <code>ReadjustingStackView</code>, which is a horizontal stack that turns vertical when the available horizontal space is less than the content needs, here's the session demo project:</p><table><tbody><tr><td><img src="https://www.fivestars.blog/assets/posts/content-friendly-layouts/horizontalStack.gif"/></td><td><img src="https://www.fivestars.blog/assets/posts/content-friendly-layouts/adaptiveStack.gif"/></td></tr></tbody></table><blockquote><p>Left: a standard horizontal <code>UIStackView</code>. Right: the new <code>ReadjustingStackView</code>.</p></blockquote><p>And this is <code>ReadjustingStackView</code>'s definition:</p><pre><code><span class="keyword">class</span> ReadjustingStackView: <span class="type">UIStackView</span> {

  <span class="comment">/// To know the size of our margins without hardcoding them, we have an
  /// outlet to a leading space constraint to read the constant value.</span>
  <span class="keyword">@IBOutlet var</span> leadingConstraint: <span class="type">NSLayoutConstraint</span>!

  <span class="keyword">required init</span>(coder: <span class="type">NSCoder</span>) {
    <span class="keyword">super</span>.<span class="keyword">init</span>(coder: coder)
    <span class="comment">// We want to recalculate our orientation whenever the dynamic type settings
    // on the device change.</span>
    <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">addObserver</span>(
      <span class="keyword">self</span>,
      selector: <span class="keyword">#selector</span>(adjustOrientation),
      name: <span class="type">UIContentSizeCategory</span>.<span class="property">didChangeNotification</span>,
      object: <span class="keyword">nil</span>
    )
  }

  <span class="comment">/// This takes care of recalculating our orientation whenever our content or
  /// layout changes (such as due to device rotation, addition of more buttons
  /// to the stack view, etc).</span>
  <span class="keyword">override func</span> layoutSubviews() {
    <span class="call">adjustOrientation</span>()
  }

  <span class="keyword">@objc
  func</span> adjustOrientation() {
    <span class="comment">// Always attempt to fit everything horizontally first</span>
    axis = .<span class="dotAccess">horizontal</span>
    alignment = .<span class="dotAccess">firstBaseline</span>

    <span class="keyword">let</span> desiredStackViewWidth = <span class="call">systemLayoutSizeFitting</span>(
      <span class="type">UIView</span>.<span class="property">layoutFittingCompressedSize</span>
    ).<span class="property">width</span>

    <span class="keyword">if let</span> parent = superview {
      <span class="keyword">let</span> availableWidth = parent.<span class="property">bounds</span>.<span class="call">inset</span>(by: parent.<span class="property">safeAreaInsets</span>).<span class="property">width</span> - (leadingConstraint.<span class="property">constant</span> * <span class="number">2.0</span>)
      <span class="keyword">if</span> desiredStackViewWidth &gt; availableWidth {
        axis = .<span class="dotAccess">vertical</span>
        alignment = .<span class="dotAccess">fill</span>
      }
    }
  }
}
</code></pre><p>The magic happens in <code>adjustOrientation()</code>, where we do the following:</p><ul><li>compute the horizontal space our content would take if laid out horizontally</li><li>compute the actual available space</li><li>compare the two values above, and decide the final orientation</li></ul><p>Thanks to Apple we're done in the UIKit world: <code>ReadjustingStackView</code> works as advertised and its implementation is quite clear, let's move to SwiftUI next.</p><h2>The SwiftUI way</h2><p>The aforementioned WWDC20 session doesn't provides us a solution in SwiftUI, however we can take the same steps as in <code>ReadjustingStackView</code>'s <code>adjustOrientation()</code> and apply them here.</p><p>For simplicity's sake, we're going to slightly change the steps order:</p><ol><li>compute the horizontal space available</li><li>compute the content total horizontal space</li><li>decide the layout orientation</li></ol><h3>1. Compute the horizontal space available</h3><p>If this sounds strangely familiar, it's because it is: we covered how to do so in the first step of <a href="https://www.fivestars.blog/articles/flexible-swiftui/">Flexible layouts in SwiftUI</a>, which in turn was based on <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/">Sharing layout information in SwiftUI</a>.</p><p>Without repeating the same content here, please refer to <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/">those</a> <a href="https://www.fivestars.blog/articles/flexible-swiftui/">two</a> articles.</p><p>The outcome is a new view, which we will conveniently call <code>ReadjustingStackView</code>, with knowledge on how much horizontal space is available (stored in its <code>availableWidth</code> property):</p><pre><code><span class="keyword">struct</span> ReadjustingStackView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> availableWidth: <span class="type">CGFloat</span> = <span class="number">0</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="type">Color</span>.<span class="property">clear</span>
        .<span class="call">frame</span>(height: <span class="number">1</span>)
        .<span class="call">readSize</span> { size <span class="keyword">in</span>
          availableWidth = size.<span class="property">width</span>
        }

      <span class="comment">// Rest of our implementation</span>
    }
  }
}
</code></pre><p>We can now move to our second step.</p><h3>2. Compute the content total horizontal space</h3><p>This step is solved by collecting the size of all elements in our content:<br>this is equivalent to step 2 of <a href="https://www.fivestars.blog/articles/flexible-swiftui/">Flexible layouts in SwiftUI</a>, which bring us to the following outcome:</p><pre><code><span class="keyword">struct</span> ReadjustingStackView&lt;Data: <span class="type">RandomAccessCollection</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Data</span>.<span class="type">Element</span>: <span class="type">Hashable</span> {
  <span class="keyword">let</span> data: <span class="type">Data</span>
  <span class="keyword">let</span> content: (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">Content</span>
  <span class="keyword">@State private var</span> elementsSize: [<span class="type">Data</span>.<span class="type">Element</span>: <span class="type">CGSize</span>] = [:]

  <span class="comment">// ...</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="comment">// ...</span>

      <span class="type">ForEach</span>(data, id: \.<span class="keyword">self</span>) { element <span class="keyword">in</span>
        <span class="call">content</span>(element)
          .<span class="call">fixedSize</span>()
          .<span class="call">readSize</span> { size <span class="keyword">in</span>
            elementsSize[element] = size
          }
      }
    }
  }
}
</code></pre><p>With this we've completed our second step! It's awesome when we can apply knowledge that we already have, isn't it?</p><h3>3. Decide the final layout orientation</h3><p>With both our <code>availableWidth</code> and <code>elementsSize</code>, it's time to implement the logic that compare the two and decide which axis our layout will take, a way to do so is the following:</p><pre><code><span class="keyword">func</span> isHorizontal() -&gt; <span class="type">Bool</span> {
  <span class="keyword">let</span> desiredStackViewWidth = data.<span class="call">reduce</span>(into: <span class="number">0</span>) { totalWidth, element <span class="keyword">in
    let</span> elementSize = elementsSize[element, default: <span class="type">CGSize</span>(width: availableWidth, height: <span class="number">1</span>)]
    totalWidth += elementSize.<span class="property">width</span>
  }

  <span class="keyword">return</span> availableWidth &gt; desiredStackViewWidth
}
</code></pre><p><code>isHorizontal</code> tells us whether we should use a <code>HStack</code> or a <code>VStack</code> by computing the total horizontal width first, and then comparing it with our <code>availableWidth</code>.</p><p>With the orientation in our hands, all is left to do is the actual view declaration:</p><pre><code><span class="keyword">struct</span> ReadjustingStackView&lt;...&gt;: <span class="type">View</span> <span class="keyword">where</span> ... {
  <span class="comment">// ...</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="comment">// ...</span>

      <span class="keyword">if</span> <span class="call">isHorizontal</span>() {
        <span class="type">HStack</span>(spacing: spacing) {
          elementsViews
        }
      } <span class="keyword">else</span> {
        <span class="type">VStack</span>(spacing: spacing) {
          elementsViews
        }
      }
    }
  }

  <span class="keyword">var</span> elementsViews: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ForEach</span>(data, id: \.<span class="keyword">self</span>) { element <span class="keyword">in</span>
      <span class="call">content</span>(element)
        .<span class="call">fixedSize</span>()
        .<span class="call">readSize</span> { size <span class="keyword">in</span>
          elementsSize[element] = size
        }
    }
  }

  <span class="comment">// ...</span>
}
</code></pre><p>We extract <code>elementsViews</code> from the body declaration just to avoid having to repeat the same code twice.</p><blockquote><p>Switching between the two layouts is effectively as if we were drawing those elements from scratch (therefore all events such as <a href="https://developer.apple.com/documentation/swiftui/text/onappear(perform:)"><code>onAppear</code></a> will be triggered when switching).</p></blockquote><p>With this, we‚Äôre done! The <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/Content-Friendly-Layouts">final project</a> also considers the spacing between elements in the stack (left out from the article for simplicity's sake):</p><img src="https://www.fivestars.blog/assets/posts/content-friendly-layouts/swiftUI.gif"/><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>While our SwiftUI solution might not be as intuitive and as succinct as the UIKit one, we must also keep in mind that we're comparing a 10+ years old framework with a 1.5 years old one:<br>I'm sure more SwiftUI view extensions are coming, making things such as getting a view intrinsic size easier, or getting a proposed size possible.</p><p>With that being said, I see the current limitations as opportunities: the more we struggle in finding ways to implement something today, the more we learn about how SwiftUI works.</p><p>What challenges have you faced with SwiftUI? Did you implement something tricky? <a href="https://twitter.com/zntfdr">Please feel free to reach me out</a>, I'd love to know!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/disfavoredOverload</guid><title>Swift overloading and @_disfavoredOverload</title><description></description><link>https://www.fivestars.blog/articles/disfavoredOverload</link><pubDate>Tue, 10 Nov 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>Many thanks to <a href="https://forums.swift.org/t/how-to-determine-if-a-passed-argument-is-a-string-literal/41651/3">Stefano De Carolis</a> for the tip!</p></blockquote><p>Swift allows <a href="https://en.wikipedia.org/wiki/Function_overloading">function overloading</a>, a.k.a. it lets us declare two or more functions with the same name but different arguments and/or return types:</p><pre><code><span class="keyword">func</span> sameName() {
  ...
}

<span class="keyword">func</span> sameName(parameter: <span class="type">Int</span>) {
  ...
}
</code></pre><p>In the example above it's always clear which function is called based on the parameter presence:</p><pre><code><span class="call">sameName</span>() <span class="comment">// no parameter =&gt; calls sameName()</span>
<span class="call">sameName</span>(parameter: <span class="number">1</span>) <span class="comment">// parameter =&gt; calls sameName(parameter:)</span>
</code></pre><p>This is pretty straight forward and expected behavior.</p><p>Swift however has many different ways to overload a function, which can bring to ambiguous situations where the behavior is not so easy to predict, for example:</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h3>Void vs default value</h3><pre><code><span class="keyword">func</span> sameName() {
  ...
}

<span class="keyword">func</span> sameName(value: <span class="type">Int</span> = <span class="number">5</span>) {
  ...
}
</code></pre><p>A function accepts no parameters and the other accepts one with a default value:</p><pre><code><span class="call">sameName</span>(value: <span class="number">1</span>) <span class="comment">// parameter passed =&gt; calls sameName(value:)</span>
<span class="call">sameName</span>() <span class="comment">// no parameter passed, both declarations match =&gt; ??</span>
</code></pre><h3>Protocol vs conforming type of that protocol</h3><pre><code><span class="keyword">func</span> sameName(<span class="keyword">_</span> number: <span class="type">Int</span>) {
  ...
}

<span class="keyword">func</span> sameName&lt;N: <span class="type">Numeric</span>&gt;(<span class="keyword">_</span> number: <span class="type">N</span>) {
  ...
}
</code></pre><p>Both functions accept a parameter, one requires an <code>Int</code> instance while the other requires an instance conforming to <a href="https://developer.apple.com/documentation/swift/numeric"><code>Numeric</code></a> (which <code>Int</code> conforms to):</p><pre><code><span class="call">sameName</span>(<span class="number">5.0</span>) <span class="comment">// not an Int =&gt; calls Numeric function</span>
<span class="call">sameName</span>(<span class="number">5</span>) <span class="comment">// Int, both declarations match =&gt; ??</span>
</code></pre><h3>Variadic vs non</h3><pre><code><span class="keyword">func</span> sameName(<span class="keyword">_</span> number: <span class="type">Int</span>) {
  ...
}

<span class="keyword">func</span> sameName(<span class="keyword">_</span> numbers: <span class="type">Int</span>...) {
  ...
}
</code></pre><p>Here we accept an <code>Int</code> in one function, and zero or more <code>Int</code>s in the other (a.k.a, we have a variadic parameter):</p><pre><code><span class="call">sameName</span>(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>) <span class="comment">// Multiple values are passed =&gt; variadic function</span>
<span class="call">sameName</span>(<span class="number">5</span>) <span class="comment">// One value is passed, both declarations match =&gt; ??</span>
</code></pre><h2>The hidden principle</h2><p>It's quite simple to find ourselves in an ambiguous situation, while not officially documented, former Swift team member <a href="https://twitter.com/UINT_MIN">Jordan Rose</a> has <a href="https://forums.swift.org/t/compiler-choosing-between-functions-with-no-parameters-vs-functions-with-default-parameters/23501/2">shed some light</a> on the <em>secret formula</em>:</p><p><a href="https://forums.swift.org/t/compiler-choosing-between-functions-with-no-parameters-vs-functions-with-default-parameters/23501/2">"The general principle is that the most specific overload should win"</a>.</p><p>Going back to our examples:</p><h3>Void vs default value</h3><pre><code><span class="keyword">func</span> sameName()
<span class="keyword">func</span> sameName(value: <span class="type">Int</span> = <span class="number">5</span>)
</code></pre><p><code>sameName()</code> triggers the first function:<br>a function that always takes 0 parameters is <em>more specific</em> than a function that sometimes takes 0 parameters.</p><h3>Protocol vs conforming type of that protocol</h3><pre><code><span class="keyword">func</span> sameName(<span class="keyword">_</span> number: <span class="type">Int</span>)
<span class="keyword">func</span> sameName&lt;N: <span class="type">Numeric</span>&gt;(<span class="keyword">_</span> number: <span class="type">N</span>)
</code></pre><p><code>sameName(5)</code> triggers the first function:<br>a function accepting <code>Int</code> is <em>more specific</em> than a function accepting any type conforming to <code>Numeric</code>.</p><h3>Variadic vs non</h3><pre><code><span class="keyword">func</span> sameName(<span class="keyword">_</span> number: <span class="type">Int</span>)
<span class="keyword">func</span> sameName(<span class="keyword">_</span> numbers: <span class="type">Int</span>...)
</code></pre><p><code>sameName(5)</code> triggers the first function:<br>a function that always takes 1 parameter is more specific than a function that takes 0+ parameters.</p><h2>@_disfavoredOverload</h2><blockquote><p>The underscore in front of the attribute means that this Swift feature hasn't gone through Swift Evolution just yet, proceed at your own discretion.</p></blockquote><p>Thanks to this principle we now have a nice way to predict Swift's behavior in case of ambiguity.</p><p>While this is great, sometimes as API/library designers the default behavior is not what we would like to have:<br>in such situations we can use the <code>@_disfavoredOverload</code> attribute, which will lower the rank of the associated function, making less <em>specific</em> functions win over more specific ones.</p><p>Going back to an earlier example:</p><pre><code><span class="keyword">func</span> sameName() { ... }
<span class="keyword">func</span> sameName(value: <span class="type">Int</span> = <span class="number">5</span>) { ... }
</code></pre><p>we know that calling <code>sameName()</code> matches the first function, however, if we introduce <code>@_disfavoredOverload</code>, this changes:</p><pre><code><span class="keyword">@_disfavoredOverload 
func</span> sameName() { ... }

<span class="keyword">func</span> sameName(value: <span class="type">Int</span> = <span class="number">5</span>) { ... }
</code></pre><p>With this updated declaration calling <code>sameName()</code> will match the second function instead.</p><p>It's very important to note that this attribute won't show up in our library headers:<br>if we use this attribute on our public declarations, it's recommended to document the behavior, which otherwise may cause surprises to adopters of our API.</p><h2>SwiftUI</h2><p><a href="https://forums.swift.org/t/how-to-determine-if-a-passed-argument-is-a-string-literal/41651/6">SwiftUI relies</a> on <code>@_disfavoredOverload</code> in many of its declarations.</p><p>An example is <a href="https://developer.apple.com/documentation/swiftui/text"><code>Text</code></a>, which we covered in <a href="https://www.fivestars.blog/articles/displaying-text-swiftui/">Displaying text in SwiftUI</a>. <code>Text</code> comes with multiple initializers, let's focus on two in particular:</p><pre><code><span class="keyword">public init</span>&lt;S: <span class="type">StringProtocol</span>&gt;(<span class="keyword">_</span> content: <span class="type">S</span>)
<span class="keyword">public init</span>(<span class="keyword">_</span> key: <span class="type">LocalizedStringKey</span>, tableName: <span class="type">String</span>? = <span class="keyword">nil</span>, bundle: <span class="type">Bundle</span>? = <span class="keyword">nil</span>, comment: <span class="type">StaticString</span>? = <span class="keyword">nil</span>)
</code></pre><p>From what we've seen so far we know that calling <code>Text("a string")</code> would match the first declaration, however, if we read <code>init&lt;S: StringProtocol&gt;(_ content: S)</code>'s documentation, we will see the following message:</p><pre><code><span class="comment">/// SwiftUI doesn't call the `init(_:)` method when you initialize a text
/// view with a string literal as the input. Instead, a string literal
/// triggers the ``Text/init(_:tableName:bundle:comment:)`` method ‚Äî which
/// treats the input as a ``LocalizedStringKey`` instance ‚Äî and attempts to
/// perform localization.</span>
</code></pre><p>This works because <a href="https://developer.apple.com/documentation/swiftui/localizedstringkey"><code>LocalizedStringKey</code></a> conforms to <a href="https://developer.apple.com/documentation/swift/expressiblebystringliteral"><code>ExpressibleByStringLiteral</code></a>:<br>as this key is the only required parameter in <code>init(_:tableName:bundle:comment:)</code>, a definition such as <code>Text("a string")</code> matches both initializers, and associating <code>@_disfavoredOverload</code> to the <code>StringProtocol</code>'s <code>init</code> makes the other initializer the preferred one.</p><p>Again, like in <code>Text</code>'s case, it's very important to document such behavior as otherwise adopters of our API would be met with unexpected results.</p><p>The reason behind this <code>Text</code> behavior is to make SwiftUI's API easy to use:</p><ul><li>if we pass a string literal (e.g. <code>Text("my_title")</code>), the framework will turn the string into a <code>LocalizedStringKey</code> and attempt to localize it</li><li>if we don't pass a string literal (e.g. <code>Text(stringVariable)</code>), the framework will display the value as is, without localization</li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Function overloading is a powerful tool that enables us to define multiple functions of the same name with different implementations:<br>in this article we've covered how Swift addresses ambiguity and how we can (<em>cautiously</em>) use the <code>@_disfavoredOverload</code> attribute in case of multiple matches.</p><p>Do you use this approach yourself? Have you seen any other cool use of <code>@_disfavoredOverload</code>? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/displaying-text-swiftui</guid><title>Displaying text in SwiftUI</title><description></description><link>https://www.fivestars.blog/articles/displaying-text-swiftui</link><pubDate>Tue, 3 Nov 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>In <a href="https://www.fivestars.blog/articles/design-system-composing-views/">Composing SwiftUI views</a> we've covered an example on how to start building a design system, and how it's very beneficial to have one as early as possible in any project.</p><p>In this article, let's continue building our design system with a new component, a button:</p><img src="https://www.fivestars.blog/assets/posts/displaying-text-swiftui/button.png"/><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The start</h2><p>In this case we're lucky, as our app only has one design. We don't even need to create a new <a href="https://developer.apple.com/documentation/swiftui/buttonstyle"><code>ButtonStyle</code></a>! Just in case, we build one anyway:</p><pre><code><span class="keyword">struct</span> FSButton: <span class="type">View</span> {
  <span class="keyword">let</span> titleKey: <span class="type">LocalizedStringKey</span>
  <span class="keyword">let</span> action: () -&gt; <span class="type">Void</span>

  <span class="keyword">init</span>(<span class="keyword">_</span> titleKey: <span class="type">LocalizedStringKey</span>, action: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) {
    <span class="keyword">self</span>.<span class="property">titleKey</span> = titleKey
    <span class="keyword">self</span>.<span class="property">action</span> = action
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(action: action, label: { <span class="type">Text</span>(titleKey).<span class="call">bold</span>() })
      .<span class="call">buttonStyle</span>(<span class="type">FSButtonStyle</span>())
  }
}

<span class="keyword">private struct</span> FSButtonStyle: <span class="type">ButtonStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
      <span class="type">Spacer</span>()
      configuration.<span class="property">label</span>
        .<span class="call">foregroundColor</span>(.<span class="dotAccess">white</span>)
      <span class="type">Spacer</span>()
    }
    .<span class="call">padding</span>()
    .<span class="call">background</span>(
      <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">8</span>, style: .<span class="dotAccess">continuous</span>).<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">green</span>)
    )
    .<span class="call">opacity</span>(configuration.<span class="property">isPressed</span> ? <span class="number">0.5</span> : <span class="number">1</span>)
  }
}
</code></pre><p>Which we can use as follows:</p><pre><code><span class="type">FSButton</span>(<span class="string">"Button title"</span>) {
  <span class="comment">// button tap action</span>
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/displaying-text-swiftui/button.gif"/><p>Great! We‚Äôre happy with <code>FSButton</code>: we add a couple of previews and move to the next design system component.</p><h2>One week later</h2><p>One week pass by and we're told by management that some of the buttons text will be provided by our backend instead of being handled by the app.</p><p>In order to use our current API, we would need to explicitly convert the backend string into a <code>LocalizedStringKey</code>:</p><pre><code><span class="keyword">var</span> backendString: <span class="type">String</span>

...

<span class="type">FSButton</span>(<span class="type">LocalizedStringKey</span>(backendString), action: buttonDidTap)
</code></pre><p>However this is "<em>not ideal</em>" in many levels:</p><ul><li>we're misusing <code>LocalizedStringKey</code></li><li>we're triggering a runtime lookup for a string that we already know won't be in our <code>Localizable.string</code> table</li><li>it's just...<em>not ideal</em></li></ul><p>A nicer way to handle this would be to use the <code>init&lt;S: StringProtocol&gt;(_ content: S)</code> <code>Text</code> initializer, of which purpose is to display strings as they are, without trying to localize them first.</p><p>We need a way to accommodate both this new initializer and also our previous one. A solution is to have <code>FSButton</code> replace its <code>titleKey</code> <code>LocalizedStringKey</code> property with a <code>title</code> <code>Text</code>:</p><pre><code><span class="keyword">struct</span> FSButton: <span class="type">View</span> {
  <span class="keyword">let</span> title: <span class="type">Text</span>
  <span class="keyword">let</span> action: () -&gt; <span class="type">Void</span>

  <span class="keyword">init</span>(titleKey: <span class="type">LocalizedStringKey</span>, action: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) {
    <span class="keyword">self</span>.<span class="property">title</span> = <span class="type">Text</span>(titleKey)
    <span class="keyword">self</span>.<span class="property">action</span> = action
  }

  <span class="keyword">init</span>&lt;S: <span class="type">StringProtocol</span>&gt;(<span class="keyword">_</span> content: <span class="type">S</span>, action: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) {
    <span class="keyword">self</span>.<span class="property">title</span> = <span class="type">Text</span>(content)
    <span class="keyword">self</span>.<span class="property">action</span> = action
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(action: action, label: { title.<span class="call">bold</span>() })
      .<span class="call">buttonStyle</span>(<span class="type">FSButtonStyle</span>())
  }
}
</code></pre><p>With this update <code>FSButton</code> initializers will create <em>on the fly</em> the <code>Text</code> instance with the proper initializer:</p><pre><code><span class="type">FSButton</span>(titleKey: <span class="string">"my_localized_title"</span>, action: { ... })

<span class="keyword">var</span> backendString: <span class="type">String</span> = ...
<span class="type">FSButton</span>(backendString, action: { ... })
</code></pre><img src="https://www.fivestars.blog/assets/posts/displaying-text-swiftui/vstack.png"/><blockquote><p>You now know how to write "Button title" in Thai!</p></blockquote><h2>One more week later</h2><p>The marketing team has heard about the button's text backend-driven approach, and now they want us to make it possible for them to also drive designs such as this one:</p><img src="https://www.fivestars.blog/assets/posts/displaying-text-swiftui/marketing.png"/><p>This is not possible with our two initializers. However, <code>Text</code> is one of most flexible and dynamic SwiftUI views, it has a whole suite of ad-hoc modifiers that return other <code>Text</code> views, and it's even possible to add <code>Text</code> views to other <code>Text</code> views, with the outcome still being another <code>Text</code>:</p><pre><code><span class="keyword">let</span> text: <span class="type">Text</span> =
  <span class="type">Text</span>(<span class="string">"Default "</span>) +
  <span class="type">Text</span>(<span class="string">"italic "</span>).<span class="call">italic</span>() +
  <span class="type">Text</span>(<span class="string">"Big "</span>).<span class="call">font</span>(.<span class="dotAccess">title</span>) +
  <span class="type">Text</span>(<span class="string">"Red "</span>).<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>) +
  <span class="type">Text</span>(<span class="string">"underline"</span>).<span class="call">underline</span>()
</code></pre><p>Therefore, in order to support this new request, all we need to do from <code>FSButton</code>'s point of view is to expose a new initializer that accepts a <code>Text</code>:</p><pre><code><span class="keyword">extension</span> <span class="type">FSButton</span> {
  <span class="keyword">init</span>(<span class="keyword">_</span> title: <span class="type">Text</span>, action: <span class="keyword">@escaping</span> () -&gt; <span class="type">Void</span>) {
    <span class="keyword">self</span>.<span class="property">title</span> = title
    <span class="keyword">self</span>.<span class="property">action</span> = action
  }
}
</code></pre><p>Which makes it possible to create views such as:</p><img src="https://www.fivestars.blog/assets/posts/displaying-text-swiftui/complex.png"/><p>Note that, thanks to this last initializer, we can completely override the default style of our button <code>Text</code>, with different font, weight, text color etc. which opens to a variety of new button styles for free.</p><h2>...where does it end?</h2><p>So far we've managed to keep our button content a <code>Text</code> view, however there might be a day in the future where that changes:<br>at that point we will probably need to extend our view to accept a view builder instead, which we've <a href="https://www.fivestars.blog/articles/design-system-composing-views/">already covered here</a>.</p><p>In conclusion, where should we start and what should we expose is really up to us, for example:</p><ul><li>if we're building a library/design system and we want to force whoever adopts it to use our style, we're probably ok by exposing just the two <code>LocalizedStringKey</code> and <code>StringProtocol</code> initializers</li><li>if we want to offer more flexibility, we can let developers pass a <code>Text</code> instance, which opens a whole world of customization, while still requiring the main content to be a <code>Text</code></li><li>lastly, if we really want to open to infinite possibilities, we can expose an initializer that accepts a view builder, at which point the customization limits are our imagination's</li></ul><p>The final project can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/Displaying-Text-SwiftUI">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Building SwiftUI components displaying text can be trickier than expected, however most use cases can be covered with little work on our side.</p><p>The same approach and thought process we've see here has been applied in many SwiftUI views definitions as well, where different views will expose different initializers.</p><p>If you're looking for inspiration, here are some SwiftUI views that use this approach:<br><code>Button</code>, <code>ColorPicker</code>, <code>CommandMenu</code>, <code>DatePicker</code>, <code>DisclosureGroup</code>, <code>Label</code>, <code>Link</code>, <code>Menu</code>, <code>NavigationLink</code>, <code>Picker</code>, <code>ProgressView</code>, <code>SecureField</code>, <code>Stepper</code>, <code>TextField</code>, <code>Toggle</code>, <code>WindowGroup</code>.</p><p>..and even a few modifiers such as <code>navigationTitle</code> and <code>help</code>.</p><p>Do you use this approach when building SwiftUI views? Have you used/seen any other patterns? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/hashable-bindings</guid><title>Hashable SwiftUI bindings</title><description></description><link>https://www.fivestars.blog/articles/hashable-bindings</link><pubDate>Tue, 27 Oct 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>We've <a href="https://www.fivestars.blog/articles/optional-binding/">previously covered</a> how to <a href="https://www.fivestars.blog/articles/optional-binding/">add optional bindings to SwiftUI views</a> using <a href="https://developer.apple.com/documentation/swiftui/DisclosureGroup"><code>DisclosureGroup</code></a> as an example.</p><p>Another SwiftUI view with similar API is <a href="https://developer.apple.com/documentation/swiftui/navigationlink"><code>NavigationLink</code></a>:</p><pre><code><span class="comment">// No binding</span>
<span class="type">NavigationLink</span>(
  <span class="string">"Go to view"</span>, 
  destination: <span class="type">DestinationView</span>()
)

<span class="comment">// With binding</span>
<span class="type">NavigationLink</span>(
  <span class="string">"Go to view"</span>, 
  destination: <span class="type">DestinationView</span>(), 
  isActive: $isShowingDestinationView
)
</code></pre><p>This works the same way as with <code>DisclosureGroup</code>:</p><ul><li>if we don't need to manage the <code>DestinationView</code> presentation ourselves, we can use the initializer with no binding.</li><li>if we do want to manage the <code>DestinationView</code> presentation ourselves, we can use the second initializer, where we pass a <code>$isShowingDestinationView</code> <code>Binding&lt;Bool&gt;</code>.</li></ul><p><code>NavigationLink</code> also provides a completely different, generic initializer:</p><pre><code><span class="keyword">enum</span> ContentViewNavigation: <span class="type">Hashable</span> {
  <span class="keyword">case</span> destinationA
  <span class="keyword">case</span> destinationB
  <span class="keyword">case</span> destinationC
}

...

<span class="type">NavigationLink</span>(
  <span class="string">"Go to view"</span>, 
  destination: <span class="type">DestinationA</span>(), 
  tag: .<span class="dotAccess">destinationA</span>, 
  selection: $showingNavigation
)
</code></pre><p>This initializer requires a <code>tag</code>, which is a value of a generic <code>Hashable</code> type, and a <code>selection</code>, which is a binding over the same <code>Hashable</code> type as <code>tag</code>.</p><p>How can a view offer such different initializers?<br>In this article we will try to extend <code>DisclosureGroup</code> with a similar API.</p><p>But first, let‚Äôs have a look at the concepts behind <code>NavigationLink</code>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>NavigationLink</h2><p><code>NavigationLink</code> is one of the two SwiftUI views used for navigation, the other being <a href="https://developer.apple.com/documentation/swiftui/navigationview"><code>NavigationView</code></a>:<br>among the two, <code>NavigationLink</code>'s role is to trigger and manage a navigation from one screen to another (a.k.a. the destination push/pop).</p><p>Each <code>NavigationLink</code> controls the presentation of a single destination view.</p><p>With this being said, the reasoning behind the first two initializers should be clear:</p><pre><code><span class="type">NavigationLink</span>(
  <span class="string">"Go to view"</span>, 
  destination: <span class="type">DestinationView</span>()
)
</code></pre><p>This first initializer lets SwiftUI own and manage the presentation of the destination.</p><pre><code><span class="type">NavigationLink</span>(
  <span class="string">"Go to view"</span>, 
  destination: <span class="type">DestinationView</span>(), 
  isActive: $isShowingDestinationView
)
</code></pre><p>This second initializer lets us push/pop the destination programmatically as well.</p><p>Any view can only push up to one single view at any given time:<br>it doesn't make sense to push multiple views in the same stack at the same time.</p><p>This is where the last initializer comes in, where:</p><ul><li>instead of having each <code>NavigationLink</code> rely to its own independent state, all <code>NavigationLink</code>s share the same state (the <code>selection</code> binding)</li><li>each <code>NavigationLink</code> triggers on a different <code>selection</code> value (the <code>tag</code>)</li></ul><p>Here's an example of a view with three possible destinations:</p><pre><code><span class="keyword">enum</span> ContentViewNavigation: <span class="type">Hashable</span> {
  <span class="keyword">case</span> a <span class="comment">// destination a</span>
  <span class="keyword">case</span> b <span class="comment">// destination b</span>
  <span class="keyword">case</span> c <span class="comment">// destination a</span>
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showingContent: <span class="type">ContentViewNavigation</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">NavigationView</span> {
      <span class="type">VStack</span> {
        <span class="type">NavigationLink</span>(<span class="string">"Go to A"</span>, destination: <span class="type">Text</span>(<span class="string">"A"</span>), tag: .<span class="dotAccess">a</span>, selection: $showingContent)
        <span class="type">NavigationLink</span>(<span class="string">"Go to B"</span>, destination: <span class="type">Text</span>(<span class="string">"B"</span>), tag: .<span class="dotAccess">b</span>, selection: $showingContent)
        <span class="type">NavigationLink</span>(<span class="string">"Go to C"</span>, destination: <span class="type">Text</span>(<span class="string">"C"</span>), tag: .<span class="dotAccess">c</span>, selection: $showingContent)
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/hashable-bindings/destination.gif"/><p>Thanks to this third initializer we no longer can (mistakenly) push multiple views at the same time.</p><h2>DisclosureGroup</h2><p>Imagine a screen with multiple <code>DisclosureGroup</code>s:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">List</span> {
      <span class="type">DisclosureGroup</span>(<span class="string">"Show content A"</span>) {
        <span class="type">Text</span>(<span class="string">"Content A"</span>)
      }

      <span class="type">DisclosureGroup</span>(<span class="string">"Show content B"</span>) {
        <span class="type">Text</span>(<span class="string">"Content B"</span>)
      }

      <span class="type">DisclosureGroup</span>(<span class="string">"Show content C"</span>) {
        <span class="type">Text</span>(<span class="string">"Content C"</span>)
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/hashable-bindings/freeContent.gif"/><p>We now receive a new requirement, where only up to one <code>DisclosureGroup</code> can display its content at any given time (therefore mimicking <code>NavigationLink</code>'s limitation).</p><p>Using just the official APIs, we'd need:</p><ul><li>a separate <code>Bool</code> state for each view group...</li><li>...that then needs to be observed and act upon when said state becomes <code>true</code> (hiding the content of other previously open <code>DisclosureGroup</code>s)</li></ul><p>One way to achieve this would be:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> isContentAShown: <span class="type">Bool</span> = <span class="keyword">false
  @State var</span> isContentBShown: <span class="type">Bool</span> = <span class="keyword">false
  @State var</span> isContentCShown: <span class="type">Bool</span> = <span class="keyword">false

  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">List</span> {
      <span class="type">DisclosureGroup</span>(<span class="string">"Show content A"</span>, isExpanded: $isContentAShown) {
        <span class="type">Text</span>(<span class="string">"Content A"</span>)
      }

      <span class="type">DisclosureGroup</span>(<span class="string">"Show content B"</span>, isExpanded: $isContentBShown) {
        <span class="type">Text</span>(<span class="string">"Content B"</span>)
      }

      <span class="type">DisclosureGroup</span>(<span class="string">"Show content C"</span>, isExpanded: $isContentCShown) {
        <span class="type">Text</span>(<span class="string">"Content C"</span>)
      }
    }
    .<span class="call">onChange</span>(of: isContentAShown) { newValue <span class="keyword">in
      if</span> newValue {
        isContentBShown = <span class="keyword">false</span>
        isContentCShown = <span class="keyword">false</span>
      }
    }
    .<span class="call">onChange</span>(of: isContentBShown) { newValue <span class="keyword">in
      if</span> newValue {
        isContentAShown = <span class="keyword">false</span>
        isContentCShown = <span class="keyword">false</span>
      }
    }
    .<span class="call">onChange</span>(of: isContentCShown) { newValue <span class="keyword">in
      if</span> newValue {
        isContentAShown = <span class="keyword">false</span>
        isContentBShown = <span class="keyword">false</span>
      }
    }
  }
}
</code></pre><p>While this works, it's error-prone and costly to maintain:<br>the more groups the view has, the more <code>onChange</code> view modifiers need to be added, the more <code>State&lt;Bool&gt;</code> properties need to be declared, etc.</p><p>Besides, each group <code>Bool</code> state is still independent from the rest: nobody can stop a rogue method to try to set all the <code>DisclosureGroup</code> states to <code>true</code> at once, resulting in an undefined behavior (because of the <code>onChange</code> observers).</p><h3>Hashable Binding</h3><p>Similarly to the last <code>NavigationLink</code> example, it would ideal if we could fix our current <code>DisclosureGroup</code> solution shortcomings by:</p><ul><li>sharing a single state among all our <code>DisclosureGroup</code>s</li><li>making it impossible to have multiple groups showing the content at the same time</li></ul><p>First, let's define a new <code>Hashable</code> enum, with each case representing a separate section of our view:</p><pre><code><span class="keyword">enum</span> ContentViewGroup: <span class="type">Hashable</span> {
  <span class="keyword">case</span> a
  <span class="keyword">case</span> b
  <span class="keyword">case</span> c
}
</code></pre><p>We'd like to use this enum as our shared state, where each <code>DisclosureGroup</code> listens to a separate case: when tapping on the <code>DisclosureGroup</code> "A" for example, the state will be set to <code>.a</code>, allowing the first group to show its content, while other groups keep the content hidden.</p><p>Using the same <code>NavigationLink</code> approach, this is where we want to end up with:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> showingContent: <span class="type">ContentViewGroup</span>?

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">List</span> {
      <span class="type">DisclosureGroup</span>(
        <span class="string">"Tap to show content A"</span>,
        tag: .<span class="dotAccess">a</span>,
        selection: $showingContent) {
        <span class="type">Text</span>(<span class="string">"Content A"</span>)
      }

      <span class="type">DisclosureGroup</span>(
        <span class="string">"Tap to show content B"</span>,
        tag: .<span class="dotAccess">b</span>,
        selection: $showingContent) {
        <span class="type">Text</span>(<span class="string">"Content B"</span>)
      }

      <span class="type">DisclosureGroup</span>(
        <span class="string">"Tap to show content C"</span>,
        tag: .<span class="dotAccess">c</span>,
        selection: $showingContent) {
        <span class="type">Text</span>(<span class="string">"Content C"</span>)
      }
    }
  }
}
</code></pre><p>Unfortunately, <code>DisclosureGroup</code> doesn't offer such API.</p><p>But if it was offered, how would this initializer be exposed?<br>Looking at <code>NavigationLink</code>s headers, we would have something like:</p><pre><code><span class="keyword">extension</span> <span class="type">DisclosureGroup</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">Text</span> {
  <span class="keyword">public init</span>&lt;V: <span class="type">Hashable</span>, S: <span class="type">StringProtocol</span>&gt;(
    <span class="keyword">_</span> label: <span class="type">S</span>,
    tag: <span class="type">V</span>,
    selection: <span class="type">Binding</span>&lt;<span class="type">V</span>?&gt;,
    content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>) {
    ...
  }
}
</code></pre><p>Before trying to fill in this initializer, let's take a step back and look at both <code>NavigationLink</code> and <code>DisclosureGroup</code>:<br>at any given time, a <code>NavigationLink</code> is either pushing the destination or not, <strong>regardless of what initializer we use</strong>. Similarly, a <code>DisclosureGroup</code> is either showing its content or not.</p><p>These views <strong>always have a boolean state</strong> (pushing/not-pushing, showing/not-showing), even when we pass the <code>Hashable</code> <code>tag</code> + <code>selection</code> binding combo.</p><p>The <code>Hashable</code> initializer really is a convenience:<br>behind the scenes these views still behave as if a boolean binding has been passed.</p><p>Let's take a look at the first <code>DisclosureGroup</code> definition in our example:</p><pre><code><span class="type">DisclosureGroup</span>(
  <span class="string">"Tap to show content A"</span>,
  tag: .<span class="dotAccess">a</span>,
  selection: $showingContent,
  content: { <span class="type">Text</span>(<span class="string">"Content A"</span>) }
)
</code></pre><p>If we had to turn the <code>showingContent</code> <code>Hashable</code> binding into a <code>Bool</code> one, this is more or less how we'd do it:</p><ul><li>the value would be <code>true</code> if <code>showingContent.wrappedValue == .a</code>, <code>false</code> otherwise</li><li>when setting the boolean binding value to <code>true</code>, we'd reflect this change by setting <code>showingContent.wrappedValue = .a</code></li><li>when setting the boolean binding value to <code>false</code>, we'd reflect this change by setting <code>showingContent.wrappedValue = nil</code></li></ul><p>The <code>Hashable</code> initializer has all it is needed to turn the <code>Hashable</code> binding into a <code>Bool</code> one:<br>despite not getting a <code>Bool</code> binding, nobody is stopping us to create a new one. This is what <code>NavigationLink</code> does, and what we can do in <code>DisclosureGroup</code> as well:</p><pre><code><span class="keyword">extension</span> <span class="type">DisclosureGroup</span> <span class="keyword">where</span> <span class="type">Label</span> == <span class="type">Text</span> {
  <span class="keyword">public init</span>&lt;V: <span class="type">Hashable</span>, S: <span class="type">StringProtocol</span>&gt;(
    <span class="keyword">_</span> label: <span class="type">S</span>,
    tag: <span class="type">V</span>,
    selection: <span class="type">Binding</span>&lt;<span class="type">V</span>?&gt;,
    content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>) {

    <span class="keyword">let</span> boolBinding: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt; = <span class="type">Binding</span>(
      get: { selection.<span class="property">wrappedValue</span> == tag },
      set: { newValue <span class="keyword">in
        if</span> newValue {
          selection.<span class="property">wrappedValue</span> = tag
        } <span class="keyword">else</span> {
          selection.<span class="property">wrappedValue</span> = <span class="keyword">nil</span>
        }
      }
    )

    <span class="comment">// Here we call the "normal" initializer with a Binding&lt;Bool&gt;.</span>
    <span class="keyword">self</span>.<span class="keyword">init</span>(
      label,
      isExpanded: boolBinding,
      content: content
    )
  }
}
</code></pre><p>And with this extension we've now accomplished our target:</p><img src="https://www.fivestars.blog/assets/posts/hashable-bindings/oneShowing.gif"/><p>Thanks to this generic approach our code is much more maintainable, reusable, and less error-prone:<br>the final gist can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/Hashable-Bindings">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Despite offering multiple initializers, at the end of the day each SwiftUI view will run the same core logic.</p><p>The <code>Hashable</code> <em>convenience</em> initializer is yet another example of how SwiftUI excels at progressive discovery:<br>taking any SwiftUI view, we can start by adopting their simple initializers first, where most of the details are hidden, and then, once we are acquaint with them, we can move to use, or even create, more advanced ones, where we have more control (and more responsibility!) on each view.</p><p>Have you seen any other SwiftUI example of such APIs? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/adaptive-swiftui-views</guid><title>Adaptive SwiftUI views</title><description></description><link>https://www.fivestars.blog/articles/adaptive-swiftui-views</link><pubDate>Tue, 20 Oct 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>One of the most powerful aspects of SwiftUI is how it adapts based on the context:<br>this is SwiftUI's promise, running on all Apple devices, from the 38mm Apple Watch to the 27-inches iMac (without considering external monitors!).</p><p>While this is great and can save us hundreds of hours, sometimes we want to make our UI declarations even more adaptive: in this article, let's see how we can do so.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Our example</h2><p>In our app we have a view that we would like to adapt based on the available space.</p><p>We define two layouts, one where the content is stacked vertically, and one where the content is stacked horizontally:</p><img src="https://www.fivestars.blog/assets/posts/adaptive-views/layoutsImage.png"/><p>Even before taking care of how to pick which layout, let's define a generic reusable view, <code>AdaptiveView</code>:</p><pre><code><span class="keyword">struct</span> AdaptiveView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">var</span> content: <span class="type">Content</span>

  <span class="keyword">public init</span>(<span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>) {
    <span class="keyword">self</span>.<span class="property">content</span> = <span class="call">content</span>()
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> <span class="comment">/* condition here */</span> {
      <span class="type">HStack</span> {
        content
      }
    } <span class="keyword">else</span> {
      <span class="type">VStack</span> {
        content
      }
    }
  }
}
</code></pre><blockquote><p>We will fill in the condition later on.</p></blockquote><p>Our example view will be able to use this new definition, where all it needs to declare is the content, everything else is managed by <code>AdaptiveView</code>:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">AdaptiveView</span> {
    <span class="type">RoundedRectangle</span>(...)
      .<span class="call">fill</span>(...)
      .<span class="call">frame</span>(maxHeight: <span class="number">400</span>)

    <span class="type">VStack</span> {
      <span class="type">Text</span>(<span class="string">"Title"</span>)
        .<span class="call">bold</span>()
        .<span class="call">font</span>(.<span class="dotAccess">title</span>)

      <span class="type">Text</span>(...)
        .<span class="call">fixedSize</span>(horizontal: <span class="keyword">false</span>, vertical: <span class="keyword">true</span>)
    }
  }
}
</code></pre><p>Awesome, let's now see how we can fill the <code>AdaptiveView</code> condition next.</p><blockquote><p>For simplicity's sake, we will focus on conditions based on the horizontal space available: the same concepts can be applied for vertical space as well.</p></blockquote><h2>Size classes</h2><img src="https://www.fivestars.blog/assets/posts/adaptive-views/layoutsImage.png"/><blockquote><p>All the <em>plus</em> sizes iPhones have a regular horizontal size class when in landscape.</p></blockquote><p>Every SwiftUI view can observe the screen size classes via two environment values: <a href="https://developer.apple.com/documentation/swiftui/environmentvalues/horizontalsizeclass"><code>horizontalSizeClass</code></a> and <a href="https://developer.apple.com/documentation/swiftui/environmentvalues/verticalsizeclass"><code>verticalSizeClass</code></a>.</p><p>Both return a <a href="https://developer.apple.com/documentation/swiftui/userinterfacesizeclass"><code>UserInterfaceSizeClass</code></a> instance, which is SwiftUI's counterpart to UIKit's <a href="https://developer.apple.com/documentation/uikit/uiuserinterfacesizeclass"><code>UIUserInterfaceSizeClass</code></a>:</p><pre><code><span class="keyword">public enum</span> UserInterfaceSizeClass {
  <span class="keyword">case</span> compact
  <span class="keyword">case</span> regular
}
</code></pre><p>In this example we can make <code>AdaptiveView</code> switch layout based the environment's <code>horizontalSizeClass</code>:</p><pre><code><span class="keyword">struct</span> AdaptiveView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">horizontalSizeClass</span>) <span class="keyword">var</span> horizontalSizeClass
  <span class="keyword">var</span> content: <span class="type">Content</span>

  <span class="keyword">init</span>(...) { ... }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> horizontalSizeClass == .<span class="dotAccess">regular</span> {
      <span class="comment">// We have a "regular" horizontal screen estate: 
      // we lay the content horizontally.</span>
      <span class="type">HStack</span> {
        content
      }
    } <span class="keyword">else</span> {
      <span class="type">VStack</span> {
        content
      }
    }
  }
}
</code></pre><h2>Dynamic type</h2><img src="https://www.fivestars.blog/assets/posts/adaptive-views/dynamicTypeImage.png"/><p>Another approach <code>AdaptiveView</code> could use is based on the environment <a href="https://developer.apple.com/documentation/swiftui/contentsizecategory"><code>ContentSizeCategory</code></a>:<br>while <a href="https://developer.apple.com/documentation/swiftui/userinterfacesizeclass"><code>UserInterfaceSizeClass</code></a> tells us about the compact/regular size of the device screen in the current orientation, <a href="https://developer.apple.com/documentation/swiftui/contentsizecategory"><code>ContentSizeCategory</code></a> tells us the user's preferred content size (a.k.a. dynamic type).</p><pre><code><span class="keyword">public enum</span> ContentSizeCategory: <span class="type">Hashable</span>, <span class="type">CaseIterable</span> {
  <span class="keyword">case</span> extraSmall
  <span class="keyword">case</span> small
  <span class="keyword">case</span> medium
  <span class="keyword">case</span> large
  <span class="keyword">case</span> extraLarge
  <span class="keyword">case</span> extraExtraLarge
  <span class="keyword">case</span> extraExtraExtraLarge
  <span class="keyword">case</span> accessibilityMedium
  <span class="keyword">case</span> accessibilityLarge
  <span class="keyword">case</span> accessibilityExtraLarge
  <span class="keyword">case</span> accessibilityExtraExtraLarge
  <span class="keyword">case</span> accessibilityExtraExtraExtraLarge
}
</code></pre><p>We can use any of these cases as the condition threshold in <code>AdaptiveView</code>, for example we could switch layout for any size bigger than <code>.large</code>:</p><pre><code><span class="keyword">struct</span> AdaptiveView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">sizeCategory</span>) <span class="keyword">var</span> sizeCategory: <span class="type">ContentSizeCategory</span>
  <span class="keyword">var</span> content: <span class="type">Content</span>

  <span class="keyword">init</span>(...) { ... }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> sizeCategory &gt; .<span class="dotAccess">large</span> {
      <span class="type">VStack</span> {
        content
      }
    } <span class="keyword">else</span> {
      <span class="type">HStack</span> {
        content
      }
    }
  }
}
</code></pre><p>SwiftUI also offers an <a href="https://developer.apple.com/documentation/swiftui/contentsizecategory/isaccessibilitycategory"><code>isAccessibilityCategory</code></a> property on <code>ContentSizeCategory</code> which we can use as well:</p><pre><code><span class="keyword">struct</span> AdaptiveView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">sizeCategory</span>) <span class="keyword">var</span> sizeCategory: <span class="type">ContentSizeCategory</span>
  <span class="keyword">var</span> content: <span class="type">Content</span>

  <span class="keyword">init</span>(...) { ... }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> sizeCategory.<span class="property">isAccessibilityCategory</span> {
      <span class="comment">// When the user prefers an accessibility category, lay the content vertically.</span>
      <span class="type">VStack</span> {
        content
      }
    } <span class="keyword">else</span> {
      <span class="type">HStack</span> {
        content
      }
    }
  }
}
</code></pre><p><a href="https://developer.apple.com/documentation/swiftui/contentsizecategory/isaccessibilitycategory"><code>isAccessibilityCategory</code></a> returns <code>true</code> when the <code>ContentSizeCategory</code> instance is one that starts with "<code>accessibility</code>", this seems a good default threshold to use:<br>of course we should test our implementation and see/decide if that works for us, if it doesn't we can always fall back to another threshold.</p><h2>Custom threshold</h2><p>The approaches presented so far will work for most views, however, they also have a big shortcoming: they rely on a global value.</p><p>This is great when a single <code>AdaptiveView</code> is the main content of the screen, but what if we have multiple views that should adapt?</p><p>If we fall in this case, we probably can't rely on these global environment properties: instead, we should make decisions for each view separately.</p><p>This way two or more of these views can layout themselves differently, each based on their own space and <em>threshold</em>.</p><p>In order to do this, we need to take two steps:</p><ol><li>Obtain the available horizontal space for each <code>AdaptiveView</code></li><li>Create a condition based on that space</li></ol><h3>1. Obtain the available horizontal space</h3><p>Luckily for us, we've already faced this challenge in <a href="https://www.fivestars.blog/articles/flexible-swiftui/"><code>Flexible layouts in SwiftUI</code></a> (recommended read!), where we achieved the following result:</p><pre><code><span class="keyword">struct</span> FlexibleView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> availableWidth: <span class="type">CGFloat</span> = <span class="number">0</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="type">Color</span>.<span class="property">clear</span>
        .<span class="call">frame</span>(height: <span class="number">1</span>)
        .<span class="call">readSize</span> { size <span class="keyword">in</span>
          availableWidth = size.<span class="property">width</span>
        }

      <span class="comment">// Rest of our implementation</span>
    }
  }
}
</code></pre><p>We can take this and implement it in our generic <code>AdaptiveView</code>:</p><pre><code><span class="keyword">struct</span> AdaptiveView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@State private var</span> availableWidth: <span class="type">CGFloat</span> = <span class="number">0</span>
  <span class="keyword">var</span> content: <span class="type">Content</span>

  <span class="keyword">public init</span>(...) { ... }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="type">Color</span>.<span class="property">clear</span>
        .<span class="call">frame</span>(height: <span class="number">1</span>)
        .<span class="call">readSize</span> { size <span class="keyword">in</span>
          availableWidth = size.<span class="property">width</span>
        }

      <span class="keyword">if</span> <span class="comment">/* condition */</span> {
        <span class="type">HStack</span> {
          content
        }
      } <span class="keyword">else</span> {
        <span class="type">VStack</span> {
          content
        }
      }
    }
  }
}
</code></pre><p>...completing our first point.</p><h3>2. Create a condition based on the available space</h3><p>Once we have the available space, all it's left to decide is how to use it:<br>as we're building a generic view, it's best to leave the threshold decision to the implementer, which has more knowledge on where the view is used, and what the actual content is.</p><p>For these reasons, we can add a new property, <code>threshold</code>, which will then be used in our <code>AdaptiveView</code> condition:</p><pre><code><span class="keyword">struct</span> AdaptiveView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">@State private var</span> availableWidth: <span class="type">CGFloat</span> = <span class="number">0</span>
  <span class="keyword">var</span> threshold: <span class="type">CGFloat</span>
  <span class="keyword">var</span> content: <span class="type">Content</span>

  <span class="keyword">public init</span>(
    threshold: <span class="type">CGFloat</span>, 
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  ) {
    <span class="keyword">self</span>.<span class="property">threshold</span> = threshold
    <span class="keyword">self</span>.<span class="property">content</span> = <span class="call">content</span>()
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="type">Color</span>.<span class="property">clear</span>
        .<span class="call">frame</span>(height: <span class="number">1</span>)
        .<span class="call">readSize</span> { size <span class="keyword">in</span>
          availableWidth = size.<span class="property">width</span>
        }

      <span class="keyword">if</span> availableWidth &gt; threshold {
        <span class="type">HStack</span> {
          content
        }
      } <span class="keyword">else</span> {
        <span class="type">VStack</span> {
          content
        }
      }
    }
  }
}
</code></pre><p>And with this, our custom <code>AdaptiveView</code> is complete.</p><h3>Experimentation</h3><p>Since we now own the threshold, it's also easy to test different thresholds/layouts/devices, for example:</p><img src="https://www.fivestars.blog/assets/posts/adaptive-views/exp.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> currentWidth: <span class="type">CGFloat</span> = <span class="number">0</span>
  <span class="keyword">@State var</span> padding: <span class="type">CGFloat</span> = <span class="number">8</span>
  <span class="keyword">@State var</span> threshold: <span class="type">CGFloat</span> = <span class="number">100</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">AdaptiveView</span>(threshold: threshold) {
        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">40.0</span>, style: .<span class="dotAccess">continuous</span>)
          .<span class="call">fill</span>(
            <span class="type">Color</span>(red: <span class="number">224</span> / <span class="number">255.0</span>, green: <span class="number">21</span> / <span class="number">255.0</span>, blue: <span class="number">90</span> / <span class="number">255.0</span>, opacity: <span class="number">1</span>)
          )
        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">40.0</span>, style: .<span class="dotAccess">continuous</span>)
          .<span class="call">fill</span>(
            <span class="type">Color</span>.<span class="property">pink</span>
          )
      }
      .<span class="call">readSize</span> { size <span class="keyword">in</span>
        currentWidth = size.<span class="property">width</span>
      }
      .<span class="call">overlay</span>(
        <span class="type">Rectangle</span>()
          .<span class="call">stroke</span>(lineWidth: <span class="number">2</span>)
          .<span class="call">frame</span>(width: threshold)
      )
      .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>, padding)

      <span class="type">Text</span>(<span class="string">"Current width:</span> \(<span class="type">Int</span>(currentWidth))<span class="string">"</span>)
      <span class="type">HStack</span> {
        <span class="type">Text</span>(<span class="string">"Threshold:</span> \(<span class="type">Int</span>(threshold))<span class="string">"</span>)
        <span class="type">Slider</span>(value: $threshold, in: <span class="number">0</span>...<span class="number">500</span>, step: <span class="number">1</span>) { <span class="type">Text</span>(<span class="string">""</span>) }
      }
      <span class="type">HStack</span> {
        <span class="type">Text</span>(<span class="string">"Padding:"</span>)
        <span class="type">Slider</span>(value: $padding, in: <span class="number">0</span>...<span class="number">500</span>, step: <span class="number">1</span>) { <span class="type">Text</span>(<span class="string">""</span>) }
      }
    }
    .<span class="call">padding</span>()
  }
}
</code></pre><p>The final project can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/Adaptive-Views">here</a>.</p><h2>Not only layouts</h2><p>The examples we've seen so far adapt the layout direction based on our condition, however this is not the only use case, for example, we can use a similar approach to show/hide part of the UI:</p><img src="https://www.fivestars.blog/assets/posts/adaptive-views/socialImage.png"/><p>This example is also part of the <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/Adaptive-Views">final project</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>SwiftUI tries its best to fit as best as possible in every given scenario: it's completely fine to let the framework do all the heavy lifting, however going that extra mile, with a little work from our side, can help us provide an even better user experience.</p><p>In this article we've seen various approaches on how we can adapt our views based on different conditions: do you use any of them? Have you seen any other alternatives? <a href="https://twitter.com/zntfdr">Please let me know!</a></p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/design-system-composing-views</guid><title>Composing SwiftUI views</title><description></description><link>https://www.fivestars.blog/articles/design-system-composing-views</link><pubDate>Wed, 14 Oct 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>We're tasked with building a brand new iOS 13+ app, or, maybe, with migrating an app from UIKit to SwiftUI: where should we start?</p><p>Thanks to SwiftUI's composable nature, one of things that we might want to start doing from the beginning is to define and use a <a href="https://www.invisionapp.com/inside-design/guide-to-design-systems/">Design System</a>: once we have one, building views becomes a matter of picking the right elements (from the system) and place them on screen.</p><p>In this article, let's see how we can start building one of the core components of a design system: a text field.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The start</h2><p>After studying the app design language from the design team, we come to the conclusion that there are two different appearances for our text fields in the app:<br>a "default" one, used when everything is ok, and an "error" one, used to tell the user that something is wrong.</p><p>Beside the appearance, all text fields have the same components: a title, a placeholder, and a border.</p><table><tbody><tr><td><img src="https://www.fivestars.blog/assets/posts/design-system/image0.png"/></td><td><img src="https://www.fivestars.blog/assets/posts/design-system/image1.png"/></td></tr></tbody></table><blockquote><p>The two text field appearances: default and error.</p></blockquote><p>With this knowledge we go ahead and build our own <code>FSTextField</code>:</p><pre><code><span class="keyword">struct</span> FSTextField: <span class="type">View</span> {
  <span class="keyword">var</span> title: <span class="type">LocalizedStringKey</span>
  <span class="keyword">var</span> placeholder: <span class="type">LocalizedStringKey</span> = <span class="string">""</span>
  <span class="keyword">@Binding var</span> text: <span class="type">String</span>
  <span class="keyword">var</span> appearance: <span class="type">Appearance</span> = .<span class="dotAccess">default</span>

  <span class="keyword">enum</span> Appearance {
    <span class="keyword">case</span> `default`
    case error
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">HStack</span> {
        <span class="type">Text</span>(title)
          .<span class="call">bold</span>()
        <span class="type">Spacer</span>()
      }

      <span class="type">TextField</span>(
        placeholder,
        text: $text
      )
      .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>, <span class="number">8</span>)
      .<span class="call">padding</span>(.<span class="dotAccess">vertical</span>, <span class="number">4</span>)
      .<span class="call">background</span>(
        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">8</span>, style: .<span class="dotAccess">continuous</span>)
          .<span class="call">strokeBorder</span>(borderColor)
      )
    }
  }

  <span class="keyword">var</span> borderColor: <span class="type">Color</span> {
    <span class="keyword">switch</span> appearance {
    <span class="keyword">case</span> .<span class="dotAccess">default</span>:
      <span class="keyword">return</span> .<span class="dotAccess">green</span>
    <span class="keyword">case</span> .<span class="dotAccess">error</span>:
      <span class="keyword">return</span> .<span class="dotAccess">red</span>
    }
  }
}
</code></pre><p><code>FSTextField</code> is defined as a <code>VStack</code> with a title (a <code>Text</code>) on top, and a SwiftUI <code>TextField</code> at the bottom: this declaration is clear and covers 100% of the known cases.</p><p>We're happy with <code>FSTextField</code>: we add a couple of previews and move to the next design system component.</p><h2>One week later</h2><p>One week pass and we discover (or we're given) two new variations of our text field: the first displays a glyph on the top trailing corner, vertically aligned with the title, and the other shows a message in the same spot:</p><table><tbody><tr><td><img src="https://www.fivestars.blog/assets/posts/design-system/image2.png"/></td><td><img src="https://www.fivestars.blog/assets/posts/design-system/image3.png"/></td></tr></tbody></table><p>Fair enough, we define two new views, <code>FSGlyphTextField</code> and <code>FSMessageTextField</code>, which cover these new cases:</p><pre><code><span class="keyword">struct</span> FSGlyphTextField: <span class="type">View</span> {
  <span class="keyword">var</span> title: <span class="type">LocalizedStringKey</span>
  <span class="keyword">var</span> symbolName: <span class="type">String</span>
  <span class="keyword">var</span> systemColor: <span class="type">Color</span> = <span class="type">Color</span>(.<span class="dotAccess">label</span>)
  <span class="keyword">var</span> placeholder: <span class="type">LocalizedStringKey</span> = <span class="string">""</span>
  <span class="keyword">@Binding var</span> text: <span class="type">String</span>
  <span class="keyword">var</span> appearance: <span class="type">FSTextField</span>.<span class="type">Appearance</span> = .<span class="dotAccess">default</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">HStack</span> {
        <span class="type">Text</span>(title)
          .<span class="call">bold</span>()
        <span class="type">Spacer</span>()
        <span class="type">Image</span>(systemName: symbolName)
          .<span class="call">foregroundColor</span>(systemColor)
      }

      <span class="type">TextField</span>(
        ...
      )
    }
  }

  <span class="keyword">var</span> borderColor: <span class="type">Color</span> {
    ...
  }
}

<span class="keyword">struct</span> FSMessageTextField: <span class="type">View</span> {
  <span class="keyword">var</span> title: <span class="type">LocalizedStringKey</span>
  <span class="keyword">var</span> message: <span class="type">LocalizedStringKey</span>
  <span class="keyword">@Binding var</span> text: <span class="type">String</span>
  <span class="keyword">var</span> appearance: <span class="type">FSTextField</span>.<span class="type">Appearance</span> = .<span class="dotAccess">default</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">HStack</span> {
        <span class="type">Text</span>(title)
          .<span class="call">bold</span>()
        <span class="type">Spacer</span>()
        <span class="type">Text</span>(message)
          .<span class="call">font</span>(.<span class="dotAccess">caption</span>)
      }

      <span class="type">TextField</span>(
        ...
      )
    }
  }

  <span class="keyword">var</span> borderColor: <span class="type">Color</span> {
    ...
  }
}
</code></pre><p>Our design system has now three text field definitions instead of one:<br>we could do better, but we can manage.</p><h2>One more week later</h2><p>Another week pass by and the design team adds two more variations to our text field: the first has no title, while the other has the usual title and a button on the trailing corner:</p><table><tbody><tr><td><img src="https://www.fivestars.blog/assets/posts/design-system/image4.png"/></td><td><img src="https://www.fivestars.blog/assets/posts/design-system/image5.png"/></td></tr></tbody></table><p>We could define two more text field views (e.g. <code>FSPlainTextField</code> and <code>FSButtonTextField</code>), however creating new views for each variation defeats the purpose of the design system:<br>what happens when the design changes and we must update, say, the title font, or perhaps the border color?</p><p>The more (text field) definitions we have, the harder it becomes to manage each component, and the easier it is to <em>forget</em> to update one (or more) variation(s).</p><h2>Generic text fields: core components</h2><p>With the current approach we're already taking advantage of SwiftUI composability, as we use all these variations when building screens, however we can go a step further and use composability also within our text fields definitions.</p><p>First, looking at the current variations, we see that there's one constant: the text field itself. Let's extract it from the definitions above:</p><pre><code><span class="keyword">struct</span> _FSTextField: <span class="type">View</span> {
  <span class="keyword">var</span> placeholder: <span class="type">LocalizedStringKey</span> = <span class="string">""</span>
  <span class="keyword">@Binding var</span> text: <span class="type">String</span>
  <span class="keyword">var</span> borderColor: <span class="type">Color</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">TextField</span>(
      placeholder,
      text: $text
    )
    .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>, <span class="number">8</span>)
    .<span class="call">padding</span>(.<span class="dotAccess">vertical</span>, <span class="number">4</span>)
    .<span class="call">background</span>(
      <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">8</span>, style: .<span class="dotAccess">continuous</span>)
        .<span class="call">strokeBorder</span>(borderColor)
    )
  }
}
</code></pre><table><tbody><tr><td><img src="https://www.fivestars.blog/assets/posts/design-system/image7.png"/></td><td><img src="https://www.fivestars.blog/assets/posts/design-system/image6.png"/></td></tr></tbody></table><blockquote><p>Our two <code>_FSTextField</code> variations.</p></blockquote><p><code>_FSTextField</code> is a wrapper around SwiftUI's <code>TextField</code> with our app design applied to it:<br>we define this view with an underscore "<code>_</code>" prefix (<code>_FSTextField</code>) to make it clear that this view shouldn't be used directly but, instead, it's an implementation detail of other views.</p><p>If we replace our previous <code>TextField</code> definitions with <code>_FSTextField</code>, this already helps:<br>in the future, when we want to update the text field corner radius for example, we will only need to change it within <code>_FSTextField</code> and all other views will automatically inherit the change.</p><h2>Generic text fields: composable views</h2><p>Looking at our text fields variations, we can group them in two categories:</p><ul><li>views that have something on top of <code>_FSTextField</code> (e.g. the title and a glyph)</li><li>views that have the plain <code>_FSTextField</code> and nothing else</li></ul><p>Let's define a new generic view that cover both variations, <code>FSTextField</code>:</p><pre><code><span class="keyword">struct</span> FSTextField&lt;TopContent: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">var</span> placeholder: <span class="type">LocalizedStringKey</span> = <span class="string">""</span>
  <span class="keyword">@Binding var</span> text: <span class="type">String</span>
  <span class="keyword">var</span> appearance: <span class="type">Appearance</span> = .<span class="dotAccess">default</span>
  <span class="keyword">var</span> topContent: <span class="type">TopContent</span>

  <span class="keyword">init</span>(
    placeholder: <span class="type">LocalizedStringKey</span> = <span class="string">""</span>,
    text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;,
    appearance: <span class="type">Appearance</span> = .<span class="dotAccess">default</span>,
    <span class="keyword">@ViewBuilder</span> topContent: () -&gt; <span class="type">TopContent</span>
  ) {
    <span class="keyword">self</span>.<span class="property">placeholder</span> = placeholder
    <span class="keyword">self</span>.<span class="property">_text</span> = text
    <span class="keyword">self</span>.<span class="property">appearance</span> = appearance
    <span class="keyword">self</span>.<span class="property">topContent</span> = <span class="call">topContent</span>()
  }

  <span class="keyword">enum</span> Appearance {
    <span class="keyword">case</span> `default`
    case error
  }
  
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      topContent
      <span class="type">_FSTextField</span>(
        placeholder: placeholder,
        text: $text,
        borderColor: borderColor
      )
    }
  }

  <span class="keyword">var</span> borderColor: <span class="type">Color</span> {
    <span class="keyword">switch</span> appearance {
    <span class="keyword">case</span> .<span class="dotAccess">default</span>:
      <span class="keyword">return</span> .<span class="dotAccess">green</span>
    <span class="keyword">case</span> .<span class="dotAccess">error</span>:
      <span class="keyword">return</span> .<span class="dotAccess">red</span>
    }
  }
}
</code></pre><p><code>FSTextField</code> is a <code>VStack</code> with a generic <code>TopContent</code> view on top and our <code>_FSTextField</code> at the bottom.</p><p>Thanks to this new definition we can place any view above our <code>_FSTextField</code>, what about a <code>Label</code> for example?</p><pre><code><span class="type">FSTextField</span>(placeholder: <span class="string">"Placeholder"</span>, text: $text) {
  <span class="type">Label</span>(<span class="string">"Label Title"</span>, systemImage: <span class="string">"star.fill"</span>)
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/design-system/imageLabel.png"/><p>Lastly, we need to take care of the view variation that has no content above <code>_FSTextField</code>, how do we address that?</p><p>As <code>VStack</code>s ignore <code>EmptyView</code>s, if we want to display just the <code>_FSTextField</code> and nothing else, we can pass an <a href="https://developer.apple.com/documentation/swiftui/emptyview"><code>EmptyView</code></a> instance as our <code>TopContent</code>:</p><pre><code><span class="type">FSTextField</span>(
  placeholder: <span class="string">"Placeholder"</span>,
  text: $myText
) {
  <span class="type">EmptyView</span>()
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/design-system/image4.png"/><p>This works because:</p><ul><li>A <code>VStack</code> with an <code>EmptyView</code> and <code>_FSTextField</code> is (visually) equivalent to a <code>VStack</code> with just a <code>_FSTextField</code></li><li>Any stack with just an element is (visually) equivalent to just the element itself</li></ul><p>Therefore writing:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span> {
    <span class="type">EmptyView</span>()
    <span class="type">_FSTextField</span>(...)
  }
}
</code></pre><p>is equivalent to:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">_FSTextField</span>(...)
}
</code></pre><p>We're building this design system and we know these tricks/details, however, we cannot ask our developers to have this deep knowledge as well:<br>to make their life easier, we can create a <code>FSTextField</code> extension that hides this <code>VStack</code> + <code>EmptyView</code> combo:</p><pre><code><span class="keyword">extension</span> <span class="type">FSTextField</span> <span class="keyword">where</span> <span class="type">TopContent</span> == <span class="type">EmptyView</span> {
  <span class="keyword">init</span>(
    placeholder: <span class="type">LocalizedStringKey</span> = <span class="string">""</span>,
    text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;,
    appearance: <span class="type">Appearance</span> = .<span class="dotAccess">default</span>
  ) {
    <span class="keyword">self</span>.<span class="property">placeholder</span> = placeholder
    <span class="keyword">self</span>.<span class="property">_text</span> = text
    <span class="keyword">self</span>.<span class="property">appearance</span> = appearance
    <span class="keyword">self</span>.<span class="property">topContent</span> = <span class="type">EmptyView</span>()
  }
}
</code></pre><p>Thanks to this extension, developers that want to display just the text field can now use this new initializer, without the need for the to know how <code>FSTextField</code> is implemented:</p><pre><code><span class="type">FSTextField</span>(placeholder: <span class="string">"Placeholder"</span>, text: $myText)
</code></pre><img src="https://www.fivestars.blog/assets/posts/design-system/image4.png"/><h2>Generic text fields: convenience initializers</h2><p>All other text field variations have some kind of <code>TopContent</code> to display.</p><p>We could stop here and ask the developer to define the content themselves each time, for example:</p><pre><code><span class="type">FSTextField</span>(
  placeholder: <span class="string">"Placeholder"</span>,
  text: $myText
) {
  <span class="type">HStack</span> {
    <span class="type">Text</span>(title)
      .<span class="call">bold</span>()
    <span class="type">Spacer</span>()
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/design-system/image0.png"/><p>...however, since all these variations have a <code>TopContent</code> with <code>title-space-something</code> pattern, we can do a little better with a new <code>FSTextField</code> extension:</p><pre><code><span class="keyword">extension</span> <span class="type">FSTextField</span> {
  <span class="keyword">init</span>&lt;TopTrailingContent: <span class="type">View</span>&gt;(
    title: <span class="type">LocalizedStringKey</span>,
    placeholder: <span class="type">LocalizedStringKey</span> = <span class="string">""</span>,
    text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;,
    appearance: <span class="type">Appearance</span> = .<span class="dotAccess">default</span>,
    <span class="keyword">@ViewBuilder</span> topTrailingContent: () -&gt; <span class="type">TopTrailingContent</span>
  ) <span class="keyword">where</span> <span class="type">TopContent</span> == <span class="type">HStack</span>&lt;<span class="type">TupleView</span>&lt;(<span class="type">Text</span>, <span class="type">Spacer</span>, <span class="type">TopTrailingContent</span>)&gt;&gt; {
    <span class="keyword">self</span>.<span class="property">placeholder</span> = placeholder
    <span class="keyword">self</span>.<span class="property">_text</span> = text
    <span class="keyword">self</span>.<span class="property">appearance</span> = appearance
    <span class="keyword">self</span>.<span class="property">topContent</span> = {
      <span class="type">HStack</span> {
        <span class="type">Text</span>(title)
          .<span class="call">bold</span>()
        <span class="type">Spacer</span>()
        <span class="call">topTrailingContent</span>()
      }
    }()
  }
}
</code></pre><p>This new initializer lets developers pass the title text directly as one of the <code>init</code> parameters, and then have the opportunity to define what else is placed on the top trailing corner via the new <code>topTrailingContent</code> parameter.</p><p>For example, our old <code>FSMessageTextField</code> can now be obtained with the following code:</p><pre><code><span class="type">FSTextField</span>(
  title: <span class="string">"Title"</span>, 
  placeholder: <span class="string">"Placeholder"</span>,
  text: $text, topTrailingContent: {
  <span class="type">Text</span>(<span class="string">"Message"</span>)
    .<span class="call">font</span>(.<span class="dotAccess">caption</span>)
})
</code></pre><img src="https://www.fivestars.blog/assets/posts/design-system/image3.png"/><p>As before, in case our developers would like to show just a <code>_FSTextField</code> and a title, they shouldn't need to know that they can pass an <code>EmptyView</code> instance as the <code>topTrailingContent</code> parameter, therefore it's better to create a new extension to take care of this scenario:</p><pre><code><span class="keyword">extension</span> <span class="type">FSTextField</span> {
  <span class="keyword">init</span>(
    title: <span class="type">LocalizedStringKey</span>,
    placeholder: <span class="type">LocalizedStringKey</span> = <span class="string">""</span>,
    text: <span class="type">Binding</span>&lt;<span class="type">String</span>&gt;,
    appearance: <span class="type">Appearance</span> = .<span class="dotAccess">default</span>
  ) <span class="keyword">where</span> <span class="type">TopContent</span> == <span class="type">HStack</span>&lt;<span class="type">TupleView</span>&lt;(<span class="type">Text</span>, <span class="type">Spacer</span>, <span class="type">EmptyView</span>)&gt;&gt; {
    <span class="keyword">self</span>.<span class="keyword">init</span>(
      title: title,
      placeholder: placeholder,
      text: text,
      appearance: appearance,
      topTrailingContent: <span class="type">EmptyView</span>.<span class="keyword">init</span>
    )
  }
}
</code></pre><p>Again, this works because <code>EmptyView</code>s are ignored when placed within stacks.</p><p>Thanks to this definition a <em>simple</em> text field + title combo (with no top trailing views) can be obtained via:</p><pre><code><span class="type">FSTextField</span>(title: <span class="string">"Title"</span>, placeholder: <span class="string">"Placeholder, text: $myText)</span>
</code></pre><img src="https://www.fivestars.blog/assets/posts/design-system/image0.png"/><p>Every other variation that we previously have defined with a new view can now be obtained directly via <code>FSTextField</code>:<br>when, in the future, the design team decides to update the title font, the title color, or the spacing between top content and <code>_FSTextField</code> for example, we will be able to update such detail in <strong>one</strong> place, and every other view will inherit the change.</p><p>Not only that, but thanks to our generic approach, future variations of our text field component won't require new definitions or changes in our design system.</p><p>A sample project with the design system defined in this article can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/Composing-SwiftUI-Views">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Like code, design is never finished:<br>thanks to Swift and SwiftUI we can build a solid, flexible, and intuitive design system that will help us build, compose, and update entire screens with a pace that wasn't possible before.</p><p>SwiftUI itself uses this very same approach on many of its definitions:</p><ul><li><code>Button</code>s' <code>init(_ titleKey: LocalizedStringKey, action: @escaping () -&gt; Void)</code> is a convenience initializer over <code>init(action: @escaping () -&gt; Void, label: () -&gt; Label)</code></li><li>lazy stacks are just a <a href="https://www.fivestars.blog/articles/lazy-stack-grid/">specific configuration of lazy grids</a></li><li>we've also seen how SwiftUI <a href="https://www.fivestars.blog/articles/optional-binding/">hides optional bindings</a> when they're not needed</li><li><a href="https://developer.apple.com/documentation/swiftui/list"><code>List</code></a> has one initializer for each possible use case (e.g. for <a href="https://www.fivestars.blog/articles/swiftui-hierarchy-list/">hierarchy lists</a>)</li></ul><p>...and many, many more.</p><p>Do you have a design system in your apps? What other approaches/patterns have you seen/used while building one? <a href="https://twitter.com/zntfdr">Please let me know üòÉ</a></p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/warn_unqualified_access</guid><title>@warn_unqualified_access</title><description></description><link>https://www.fivestars.blog/articles/warn_unqualified_access</link><pubDate>Tue, 6 Oct 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>Credits to <a href="https://twitter.com/kingatarthur/status/1306376134427246592">Matt Young</a> for the tip!</p></blockquote><p>In recent Swift releases we've seen a surge of new attributes such as <code>@unknown</code>, <code>@propertyWrapper</code> and <code>@main</code> to name a few:<br>while all of these are new and exciting on their own, in this article let's focus on a lesser know, older, but equally useful attribute, <code>@warn_unqualified_access</code>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Introduction</h2><p><a href="https://github.com/apple/swift/commit/5c71b75b250ef5d564a9bc7bc451fb72227de2fd">Quietly introduced in Swift 2</a>, <code>@warn_unqualified_access</code> helps us remove ambiguity when calling top-level functions and/or static/instance methods.</p><p>Imagine building a new app that has a top-level function, <code>doSomething</code>:</p><pre><code><span class="keyword">@main
struct</span> FiveStarsApp: <span class="type">App</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
    <span class="type">WindowGroup</span> {
      <span class="type">ContentView</span>()
    }
  }
}

<span class="keyword">func</span> doSomething() {
  <span class="call">print</span>(<span class="string">"top level function"</span>)
  <span class="comment">// ...</span>
}
</code></pre><blockquote><p>This example uses SwiftUI, but <code>@warn_unqualified_access</code> can be used everywhere, as it's a Swift feature.</p></blockquote><p>Now, one of our views also declares and uses a <code>doSomething</code> method with the same signature:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(action: doSomething) {
      <span class="type">Text</span>(<span class="string">"Tap me"</span>)
    }
  }

  <span class="keyword">func</span> doSomething() {
    <span class="call">print</span>(<span class="string">"instance method"</span>)
    <span class="comment">// ...</span>
  }
}
</code></pre><p>When the button is tapped, <code>doSomething</code> is called: but which one? Previous experiences in the same scenario might help us here, and we probably know that the instance method has priority over the top-level function.</p><p>This was a quick and simple example, but imagine working on a team and having a view with several more declarations, maybe a team member wasn't aware of the instance method and meant to call the top-level function instead: how can we prevent such scenarios?</p><p>This is where <code>@warn_unqualified_access</code> comes in: adding this attribute to any method declaration will trigger a warning at call site when its qualifier is not specified (a.k.a. when the call doesn't specify either the intended instance, class, or module).</p><p>Going back to our example, let's add our <em>new</em> attribute to the function declaration:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(action: doSomething) {
      <span class="type">Text</span>(<span class="string">"Tap me"</span>)
    }
  }

  <span class="keyword">@warn_unqualified_access
  func</span> doSomething() {
    <span class="call">print</span>(<span class="string">"instance method"</span>)
    <span class="comment">// ...</span>
  }
}
</code></pre><p>Building the project will now trigger a warning on the button's action, it reads: <code>Use of 'doSomething' treated as a reference to instance method in struct 'ContentView'</code>, and then proposes two actions:</p><ol><li>Use 'self.' to silence this warning</li><li>Use 'FiveStars.' to reference the global function</li></ol><p>Even if a team member wasn't aware of the instance method at first, this warning will make sure that not only they become aware of if, but also provide the two possible solutions to fix the warning.</p><h3>A static method example</h3><p>For completeness's sake, the following is an example where, instead of an instance method, a class method is declared with the same attribute (note how everything is now <code>static</code>):</p><pre><code><span class="keyword">class</span> FSClass {
  <span class="keyword">static func</span> main() {
    <span class="call">doSomething</span>() <span class="comment">// this will trigger a warning</span>
  }

  <span class="keyword">@warn_unqualified_access
  static func</span> doSomething() {
    <span class="call">print</span>(<span class="string">"class method"</span>)
    <span class="comment">/// ...</span>
  }
}
</code></pre><h2>Origin</h2><p>The reason of this attribute goes back to macOS's <a href="https://developer.apple.com/documentation/appkit/nsview#//apple_ref/occ/instm/NSView/print:"><code>NSView</code></a>, where the Objective-C <code>NSView</code>'s <a href="https://developer.apple.com/documentation/appkit/nsview/1483705-print?language=objc"><code>print:</code></a> instance method was translated to <code>print(_:)</code> in Swift:<br>since <code>Swift.print</code> is a top level function, when used within a <code>NSView</code> subclass, it's lower priority than <code>NSView</code>'s one, meaning that calling <code>print(..)</code> would not print on the debugger, but instead it triggered the <a href="https://stackoverflow.com/questions/31087601/calling-print-inside-nsview-opens-print-dialog">print dialog</a>, yikes!</p><blockquote><p>This was such an annoying issue that in Xcode 9 the <code>NSView</code>'s method Swift translation <a href="https://stackoverflow.com/a/50898343/5840990">has been renamed</a> to <a href="https://developer.apple.com/documentation/appkit/nsview/1483705-printview"><code>printView(_:)</code></a>, ending the ambiguity once for all.</p></blockquote><h2>Real example: min/max</h2><p>Swift provides <code>min</code> and <code>max</code>, two generic top level functions that take in two <code>Comparable</code> elements.</p><p><a href="https://developer.apple.com/documentation/swift/anysequence/1689234-min">Pretty</a> <a href="https://developer.apple.com/documentation/swift/range/2996631-max">much</a> <a href="https://developer.apple.com/documentation/swift/flattensequence/1690010-min">every</a> <a href="https://developer.apple.com/documentation/swift/anyiterator/2885896-max">Swift's</a> <a href="https://developer.apple.com/documentation/swift/sequence"><code>Sequence</code></a> variation also provide <code>min</code> <code>max</code> methods: to avoid any confusion, all of them have been marked with <code>@warn_unqualified_access</code>.</p><p>Adding <code>@warn_unqualified_access</code> here helps avoiding disambiguation when we invoke a <code>min</code>/<code>max</code> method within any of our own sequences.</p><h2>SwiftUI</h2><p>In <a href="https://www.fivestars.blog/articles/impossible-swiftui-views/"><code>Impossible SwiftUI views</code></a> we've seen how easy it is to create views that compile fine but reliably crash our app:<br>while preventing such scenarios might be tricky without changing SwiftUI's declarations, we can start from our own <code>View</code> extensions.</p><p>Imagine to have a design system, where all <code>Text</code> instances will use a given <code>Font</code> and foreground <code>Color</code>, since this is very common, we've decided to create a <code>View</code> extension:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> textStyle(
    <span class="keyword">_</span> font: <span class="type">Font</span>? = <span class="keyword">nil</span>,
    foregroundColor: <span class="type">Color</span> = .<span class="dotAccess">black</span>
  ) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">self</span>
      .<span class="call">font</span>(font)
      .<span class="call">foregroundColor</span>(foregroundColor)
  }
}
</code></pre><p>However, this extension won't stop us to declare views like the following:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
    <span class="call">textStyle</span>() <span class="comment">// &lt;-- missing the "."</span>
  }
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">textStyle</span>() <span class="comment">// &lt;-- missing the actual `Text` component</span>
  }
}
</code></pre><p>Which will end up in a guaranteed crash.</p><p>If we now add <code>@warn_unqualified_access</code> to our <code>textStyle</code> method declaration, this changes, as we now get a warning at compile time:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(<span class="string">"Hello, world!"</span>)
    <span class="call">textStyle</span>() <span class="comment">// Warning: Use of 'textStyle' treated as a reference to instance method in protocol 'View'</span>
  }
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">textStyle</span>() <span class="comment">// Warning: Use of 'textStyle' treated as a reference to instance method in protocol 'View'</span>
  }
}
</code></pre><p>We can still write <code>self.textStyle()</code>, inhibiting the warning and still ending up in a crash, but most likely, this attribute will help us avoid writing bad declarations by mistake.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>In this article we've explored <code>@warn_unqualified_access</code>, a little known Swift attribute that can help us write better and clearer Swift code.</p><p>Do you use <code>@warn_unqualified_access</code>? Have you seen any other cool example? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/lazy-stack-grid</guid><title>Lazy stacks secrets</title><description></description><link>https://www.fivestars.blog/articles/lazy-stack-grid</link><pubDate>Tue, 29 Sep 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>A couple of weeks ago I've updated <a href="https://github.com/zntfdr/AStack"><code>AStack</code></a>, a micro library that switches any SwiftUI stack axis when the environment <a href="https://developer.apple.com/documentation/swiftui/environmentvalues/sizecategory">content size category</a> is among the accessibility ones.</p><p>In doing so I've noticed something that I missed before: lazy stacks initializers offer a <code>pinnedViews</code> parameter, which is suspiciously identical to what lazy grids offer.</p><p>This discovery made me think of <a href="https://pspdfkit.com/blog/2017/the-case-for-deprecating-uitableview/">two</a> <a href="https://pspdfkit.com/blog/2020/the-case-for-lists-in-uicollectionview/">articles</a> from the great <a href="https://pspdfkit.com/blog/">PSPDFKit blog</a>, highlighting how Apple is moving away from table views and going all in with collections:<br>image having this knowledge and being responsible of building a brand new UI framework, you certainly wouldn't repeat history again, would you?</p><p>In this article let's compare lazy stacks with their counterpart, lazy grids.</p><blockquote><p>We will focus on the vertical variant of these views: the same concepts are equivalent for the horizontal ones.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Definitions</h2><p>The following definitions come from the official documentation:</p><ul><li><a href="https://developer.apple.com/documentation/swiftui/lazyvstack"><code>LazyVStack</code></a>: A view that arranges its children in a line that grows vertically, creating items only as needed</li><li><a href="https://developer.apple.com/documentation/swiftui/lazyvgrid"><code>LazyVGrid</code></a>: A container view that arranges its child views in a grid that grows vertically, creating items only as needed</li></ul><p>We've basically read the same sentence twice:</p><ul><li>the second half of the definitions is an exact match, word for word</li><li>the first half varies slightly: <code>LazyVStack</code> arranges its children <em>in a line that grows vertically</em>, while <code>LazyVGrid</code> arranges its children <em>in a grid that grows vertically</em></li></ul><p>The difference is clear:<br>one is a grid, the other is a line (or, dare I say, a <em>column</em>), everything else is identical.</p><h2>Initializers</h2><p>Here are the initializers:</p><pre><code><span class="keyword">public struct</span> LazyVStack&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">public init</span>(
    alignment: <span class="type">HorizontalAlignment</span> = .<span class="dotAccess">center</span>, 
    spacing: <span class="type">CGFloat</span>? = <span class="keyword">nil</span>, 
    pinnedViews: <span class="type">PinnedScrollableViews</span> = .<span class="keyword">init</span>(), 
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  )
}

<span class="keyword">public struct</span> LazyVGrid&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">public init</span>(
    columns: [<span class="type">GridItem</span>], 
    alignment: <span class="type">HorizontalAlignment</span> = .<span class="dotAccess">center</span>, 
    spacing: <span class="type">CGFloat</span>? = <span class="keyword">nil</span>, 
    pinnedViews: <span class="type">PinnedScrollableViews</span> = .<span class="keyword">init</span>(), 
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  )
}
</code></pre><p>Once again, a near exact match:<br>the only difference is an extra parameter on <code>LazyVGrid</code>, <code>columns</code>, where we pass the grid column configuration, telling SwiftUI how many columns we would like and their size.</p><blockquote><p>For a in depth look at grids and how they work, please refer to <a href="https://swiftui-lab.com/impossible-grids/">this great article</a> by <a href="https://twitter.com/SwiftUILab">Javier Nigro</a>.</p></blockquote><h2>Making LazyVGrid mock LazyVStack</h2><p>We've seen how, on the surface, these views are nearly identical. Observing how <code>LazyVStack</code> behaves in practice, it's similar to a grid with one column, a.k.a. a flexible size <code>GridItem</code>: what if this is really it?</p><p>We now define <code>LazyVStackMock</code>, a view that matches this exact definition:</p><pre><code><span class="keyword">public struct</span> LazyVStackMock&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">let</span> alignment: <span class="type">HorizontalAlignment</span>
  <span class="keyword">let</span> spacing: <span class="type">CGFloat</span>?
  <span class="keyword">let</span> pinnedViews: <span class="type">PinnedScrollableViews</span>
  <span class="keyword">let</span> content: <span class="type">Content</span>

  <span class="keyword">public init</span>(
    alignment: <span class="type">HorizontalAlignment</span> = .<span class="dotAccess">center</span>,
    spacing: <span class="type">CGFloat</span>? = <span class="keyword">nil</span>,
    pinnedViews: <span class="type">PinnedScrollableViews</span> = .<span class="keyword">init</span>(),
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  ) {
    <span class="keyword">self</span>.<span class="property">alignment</span> = alignment
    <span class="keyword">self</span>.<span class="property">spacing</span> = spacing
    <span class="keyword">self</span>.<span class="property">pinnedViews</span> = pinnedViews
    <span class="keyword">self</span>.<span class="property">content</span> = <span class="call">content</span>()
  }

  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">LazyVGrid</span>(
      columns: [<span class="type">GridItem</span>(.<span class="call">flexible</span>())],
      alignment: alignment,
      spacing: spacing,
      pinnedViews: pinnedViews,
      content: { content }
    )
  }
}
</code></pre><blockquote><p><code>LazyVStackMock</code>'s body is a <code>LazyVGrid</code> with one column flexible size <code>GridItem</code></p></blockquote><h3>Comparing LazyVStack with LazyVStackMock</h3><p>Did we just reinvent <code>LazyVStack</code>? This is our testing ground:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
      <span class="type">LazyVStack</span> {
          <span class="type">Section</span>(header: <span class="call">header</span>(title: <span class="string">"Original"</span>)) { content }
      }
      <span class="type">LazyVStackMock</span> {
          <span class="type">Section</span>(header: <span class="call">header</span>(title: <span class="string">"Mock"</span>)) { content }
      }
    }
    .<span class="call">font</span>(.<span class="dotAccess">title</span>)
  }

  <span class="keyword">var</span> content: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ForEach</span>(<span class="number">1</span>...<span class="number">10</span>, id: \.<span class="keyword">self</span>) { count <span class="keyword">in</span>
      <span class="type">Label</span>(<span class="string">"Placeholder</span> \(count)<span class="string">"</span>, colorfulSystemImage: <span class="string">"leaf.fill"</span>)
    }
  }

  <span class="keyword">func</span> header(title: <span class="type">String</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(verbatim: title)
      .<span class="call">bold</span>()
      .<span class="call">padding</span>(.<span class="dotAccess">horizontal</span>)
      .<span class="call">padding</span>(.<span class="dotAccess">vertical</span>, <span class="number">4</span>)
      .<span class="call">foregroundColor</span>(.<span class="dotAccess">white</span>)
      .<span class="call">background</span>(
        <span class="type">Capsule</span>().<span class="call">foregroundColor</span>(.<span class="dotAccess">green</span>)
      )
  }
}
</code></pre><blockquote><p>We're using the <code>Label</code> extension introduced in <a href="https://www.fivestars.blog/articles/label/">last week's article</a></p></blockquote><img src="https://www.fivestars.blog/assets/posts/lazy-lie/image1.png"/><p>If we run the test as is, we will have an identical result.</p><p>Let's see what happens if we specify other parameters:</p><ul><li>Alignment (we add <code>alignment: .leading</code>)</li></ul><img src="https://www.fivestars.blog/assets/posts/lazy-lie/image2.png"/><ul><li>Spacing (we add <code>spacing: 20</code> )</li></ul><img src="https://www.fivestars.blog/assets/posts/lazy-lie/image3.png"/><ul><li>Pinned views (we add <code>pinnedViews: [.sectionHeaders]</code>)</li></ul><img src="https://www.fivestars.blog/assets/posts/lazy-lie/image1.png"/><p>We still have a match even if we add everything together, put each stack in a <code>ScrollView</code>, and add several more items:</p><img src="https://www.fivestars.blog/assets/posts/lazy-lie/final.gif"/><blockquote><p>In the video the content size was put to <code>ExtraSmall</code> to make the view fit nicely in the screen.</p></blockquote><p>The complete project can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/Stack-vs-Grid">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>The <a href="https://en.wikipedia.org/wiki/Duck_test">duck test</a> says "<em>If it looks like a duck, swims like a duck, and quacks like a duck, then it probably is a duck.</em>":<br>while we don't have access to SwiftUI's source code, our test has shown that our <code>LazyVStackMock</code>, which is just a one-column <code>LazyVGrid</code> in disguise, perfectly matches <code>LazyVStack</code> in all scenarios.</p><p>We cannot tell for sure that this is actually the case, but I still find it super interesting that SwiftUI's lazy stacks really are just a specific implementation of their grid counterparts.</p><p>A framework goal is to empower adopters to build great things with as little friction as possible:<br>the SwiftUI team could have told us to create a lazy grid with one flexible <code>GridItem</code> every time we need a one column/row layout, but, instead, having these lazy stacks backed in makes it easier (and faster!) to create such common layouts, all without requiring to know how grids work, or even about their existence.</p><h2>What about lists?</h2><p>If, from the preamble, you've been wondering about <code>List</code>s: yes! You'd be completely right: this component sounds a lot like the SwiftUI's version of UIKit's table view.</p><p><code>List</code> also shares the same path with <code>UITableView</code>:</p><ul><li><code>UITableView</code> was introduced in iPhone OS 2.0 (in 2008), while <code>UICollectionView</code> was introduced in iOS 6.0 (six years later).</li><li><code>List</code> was introduced along SwiftUI in 2019, while lazy stacks/grids came an year later.</li></ul><p>Does it mean that <code>List</code> is going to be deprecated as well? Well, we haven't seen the deprecation of <code>UITableView</code> yet, so it's hard to say when/if this will ever happen.</p><p>However I can guarantee that the answer is <em>not for the time being</em>:<br>while <code>ScrollView</code> + lazy stacks are much more flexible and customizable than <code>List</code>s, <code>List</code>s are the go to place if we're after the iOS/system look, along with various <a href="https://developer.apple.com/documentation/swiftui/liststyle">list styles</a>, and other features such as tap highlight, and swipe actions (all of which <code>ScrollView</code>s don't natively support yet).</p><p>Therefore SwiftUI's lazy views and <code>ScrollView</code> need to gain even more functionality and flexibility if we want this to ever happen, in the meanwhile, I can't wait to see what SwiftUI will bring us next!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/label</guid><title>Label</title><description></description><link>https://www.fivestars.blog/articles/label</link><pubDate>Tue, 22 Sep 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>One of the new SwiftUI components from this year is <a href="https://developer.apple.com/documentation/swiftui/label"><code>Label</code></a>. The SwiftUI team did is a great job with <a href="https://developer.apple.com/documentation/swiftui/label"><code>Label</code>'s documentation</a>: if you're not familiar with this view yet, please <a href="https://developer.apple.com/documentation/swiftui/label">have a read at it first</a>.</p><p><code>Label</code> combines a text and and an image in a single view, it also adapts based on the context (e.g. if it's put on a toolbar) and dynamic type.</p><img src="https://www.fivestars.blog/assets/posts/label/image0.png"/><p>In this article, let's explore this view beyond the basics.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Initializers</h2><p><code>Label</code> comes with six initializers:</p><ul><li>the first four offer all possible combinations of text as <a href="https://developer.apple.com/documentation/swift/stringprotocol"><code>StringProtocol</code></a> or <a href="https://developer.apple.com/documentation/swiftui/localizedstringkey"><code>LocalizedStringKey</code></a>, and an image from an assets catalog or SF Symbols</li><li>the most flexible initializer takes two generics views, <em>no strings attached</em></li><li>the last initializer takes in a <a href="https://developer.apple.com/documentation/swiftui/labelstyleconfiguration"><code>LabelStyleConfiguration</code></a></li></ul><p>All initializers have their place and use: we will cover all of them in this article.</p><h2>Label styles</h2><p>Unless we're in a special context (e.g. a navigation bar), by default both the <code>Label</code> title and image are displayed.</p><p>If we want to show only one of the two components (either only the image, or only the title), or change our <code>Label</code> appearance in another way, we can do so via the <a href="https://developer.apple.com/documentation/swiftui/view/labelstyle(_:)"><code>labelStyle(_:)</code></a> view modifier:<br>this modifier accepts a <a href="https://developer.apple.com/documentation/swiftui/labelstyle"><code>LabelStyle</code></a> instance.</p><p><code>LabelStyle</code> tells SwiftUI how we would like the <code>Label</code> to be drawn on screen, by default we have three options:</p><ul><li><code>IconOnlyLabelStyle()</code></li><li><code>TitleOnlyLabelStyle()</code></li><li><code>DefaultLabelStyle()</code></li></ul><p>The names are self-explanatory. These backed-in styles are mutually exclusive: if multiple are applied to the same <code>Label</code>, only the closest one to the <code>Label</code> will take effect.</p><pre><code><span class="comment">// Only `IconOnlyLabelStyle()` will be applied to the label:</span>
<span class="type">Label</span>(<span class="string">"Title"</span>, systemImage: <span class="string">"moon.circle.fill"</span>) 
  .<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">TitleOnlyLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">DefaultLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/label/image1.png"/><p>As <code>LabelStyle</code> is a protocol, we can define our own styles:</p><pre><code><span class="keyword">public protocol</span> LabelStyle {
    <span class="keyword">associatedtype</span> Body: <span class="type">View</span>

    <span class="keyword">func</span> makeBody(configuration: <span class="type">Self</span>.<span class="type">Configuration</span>) -&gt; <span class="type">Self</span>.<span class="type">Body</span>

    <span class="keyword">typealias</span> Configuration = <span class="type">LabelStyleConfiguration</span>
}
</code></pre><p>Similarly to <a href="https://developer.apple.com/documentation/swiftui/viewmodifier"><code>ViewModifier</code></a>, <code>LabelStyle</code> requires a <code>makeBody(configuration:)</code> method, which gives us the opportunity to define our own label style.</p><p><code>makeBody(configuration:)</code> takes in a <a href="https://developer.apple.com/documentation/swiftui/labelstyleconfiguration"><code>LabelStyleConfiguration</code></a> instance, which is the same parameter accepted by the last <code>Label</code> initializer we've listed above.</p><p>This configuration carries the complete set of instructions that defines the <code>Label</code> up to this point.</p><p>We can't define a brand new configuration ourselves, this is reserved to SwiftUI, however we do have access to the current components of the <code>Label</code>, the image (named <code>icon</code>) and the title:</p><pre><code><span class="keyword">public struct</span> LabelStyleConfiguration {
  <span class="comment">/// A type-erased title view of a label.</span>
  <span class="keyword">public var</span> title: <span class="type">LabelStyleConfiguration</span>.<span class="type">Title</span> { <span class="keyword">get</span> }

  <span class="comment">/// A type-erased icon view of a label.</span>
  <span class="keyword">public var</span> icon: <span class="type">LabelStyleConfiguration</span>.<span class="type">Icon</span> { <span class="keyword">get</span> }
}
</code></pre><p>Thanks to this configuration, our <code>LabelStyle</code> is applied <strong>on top</strong> of the current style.</p><p>For example, here we build a <code>LabelStyle</code> that adds a shadow to the entire <code>Label</code>:</p><pre><code><span class="keyword">struct</span> ShadowLabelStyle: <span class="type">LabelStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Label</span>(configuration)
      .<span class="call">shadow</span>(color: <span class="type">Color</span>.<span class="property">gray</span>.<span class="call">opacity</span>(<span class="number">0.9</span>), radius: <span class="number">4</span>, x: <span class="number">0</span>, y: <span class="number">5</span>)
  }
}
</code></pre><blockquote><p>This is the only place where we can use this <code>Label</code> initializer</p></blockquote><p>As <code>ShadowLabelStyle</code> is a styling on top of the current <code>LabelStyle</code>, it will be applied to whatever the <code>Label</code> currently is.</p><p>Therefore, if we use it along with <code>IconOnlyLabelStyle</code> for example, the final result will be a <code>Label</code> with just the icon and our shadow:</p><pre><code><span class="type">Label</span>(<span class="string">"Title"</span>, systemImage: <span class="string">"moon.circle.fill"</span>)
  .<span class="call">labelStyle</span>(<span class="type">ShadowLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/label/image2.png"/><h3>Label style erasers</h3><p>The <code>.labelStyles</code> declaration order is important: previously we've seen how the three backed-in styles are mutually exclusive, what this really means is that in their own definition, they don't use the configuration passed in <code>makeBody(configuration:)</code>, but will create a new one instead.</p><p>In other words, <code>IconOnlyLabelStyle</code>, <code>TitleOnlyLabelStyle</code>, and <code>DefaultLabelStyle</code> act as style erasers: once applied, any previous style is not carried over.</p><p>Going back to our <code>ShadowLabelStyle</code> example:</p><pre><code><span class="type">Label</span>(<span class="string">"Title"</span>, systemImage: <span class="string">"moon.circle.fill"</span>)
  .<span class="call">labelStyle</span>(<span class="type">ShadowLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/label/image2.png"/><p>will output the <code>Label</code> icon with a shadow.</p><pre><code><span class="type">Label</span>(<span class="string">"Title"</span>, systemImage: <span class="string">"moon.circle.fill"</span>)
  .<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>()) <span class="comment">// &lt;- the label style order has been swapped</span>
  .<span class="call">labelStyle</span>(<span class="type">ShadowLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/label/image1.png"/><p>will output the <code>Label</code> icon with <strong>no</strong> shadow.</p><p>Since we're using a style eraser, SwiftUI won't even bother to apply our style first, this can be verified by adding a breaking point in <code>ShadowLabelStyle</code>'s <code>makeBody(configuration:)</code> implementation: SwiftUI won't call our method at all.</p><p>This is in line with what <a href="https://www.fivestars.blog/articles/preferencekey-reduce/">we've seen with SwiftUI's preference keys</a>: SwiftUI always strive to do the least amount of work possible.</p><h3>Can we define our own style eraser?</h3><p>As mentioned above, only SwiftUI can create new configurations, however there's a simple trick that will make any custom style also a style eraser: apply one of the native style erasers in our <code>makeBody(configuration:)</code> implementation.</p><pre><code><span class="keyword">struct</span> ShadowEraseLabelStyle: <span class="type">LabelStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Label</span>(configuration)
      .<span class="call">shadow</span>(color: <span class="type">Color</span>.<span class="property">gray</span>.<span class="call">opacity</span>(<span class="number">0.9</span>), radius: <span class="number">4</span>, x: <span class="number">0</span>, y: <span class="number">5</span>)
      .<span class="call">labelStyle</span>(<span class="type">DefaultLabelStyle</span>()) <span class="comment">// &lt;- ‚ú®</span>
  }
}
</code></pre><p>In this example we force our <code>Label</code> to display both the text and the icon, along with our shadow, any other style applied previously is ignored:</p><pre><code><span class="type">Label</span>(<span class="string">"Title"</span>, systemImage: <span class="string">"moon.circle.fill"</span>)
  .<span class="call">labelStyle</span>(<span class="type">ShadowEraseLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">TitleOnlyLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/label/image4.png"/><p>Again, since our style now acts as a style eraser, it won't be applied on top of to the current style, but will start with a clean <code>Label</code> instead.</p><h3>LabelStyleConfiguration's icon and title style</h3><p>We might have tried to erase the style also by passing the two configuration views to a new <code>Label</code>:</p><pre><code><span class="keyword">struct</span> ShadowLabelTryStyle: <span class="type">LabelStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Label</span>(
      title: { configuration.<span class="property">icon</span> },
      icon: { configuration.<span class="property">title</span> }
    )
    .<span class="call">shadow</span>(color: <span class="type">Color</span>.<span class="property">gray</span>.<span class="call">opacity</span>(<span class="number">0.9</span>), radius: <span class="number">4</span>, x: <span class="number">0</span>, y: <span class="number">5</span>)
  }
}
</code></pre><p>with our view body:</p><pre><code><span class="type">Label</span>(<span class="string">"Title"</span>, systemImage: <span class="string">"moon.circle.fill"</span>)
  .<span class="call">labelStyle</span>(<span class="type">ShadowLabelTryStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/label/image2.png"/><p>Interestingly, this would not have worked:<br>it turns out that <code>configuration.icon</code> and <code>configuration.title</code> carry over the whole configuration style.</p><p>In the example above the <code>title</code> view would have been hidden, despite us creating a new view <code>Label</code> without passing directly the configuration itself.</p><p>To further prove this, let's define a new style that all it does is swapping the <code>Label</code>'s' <code>title</code> with its <code>icon</code>:</p><pre><code><span class="keyword">struct</span> SwapLabelStyle: <span class="type">LabelStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Label</span>(
      title: { configuration.<span class="property">icon</span> },
      icon: { configuration.<span class="property">title</span> }
    )
  }
}
</code></pre><blockquote><p>The new label has the original title as its icon, and the original icon as its title.</p></blockquote><p>Now imagine this view body:</p><pre><code><span class="type">Label</span>(<span class="string">"Title"</span>, systemImage: <span class="string">"moon.circle.fill"</span>)
  .<span class="call">labelStyle</span>(<span class="type">SwapLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())
</code></pre><p>What we expect the final outcome to be?</p><p>We first apply <code>IconOnlyLabelStyle</code>, therefore the title <code>"Title"</code> is hidden, while the image <code>"moon.circle.fill"</code> is shown.<br>It doesn't matter that we swap them in <code>SwapLabelStyle</code>: the user will see the original icon, despite being actually the title in the <code>SwapLabelStyle</code> <code>Label</code>.</p><img src="https://www.fivestars.blog/assets/posts/label/image1.png"/><h3>Truly custom styles</h3><p>For completeness, I must point out that <code>LabelStyle</code>'s <code>makeBody(configuration:)</code> only requires <code>some View</code> to be returned, it doesn't require a <code>Label</code> (or a <code>Label</code> with a few modifiers).</p><p>This means that really we can do whatever we want with it: what about turning our label into a <code>HStack</code>?</p><pre><code><span class="keyword">struct</span> HStackLabelStyle: <span class="type">LabelStyle</span> {
  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
      configuration.<span class="property">icon</span>
      <span class="type">Spacer</span>()
      configuration.<span class="property">title</span>
    }
  }
}
</code></pre><p>And here we use it as any other <code>Label</code>:</p><pre><code><span class="type">Label</span>(<span class="string">"Title"</span>, systemImage: <span class="string">"moon.circle.fill"</span>)
  .<span class="call">labelStyle</span>(<span class="type">HStackLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/label/image5.png"/><p>While this works, this is the perfect opportunity to point out that <code>.labelStyle</code> modifiers work only if they're applied to a <code>Label</code>:<br>since <code>HStackLabelStyle</code> doesn't return a <code>Label</code>, any further label style applied, including erasing ones, will be ignored.</p><pre><code><span class="type">Label</span>(<span class="string">"Title"</span>, systemImage: <span class="string">"moon.circle.fill"</span>)
  .<span class="call">labelStyle</span>(<span class="type">HStackLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">ShadowLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/label/image5.png"/><p>Applying them before <code>HStackLabelStyle</code> would work:</p><pre><code><span class="type">Label</span>(<span class="string">"Title"</span>, systemImage: <span class="string">"moon.circle.fill"</span>)
  .<span class="call">labelStyle</span>(<span class="type">ShadowLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">IconOnlyLabelStyle</span>())
  .<span class="call">labelStyle</span>(<span class="type">HStackLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/label/image2.png"/><p>However, if we do this, we probably shouldn't use <code>Label</code> in the first place.</p><h2>Accessible Labels</h2><p>While <code>LabelStyle</code> is mainly thought for adding new styles, we can also use it to make our <code>Label</code>s more accessible.</p><p>For example, when the system content size is among the accessibility ones, we might want to strip any <code>Label</code> effect and hide the icon, leaving the bare minimum necessary for the user to go on with their task.</p><p>This is a great example where <code>LabelStyle</code> excels, along with our <a href="https://www.fivestars.blog/articles/conditional-modifiers/">conditional modifier extension</a>:</p><pre><code><span class="keyword">struct</span> AccessibleLabelStyle: <span class="type">LabelStyle</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">sizeCategory</span>) <span class="keyword">var</span> sizeCategory: <span class="type">ContentSizeCategory</span>

  <span class="keyword">func</span> makeBody(configuration: <span class="type">Configuration</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Label</span>(configuration)
      .<span class="call">if</span>(sizeCategory.<span class="property">isAccessibilityCategory</span>) { $0.<span class="call">labelStyle</span>(<span class="type">TitleOnlyLabelStyle</span>()) }
  }
}
</code></pre><p>Here's an example with all possible sizes:</p><img src="https://www.fivestars.blog/assets/posts/label/image6.png"/><h2>Label Extensions</h2><p>Despite label styles being the main way to customize and standardize our labels, sometimes we can get away by creating a <code>Label</code> extension instead.</p><p>For example, among <a href="https://www.wwdcnotes.com/notes/wwdc20/10207/">SF Symbols 2 updates</a>, this year we've gained color variants for some of them:<br>unfortunately, out of the box, <code>Label</code> defaults to display the mono color variant with no way to change it.</p><p>This can be addressed via <code>Label</code> extension:</p><pre><code><span class="keyword">extension</span> <span class="type">Label</span> <span class="keyword">where</span> <span class="type">Title</span> == <span class="type">Text</span>, <span class="type">Icon</span> == <span class="type">Image</span> {
  <span class="keyword">init</span>(<span class="keyword">_</span> title: <span class="type">LocalizedStringKey</span>, colorfulSystemImage systemImage: <span class="type">String</span>) {
    <span class="keyword">self</span>.<span class="keyword">init</span> {
      <span class="type">Text</span>(title)
    } icon: {
      <span class="type">Image</span>(systemName: systemImage)
        .<span class="call">renderingMode</span>(.<span class="dotAccess">original</span>)
    }
  }
}
</code></pre><p>Which we can use by replacing the <code>systemImage</code> argument name with <code>colorfulSystemImage</code>, for example:</p><pre><code><span class="type">Label</span>(<span class="string">"Title"</span>, colorfulSystemImage: <span class="string">"moon.circle.fill"</span>)
  .<span class="call">labelStyle</span>(<span class="type">ShadowLabelStyle</span>())
</code></pre><img src="https://www.fivestars.blog/assets/posts/label/image7.png"/><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>If I told you at the beginning of this article that you were about to read ~1500 words on <code>Label</code>, I bet you wouldn't believe me: it's <em>just</em> an icon and a text, right?</p><p><code>Label</code> is another example of SwiftUI looking incredibly simple on the surface, but actually hiding lots of complexity and flexibility behind the scenes.</p><p>This shouldn't surprise us anymore: and yet here we are, wondering what else we can discover about SwiftUI, I hope you <a href="https://www.fivestars.blog/feed.rss">will join me</a> in this journey.</p><p>Thanks for reading and please <a href="https://twitter.com/zntfdr">let me know</a> if I've missed anything!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/impossible-swiftui-views</guid><title>Impossible SwiftUI views</title><description></description><link>https://www.fivestars.blog/articles/impossible-swiftui-views</link><pubDate>Wed, 16 Sep 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>When defining a SwiftUI view, it comes automatic to write <code>struct MyView: View</code> followed by <code>var body: some View { ... }</code>:<br>all our views are composed by other views, but at some point SwiftUI needs to draw something on the screen: when does it end? How does SwiftUI know that it has reached the bottom of a view hierarchy?</p><p>In this article, let's continue our exploration of SwiftUI's inner workings.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The View protocol</h2><p>Every SwiftUI view is a type conforming to the <code>View</code> protocol:</p><pre><code><span class="keyword">public protocol</span> View {
  <span class="keyword">associatedtype</span> Body: <span class="type">View</span>
  <span class="keyword">@ViewBuilder var</span> body: <span class="type">Self</span>.<span class="type">Body</span> { <span class="keyword">get</span> }
}
</code></pre><p>Since this is a Swift protocol, we can make any type conform to it, for example <code>String</code>:</p><pre><code><span class="keyword">extension</span> <span class="type">String</span>: <span class="type">View</span> {
  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(<span class="keyword">self</span>)
  }
}
</code></pre><blockquote><p>Note: this is just an example, not a suggestion nor a best practice.</p></blockquote><p>Which allows us to write a <code>String</code> directly into a <code>View</code> declaration:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="string">"Hello world!"</span>
  }
}
</code></pre><p>As we're using the <code>Text</code> <em>primitive</em> in <code>String</code>'s <code>body</code>, this will work as expected, but what if we didn't? Let's build a new SwiftUI view which uses none of SwiftUI's primitives:</p><pre><code><span class="keyword">struct</span> MyView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">self</span>
  }
}
</code></pre><p>In this case we're defining a new <code>View</code> called <code>MyView</code>, here we use it in <code>ContentView</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">MyView</span>()
  }
}
</code></pre><p>This builds fine, however, as <code>MyView</code>'s' <code>body</code> is the view itself, we're stuck on an infinite recursion, which will make SwiftUI terminate our app.</p><p>Despite the <code>View</code> protocol letting us conform pretty much anything to it, if we want to use those declarations in SwiftUI, we must use SwiftUI primitives, or be ready to see our app crash.</p><p>What do these SwiftUI primitives have that make them special, allowing SwiftUI to break the infinite recursion we've found ourselves in? The answer is in their <code>body</code> type: <code>Never</code>.</p><h2>Never</h2><p><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0102-noreturn-bottom-type.md">Swift 3.0 has brought us <code>Never</code></a>, an <a href="https://en.wikipedia.org/wiki/Bottom_type"><em>uninhabited</em> type</a>: <code>Never</code> is a type with no possible values, making it impossible for us to get or create an instance.</p><p>We might have met <code>Never</code> for example:</p><ul><li>in Combine's Publishers, typically to indicate that a given publisher can't throw errors</li><li>as the return type of <a href="https://developer.apple.com/documentation/swift/1539374-preconditionfailure"><code>preconditionFailure(_:file:line:)</code></a> or <a href="https://developer.apple.com/documentation/swift/1538698-fatalerror"><code>fatalError(_:file:line:)</code></a>, indicating that, once called, there's no way out</li></ul><p>Let's declare a view with body type <code>Never</code>:</p><pre><code><span class="keyword">struct</span> ImpossibleView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="type">Never</span>
}
</code></pre><p>This builds! However we have no way to properly use it: we can't instantiate it without passing something like <code>fatalError()</code>. Regardless, let's implement the body and run our app:</p><pre><code><span class="keyword">struct</span> ImpossibleView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="type">Never</span> {
    <span class="call">fatalError</span>(<span class="string">"This will make our app üí•"</span>)
  }
}
</code></pre><p>Here's our <code>ContentView</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ImpossibleView</span>()
  }
}
</code></pre><p>Unsurprisingly, our app will crash once again, however the crash reason is <code>Fatal error: ImpossibleView may not have Body == Never: file SwiftUI, line 0</code>, not our <code>This will make our app üí•</code>.</p><p>Reading throughout the stack trace, we will see that there's an <code>assertionFailure</code> within an internal SwiftUI's <code>BodyAccessor.makeBody(container:inputs:fields:)</code> method, which apparently is not happy with our <code>ImpossibleView</code> <code>body</code> type.</p><blockquote><p>This is the same method that will crash our app if we pass a <code>class</code> instance instead of a value type.</p></blockquote><p>Only views declared within SwiftUI are allowed to have body type <code>Never</code>: despite not having access to <code>BodyAccessor</code>'s code, it's clear that those views would either pass this assertion, or that they'd take a different, special path.</p><p>SwiftUI can't keep asking for view <code>body</code>s forever: it needs a special set of views, a.k.a. a set of <em>primitives</em>, that it can draw without asking for their body. This is why <code>Text</code>, <code>ZStack</code>, <code>Color</code>, etc have <code>Never</code> as their body type.</p><h2>Is Never a View?</h2><p>A type conforming to <code>View</code> needs to return a body that is also a <code>View</code>, therefore, from what we've seen above, this is the case: <code>Never</code> is a view.</p><p>SwiftUI knows to not to ask for the body of views with <code>body</code> type <code>Never</code>, either by crashing if it's not a primitive, or do something else otherwise. However, since we must make our code compile, SwiftUI needs to extend <code>Never</code> to be a <code>View</code>: the ultimate, impossible view.</p><p>To confirm this, we can inspect SwiftUI's headers, where we will find the following declaration (spread in a few places):</p><pre><code><span class="keyword">extension</span> <span class="type">Never</span>: <span class="type">View</span> {
    <span class="keyword">public typealias</span> Body = <span class="type">Never</span>
    <span class="keyword">public var</span> body: <span class="type">Never</span> { <span class="keyword">get</span> }
}
</code></pre><p>The SwiftUI team could have declared another special type to be used instead of <code>Never</code>, however I find this solution very elegant and perfectly fitting for the use case.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>In this article we've explored how SwiftUI breaks the infinite recursion challenge when drawing views, and how it uses the special Swift type <code>Never</code> in order to elegantly achieve that.</p><p>I hope you've found this article useful: <a href="https://twitter.com/zntfdr">please let me know</a> if I've missed anything!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles!</p><h2>Bonus track</h2><p>Since the article is about impossible views, just for fun I want to share another completely legal and 100% crashing way to <em>"build"</em> views: declare nothing but <strong>any</strong> modifier.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">border</span>(<span class="type">Color</span>.<span class="property">black</span>)
  }
}

<span class="comment">// or</span>

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">padding</span>()
  }
}

<span class="comment">// or</span>

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">ignoresSafeArea</span>()
  }
}

<span class="comment">// etc</span>
</code></pre><p>So many possibilities! üí£</p><p>Are you aware of any another interesting way to crash SwiftUI? <a href="https://twitter.com/zntfdr">I'd love to know</a>!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/preferencekey-reduce</guid><title>PreferenceKey's reduce method demystified</title><description></description><link>https://www.fivestars.blog/articles/preferencekey-reduce</link><pubDate>Wed, 9 Sep 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>SwiftUI's <a href="https://developer.apple.com/documentation/swiftui/preferencekey"><code>PreferenceKey</code></a> declaration is as following:</p><pre><code><span class="keyword">public protocol</span> PreferenceKey {
  <span class="keyword">associatedtype</span> Value
  <span class="keyword">static var</span> defaultValue: <span class="type">Self</span>.<span class="type">Value</span> { <span class="keyword">get</span> }
  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">Self</span>.<span class="type">Value</span>, nextValue: () -&gt; <span class="type">Self</span>.<span class="type">Value</span>)
}
</code></pre><p>While it's clear what both <a href="https://developer.apple.com/documentation/swiftui/preferencekey/value"><code>Value</code></a> and <a href="https://developer.apple.com/documentation/swiftui/preferencekey/defaultvalue-11lde"><code>defaultValue</code></a> are and do, the same cannot be said for <a href="https://developer.apple.com/documentation/swiftui/preferencekey/reduce(value:nextvalue:)"><code>reduce(value:nextValue:)</code></a>:<br>in this article let's take a deep dive into this mysterious method.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Official definition</h2><p>Here's the current SwiftUI's headers for <code>reduce</code>:</p><pre><code><span class="comment">/// Combines a sequence of values by modifying the previously-accumulated
/// value with the result of a closure that provides the next value.
///
/// This method receives its values in view-tree order. Conceptually, this
/// combines the preference value from one tree with that of its next
/// sibling.
///
/// - Parameters:
///   - value: The value accumulated through previous calls to this method.
///     The implementation should modify this value.
///   - nextValue: A closure that returns the next value in the sequence.</span>
<span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">Self</span>.<span class="type">Value</span>, nextValue: () -&gt; <span class="type">Self</span>.<span class="type">Value</span>)
</code></pre><p>This definition sets some foundation on what's the core functionality of <code>reduce</code>:<br>it's used to compute a view preference key value, only when multiple children modify that key.</p><p>Let's make an example.</p><h2>NumericPreferenceKey</h2><p>The following is a simple preference definition that holds an integer as its value:</p><pre><code><span class="keyword">struct</span> NumericPreferenceKey: <span class="type">PreferenceKey</span> {
  <span class="keyword">static var</span> defaultValue: <span class="type">Int</span> = <span class="number">0</span>
  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">Int</span>, nextValue: () -&gt; <span class="type">Int</span>) { ... }
}
</code></pre><p>From now on every view in any view hierarchy has a default value of <code>0</code> for <code>NumericPreferenceKey</code>, regardless of the <code>reduce</code> implementation.</p><h2>When is reduce invoked</h2><p>Imagine a small view hierarchy with one root, two leaves, and nothing in between:</p><pre><code><span class="type">VStack</span> {
  <span class="type">Text</span>(<span class="string">"A"</span>)
  <span class="type">Text</span>(<span class="string">"B"</span>)
}
</code></pre><blockquote><p>For clarity's sake: <code>VStack</code> is the root, while the two <code>Text</code>s are the leaves.</p></blockquote><p>We will use this hierarchy in different scenarios.</p><h3>No child alters/sets the preference key</h3><pre><code><span class="type">VStack</span> {
  <span class="type">Text</span>(<span class="string">"A"</span>)
  <span class="type">Text</span>(<span class="string">"B"</span>)
}
</code></pre><p>Here no view sets its own <code>NumericPreferenceKey</code> value, therefore all views have a <code>NumericPreferenceKey</code> value of <code>NumericPreferenceKey.defaultValue</code>, which is <code>0</code> as per our definition.</p><p><code>NumericPreferenceKey.reduce</code> will never be called on the <code>Text</code>s, as no one can pass a value to a leaf.</p><p><code>reduce</code> is also not called on <code>VStack</code>, because its children don't set/pass a <code>NumericPreferenceKey</code> value to their parent.</p><h3>One child alters/sets the preference key</h3><pre><code><span class="type">VStack</span> {
  <span class="type">Text</span>(<span class="string">"A"</span>)
    .<span class="call">preference</span>(key: <span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>, value: <span class="number">1</span>)
  <span class="type">Text</span>(<span class="string">"B"</span>)
}
</code></pre><p>In this case:</p><ul><li><code>Text("A")</code> sets its <code>NumericPreferenceKey</code> value to <code>1</code> and pass it to its parent</li><li><code>Text("B")</code> defaults <code>NumericPreferenceKey</code> to <code>defaultValue</code>, and not pass anything to its parent</li></ul><p>What about <code>VStack</code>? Let's take a look at the <code>reduce</code> definition once again: <code>Combines a sequence of values by modifying the previously-accumulated value with the result of a closure that provides the next value.</code></p><p>Since only children that have set/changed the <code>NumericPreferenceKey</code> value will pass it to their parents, <code>VStack</code> will only have accumulated one value: <code>1</code> from <code>Text("A")</code>.</p><p>Therefore, once again, <code>NumericPreferenceKey.reduce</code> is also not called on <code>VStack</code>, and the <code>NumericPreferenceKey</code> value associated to <code>VStack</code> is now <code>1</code>.</p><h3>Multiple children alter/set the preference key</h3><pre><code><span class="type">VStack</span> {
  <span class="type">Text</span>(<span class="string">"A"</span>)
    .<span class="call">preference</span>(key: <span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>, value: <span class="number">1</span>)
  <span class="type">Text</span>(<span class="string">"B"</span>)
    .<span class="call">preference</span>(key: <span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>, value: <span class="number">3</span>)
}
</code></pre><p>In this example:</p><ul><li>both <code>Text</code>s set and pass to their parent a <code>NumericPreferenceKey</code> value of <code>1</code> and <code>3</code> respectively</li><li><code>VStack</code> accumulates two <code>NumericPreferenceKey</code> values</li></ul><p>SwiftUI doesn't know what <code>NumericPreferenceKey</code> value to assign to <code>VStack</code>, as multiple values are proposed from its children:<br>this is where our <code>NumericPreferenceKey.reduce</code> comes to the rescue, helping SwiftUI <em>reduce</em> these multiple values into one, which will be then assigned to our <code>VStack</code>.</p><blockquote><p><code>NumericPreferenceKey.reduce</code> would be called even if all passed values were the same.</p></blockquote><p>So what's the value of <code>VStack</code>? Before answering this, we need to know in what order the values are passed to <code>VStack</code>.</p><h2>Reduce call order</h2><p><code>PreferenceKey</code>'s <code>reduce</code> method always contains two parameters: the current <code>value</code>, and the next value to merge.</p><p>Going back to our example:</p><ol><li><code>VStack</code> first receives the value <code>1</code> from <code>Text("A")</code>. As no other value was previously accumulated, this becomes the current value of <code>VStack</code></li><li>then <code>VStack</code> receives the value <code>3</code> from <code>Text("B")</code>, now SwiftUI needs to combine this value with the current value, therefore calling <code>NumericPreferenceKey.reduce</code> with <code>1</code> as the <code>value</code> parameter, and <code>3</code> as the <code>nextValue</code></li></ol><p>This is what the SwiftUI header meant by <code>This method receives its values in view-tree order.</code>: <code>reduce</code> is always called by traversing our view's children from first to last, in declaration order.</p><p>If our <code>VStack</code> had <code>Text</code>s from <code>"A"</code> to <code>"Z"</code>, all setting their <code>NumericPreferenceKey</code> value, <code>reduce</code> would be called first with the current value, inherited from <code>Text("A")</code>, and <code>Text("B")</code>, then with the new current value and <code>Text("C")</code>, etc.</p><p><code>reduce</code> is called <strong>only</strong> between values accumulated within siblings: if a <code>VStack</code> child had its own children, the same concepts would be applied recursively, and then that child would pass to <code>VStack</code> its final value, regardless of how it was obtained.</p><p>It's finally time to compute our <code>VStack</code>'s <code>NumericPreferenceKey</code> value:<br>to do so, we need to take a look at the <code>NumericPreferenceKey.reduce</code> implementation.</p><h2>Common reduce implementations</h2><p>Each preference key declaration has its own <code>reduce</code> implementation:<br>in this section, let's cover some of the most common ones.</p><h3>value = nextValue()</h3><p>The most common definition assigns <code>nextValue()</code> to <code>value</code>, this could also be <code>NumericPreferenceKey</code> implementation:</p><pre><code><span class="keyword">struct</span> NumericPreferenceKey: <span class="type">PreferenceKey</span> {
  <span class="keyword">static var</span> defaultValue: <span class="type">Int</span> = <span class="number">0</span>

  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">Int</span>, nextValue: () -&gt; <span class="type">Int</span>) { 
    value = <span class="call">nextValue</span>()
  }
}
</code></pre><p>Let's go back to our example where both <code>Text("A")</code> and <code>Text("B")</code> pass a value, and compute <code>VStack</code>'s <code>NumericPreferenceKey</code>:</p><ul><li>first <code>VStack</code> takes in the value passed by <code>Text("A")</code>, as there was no prior accumulated value, this is the new <code>VStack</code> current value</li><li>then <code>VStack</code> gets the value passed by <code>Text("B")</code>, as we have two values <code>reduce</code> is called, and the new <code>VStack</code> value will be whatever the new proposed value is (that's what <code>value = nextValue()</code> does).</li></ul><p>In other words, with this implementation, when multiple children pass a value, <code>reduce</code> will discard all of them but the last one, which will become the value of our view.</p><h3>Empty implementation</h3><p><a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/">In</a> <a href="https://www.fivestars.blog/articles/flexible-swiftui/">previous</a> <a href="https://www.fivestars.blog/articles/scrollview-offset/">articles</a> we've defined various preference keys with an empty <code>reduce</code> implementation:</p><pre><code><span class="keyword">struct</span> NumericPreferenceKey: <span class="type">PreferenceKey</span> {
  <span class="keyword">static var</span> defaultValue: <span class="type">Int</span> = <span class="number">0</span>

  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">Int</span>, nextValue: () -&gt; <span class="type">Int</span>) { 
  }
}
</code></pre><p>Once again, let's go back to our example and compute <code>VStack</code>'s <code>NumericPreferenceKey</code>:</p><ul><li>first <code>VStack</code> takes in the value passed by <code>Text("A")</code>, as there was no prior accumulated value, this is the new <code>VStack</code> current value</li><li>then <code>VStack</code> gets the value passed by <code>Text("B")</code>, as we have two values <code>reduce</code> is called, and nothing happens, as our <code>reduce</code> does nothing. <code>VStack</code> keeps the current value.</li></ul><p>This implementation is the opposite of the previous one: our view will keep the very first collected value, and ignore the rest.</p><h3>value += nextValue()</h3><p>Other common implementations use <code>reduce</code> to combine all values with some math operators such as sum:</p><pre><code><span class="keyword">struct</span> NumericPreferenceKey: <span class="type">PreferenceKey</span> {
  <span class="keyword">static var</span> defaultValue: <span class="type">Int</span> = <span class="number">0</span>

  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">Int</span>, nextValue: () -&gt; <span class="type">Int</span>) { 
    value += <span class="call">nextValue</span>()
  }
}
</code></pre><p>It should be intuitive by now that, in this case, our view will have as its value the sum of all the values passed by its children.</p><h3>And many more</h3><p>Other implementations worth mentioning are on preference keys whose <code>Value</code> is either an array or a dictionary, and where the <code>reduce</code> method is used to group all the children values together (via <a href="https://developer.apple.com/documentation/swift/array/3126939-append"><code>append(contentsOf:)</code></a> or similar).</p><p>Once we understand the inner workings of preference key, it becomes intuitive to read and understand the effects of <code>reduce</code>.</p><h2>PreferenceKey is a function of the current state</h2><p>Like SwiftUI views, preference key values are the outcome of the current state and are not persisted.</p><p>If we look at the <code>value += nextValue()</code> <code>reduce</code> implementation for example, the current view value is the sum of the current passed values: if one children changes the passed value, SwiftUI will re-compute our view preference key value from scratch.</p><p>The same is true for any preference key <code>Value</code>: even in case of arrays or dictionaries. We always start over, nothing is persisted.</p><h2>When is the preference key computed?</h2><p>If the complete view in our app is our <code>VStack</code> example, <code>reduce</code> is actually never called:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Text</span>(<span class="string">"A"</span>)
        .<span class="call">preference</span>(key: <span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>, value: <span class="number">1</span>)
      <span class="type">Text</span>(<span class="string">"B"</span>)
        .<span class="call">preference</span>(key: <span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>, value: <span class="number">3</span>)
    }
  }
}
</code></pre><p>This is true despite <code>VStack</code> having multiple <code>NumericPreferenceKey</code> values passed: did this article lied to us?</p><p>SwiftUI always strive to do as little as possible to present the final outcome to the end user, in this example no one is reading nor utilizing the preference key: therefore SwiftUI will ignore it.</p><p>All our keys are actually there and are present in their right place in the view hierarchy, they're just not used, therefore SwiftUI won't spend any time on resolving them.</p><p>If we want to see <code>reduce</code> getting called, we need to use <code>NumericPreferenceKey</code> somehow, one way is to add an <code>onPreferenceChange(_:perform:)</code> function in our <code>VStack</code>:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Text</span>(<span class="string">"A"</span>)
        .<span class="call">preference</span>(key: <span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>, value: <span class="number">1</span>)
      <span class="type">Text</span>(<span class="string">"B"</span>)
        .<span class="call">preference</span>(key: <span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>, value: <span class="number">3</span>)
    }
    .<span class="call">onPreferenceChange</span>(<span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>) { value <span class="keyword">in</span>
      <span class="call">print</span>(<span class="string">"VStack's NumericPreferenceKey value is now:</span> \(value)<span class="string">"</span>)
    }
  }
}
</code></pre><p><code>onPreferenceChange(_:perform:)</code> tells SwiftUI that we're interested in knowing what our <code>VStack</code> <code>NumericPreferenceKey</code> value is and when it changes: this is all we need to setup in order to see our <code>reduce</code> method getting called.</p><h2>Why is reduce's nextValue a function?</h2><p>Something that probably comes out as perplexing when reading <code>PreferenceKey</code>'s definition is why the <code>reduce</code> arguments are a value and a function: we're combining two values, right? Why can't SwiftUI just give us the explicit next value already?</p><pre><code><span class="keyword">public protocol</span> PreferenceKey {
  <span class="keyword">associatedtype</span> Value
  <span class="keyword">static var</span> defaultValue: <span class="type">Self</span>.<span class="type">Value</span> { <span class="keyword">get</span> }
  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">Self</span>.<span class="type">Value</span>, nextValue: () -&gt; <span class="type">Self</span>.<span class="type">Value</span>)
}
</code></pre><p>It turns out that the reason why is once again SwiftUI laziness.</p><p>Let's take our previous <code>reduce</code> empty implementation and use it in a slightly more complicated example:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Text</span>(<span class="string">"A"</span>)
        .<span class="call">preference</span>(key: <span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>, value: <span class="number">1</span>)

      <span class="type">VStack</span> {
        <span class="type">Text</span>(<span class="string">"X"</span>)
          .<span class="call">preference</span>(key: <span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>, value: <span class="number">5</span>)
        <span class="type">Text</span>(<span class="string">"Y"</span>)
          .<span class="call">preference</span>(key: <span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>, value: <span class="number">6</span>)
      }
    }.<span class="call">onPreferenceChange</span>(<span class="type">NumericPreferenceKey</span>.<span class="keyword">self</span>) { value <span class="keyword">in</span>
      <span class="call">print</span>(<span class="string">"VStack's NumericPreferenceKey value is now:</span> \(value)<span class="string">"</span>)
    }
  }
}

<span class="keyword">struct</span> NumericPreferenceKey: <span class="type">PreferenceKey</span> {
  <span class="keyword">static var</span> defaultValue: <span class="type">Int</span> = <span class="number">0</span>
  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">Int</span>, nextValue: () -&gt; <span class="type">Int</span>) { 
  }
}
</code></pre><p>Here we have a <code>VStack</code> as our root, this <code>VStack</code> contains two children: a <code>Text("A")</code> and another <code>VStack</code>, which, in turn, has two <code>Text</code>s as children.</p><p>All <code>Text</code>s in the view set their own <code>NumericPreferenceKey</code>, and we call <code>onPreferenceChange(_:perform:)</code> on our root.</p><p>Let's compute the root <code>NumericPreferenceKey</code> value:</p><ul><li>first <code>VStack</code> receives the value passed by <code>Text("A")</code>, as there was no prior accumulated value, this is the new <code>VStack</code> current value</li><li>then it receives another value from its other child, the inner <code>VStack</code>, and our <code>reduce</code> method gets called</li></ul><p>In this example <code>reduce</code> does nothing, we don't need to know what the exact value passed by our inner <code>VStack</code> is.</p><p>Since we do not access to <code>nextValue</code>, SwiftUI won't even compute it.</p><p>This means that the inner <code>VStack</code> preference key is not computed at all, as no one reads it, therefore our <code>reduce</code> is called just once, to resolve the root <code>VStack</code> preference key only.</p><p>And this is why <code>reduce</code> takes in a value and a method: the <code>nextValue()</code> method is a way for SwiftUI to check if that value is actually needed, and if it's not, it won't resolve it.</p><p>SwiftUI needs to resolve the whole view hierarchy as quickly and as efficiently as possible, this is yet another optimization.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>SwiftUI's <code>PreferenceKey</code> is one of those <em>behind the scenes</em> tools that are not very popular, but yet are indispensable to <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/">obtain</a> <a href="https://www.fivestars.blog/articles/flexible-swiftui/">certain</a> <a href="https://www.fivestars.blog/articles/scrollview-offset/">results</a>:<br>in this article we explored <code>PreferenceKey</code>'s inner workings and revealed how its <a href="https://developer.apple.com/documentation/swiftui/preferencekey/reduce(value:nextvalue:)"><code>reduce</code></a> method is used and what it is for, discovering even more SwiftUI effectiveness.</p><p>All we've seen today is very much undocumented: please <a href="https://twitter.com/zntfdr">let me know</a> if I've missed anything!</p><p>As always, thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/conditional-modifiers</guid><title>Conditional view modifiers</title><description></description><link>https://www.fivestars.blog/articles/conditional-modifiers</link><pubDate>Tue, 1 Sep 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>When working with SwiftUI views, sometimes we would like to apply different modifiers based on conditions/states:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> view {
  myView
    <span class="comment">// if X
    // .padding(8)
    // if Y
    // .background(Color.blue)</span>
}
</code></pre><p>For many cases, we can pass a different modifier <em>argument</em> based on the condition, and that will take care of it:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> view {
  myView
    .<span class="call">padding</span>(<span class="type">X</span> ? <span class="number">8</span> : <span class="number">0</span>)
    .<span class="call">background</span>(<span class="type">Y</span> ? <span class="type">Color</span>.<span class="property">blue</span> : <span class="type">Color</span>.<span class="property">clear</span>)
}
</code></pre><p>While this works here, there are other modifiers, <code>.hidden()</code> to name one, where this solution doesn't work:<br>in this article, let's explore how we can take care of such cases.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The if view extension</h2><p>The most common solution is to define a new <code>if</code> <code>View</code> extension:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">@ViewBuilder
  func</span> `if`&lt;<span class="type">Transform</span>: <span class="type">View</span>&gt;(
    <span class="keyword">_</span> condition: <span class="type">Bool</span>, 
    transform: (<span class="type">Self</span>) -&gt; <span class="type">Transform</span>
  ) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> condition {
      <span class="call">transform</span>(<span class="keyword">self</span>)
    } <span class="keyword">else</span> {
      <span class="keyword">self</span>
    }
  }
}
</code></pre><p>This function will apply <code>transform</code> to our view when <code>condition</code> is <code>true</code>, otherwise it will leave the original view untouched.</p><p>Going back to our example, this is one way to use it:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> view {
  myView
    .<span class="call">if</span>(<span class="type">X</span>) { $0.<span class="call">padding</span>(<span class="number">8</span>) }
    .<span class="call">if</span>(<span class="type">Y</span>) { $0.<span class="call">background</span>(<span class="type">Color</span>.<span class="property">blue</span>) }
}
</code></pre><h2>If else view extension</h2><p>Depending on how compact we want our declarations to be, applying different modifiers based on the <code>condition</code> <code>true</code>/<code>false</code> value would cost us at least two modifiers:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> view {
  myView
    .<span class="call">if</span>(<span class="type">X</span>) { $0.<span class="call">padding</span>(<span class="number">8</span>) }
    .<span class="call">if</span>(!<span class="type">X</span>) { $0.<span class="call">background</span>(<span class="type">Color</span>.<span class="property">blue</span>) }
}
</code></pre><p>This is clear and already succinct, however, if we really want to go all-in with <code>View</code> extensions, we can define a new <code>if</code> overload that lets us modify the <code>else</code> branch as well:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">@ViewBuilder
  func</span> `if`&lt;<span class="type">TrueContent</span>: <span class="type">View</span>, <span class="type">FalseContent</span>: <span class="type">View</span>&gt;(
    <span class="keyword">_</span> condition: <span class="type">Bool</span>, 
    if ifTransform: (<span class="type">Self</span>) -&gt; <span class="type">TrueContent</span>, 
    else elseTransform: (<span class="type">Self</span>) -&gt; <span class="type">FalseContent</span>
  ) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> condition {
      <span class="call">ifTransform</span>(<span class="keyword">self</span>)
    } <span class="keyword">else</span> {
      <span class="call">elseTransform</span>(<span class="keyword">self</span>)
    }
  }
}
</code></pre><p>Which will make our example use a single modifier:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> view {
  myView
    .<span class="call">if</span>(<span class="type">X</span>) { $0.<span class="call">padding</span>(<span class="number">8</span>) } else: { $0.<span class="call">background</span>(<span class="type">Color</span>.<span class="property">blue</span>) }
}
</code></pre><h2>IfLet view extension</h2><p>Similarly to conditions, sometimes we want to apply a modifier only when another value is not <code>nil</code>, similarly to how Swift <code>if let</code> works, and use that value in the modifier itself.</p><p>In this case we can define a new <code>View</code> extension that lets us do just that:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">@ViewBuilder
  func</span> ifLet&lt;V, Transform: <span class="type">View</span>&gt;(
    <span class="keyword">_</span> value: <span class="type">V</span>?, 
    transform: (<span class="type">Self</span>, <span class="type">V</span>) -&gt; <span class="type">Transform</span>
  ) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if let</span> value = value {
      <span class="call">transform</span>(<span class="keyword">self</span>, value)
    } <span class="keyword">else</span> {
      <span class="keyword">self</span>
    }
  }
}
</code></pre><p>The difference from before is that this new function:</p><ul><li>takes in an optional generic <code>value</code> <code>V</code> instead of a <code>Bool</code> condition</li><li>passes this generic <code>value</code> <code>V</code> as a parameter of the transform function</li></ul><p>Here's an example where a <code>View</code> applies a foreground color only when <code>optionalColor</code> is set:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> view {
  myView
    .<span class="call">ifLet</span>(optionalColor) { $0.<span class="call">foregroundColor</span>($1) }
}
</code></pre><h2>iOS Availability modifiers</h2><p>Months ago <a href="https://www.fivestars.blog/articles/use-new-features-mantain-backward-compatibility/">we covered an approach</a> on how to use new iOS features while maintaining backward compatibility. We now find ourselves in a similar situation with SwiftUI, where new modifiers have been introduced, and where we would like to ship an app compatible with earlier versions of iOS 13.</p><p>Unfortunately, in these situations we cannot use the generic extensions that we just introduced:</p><ul><li>Swift's <code>#available</code> and <code>@available</code> cannot be passed as arguments in our <code>if</code> modifier</li><li>we can't guarantee the compiler that our <code>transform</code> function would be applied only on iOS 14/13.4 and later</li></ul><blockquote><p>If you find a way, <a href="https://twitter.com/zntfdr">I would love to know</a>!</p></blockquote><p>One way to overcome this is to define a different view modifier for each of our use cases.</p><p>For example, here's a <code>View</code> extension to ignore the keyboard in our layout:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">@ViewBuilder
  func</span> ignoreKeyboard() -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if #available</span>(iOS <span class="number">14.0</span>, *) {
      <span class="call">ignoresSafeArea</span>(.<span class="dotAccess">keyboard</span>)
    } <span class="keyword">else</span> {
      <span class="keyword">self</span> <span class="comment">// iOS 13 always ignores the keyboard</span>
    }
  }
}
</code></pre><p>And here's how to have the <code>InsetGroupedList</code> style in both iOS 13 and iOS 14:</p><pre><code><span class="keyword">extension</span> <span class="type">List</span> {
  <span class="keyword">@ViewBuilder
  func</span> insetGroupedListStyle() -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if #available</span>(iOS <span class="number">14.0</span>, *) {
      <span class="keyword">self</span>
        .<span class="call">listStyle</span>(<span class="type">InsetGroupedListStyle</span>())
    } <span class="keyword">else</span> {
      <span class="keyword">self</span>
        .<span class="call">listStyle</span>(<span class="type">GroupedListStyle</span>())
        .<span class="call">environment</span>(\.<span class="property">horizontalSizeClass</span>, .<span class="dotAccess">regular</span>)
    }
  }
}
</code></pre><p>To be used as follows:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> view {
  myView
    .<span class="call">ignoreKeyboard</span>()
}

<span class="comment">// ...</span>

<span class="keyword">var</span> body: <span class="keyword">some</span> view {
  myView
    .<span class="call">insetGroupedListStyle</span>()
}
</code></pre><h3>Availability Attributes</h3><blockquote><p>Credits to <a href="https://twitter.com/olebegemann">Ole Begemann</a> for <a href="https://twitter.com/olebegemann/status/1294583027583123458">this tip</a>.</p></blockquote><p>At some point in the future, our codebases will drop support for iOS 13, making our extensions unnecessary:<br>wouldn't it be great if Xcode could let us know when this happens?</p><p>Similarly to how libraries/frameworks define API availability, we can use the <code>@availability</code> attribute in our new extensions as well:</p><pre><code><span class="keyword">@available</span>(
  iOS, introduced: <span class="number">13</span>, deprecated: <span class="number">14</span>,
  message: <span class="string">"Use .ignoresSafeArea(.keyboard) directly"</span>
) 
<span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">@ViewBuilder
  func</span> ignoreKeyboard() -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    ...
  }
}

<span class="comment">/// ...</span>

<span class="keyword">@available</span>(
  iOS, introduced: <span class="number">13</span>, deprecated: <span class="number">14</span>, 
  message: <span class="string">"Use .listStyle(InsetGroupedListStyle()) directly"</span>
)
<span class="keyword">extension</span> <span class="type">List</span> {
  <span class="keyword">@ViewBuilder
  func</span> insetGroupedListStyle() -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    ...
  }
}
</code></pre><p>Adding this <code>@available</code> attribute will trigger a deprecation warning wherever these functions are used, only after iOS 13 support is removed:<br>we can also add an optional message reminding us what to do once the warning is triggered.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>SwiftUI declarative APIs make <code>View</code>s definition a breeze: when our views need to apply different modifiers based on certain conditions, we can define our own conditional view modifiers, letting us keep the same declarativeness that we're accustomed to.</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/scrollview-offset</guid><title>SwiftUI ScrollView offset</title><description></description><link>https://www.fivestars.blog/articles/scrollview-offset</link><pubDate>Tue, 25 Aug 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Searching online for "<em>SwiftUI ScrollView offset</em>" yields to plenty of discussions on how to control the scroll position of a <code>ScrollView</code>:<br>with iOS 14 SwiftUI has gained <a href="https://developer.apple.com/documentation/swiftui/scrollviewreader"><code>ScrollViewReader</code></a>, covered <a href="https://www.fivestars.blog/articles/section-title-index-swiftui/">here</a>, which makes the old <a href="https://github.com/siteline/SwiftUI-Introspect">introspection</a> tricks obsolete.</p><p>Does it mean that we no longer need the <code>ScrollView</code> offset?<br>In this article, let's explore how to obtain the offset and some of its uses.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>ScrollView offset 101</h2><p>Similarly to <code>UIScrollView</code>, <code>ScrollView</code> is composed by two layers:</p><ul><li>the frame layer, used to position the <code>ScrollView</code> itself in the view hierarchy</li><li>the content layer, where all the <code>ScrollView</code> content is placed</li></ul><p>If we look at a vertical scroll view, which is what we will use in this article, the offset represents the <em>gap</em> between the smallest value for the y-coordinate of the frame layer with the smallest value for the y-coordinate of the content layer.</p><h2>Getting the offset</h2><p>This is SwiftUI's <code>ScrollView</code> initializer definition:</p><pre><code><span class="keyword">public struct</span> ScrollView&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  ...
  <span class="keyword">public init</span>(
    <span class="keyword">_</span> axes: <span class="type">Axis</span>.<span class="type">Set</span> = .<span class="dotAccess">vertical</span>, 
    showsIndicators: <span class="type">Bool</span> = <span class="keyword">true</span>, 
    <span class="keyword">@ViewBuilder</span> content: () -&gt; <span class="type">Content</span>
  )
}
</code></pre><p>Beside a <code>content</code> view builder, there's not much we can play with. Let's create a simple <code>ScrollView</code> with a few <code>Text</code>s in it:</p><pre><code><span class="type">ScrollView</span> {
  <span class="type">Text</span>(<span class="string">"A"</span>)
  <span class="type">Text</span>(<span class="string">"B"</span>)
  <span class="type">Text</span>(<span class="string">"C"</span>)
}
</code></pre><p>The offset will be the same as the offset of the first element in the content, <code>Text("A")</code>:<br>how do we get this element offset?</p><p>Once again, we need to go back to SwiftUI's <a href="https://en.wikipedia.org/wiki/Swiss_Army_knife">swiss army knife</a>, a.k.a. <code>GeometryReader</code>, along with a new <code>PreferenceKey</code>.</p><p>First, let's define our preference key:</p><pre><code><span class="comment">/// Contains the gap between the smallest value for the y-coordinate of 
/// the frame layer and the content layer.</span>
<span class="keyword">private struct</span> OffsetPreferenceKey: <span class="type">PreferenceKey</span> {
  <span class="keyword">static var</span> defaultValue: <span class="type">CGFloat</span> = .<span class="dotAccess">zero</span>
  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">CGFloat</span>, nextValue: () -&gt; <span class="type">CGFloat</span>) {}
}
</code></pre><p>Second, let's add our geometry reader as the background of our element of interest:</p><pre><code><span class="type">ScrollView</span> {
  <span class="type">Text</span>(<span class="string">"A"</span>)
    .<span class="call">background</span>(
      <span class="type">GeometryReader</span> { proxy <span class="keyword">in</span>
        <span class="type">Color</span>.<span class="property">clear</span>
          .<span class="call">preference</span>(
            key: <span class="type">OffsetPreferenceKey</span>.<span class="keyword">self</span>,
            value: proxy.<span class="call">frame</span>(in: .<span class="dotAccess">local</span>).<span class="property">minY</span>
          )
      }
    )
  <span class="type">Text</span>(<span class="string">"B"</span>)
  <span class="type">Text</span>(<span class="string">"C"</span>)
}
</code></pre><p>The geometry reader, as we've seen in <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/"><code>Sharing layout information in SwiftUI</code></a>, is used to share information of our element in the view hierarchy:<br>we're using it to extract the smallest value for the y-coordinate of our view, which matches our offset definition.</p><p>This is great, however it doesn't work:<br>we're querying <code>GeometryProxy</code> for a frame in the local coordinate space, which is the space proposed to our background view.</p><p>In short, the <code>minY</code> of <code>Color.clear</code> is, and always be, zero in the local coordinates.</p><p>Asking for the frame in the <code>.global</code> coordinate space, which is the space from the device screen point of view, is a non-starter: our <code>ScrollView</code>s can be placed anywhere in the view hierarchy, the <code>.global</code> coordinate space won't help us here.</p><p>What happens if we put the <code>GeometryReader</code> just above <code>Text("A")</code>?</p><pre><code><span class="type">ScrollView</span> {
  <span class="type">GeometryReader</span> { proxy <span class="keyword">in</span>
    <span class="type">Color</span>.<span class="property">clear</span>
      .<span class="call">preference</span>(
        key: <span class="type">OffsetPreferenceKey</span>.<span class="keyword">self</span>,
        value: proxy.<span class="call">frame</span>(in: .<span class="dotAccess">local</span>).<span class="property">minY</span>
      )
  }
  <span class="type">Text</span>(<span class="string">"A"</span>)
  <span class="type">Text</span>(<span class="string">"B"</span>)
  <span class="type">Text</span>(<span class="string">"C"</span>)
}
</code></pre><p>This might seem to be more promising, however it still wouldn't work:<br>in this case the <code>.local</code> coordinate space is the <code>ScrollView</code>'s <em>content layer</em>, instead, we need the frame according to our <code>ScrollView</code>'s <em>frame layer</em>.</p><p>In order to get the <code>GeometryProxy</code> frame according to our <code>ScrollView</code>'s <em>frame layer</em>, we need to define a new coordinate space on the <code>ScrollView</code>, and refer to that within our <code>GeometryReader</code>:</p><pre><code><span class="type">ScrollView</span> {
  <span class="type">Text</span>(<span class="string">"A"</span>)
    .<span class="call">background</span>(
      <span class="type">GeometryReader</span> { proxy <span class="keyword">in</span>
        <span class="type">Color</span>.<span class="property">clear</span>
          .<span class="call">preference</span>(
            key: <span class="type">OffsetPreferenceKey</span>.<span class="keyword">self</span>,
            value: proxy.<span class="call">frame</span>(in: .<span class="call">named</span>(<span class="string">"frameLayer"</span>)).<span class="property">minY</span>
          )
      }
    )
  <span class="type">Text</span>(<span class="string">"B"</span>)
  <span class="type">Text</span>(<span class="string">"C"</span>)
}
.<span class="call">coordinateSpace</span>(name: <span class="string">"frameLayer"</span>) <span class="comment">// the new coordinate space!</span>
</code></pre><p>This works because <code>ScrollView</code> exposes the <em>frame layer</em> from the outside, great! Now the correct <code>ScrollView</code> offset is available in the view hierarchy.</p><h3>Creating a ScrollViewOffset View</h3><p>Before proceeding, it would be great if we could generalize this approach to work with any content, making it easy to get the offset when needed.</p><p>There's a challenge however: <code>ScrollView</code> takes in a <code>content</code> view builder, which makes it impossible from our side to get the first element of that content (if you know a way, please <a href="https://twitter.com/zntfdr">hit me up on Twitter!</a>).</p><p>We could apply a <code>.background</code> modifier to the whole <code>content</code>, however this doesn't take in account the possibility that the content itself could be a <code>Group</code> for example:<br>in that case the modifier would be applied to each element of the group, which is not what we wanted.</p><p>A solution is moving the geometry reader above the <code>ScrollView</code>'s content, and then hide it with a negative padding on the actual content:</p><pre><code><span class="keyword">struct</span> ScrollViewOffset&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">let</span> content: () -&gt; <span class="type">Content</span>

  <span class="keyword">init</span>(<span class="keyword">@ViewBuilder</span> content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>) {
    <span class="keyword">self</span>.<span class="property">content</span> = content
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {
      offsetReader
      <span class="call">content</span>()
        .<span class="call">padding</span>(.<span class="dotAccess">top</span>, -<span class="number">8</span>)
      <span class="comment">// üëÜüèª this places the real content as if our `offsetReader` was 
      // not there.</span>
    }
    .<span class="call">coordinateSpace</span>(name: <span class="string">"frameLayer"</span>)
  }

  <span class="keyword">var</span> offsetReader: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">GeometryReader</span> { proxy <span class="keyword">in</span>
      <span class="type">Color</span>.<span class="property">clear</span>
        .<span class="call">preference</span>(
          key: <span class="type">OffsetPreferenceKey</span>.<span class="keyword">self</span>,
          value: proxy.<span class="call">frame</span>(in: .<span class="call">named</span>(<span class="string">"frameLayer"</span>)).<span class="property">minY</span>
        )
    }
    .<span class="call">frame</span>(height: <span class="number">0</span>) 
    <span class="comment">// this makes sure that the reader doesn't affect the content height</span>
  }
}
</code></pre><p>Similarly to our <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/"><code>readSize</code> modifier</a>, we can make <code>ScrollViewOffset</code> ask for a callback to be called every time the offset is changed as well:</p><pre><code><span class="keyword">struct</span> ScrollViewOffset&lt;Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
  <span class="keyword">let</span> onOffsetChange: (<span class="type">CGFloat</span>) -&gt; <span class="type">Void</span>
  <span class="keyword">let</span> content: () -&gt; <span class="type">Content</span>

  <span class="keyword">init</span>(
    onOffsetChange: <span class="keyword">@escaping</span> (<span class="type">CGFloat</span>) -&gt; <span class="type">Void</span>,
    <span class="keyword">@ViewBuilder</span> content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>
  ) {
    <span class="keyword">self</span>.<span class="property">onOffsetChange</span> = onOffsetChange
    <span class="keyword">self</span>.<span class="property">content</span> = content
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {
      ...
    }
    .<span class="call">coordinateSpace</span>(name: <span class="string">"frameLayer"</span>)
    .<span class="call">onPreferenceChange</span>(<span class="type">OffsetPreferenceKey</span>.<span class="keyword">self</span>, perform: onOffsetChange)
  }

  <span class="keyword">var</span> offsetReader: <span class="keyword">some</span> <span class="type">View</span> {
    ...
  }
}
</code></pre><p>Going back to our example, this is how this new view can be used:</p><pre><code><span class="type">ScrollViewOffset</span> { offset <span class="keyword">in</span>
  <span class="call">print</span>(<span class="string">"New ScrollView offset:</span> \(offset)<span class="string">"</span>) 
} content: {
  <span class="type">Text</span>(<span class="string">"A"</span>)
  <span class="type">Text</span>(<span class="string">"B"</span>)
  <span class="type">Text</span>(<span class="string">"C"</span>)
}
</code></pre><p>The final gist can be found <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/main/ScrollView-Offset">here</a>.</p><h2>Uses</h2><p>Now that we have this new powerful information, it's really up to us what to do with it.</p><p>Probably the most common use is around changing the color of the top safe area when scrolling:</p><img src="https://www.fivestars.blog/assets/posts/scrollview-offset/status.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> scrollOffset: <span class="type">CGFloat</span> = .<span class="dotAccess">zero</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      scrollView
      statusBarView
    }
  }

  <span class="keyword">var</span> scrollView: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollViewOffset</span> {
      scrollOffset = $0
    } content: {
      <span class="type">LazyVStack</span> {
        <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">100</span>) { index <span class="keyword">in</span>
          <span class="type">Text</span>(<span class="string">"</span>\(index)<span class="string">"</span>)
        }
      }
    }
  }

  <span class="keyword">var</span> statusBarView: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">GeometryReader</span> { geometry <span class="keyword">in</span>
      <span class="type">Color</span>.<span class="property">red</span>
        .<span class="call">opacity</span>(opacity)
        .<span class="call">frame</span>(height: geometry.<span class="property">safeAreaInsets</span>.<span class="property">top</span>, alignment: .<span class="dotAccess">top</span>)
        .<span class="call">edgesIgnoringSafeArea</span>(.<span class="dotAccess">top</span>)
    }
  }

  <span class="keyword">var</span> opacity: <span class="type">Double</span> {
    <span class="keyword">switch</span> scrollOffset {
    <span class="keyword">case</span> -<span class="number">100</span>...<span class="number">0</span>:
      <span class="keyword">return</span> <span class="type">Double</span>(-scrollOffset) / <span class="number">100.0</span>
    <span class="keyword">case</span> ...(-<span class="number">100</span>):
      <span class="keyword">return</span> <span class="number">1</span>
    <span class="keyword">default</span>:
      <span class="keyword">return</span> <span class="number">0</span>
    }
  }
}
</code></pre><p>The limit is our imagination, here's a view that changes the background color based on the scroll position:</p><img src="https://www.fivestars.blog/assets/posts/scrollview-offset/rainbow.gif"/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@State var</span> scrollOffset: <span class="type">CGFloat</span> = .<span class="dotAccess">zero</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      backgroundColor
      scrollView
    }
  }

  <span class="keyword">var</span> backgroundColor: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Color</span>(
      <span class="comment">//         This number determines how fast the color changes üëáüèª</span>
      hue: <span class="type">Double</span>(<span class="call">abs</span>(scrollOffset.<span class="call">truncatingRemainder</span>(dividingBy: <span class="number">3500</span>))) / <span class="number">3500</span>,
      saturation: <span class="number">1</span>,
      brightness: <span class="number">1</span>
    )
    .<span class="call">ignoresSafeArea</span>()
  }

  <span class="keyword">var</span> scrollView: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollViewOffset</span> {
      scrollOffset = $0
    } content: {
      <span class="type">LazyVStack</span>(spacing: <span class="number">8</span>) {
        <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">100</span>) { index <span class="keyword">in</span>
          <span class="type">Text</span>(<span class="string">"</span>\(index)<span class="string">"</span>)
            .<span class="call">font</span>(.<span class="dotAccess">title</span>)
        }
      }
    }
  }
}
</code></pre><h3>iOS 13 vs iOS 14</h3><p>All we've seen above works great on iOS 14, however in iOS 13 the initial offset is different.</p><p>In iOS 13 the offset takes into account the top safe area: for example, the initial offset of a <code>ScrollViewOffset</code> embedded in a <code>NavigationView</code> with a large title is <code>140</code> points, the exact same view in iOS 14 will have the initial (correct) offset value of <code>0</code> points.</p><p>You've been warned!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Thanks to <code>ScrollViewReader</code> we no longer need to access to the <code>ScrollView</code> offset for the majority of the use cases: for the rest, <code>GeometryReader</code> has our back.</p><p>Maybe we can get pull to refresh next (FB8506858), pretty please?</p><p>Do you have any other use for the scrollView offset? <a href="https://twitter.com/zntfdr">Let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/flexible-swiftui</guid><title>Flexible layouts in SwiftUI</title><description></description><link>https://www.fivestars.blog/articles/flexible-swiftui</link><pubDate>Tue, 18 Aug 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>Article inspired by <a href="https://twitter.com/MauricioM">Mauricio Meirelles</a>'s <a href="https://github.com/mauriciomeirelles/GridView">GridView</a>.</p></blockquote><p>This year SwiftUI has learned grid layouts thanks to the new <a href="https://developer.apple.com/documentation/swiftui/lazyvgrid"><code>LazyVGrid</code></a> and <a href="https://developer.apple.com/documentation/swiftui/lazyhgrid"><code>LazyHGrid</code></a>.</p><p>While these new components unlock very powerful layouts, SwiftUI doesn't offer the same flexibility of <code>UICollectionView</code> just yet.</p><p>I'm referring to the possibility to have multiple views of different size in the same container, and have the container automatically wrap to the next row when there's no more space available.</p><p>Let's wait for another year? In this article, let's explore how we can build our own <code>FlexibleView</code>, here's a sneak peek of the final result:</p><img src="https://www.fivestars.blog/assets/posts/flexible-swiftui/flexible.gif"/><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Introduction</h2><p>From the preview above it should be clear what we're aiming for, let's see what our view needs to know to achieve that:</p><ol><li>the total horizontal space available</li><li>the size of each element</li><li>a way to distribute each element into the right place</li></ol><p>Time to get started!</p><h2>Getting the size of a view</h2><p>The first two points come down to getting the size of a view: <em>coincidentally</em>, last week's article, <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/">Sharing layout information in SwiftUI</a>, covers how to do so. If you haven't already, please <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/">have a read</a>.</p><p>This article will use <a href="https://gist.github.com/zntfdr/f735039b13265d7b25099f524e2116d9">the extension</a> from that article:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> readSize(onChange: <span class="keyword">@escaping</span> (<span class="type">CGSize</span>) -&gt; <span class="type">Void</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">background</span>(
      <span class="type">GeometryReader</span> { geometryProxy <span class="keyword">in</span>
        <span class="type">Color</span>.<span class="property">clear</span>
          .<span class="call">preference</span>(key: <span class="type">SizePreferenceKey</span>.<span class="keyword">self</span>, value: geometryProxy.<span class="property">size</span>)
      }
    )
    .<span class="call">onPreferenceChange</span>(<span class="type">SizePreferenceKey</span>.<span class="keyword">self</span>, perform: onChange)
  }
}

<span class="keyword">private struct</span> SizePreferenceKey: <span class="type">PreferenceKey</span> {
  <span class="keyword">static var</span> defaultValue: <span class="type">CGSize</span> = .<span class="dotAccess">zero</span>
  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">CGSize</span>, nextValue: () -&gt; <span class="type">CGSize</span>) {}
}
</code></pre><p>Again, for an in depth explanation, refer to <a href="https://www.fivestars.blog/articles/swiftui-share-layout-information/">Sharing layout information in SwiftUI</a>.</p><h2>1. Getting the horizontal available space</h2><p>The first piece of information <code>FlexibleView</code> needs is the total horizontal available space:<br>to get it, we will use one of the views that will fill all the space it is given to them, while making sure that the view height doesn't exceed what our <code>FlexibleView</code> needs.</p><p>A few examples of such views are <code>Color</code> and <code>Rectangle</code>:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">Color</span>.<span class="property">clear</span>
    .<span class="call">frame</span>(height: <span class="number">1</span>)
    .<span class="call">readSize</span> { size <span class="keyword">in</span>
      <span class="comment">// the horizontal available space is size.width</span>
    }
}
</code></pre><p>Since this first component is used only to get layout information, we use <code>Color.clear</code> as, effectively, it's an invisible layer that doesn't obstruct the rest of the view.</p><p>We also set a <code>.frame</code> modifier to limit the <code>Color</code> height to <code>1</code> point, making sure that our view will take as much height as the rest of the view components need.</p><p>This <code>Color</code> is not really part of our view hierarchy, we can hide it with a <code>ZStack</code>:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">ZStack</span> {
    <span class="type">Color</span>.<span class="property">clear</span>
      .<span class="call">frame</span>(height: <span class="number">1</span>)
      .<span class="call">readSize</span> { size <span class="keyword">in</span>
        <span class="comment">// the horizontal available space is size.width</span>
      }

    <span class="comment">// Rest of our implementation</span>
  }
}
</code></pre><p>Lastly, let's take advantage of the callback from <code>readSize</code> to store our available horizontal space in <code>FlexibleView</code>:</p><pre><code><span class="keyword">struct</span> FlexibleView: <span class="type">View</span> {
  <span class="keyword">@State private var</span> availableWidth: <span class="type">CGFloat</span> = <span class="number">0</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="type">Color</span>.<span class="property">clear</span>
        .<span class="call">frame</span>(height: <span class="number">1</span>)
        .<span class="call">readSize</span> { size <span class="keyword">in</span>
          availableWidth = size.<span class="property">width</span>
        }

      <span class="comment">// Rest of our implementation</span>
    }
  }
}
</code></pre><p>Great! At this point we have a view which fills all the available horizontal space, and only takes one point in height. We can move to the second step.</p><h2>2. Getting each element size</h2><p>Before talking about how to get each element size, let's setup our view to accept elements.</p><p>For simplicity's sake, and for reasons that will become clear later, we will ask for:</p><ol><li>a <code>Collection</code> of <code>Hashable</code> elements</li><li>a method that, given an element of that collection, returns a <code>View</code>.</li></ol><pre><code><span class="keyword">struct</span> FlexibleView&lt;Data: <span class="type">Collection</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> 
  <span class="keyword">where</span> <span class="type">Data</span>.<span class="type">Element</span>: <span class="type">Hashable</span> {
  <span class="keyword">let</span> data: <span class="type">Data</span>
  <span class="keyword">let</span> content: (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">Content</span>

  <span class="comment">// ...</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="comment">// ...</span>
  }
}
</code></pre><p>Let's forget about the final layout and focus only on getting each element size:<br>- since our elements conform to <code>Hashable</code>, we can define a new dictionary that holds the size of each element view - then we can use a <code>ForEach</code> to layout all elements and read their view sizes via the <code>.readSize</code> extension</p><pre><code><span class="keyword">struct</span> FlexibleView&lt;...&gt;: <span class="type">View</span> <span class="keyword">where</span> ... {
  <span class="keyword">let</span> data: <span class="type">Data</span>
  <span class="keyword">let</span> content: (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">Content</span>
  <span class="keyword">@State private var</span> elementsSize: [<span class="type">Data</span>.<span class="type">Element</span>: <span class="type">CGSize</span>] = [:]

  <span class="comment">// ...</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="comment">// ...</span>

      <span class="type">ForEach</span>(data, id: \.<span class="keyword">self</span>) { element <span class="keyword">in</span>
        <span class="call">content</span>(element)
          .<span class="call">fixedSize</span>()
          .<span class="call">readSize</span> { size <span class="keyword">in</span>
            elementsSize[element] = size
          }
      }
    }
  }
}
</code></pre><p>Note how we use the <a href="https://developer.apple.com/documentation/swiftui/button/fixedsize()"><code>.fixedSize</code></a> modifier on the element view, to let it take as much space as needed, regardless of how much space is actually available.</p><p>And with this, we now have each element size! Time to face the last step.</p><h2>3. A way to distribute each element into the right place</h2><p>Before proceeding, let's see what we have so far:</p><ul><li>a collection of elements</li><li>the total available width of our view</li><li>the size of each element view</li></ul><p>This is really all <code>FlexibleView</code> needs to distribute the elements views into multiple lines:</p><pre><code><span class="keyword">struct</span> FlexibleView&lt;...&gt;: <span class="type">View</span> <span class="keyword">where</span> ... {
  <span class="comment">// ...</span>

  <span class="keyword">func</span> computeRows() -&gt; [[<span class="type">Data</span>.<span class="type">Element</span>]] {
    <span class="keyword">var</span> rows: [[<span class="type">Data</span>.<span class="type">Element</span>]] = [[]]
    <span class="keyword">var</span> currentRow = <span class="number">0</span>
    <span class="keyword">var</span> remainingWidth = availableWidth

    <span class="keyword">for</span> element <span class="keyword">in</span> data {
      <span class="keyword">let</span> elementSize = elementSizes[element, default: <span class="type">CGSize</span>(width: availableWidth, height: <span class="number">1</span>)]

      <span class="keyword">if</span> remainingWidth - elementSize.<span class="property">width</span> &gt;= <span class="number">0</span> {
        rows[currentRow].<span class="call">append</span>(element)
      } <span class="keyword">else</span> {
        <span class="comment">// start a new row</span>
        currentRow = currentRow + <span class="number">1</span>
        rows.<span class="call">append</span>([element])
        remainingWidth = availableWidth
      }

      remainingWidth = remainingWidth - elementSize.<span class="property">width</span>
    }

    <span class="keyword">return</span> rows
  }
}
</code></pre><p><code>computeRows</code> distributes all elements in multiple rows, while keeping the elements order and making sure that each row width doesn't exceed the <code>availableWidth</code> obtained earlier.</p><p>In other words, the function returns an array of rows, where each row contains the array of elements for that row.</p><p>We can then combine this new function with <code>HStack</code>s and <code>VStack</code>s to obtain our final layout:</p><pre><code><span class="keyword">struct</span> FlexibleView&lt;...&gt;: <span class="type">View</span> <span class="keyword">where</span> ... {
  <span class="comment">// ...</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="comment">// ...</span>

      <span class="type">VStack</span> {
        <span class="type">ForEach</span>(<span class="call">computeRows</span>(), id: \.<span class="keyword">self</span>) { rowElements <span class="keyword">in</span>
          <span class="type">HStack</span> {
            <span class="type">ForEach</span>(rowElements, id: \.<span class="keyword">self</span>) { element <span class="keyword">in</span>
              <span class="call">content</span>(element)
                .<span class="call">fixedSize</span>()
                .<span class="call">readSize</span> { size <span class="keyword">in</span>
                  elementsSize[element] = size
                }
            }
          }
        }
      }
    }
  }

  <span class="comment">// ...</span>
}
</code></pre><blockquote><p>At this point <code>FlexibleView</code> will only take as much height as this <code>VStack</code>.</p></blockquote><p>And with this, we're done! The <a href="https://github.com/zntfdr/FiveStarsCodeSamples/tree/48e493a2b4acd7196c176689a8f3038936f0ed41/Flexible-SwiftUI">final project</a> also addresses spacing between elements and different alignments: adding these features is trivial once the fundamentals above are understood.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>This year SwiftUI has gained powerful and welcome new components that let us create new interfaces that were tricky to build before. With that being said, it still lacks on certain aspects: this however should not discourage ourselves and try and find a solution on our own!</p><p><code>FlexibleView</code> is just an example, what other views have you built yourself? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>As always, thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-share-layout-information</guid><title>Sharing layout information in SwiftUI</title><description></description><link>https://www.fivestars.blog/articles/swiftui-share-layout-information</link><pubDate>Wed, 12 Aug 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>SwiftUI views layout depends on each view state. This state is composed of a mix of internal properties, external values coming from the environment, etc.</p><p>When it comes to advanced custom layouts, sometimes a view needs information from its children, direct or not, as well.</p><p>A common example is when ancestors need to know their children size:<br>in this article let's explore how can do so.</p><blockquote><p>The view size is an example: the same concept applies to any other type conforming to <code>Equatable</code>.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Reading a view size</h2><p>When we need space information, we basically have one option in SwiftUI: <a href="https://developer.apple.com/documentation/swiftui/geometryreader"><code>GeometryReader</code></a>.</p><p><code>GeometryReader</code> is a view that fills all the available space, both horizontally and vertically, and comes with a <a href="https://developer.apple.com/documentation/swiftui/geometryproxy"><code>GeometryProxy</code></a> instance, which gives us access to the size and coordinate space of its container.</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">GeometryReader</span> { geometryProxy <span class="keyword">in</span>
    ...
    <span class="comment">// Use geometryProxy to get space information here.</span>
  }
}
</code></pre><p>In our case we don't want to use <code>GeometryReader</code> directly: instead, we're interested in the space information of specific views.</p><p>SwiftUI provides <a href="https://developer.apple.com/documentation/swiftui/view/overlay(_:alignment:)"><code>.overlay()</code></a> and <a href="https://developer.apple.com/documentation/swiftui/view/background(_:alignment:)"><code>.background()</code></a>, which, respectively, add an extra view in front and behind another view. Most importantly, the proposed size for these views is equal to the size of the view they're applied to, making them a perfect candidate for what we are looking for:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  childView
    .<span class="call">background</span>(
      <span class="type">GeometryReader</span> { geometryProxy <span class="keyword">in</span>
        ...
        <span class="comment">// Use geometryProxy to get childView space information here.</span>
      }
    )
}
</code></pre><p><code>GeometryReader</code> still requires us to declare a view within its body, we can use <code>Color.clear</code> to create an invisible layer:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  childView
    .<span class="call">background</span>(
      <span class="type">GeometryReader</span> { geometryProxy <span class="keyword">in</span>
        <span class="type">Color</span>.<span class="property">clear</span>
        <span class="comment">// Use geometryProxy to get childView space information here.</span>
      }
    )
}
</code></pre><p>Great! Now we have our space information, it's time for our children to learn how to communicate to their ancestors.</p><h2>Child to ancestors communication</h2><p>SwiftUI gives us the power of <a href="https://developer.apple.com/documentation/swiftui/preferencekey"><code>PreferenceKey</code></a>s, which is SwiftUI's way to pass information through the view tree.</p><p>Let's start by defining our own <code>PreferenceKey</code>, <code>SizePreferenceKey</code>:</p><pre><code><span class="keyword">struct</span> SizePreferenceKey: <span class="type">PreferenceKey</span> {
  <span class="keyword">static var</span> defaultValue: <span class="type">CGSize</span> = .<span class="dotAccess">zero</span>
  <span class="keyword">static func</span> reduce(value: <span class="keyword">inout</span> <span class="type">CGSize</span>, nextValue: () -&gt; <span class="type">CGSize</span>) {}
}
</code></pre><p><code>PreferenceKey</code> is a generic protocol that requires one static function and one static default value:</p><ul><li><code>defaultValue</code> is the value used when a view has no explicit value for this key</li><li><code>reduce(value:nextValue:)</code> combines the key values found in the tree with a new one</li></ul><p>We will use <code>PreferenceKey</code> to store the measured size of our child, going back to our example:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  childView
    .<span class="call">background</span>(
      <span class="type">GeometryReader</span> { geometryProxy <span class="keyword">in</span>
        <span class="type">Color</span>.<span class="property">clear</span>
          .<span class="call">preference</span>(key: <span class="type">SizePreferenceKey</span>.<span class="keyword">self</span>, value: geometryProxy.<span class="property">size</span>)
      }
    )
}
</code></pre><p>Now the child size is in the tree hierarchy! How can we read it?<br><br>SwiftUI provides a <code>View</code> extension, <a href="https://developer.apple.com/documentation/swiftui/button/onpreferencechange(_:perform:)"><code>onPreferenceChange(_:perform:)</code></a>, which lets us specify the key we're interested in, and a code block to execute when that preference changes:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  childView
    .<span class="call">background</span>(
      <span class="type">GeometryReader</span> { geometryProxy <span class="keyword">in</span>
        <span class="type">Color</span>.<span class="property">clear</span>
          .<span class="call">preference</span>(key: <span class="type">SizePreferenceKey</span>.<span class="keyword">self</span>, value: geometryProxy.<span class="property">size</span>)
      }
    )
    .<span class="call">onPreferenceChange</span>(<span class="type">SizePreferenceKey</span>.<span class="keyword">self</span>) { newSize <span class="keyword">in</span>
      <span class="call">print</span>(<span class="string">"The new child size is:</span> \(newSize)<span class="string">"</span>)
    }
}
</code></pre><p>Thanks to <code>onPreferenceChange</code> any ancestor interested in this key can extract and get notified when the value changes.</p><h2>Extension</h2><p>This way to obtain a child size is so handy that I find myself using it multiple times, instead of copy-pasting it over and over, I've written a <code>View</code> extension for it:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> readSize(onChange: <span class="keyword">@escaping</span> (<span class="type">CGSize</span>) -&gt; <span class="type">Void</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="call">background</span>(
      <span class="type">GeometryReader</span> { geometryProxy <span class="keyword">in</span>
        <span class="type">Color</span>.<span class="property">clear</span>
          .<span class="call">preference</span>(key: <span class="type">SizePreferenceKey</span>.<span class="keyword">self</span>, value: geometryProxy.<span class="property">size</span>)
      }
    )
    .<span class="call">onPreferenceChange</span>(<span class="type">SizePreferenceKey</span>.<span class="keyword">self</span>, perform: onChange)
  }
}
</code></pre><p>This extension takes in a function to be called whenever the view size is updated. Going back to our example, our new body declaration is:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  childView
    .<span class="call">readSize</span> { newSize <span class="keyword">in</span>
      <span class="call">print</span>(<span class="string">"The new child size is:</span> \(newSize)<span class="string">"</span>)
    }
}
</code></pre><p>Much better. The <em>plug and play</em> gist can be found <a href="https://gist.github.com/zntfdr/f735039b13265d7b25099f524e2116d9">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Once an ancestor has access to the key value, it's really up to us to decide what do with it:<br>we can use it for example to <em>force</em> multiple elements to share the same value (aka the same size in the example above), and much, much more.</p><p>In following articles we will see some examples: in the meanwhile, do you use <code>PreferenceKey</code>? have you seen any cool example? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>As always, thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/app-scene-storage</guid><title>Swift types with @AppStorage and @SceneStorage</title><description></description><link>https://www.fivestars.blog/articles/app-scene-storage</link><pubDate>Tue, 4 Aug 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p><code>@AppStorage</code> and <code>@SceneStorage</code> are two SwiftUI property wrappers that have been introduced this year.</p><p>Since both are backed by plists behind the scenes, out of the box we can use them with the following types: <code>Bool</code>, <code>Int</code>, <code>Double</code>, <code>String</code>, <code>URL</code> and <code>Data</code>.</p><p>What about other types?</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>RawRepresentable Types</h2><p>Both <code>@AppStorage</code> and <code>@SceneStorage</code> offer two initializers accepting values conforming to the <code>RawRepresentable</code> protocol with an associated type <code>RawValue</code> of either <a href="https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-26q9z"><code>Int</code></a> or <a href="https://developer.apple.com/documentation/swiftui/appstorage/init(wrappedvalue:_:store:)-7zk4r"><code>String</code></a>:</p><pre><code><span class="keyword">extension</span> <span class="type">AppStorage</span> {
  <span class="keyword">public init</span>(
    wrappedValue: <span class="type">Value</span>, 
    <span class="keyword">_</span> key: <span class="type">String</span>, 
    store: <span class="type">UserDefaults</span>? = <span class="keyword">nil</span>
  ) <span class="keyword">where</span> <span class="type">Value</span>: <span class="type">RawRepresentable</span>, <span class="type">Value</span>.<span class="type">RawValue</span> == <span class="type">Int</span>

  <span class="keyword">public init</span>(
    wrappedValue: <span class="type">Value</span>, 
    <span class="keyword">_</span> key: <span class="type">String</span>, 
    store: <span class="type">UserDefaults</span>? = <span class="keyword">nil</span>
  ) <span class="keyword">where</span> <span class="type">Value</span>: <span class="type">RawRepresentable</span>, <span class="type">Value</span>.<span class="type">RawValue</span> == <span class="type">String</span>
}

<span class="keyword">extension</span> <span class="type">SceneStorage</span> {
  <span class="keyword">public init</span>(
    wrappedValue: <span class="type">Value</span>, 
    <span class="keyword">_</span> key: <span class="type">String</span>, 
  ) <span class="keyword">where</span> <span class="type">Value</span>: <span class="type">RawRepresentable</span>, <span class="type">Value</span>.<span class="type">RawValue</span> == <span class="type">Int</span>

  <span class="keyword">public init</span>(
    wrappedValue: <span class="type">Value</span>, 
    <span class="keyword">_</span> key: <span class="type">String</span>, 
  ) <span class="keyword">where</span> <span class="type">Value</span>: <span class="type">RawRepresentable</span>, <span class="type">Value</span>.<span class="type">RawValue</span> == <span class="type">String</span>
}
</code></pre><blockquote><p>If you would like to dig deeper into <code>RawRepresentable</code>, I recommend <a href="https://nshipster.com/rawrepresentable/">this NSHipster article</a> by <a href="http://twitter.com/mattt">Mattt</a>.</p></blockquote><p>These initializers make it easy to store types such as <code>enum</code>s:</p><pre><code><span class="comment">// RawValue == Int</span>
<span class="keyword">enum</span> Fruit: <span class="type">Int</span>, <span class="type">Identifiable</span>, <span class="type">CaseIterable</span> {
  <span class="keyword">case</span> banana
  <span class="keyword">case</span> orange
  <span class="keyword">case</span> mango

  <span class="keyword">var</span> id: <span class="type">Int</span> { rawValue }
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@AppStorage</span>(<span class="string">"fruit"</span>) <span class="keyword">private var</span> fruit: <span class="type">Fruit</span> = .<span class="dotAccess">mango</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Picker</span>(<span class="string">"My Favorite Fruit"</span>, selection: $fruit) {
      <span class="type">ForEach</span>(<span class="type">Fruit</span>.<span class="property">allCases</span>, id: \.<span class="keyword">self</span>) {
        <span class="type">Text</span>(<span class="string">"</span>\($0)<span class="string">"</span> <span class="keyword">as</span> <span class="type">String</span>)
      }
    }.<span class="call">pickerStyle</span>(<span class="type">SegmentedPickerStyle</span>())
  }
}

<span class="comment">// RawValue == String</span>
<span class="keyword">enum</span> Fruit: <span class="type">String</span>, <span class="type">Identifiable</span>, <span class="type">CaseIterable</span> {
  <span class="keyword">case</span> banana
  <span class="keyword">case</span> orange
  <span class="keyword">case</span> mango

  <span class="keyword">var</span> id: <span class="type">String</span> { rawValue }
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@AppStorage</span>(<span class="string">"fruit"</span>) <span class="keyword">private var</span> fruit: <span class="type">Fruit</span> = .<span class="dotAccess">mango</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Picker</span>(<span class="string">"My Favorite Fruit"</span>, selection: $fruit) {
      <span class="type">ForEach</span>(<span class="type">Fruit</span>.<span class="property">allCases</span>, id: \.<span class="keyword">self</span>) {
        <span class="type">Text</span>($0.<span class="property">id</span>)
      }
    }.<span class="call">pickerStyle</span>(<span class="type">SegmentedPickerStyle</span>())
  }
}
</code></pre><p>While this is great, our apps most likely need to store a set of settings/preferences:<br>we could store each one of them separately, but we'd probably rather have an easy way to fetch and store a <code>Codable</code> instance instead, how can we do so?</p><h2>Codable Types</h2><p>Imagine to have a <code>Preference</code> struct, with all our app settings:</p><pre><code><span class="keyword">enum</span> Appearance: <span class="type">String</span>, <span class="type">Codable</span>, <span class="type">CaseIterable</span>, <span class="type">Identifiable</span> {
  <span class="keyword">case</span> dark
  <span class="keyword">case</span> light
  <span class="keyword">case</span> system

  <span class="keyword">var</span> id: <span class="type">String</span> { rawValue }
}

<span class="keyword">struct</span> Preferences: <span class="type">Codable</span> {
  <span class="keyword">var</span> appearance: <span class="type">Appearance</span>
  <span class="comment">// TODO: add more settings here</span>
}
</code></pre><p>How can we use <code>@AppStorage</code> and <code>@SceneStorage</code> with our <code>Codable</code> type?<br>Unfortunately so far this doesn't seem to be possible, if you have found a way, <a href="https://twitter.com/zntfdr">please let me know</a>.</p><blockquote><p>There are some <a href="https://twitter.com/jessymeow">smart people</a> <a href="https://github.com/JessyCatterwaul/SwiftUICodableStorage">working on it</a>.</p></blockquote><p>In the meantime, we can take up the challenge and solve it ourselves.</p><p>There are many ways to approach this, one of the simplest is probably extending <code>@Published</code>:</p><pre><code><span class="keyword">private var</span> cancellableSet: <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt; = []

<span class="keyword">extension</span> <span class="type">Published</span> <span class="keyword">where</span> <span class="type">Value</span>: <span class="type">Codable</span> {
  <span class="keyword">init</span>(wrappedValue defaultValue: <span class="type">Value</span>, <span class="keyword">_</span> key: <span class="type">String</span>, store: <span class="type">UserDefaults</span>? = <span class="keyword">nil</span>) {
    <span class="keyword">let</span> _store: <span class="type">UserDefaults</span> = store ?? .<span class="dotAccess">standard</span>

    <span class="keyword">if
      let</span> data = _store.<span class="call">data</span>(forKey: key),
      <span class="keyword">let</span> value = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">Value</span>.<span class="keyword">self</span>, from: data) {
      <span class="keyword">self</span>.<span class="keyword">init</span>(initialValue: value)
    } <span class="keyword">else</span> {
      <span class="keyword">self</span>.<span class="keyword">init</span>(initialValue: defaultValue)
    }

    projectedValue
      .<span class="call">sink</span> { newValue <span class="keyword">in
        let</span> data = <span class="keyword">try</span>? <span class="type">JSONEncoder</span>().<span class="call">encode</span>(newValue)
        _store.<span class="call">set</span>(data, forKey: key)
      }
      .<span class="call">store</span>(in: &amp;cancellableSet)
  }
}
</code></pre><blockquote><p>Credits to <a href="https://twitter.com/filimo">Victor Kushnerov</a> for the <a href="https://github.com/filimo/ReaderTranslator/blob/ca5f7e17dba09385f5d325ac27a335f4666dfc1c/ReaderTranslator/Property%20Wrappers/Published.swift">original implementation</a>.</p></blockquote><p>Since <code>@Published</code> doesn't have the same kind of limitations of <code>@AppStorage</code> and <code>@SceneStorage</code>, we can extend it with this new initializer where:</p><ul><li>the first part sets the initial value (either the one currently stored or the passed default value)</li><li>the second part creates an observer that will update <code>UserDefaults</code> every time our <code>@Published</code> value changes.</li></ul><p>Thanks to this new initializer <code>@Published</code> behaves similarly to <code>@AppStorage</code>, but for <code>Codable</code> types (the same approach can be used to bring <code>@AppStorage</code> support to iOS 13).</p><p>We can now go back to our <code>ContentView</code> and use our <code>Codable</code> <code>Preference</code> type:</p><pre><code><span class="keyword">class</span> ContentViewModel: <span class="type">ObservableObject</span> {
  <span class="keyword">@Published</span>(<span class="string">"userPreferences"</span>) <span class="keyword">var</span> preferences = <span class="type">Preferences</span>(appearance: .<span class="dotAccess">system</span>)
}

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@StateObject var</span> model = <span class="type">ContentViewModel</span>()

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Picker</span>(<span class="string">"Appearance"</span>, selection: $model.<span class="property">preferences</span>.<span class="property">appearance</span>) {
      <span class="type">ForEach</span>(<span class="type">Appearance</span>.<span class="property">allCases</span>, id: \.<span class="keyword">self</span>) {
        <span class="type">Text</span>(verbatim: $0.<span class="property">rawValue</span>)
      }
    }.<span class="call">pickerStyle</span>(<span class="type">SegmentedPickerStyle</span>())
  }
}
</code></pre><p>It's not as succinct as an <code>@AppStorage</code> variable definition, but definitely not too bad.</p><p>In a similar fashion we can take care of <code>@SceneStorage</code> where, instead of <code>UserDefaults</code>, we pass an <a href="https://developer.apple.com/documentation/uikit/uiscenesession"><code>UISceneSession</code></a> instance:</p><pre><code><span class="keyword">private var</span> cancellableSet: <span class="type">Set</span>&lt;<span class="type">AnyCancellable</span>&gt; = []

<span class="keyword">extension</span> <span class="type">Published</span> <span class="keyword">where</span> <span class="type">Value</span>: <span class="type">Codable</span> {
  <span class="keyword">init</span>(wrappedValue defaultValue: <span class="type">Value</span>, <span class="keyword">_</span> key: <span class="type">String</span>, session: <span class="type">UISceneSession</span>) {
    <span class="keyword">if
      let</span> data = session.<span class="property">userInfo</span>?[key] <span class="keyword">as</span>? <span class="type">Data</span>,
      <span class="keyword">let</span> value = <span class="keyword">try</span>? <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">Value</span>.<span class="keyword">self</span>, from: data) {
      <span class="keyword">self</span>.<span class="keyword">init</span>(initialValue: value)
    } <span class="keyword">else</span> {
      <span class="keyword">self</span>.<span class="keyword">init</span>(initialValue: defaultValue)
    }

    projectedValue
      .<span class="call">sink</span> { newValue <span class="keyword">in
        let</span> data = <span class="keyword">try</span>? <span class="type">JSONEncoder</span>().<span class="call">encode</span>(newValue)
        session.<span class="property">userInfo</span>?[key] = data
      }
      .<span class="call">store</span>(in: &amp;cancellableSet)
  }
}
</code></pre><p>The final gist can be found <a href="https://gist.github.com/zntfdr/d0cf1f7ba01613960577ac92ec89c5c5">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p><code>@AppStorage</code> and <code>@SceneStorage</code> are two very welcome SwiftUI additions, unfortunately they support the same types supported by plists, however in this article we've seen how can can extend SwiftUI to take care of other types as well.</p><p>Do you use a different approach? Have you found a way to directly extend <code>@AppStorage</code> and <code>@SceneStorage</code>? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>Thank you for reading!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/redacted-custom-effects</guid><title>Creating custom .redacted effects</title><description></description><link>https://www.fivestars.blog/articles/redacted-custom-effects</link><pubDate>Tue, 28 Jul 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>With the recent release of Xcode 12 we've gained a new <a href="https://developer.apple.com/documentation/swiftui/containerrelativeshape/redacted(reason:)"><code>.redacted(reason:)</code></a> SwiftUI modifier.</p><blockquote><p>See <a href="https://www.fivestars.blog/articles/swiftui-widgetkit">last week's article</a> for a quick refresher.</p></blockquote><p>This new modifier accepts an instance of <a href="https://developer.apple.com/documentation/swiftui/redactionreasons"><code>RedactionReasons</code></a>, which, as of beta 3, has one option available: <a href="https://developer.apple.com/documentation/swiftui/redactionreasons/placeholder"><code>.placeholder</code></a>.</p><p>While this is great, and I'm sure more options will come in the future, the effects are not very customizable:<br>in this article, let's see how expand what SwiftUI offers with our own effects.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h3>Extending RedactionReasons</h3><p>If we target iOS 14 and later, one way to do so is to piggyback on the current APIs and define our own <code>RedactionReasons</code> instances, as this type conforms to <code>OptionSet</code>:</p><pre><code><span class="keyword">extension</span> <span class="type">RedactionReasons</span> {
  <span class="keyword">public static let</span> confidential = <span class="type">RedactionReasons</span>(rawValue: <span class="number">1</span> &lt;&lt; <span class="number">10</span>)
}
</code></pre><blockquote><p>The high number was chosen to avoid clashes with future additions from the SwiftUI team.</p></blockquote><p>We can then create a new view modifier that checks for the <code>redactionReasons</code> environment, and, if our reason is found, modify the view:</p><pre><code><span class="keyword">struct</span> Redactable: <span class="type">ViewModifier</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">redactionReasons</span>) <span class="keyword">private var</span> reasons

  <span class="keyword">@ViewBuilder
  func</span> body(content: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> reasons.<span class="call">contains</span>(.<span class="dotAccess">confidential</span>) {
      content
        .<span class="call">accessibility</span>(label: <span class="type">Text</span>(<span class="string">"Confidential"</span>))
        .<span class="call">overlay</span>(<span class="type">Color</span>.<span class="property">black</span>)
    } <span class="keyword">else</span> {
      content
    }
  }
}
</code></pre><p>At call site, instead of calling <code>.modifier(Redactable())</code> wherever needed, we can create a View extension:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> redactable() -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">self</span>
      .<span class="call">modifier</span>(<span class="type">Redactable</span>())
  }
}
</code></pre><p>Here's how we would use it:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Text</span>(<span class="string">"Hello world"</span>)

      <span class="type">Text</span>(<span class="string">"Hello world"</span>)
        .<span class="call">redactable</span>()
    }
    .<span class="call">redacted</span>(reason: .<span class="dotAccess">confidential</span>)
    .<span class="call">font</span>(.<span class="dotAccess">title</span>)
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/redacted-custom-effects/14.gif"/><p>The final gist can be found <a href="https://gist.github.com/zntfdr/c56ed8f9190f8416baa7527359e78ed6">here</a>.</p><p>While this works, we're using APIs that we don't own and don't have any inner insights: this makes our solution fragile. The SwiftUI team can, unintentionally, break our code in any future release.</p><p>To avoid this, we can create our own API.</p><h3>Building our own Redacted API</h3><p>Let's start by defining our reasons:</p><pre><code><span class="keyword">public enum</span> RedactionReason {
  <span class="keyword">case</span> placeholder
  <span class="keyword">case</span> confidential
  <span class="keyword">case</span> blurred
}
</code></pre><blockquote><p>This enum definition won't clash with SwiftUI's <code>RedactionReasons</code> because we omit the <code>s</code> at the end of the type (SwiftUI <code>RedactionReasons</code> is an <code>OptionSet</code>, hence the plural in the type name).</p></blockquote><p>Then we define a modifier for each of our reasons:</p><pre><code><span class="keyword">struct</span> Placeholder: <span class="type">ViewModifier</span> {
  <span class="keyword">func</span> body(content: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    content
      .<span class="call">accessibility</span>(label: <span class="type">Text</span>(<span class="string">"Placeholder"</span>))
      .<span class="call">opacity</span>(<span class="number">0</span>)
      .<span class="call">overlay</span>(
        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">2</span>)
          .<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">black</span>.<span class="call">opacity</span>(<span class="number">0.1</span>))
          .<span class="call">padding</span>(.<span class="dotAccess">vertical</span>, <span class="number">4.5</span>)
    )
  }
}

<span class="keyword">struct</span> Confidential: <span class="type">ViewModifier</span> {
  <span class="keyword">func</span> body(content: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    content
      .<span class="call">accessibility</span>(label: <span class="type">Text</span>(<span class="string">"Confidential"</span>))
      .<span class="call">overlay</span>(<span class="type">Color</span>.<span class="property">black</span>)
    )
  }
}

<span class="keyword">struct</span> Blurred: <span class="type">ViewModifier</span> {
  <span class="keyword">func</span> body(content: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    content
      .<span class="call">accessibility</span>(label: <span class="type">Text</span>(<span class="string">"Blurred"</span>))
      .<span class="call">blur</span>(radius: <span class="number">4</span>)
  }
}
</code></pre><p>As we did before, we then define a <code>Redactable</code> view modifier:</p><pre><code><span class="keyword">struct</span> Redactable: <span class="type">ViewModifier</span> {
  <span class="keyword">let</span> reason: <span class="type">RedactionReason</span>?

  <span class="keyword">@ViewBuilder
  func</span> body(content: <span class="type">Content</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">switch</span> reason {
    <span class="keyword">case</span> .<span class="dotAccess">placeholder</span>:
      content
        .<span class="call">modifier</span>(<span class="type">Placeholder</span>())
    <span class="keyword">case</span> .<span class="dotAccess">confidential</span>:
      content
        .<span class="call">modifier</span>(<span class="type">Confidential</span>())
    <span class="keyword">case</span> .<span class="dotAccess">blurred</span>:
      content
        .<span class="call">modifier</span>(<span class="type">Blurred</span>())
    <span class="keyword">case nil</span>:
      content
    }
  }
}
</code></pre><blockquote><p>As described in the conclusions, there's little gain in making our <code>RedactionReason</code> available in the environment instead of passing it directly to the view modifier. Therefore I opted for the simpler API.</p></blockquote><p>Lastly, let's create the <code>View</code> extension to be used at call site:</p><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
  <span class="keyword">func</span> redacted(reason: <span class="type">RedactionReason</span>?) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">self</span>
      .<span class="call">modifier</span>(<span class="type">Redactable</span>(reason: reason))
  }
}
</code></pre><p>Here's an example on how to use it:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">Text</span>(<span class="string">"Hello World"</span>)
        .<span class="call">redacted</span>(reason: <span class="keyword">nil</span>)
      <span class="type">Text</span>(<span class="string">"Hello World"</span>)
        .<span class="call">redacted</span>(reason: .<span class="dotAccess">placeholder</span>)
      <span class="type">Text</span>(<span class="string">"Hello World"</span>)
        .<span class="call">redacted</span>(reason: .<span class="dotAccess">confidential</span>)
      <span class="type">Text</span>(<span class="string">"Hello World"</span>)
        .<span class="call">redacted</span>(reason: .<span class="dotAccess">blurred</span>)
    }
  }
}
</code></pre><p>And just like that, we have our own redacted API, compatible with iOS 13 as well.</p><img src="https://www.fivestars.blog/assets/posts/redacted-custom-effects/13.gif"/><p>The final gist can be found <a href="https://gist.github.com/zntfdr/0fd00e65ba775fbfa638f94dbcf6331f">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>SwiftUI's new modifier is great and I'm sure we will find plenty of awesome uses for it, especially when more effects will be added. For the moment, if what SwiftUI offers is not enough for our needs, we can create our own effects without too much trouble.</p><p>To be fair, as we don't own the actual rendering of each view, our custom effects are more limited than SwiftUI's <code>.redacted</code> ones:<br>for example there's no easy way for us to get the environment's <code>.foregroundColor</code> (FB8161189), and our effects take place even when a nested view has been marked with <a href="https://developer.apple.com/documentation/watchkit/nowplayingview/3664129-unredacted"><code>.unredacted()</code></a>.</p><p>What effects would you like to see implemented? Do you already a feature in mind where you will use <code>.redacted</code>? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>As always, thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-widgetkit</guid><title>SwiftUI features in WidgetKit</title><description>This year we've gained new SwiftUI features designed for WidgetKit: let's explore what they are.</description><link>https://www.fivestars.blog/articles/swiftui-widgetkit</link><pubDate>Tue, 21 Jul 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>This year we've gained new SwiftUI features designed for <a href="https://developer.apple.com/documentation/widgetkit/"><code>WidgetKit</code></a>: let's explore what they are.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>.redacted</h2><img src="https://www.fivestars.blog/assets/posts/swiftui-widgetkit/placeholder.gif"/><p>Released in Xcode 12b3, the <a href="https://developer.apple.com/documentation/swiftui/containerrelativeshape/redacted(reason:)"><code>.redacted</code></a> modifier renders our views as placeholders instead of displaying the actual content.</p><pre><code><span class="type">VStack</span> {
  <span class="type">Text</span>(<span class="string">"Five Stars"</span>)
    .<span class="call">font</span>(.<span class="dotAccess">title2</span>)

  <span class="type">Text</span>(<span class="string">"This"</span>)
  <span class="type">Text</span>(<span class="string">"is"</span>)
  <span class="type">Text</span>(<span class="string">"redacted!"</span>)
}
.<span class="call">redacted</span>(reason: .<span class="dotAccess">placeholder</span>)
</code></pre><p>If we have a <code>Text("Five Stars")</code> view, adding a <code>.redacted(reason: .placeholder)</code> modifier replaces the text with a rounded rectangle of the same length of the text, the same color as the text foreground, and some opacity to let the background still show through the rectangle.</p><blockquote><p>During WWDC this modifier was announced as <code>.isPlaceholder(_:)</code>: with the new <code>.redacted(reason:)</code> API, the SwiftUI team can add different placeholder styles (a.k.a. <a href="https://developer.apple.com/documentation/swiftui/redactionreasons"><code>RedactionReasons</code></a>) in the future.</p></blockquote><h3>Why is this for WidgetKit</h3><p><a href="https://developer.apple.com/documentation/widgetkit/creating-a-widget-extension">When making widgets</a>, a requirement is to provide a generic preview of our widget to be displayed in the Widget Gallery: the purpose of this gallery is to give a glimpse of the actual widget.</p><p><code>.redacted(reason:)</code> is perfect for this scenario, as each widget can create its own custom preview, while still being consistent with the rest.</p><h3>Why this is great for SwiftUI</h3><p>There are multiple scenarios were we could use this.</p><p>Imagine for example having a screen where the data comes from a server:<br>instead of displaying a spinner or an empty view, we can now display a placeholder of the final view, to be replaced as soon as the data is received.</p><h2>Text Date Interpolation</h2><img src="https://www.fivestars.blog/assets/posts/swiftui-widgetkit/countdown.gif"/><p><code>Text</code> has gained new <a href="https://developer.apple.com/documentation/widgetkit/keeping-a-widget-up-to-date#Display-Dynamic-Dates">semantic API</a>.</p><p>We can now pass a <code>Date</code> instance to <code>Text</code> and, <a href="https://developer.apple.com/documentation/swiftui/text/init%28_:style:%29">by setting</a> its <a href="https://developer.apple.com/documentation/swiftui/text/datestyle"><code>Text.DateStyle</code></a> to one of the relative options, we enable a special SwiftUI logic that knows when to refresh itself:</p><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
  <span class="type">VStack</span> {
    <span class="type">Text</span>(<span class="string">"Countdown"</span>)
    <span class="type">Text</span>(<span class="type">Date</span>().<span class="call">addingTimeInterval</span>(<span class="number">60</span>), style: .<span class="dotAccess">offset</span>)
      .<span class="call">font</span>(.<span class="dotAccess">title</span>)
      .<span class="call">bold</span>()
      .<span class="call">multilineTextAlignment</span>(.<span class="dotAccess">center</span>)
  }
}
</code></pre><p>The best part is that when this logic update happens, it won't trigger a redraw of the whole <code>body</code>, but just for the specific <code>Text</code>.</p><blockquote><p>As of Xcode 12 beta 2 the dynamic text only takes as much space as needed for the first draw, meaning that if, in the future, the time to be shown requires more space, it will be truncated. This is a bug and will be hopefully fixed by the time Xcode 12 is released (FB8053971).</p></blockquote><h3>Why is this for WidgetKit</h3><p>iOS 14 widgets are completely static: they're not interactive, we can't do animations, etc.<br>Using these new <code>Text</code> API will make our widget feel alive, despite the fact it's really not.</p><h3>Why this is great for SwiftUI</h3><p>While less necessary, it's still nice to have these new <code>Text</code> initializers that won't re-run the whole view <code>body</code> at every update.</p><h2>Link</h2><p><a href="https://developer.apple.com/documentation/swiftui/link "><code>Link</code></a> is a new SwiftUI element similar to <code>Button</code>, but specializes exclusively in opening <code>URL</code>s.</p><pre><code><span class="type">Link</span>(
  <span class="string">"Visit my blog! ‚ú®"</span>,
  destination: <span class="type">URL</span>(string: <span class="string">"https://www.fivestars.blog"</span>)!
)
</code></pre><h3>Why is this for WidgetKit</h3><p>As we can't run any logic in our widgets, we cannot use SwiftUI buttons:<br>however any <code>medium</code>/<code>large</code> widget can have multiple elements that, when tapped, deep link into the main app. This behaviour is possible thanks to <code>Link</code>s.</p><h3>Why this is great for SwiftUI</h3><p><code>Link</code> makes it clearer what the wrapped element functionality is, without having to worry about other side effects that we could add in a normal <code>Button</code> action.</p><blockquote><p>Beside universal links, <code>Link</code> can also be used to open an URL on the device's default browser.</p></blockquote><h3>ContainerRelativeShape</h3><img src="https://www.fivestars.blog/assets/posts/swiftui-widgetkit/rainbow.gif"/><blockquote><p>Note how the rainbow colors follow the widget shape.</p></blockquote><p><a href="https://developer.apple.com/documentation/swiftui/containerrelativeshape"><code>ContainerRelativeShape</code></a> lets us get a hold of the <a href="https://developer.apple.com/documentation/swiftui/shape"><code>Shape</code></a> of our view container.</p><pre><code><span class="keyword">struct</span> PlaceholderView: <span class="type">View</span> {
  <span class="keyword">let</span> colors: [<span class="type">Color</span>] = [.<span class="dotAccess">red</span>, .<span class="dotAccess">orange</span>, .<span class="dotAccess">yellow</span>, .<span class="dotAccess">green</span>,
                         .<span class="dotAccess">blue</span>, .<span class="dotAccess">purple</span>, .<span class="dotAccess">pink</span>, .<span class="dotAccess">white</span>]
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ZStack</span> {
      <span class="type">ForEach</span>(<span class="number">0</span>..&lt;colors.<span class="property">count</span>) { index <span class="keyword">in</span>
        <span class="type">ContainerRelativeShape</span>()
          .<span class="call">inset</span>(by: <span class="type">CGFloat</span>(index) * <span class="number">3</span>)
          .<span class="call">fill</span>(colors[index])
      }

      <span class="type">Text</span>(<span class="string">"Five Stars"</span>)
        .<span class="call">font</span>(.<span class="dotAccess">title</span>)
        .<span class="call">bold</span>()
    }
  }
}
</code></pre><h3>Why is this for WidgetKit</h3><p>Currently <code>ContainerRelativeShape</code> is used mainly to get the widget shape:<br>this is needed because different devices have different widget shapes and sizes, making it tricky to have a proper widget border to fit all widgets.</p><h3>Why this is great for SwiftUI</h3><p>While <code>ContainerRelativeShape</code> is a great for widgets, in future betas it will be possible to use it with the <a href="https://developer.apple.com/documentation/swiftui/view/clipshape(_:style:"><code>.clipShape</code></a>) modifier.</p><p>It might be a long shot, but it would be great if we could use it to also get the shape of the device our app is running on: think for example the screen shape of an Apple Watch or an iPad pro.</p><p>These are small details, but would unlock designs simply not possible in this moment.</p><blockquote><p>If you agree, please feel free to dump my feedback: FB7953118</p></blockquote><h3>.widgetURL</h3><p><code>Link</code> works only on <code>medium</code>/<code>large</code> sized widgets, for the <code>small</code> family the whole widget itself is a tappable area: what url the widget deeplinks to is set via the <a href="https://developer.apple.com/documentation/swiftui/view/widgeturl(_:)">.widgetURL</a> modifier.</p><p>If we don't set <code>.widgetURl</code> in our widget, tapping it will just open the app.</p><pre><code><span class="keyword">struct</span> FiveStarsWidgetView: <span class="type">View</span> {
  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">FSWidget</span>()
      .<span class="call">widgetURL</span>(<span class="type">URL</span>(string: <span class="string">"fivestars.blog"</span>))
  }
}
</code></pre><p>Despite being part of SwiftUI, this modifier currently has no use beside in WidgetKit (as of Xcode 12b2).</p><h2>And More</h2><p>We've also gained more SwiftUI elements, such as <a href="https://developer.apple.com/documentation/widgetkit/widgetpreviewcontext"><code>WidgetPreviewContext</code></a> to preview widgets with the right preview layout in the canvas, <a href="https://developer.apple.com/documentation/widgetkit/staticconfiguration/onbackgroundurlsessionevents(matching:_:)-2c8e7"><code>onBackgroundURLSessionEvents</code></a> to fetch data in our widgets, but those are within the WidgetKit framework, therefore out of this article scope.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Even if we don't plan to implement widgets in our apps, these new SwiftUI elements can certainly benefit any SwiftUI app, while some might not ever be used outside WidgetKit, it's still nice to have more choices when building our next app.</p><p>Are you going to add a widget into your app? Will you use any of the new features somewhere else? <a href="https://twitter.com/zntfdr">I would love to know</a> üòÉ</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swiftui-hierarchy-list</guid><title>SwiftUI Hierarchy List</title><description></description><link>https://www.fivestars.blog/articles/swiftui-hierarchy-list</link><pubDate>Tue, 14 Jul 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Among the SwiftUI enhancements from this year, <a href="https://developer.apple.com/documentation/swiftui/list"><code>List</code></a> has learned to traverse hierarchical data.</p><p>This is useful when we'd like to display a tree-like structure, for example a Swift package folder:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-hierarchy-list/spm.gif"/><p>The best part? Its implementation is <strong>one line of code</strong>.</p><p>Given our recursive model:</p><pre><code><span class="keyword">struct</span> FileItem: <span class="type">Identifiable</span> {
  <span class="keyword">let</span> name: <span class="type">String</span>
  <span class="keyword">var</span> children: [<span class="type">FileItem</span>]? <span class="comment">// an instance can have multiple sub-FileItems.</span>

  <span class="keyword">var</span> id: <span class="type">String</span> { name }
}
</code></pre><p>This is our complete view:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">let</span> data: [<span class="type">FileItem</span>]

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">List</span>(data, children: \.<span class="property">children</span>, rowContent: { <span class="type">Text</span>($0.<span class="property">name</span>) })
  }
}
</code></pre><p>This is all <code>List</code> needs: - an array of elements - a keypath to the optional children - a view builder that, given one element, creates a row</p><p><code>List</code> will take care of everything else.</p><p>This is yet another example of elegant SwiftUI API, which hides complexity from the developer:<br>in this article, let's see how we can implement our own Hierarchy List.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Implementing a Hierarchy List</h2><blockquote><p>We will mimic the same signature of the <a href="https://developer.apple.com/documentation/swiftui/list/init(_:children:rowcontent:)"><code>List</code> initializer</a> used above.</p></blockquote><p>Our new structure will be composed of two pieces: 1. a simple <code>List</code>, to preserve the lazy loading of our views 2. a <code>RecursiveView</code>, that will display a given "hierarchy level" (e.g. the content of a folder)</p><h3>Generic Constraints</h3><p>Our Hierarchy List will support any kind of inputs and views, therefore we will define two generics:</p><ul><li>the type of collection data that comes in, <code>Data</code></li><li>the output of the row view builder, <code>RowContent</code></li></ul><p>To make it work, we need to set some limitations on these generics:</p><ul><li><code>Data</code> will need to be a <code>RandomAccessCollection</code>, as our <code>List</code> can access to any of its elements at will.</li><li><code>Data</code> collection's <code>Element</code>, <code>Data.Element</code>, will need to conform to <code>Identifiable</code>, as this will be used to identify each row in the <code>List</code>.</li><li>lastly, the output of the row view builder, <code>RowContent</code>, must be a <code>View</code>.</li></ul><h3>1. HierarchyList</h3><p><code>HierarchyList</code> is the first of the two components just mentioned above:<br>the name <code>HierarchyList</code> was chosen as this is what developers will see when using our API.</p><pre><code><span class="keyword">struct</span> HierarchyList&lt;Data, RowContent&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Data</span>: <span class="type">RandomAccessCollection</span>, <span class="type">Data</span>.<span class="type">Element</span>: <span class="type">Identifiable</span>, <span class="type">RowContent</span>: <span class="type">View</span> {
  <span class="keyword">let</span> recursiveView: <span class="type">RecursiveView</span>&lt;<span class="type">Data</span>, <span class="type">RowContent</span>&gt;

  <span class="keyword">init</span>(data: <span class="type">Data</span>, children: <span class="type">KeyPath</span>&lt;<span class="type">Data</span>.<span class="type">Element</span>, <span class="type">Data</span>?&gt;, rowContent: <span class="keyword">@escaping</span> (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">RowContent</span>) {
    <span class="keyword">self</span>.<span class="property">recursiveView</span> = <span class="type">RecursiveView</span>(data: data, children: children, rowContent: rowContent)
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">List</span> {
      recursiveView
    }
  }
}
</code></pre><p>As promised, this is really just a <code>List</code> that invokes the second component of our structure: <code>RecursiveView</code>.</p><h3>2. RecursiveView</h3><p>This view will display one level of elements and, if one or more of these elements have any "sub-elements", will invoke itself via a <a href="https://developer.apple.com/documentation/swiftui/DisclosureGroup"><code>DisclosureGroup</code></a> (that we <a href="https://www.fivestars.blog/articles/optional-binding/">met previously</a>).</p><blockquote><p><code>DisclosureGroup</code>'s uses a lazy approach: it computes its <code>content</code> on demand, based on what it needs to display.</p></blockquote><p>In either case, the given <code>rowContent</code> view builder will be used to draw each row in the screen:</p><pre><code><span class="keyword">struct</span> RecursiveView&lt;Data, RowContent&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Data</span>: <span class="type">RandomAccessCollection</span>, <span class="type">Data</span>.<span class="type">Element</span>: <span class="type">Identifiable</span>, <span class="type">RowContent</span>: <span class="type">View</span> {
  <span class="keyword">let</span> data: <span class="type">Data</span>
  <span class="keyword">let</span> children: <span class="type">KeyPath</span>&lt;<span class="type">Data</span>.<span class="type">Element</span>, <span class="type">Data</span>?&gt;
  <span class="keyword">let</span> rowContent: (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">RowContent</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ForEach</span>(data) { child <span class="keyword">in
      if let</span> subChildren = child[keyPath: children] {
        <span class="type">DisclosureGroup</span> {
          <span class="type">RecursiveView</span>(data: subChildren, children: children, rowContent: rowContent)
        } label: {
          <span class="call">rowContent</span>(child)
        }
      } <span class="keyword">else</span> {
        <span class="call">rowContent</span>(child)
      }
    }
  }
}
</code></pre><h3>Wrap up</h3><p>That's it! With just 33 lines of code we have perfectly cloned the new <code>List</code> hierarchical behavior:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-hierarchy-list/spm.gif"/><p>Lastly, let's add some access control modifiers in order to complete our API:</p><pre><code><span class="keyword">public struct</span> HierarchyList&lt;Data, RowContent&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Data</span>: <span class="type">RandomAccessCollection</span>, <span class="type">Data</span>.<span class="type">Element</span>: <span class="type">Identifiable</span>, <span class="type">RowContent</span>: <span class="type">View</span> {
  <span class="keyword">private let</span> recursiveView: <span class="type">RecursiveView</span>&lt;<span class="type">Data</span>, <span class="type">RowContent</span>&gt;

  <span class="keyword">public init</span>(data: <span class="type">Data</span>, children: <span class="type">KeyPath</span>&lt;<span class="type">Data</span>.<span class="type">Element</span>, <span class="type">Data</span>?&gt;, rowContent: <span class="keyword">@escaping</span> (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">RowContent</span>) {
    <span class="keyword">self</span>.<span class="property">recursiveView</span> = <span class="type">RecursiveView</span>(data: data, children: children, rowContent: rowContent)
  }

  <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">List</span> {
      recursiveView
    }
  }
}

<span class="keyword">private struct</span> RecursiveView&lt;Data, RowContent&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Data</span>: <span class="type">RandomAccessCollection</span>, <span class="type">Data</span>.<span class="type">Element</span>: <span class="type">Identifiable</span>, <span class="type">RowContent</span>: <span class="type">View</span> {
  <span class="keyword">let</span> data: <span class="type">Data</span>
  <span class="keyword">let</span> children: <span class="type">KeyPath</span>&lt;<span class="type">Data</span>.<span class="type">Element</span>, <span class="type">Data</span>?&gt;
  <span class="keyword">let</span> rowContent: (<span class="type">Data</span>.<span class="type">Element</span>) -&gt; <span class="type">RowContent</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ForEach</span>(data) { child <span class="keyword">in
      if let</span> subChildren = child[keyPath: children] {
        <span class="type">DisclosureGroup</span> {
          <span class="type">RecursiveView</span>(data: subChildren, children: children, rowContent: rowContent)
        } label: {
          <span class="call">rowContent</span>(child)
        }
      } <span class="keyword">else</span> {
        <span class="call">rowContent</span>(child)
      }
    }
  }
}
</code></pre><p>The final gist can be found <a href="https://gist.github.com/zntfdr/9d94cac84235f04f021cb6c7e8c1a1c5">here</a>.</p><h2>A Custom Hierarchy List Behavior</h2><p>Since we have our own implementation of the Hierarchy List, we can now add behaviors that SwiftUI doesn't offer.</p><p>For example, SwiftUI's <code>List</code> initially only displays the first level of the hierarchy, with all disclosure groups collapsed:<br>how can we have the opposite behavior, where the full hierarchy is displayed from the start?</p><p>As we've <a href="https://www.fivestars.blog/articles/optional-binding/">covered in a previous article</a>, <code>DisclosureGroup</code> comes with multiple initializers, some of which accept a <code>isExpanded</code> binding, letting us control the group expanded/collapsed state.</p><p>We can use one of those initializers to wrap the default <code>DisclosureGroup</code> in a new view, <code>FSDisclosureGroup</code>, that will set the initial <code>isExpanded</code> state to <code>true</code> instead of <code>false</code>:</p><pre><code><span class="keyword">struct</span> FSDisclosureGroup&lt;Label, Content&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Label</span>: <span class="type">View</span>, <span class="type">Content</span>: <span class="type">View</span> {
  <span class="keyword">@State var</span> isExpanded: <span class="type">Bool</span> = <span class="keyword">true
  var</span> content: () -&gt; <span class="type">Content</span>
  <span class="keyword">var</span> label: () -&gt; <span class="type">Label</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">DisclosureGroup</span>(
      isExpanded: $isExpanded,
      content: content,
      label: label
    )
  }
}
</code></pre><p>We can now replace <code>DisclosureGroup</code> in our <code>RecursiveView</code> with <code>FSDisclosureGroup</code> and <em>voila'</em>, the full hierarchy is displayed by default, and users can still collapse/expand groups later on:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-hierarchy-list/spmExpanded.gif"/><p>The final gist can be found <a href="https://gist.github.com/zntfdr/085e3d75d59a77ad0125d3a1ef96039b">here</a>.</p><h2>Hierarchy Lists in iOS 13</h2><p>Both the new hierarchical <code>List</code> API and <code>DisclosureGroup</code> are iOS 14+, however in a <a href="https://www.fivestars.blog/articles/optional-binding/">previous article</a> we've built our own <code>DisclosureGroup</code>:<br>without bringing the whole API here, let's just replace our <code>FSDisclosureGroup</code> with the following:</p><pre><code><span class="keyword">struct</span> FSDisclosureGroup&lt;Label, Content&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Label</span>: <span class="type">View</span>, <span class="type">Content</span>: <span class="type">View</span> {
  <span class="keyword">@State var</span> isExpanded: <span class="type">Bool</span> = <span class="keyword">false
  var</span> content: () -&gt; <span class="type">Content</span>
  <span class="keyword">var</span> label: () -&gt; <span class="type">Label</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(action: { isExpanded.<span class="call">toggle</span>() }, label: { <span class="call">label</span>().<span class="call">foregroundColor</span>(.<span class="dotAccess">blue</span>) })
    <span class="keyword">if</span> isExpanded {
      <span class="call">content</span>()
    }
  }
}
</code></pre><p>This iOS-13 compatible View makes the whole row tappable, making it simple to see which elements have sub elements or not:</p><img src="https://www.fivestars.blog/assets/posts/swiftui-hierarchy-list/ios13-1.gif"/><blockquote><p>Making the UI more similar to the iOS 14 <code>DisclosureGroup</code> is left as an exercise to the reader</p></blockquote><p>As we can see from the image above, our list is missing something that <code>DisclosureGroup</code> was taking care of: the padding!<br>When a group is expanded, its children are displayed with a leading padding to clearly show the data structure, however we do not get that in our own implementation.</p><p>Luckily for us, this is simple to address: all we need to do is add a <code>.padding(.leading)</code> modifier in our recursive call of <code>RecursiveView</code>.</p><pre><code><span class="keyword">private struct</span> RecursiveView&lt;Data, RowContent&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Data</span>: <span class="type">RandomAccessCollection</span>, <span class="type">Data</span>.<span class="type">Element</span>: <span class="type">Identifiable</span>, <span class="type">RowContent</span>: <span class="type">View</span> {
  ...

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ForEach</span>(data) { child <span class="keyword">in
      if let</span> subChildren = child[keyPath: children] {
        <span class="type">DisclosureGroup</span> {
          <span class="type">RecursiveView</span>(data: subChildren, children: children, rowContent: rowContent)
          .<span class="call">padding</span>(.<span class="dotAccess">leading</span>) <span class="comment">// &lt;-- new padding</span>
        } label: {
          ...
        }
      } <span class="keyword">else</span> {
        ...
      }
    }
  }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/swiftui-hierarchy-list/ios13-2.gif"/><p>And that's it! Now we have a complete port of the Hierarchy List to iOS 13 üòÉ</p><p>The complete gist, compatible with Xcode 11 and Swift 5.2, can be found <a href="https://gist.github.com/zntfdr/9425d6e18e21eeeb352df0821207871e">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>This week we've covered and re-implemented another great SwiftUI addition: are you going to use it in your projects? What other new SwiftUI feature would you like me to write about? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/section-title-index-swiftui</guid><title>SwiftUI: Bridging UIKit with ScrollViewReader and DragGesture</title><description></description><link>https://www.fivestars.blog/articles/section-title-index-swiftui</link><pubDate>Tue, 7 Jul 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>When SwiftUI launched, one of the missing pieces was the ability to programmatically control the offset of <a href="https://developer.apple.com/documentation/swiftui/scrollview"><code>ScrollView</code></a>s:<br>in Xcode 12 and iOS 14, we've gained <a href="https://developer.apple.com/documentation/swiftui/scrollviewreader"><code>ScrollViewReader</code></a>, which addresses exactly this shortcoming.</p><p>Another missing feature is the possibility to add <a href="https://developer.apple.com/documentation/uikit/uitableviewdatasource/1614857-sectionindextitles"><code>sectionIndexTitles</code></a> to <a href="https://developer.apple.com/documentation/swiftui/list"><code>List</code></a>s: this is the index list (for example <code>A</code> through <code>Z</code>) placed on the trailing side of a table view, used to quickly jump to a specific section.</p><p>In this article we're going to use <code>ScrollViewReader</code> and <code>DragGesture</code> and implement our own <code>SectionIndexTitles</code>:</p><img src="https://www.fivestars.blog/assets/posts/section-title-index-swiftui/preview.gif"/><p>There's a lot going on in this screen: let's build each component one by one.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The List</h2><img src="https://www.fivestars.blog/assets/posts/section-title-index-swiftui/listonly.gif"/><ul><li>we will use a <code>ScrollView</code> along with our <code>ScrollViewReader</code> (an example with <code>List</code> is given at the end of the article).</li><li>while we use a <code>ScrollView</code>, we still want to have a lazy loading of our UI elements, therefore we're going to use a <code>LazyVstack</code> as well.</li><li>lastly, the devices data comes in form of a dictionary, where the keys are the section headers, and the elements are the section content.</li></ul><blockquote><p>There are more efficient ways to display this data, however it's not the focus of this article.</p></blockquote><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">let</span> devices: [<span class="type">String</span>: [<span class="type">String</span>]]

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {
      <span class="type">LazyVStack</span> {
        devicesList
      }
    }
    .<span class="call">navigationBarTitle</span>(<span class="string">"Apple Devices"</span>)
  }

  <span class="keyword">var</span> devicesList: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ForEach</span>(devices.<span class="call">sorted</span>(by: { (lhs, rhs) -&gt; <span class="type">Bool</span> <span class="keyword">in</span>
      lhs.<span class="property">key</span> &lt; rhs.<span class="property">key</span>
    }), id: \.<span class="property">key</span>) { categoryName, devicesArray <span class="keyword">in</span>
      <span class="type">Section</span>(
        header: <span class="type">HeaderView</span>(title: categoryName)
      ) {
        <span class="type">ForEach</span>(devicesArray, id: \.<span class="keyword">self</span>) { deviceName <span class="keyword">in</span>
          <span class="type">RowView</span>(text: deviceName)
        }
      }
    }
  }
}
</code></pre><p>In here I'm also introducing a couple of helper views, <code>RowView</code> and <code>HeaderView</code>, to make the code more readable:</p><pre><code><span class="keyword">struct</span> HeaderView: <span class="type">View</span> {
  <span class="keyword">let</span> title: <span class="type">String</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(title)
      .<span class="call">font</span>(.<span class="dotAccess">title</span>)
      .<span class="call">fontWeight</span>(.<span class="dotAccess">bold</span>)
      .<span class="call">padding</span>()
      .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>, alignment: .<span class="dotAccess">leading</span>)
  }
}

<span class="keyword">struct</span> RowView: <span class="type">View</span> {
  <span class="keyword">let</span> text: <span class="type">String</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Text</span>(text)
      .<span class="call">padding</span>()
      .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>, alignment: .<span class="dotAccess">leading</span>)
  }
}
</code></pre><blockquote><p>Instead of wrapping <code>Text</code> views in a <code>HStack</code> and push the text to the left with a <code>Spacer</code>, I'm wrapping <code>Text</code> in a <code>.frame</code> modifier, which is set to take all the width that it is given, and aligns its content to the leading edge.</p></blockquote><h2>Section Index Titles</h2><img src="https://www.fivestars.blog/assets/posts/section-title-index-swiftui/sectiontitles.gif"/><p>This is another, completely separated, view. To make it more fun, I'm using SF Symbols instead of just text:</p><pre><code><span class="keyword">struct</span> SectionIndexTitles: <span class="type">View</span> {
  <span class="keyword">let</span> titles: [<span class="type">String</span>]

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">ForEach</span>(titles, id: \.<span class="keyword">self</span>) { title <span class="keyword">in</span>
        <span class="type">SectionIndexTitle</span>(image: <span class="call">sfSymbol</span>(for: title))
      }
    }
  }

  <span class="keyword">func</span> sfSymbol(for deviceCategory: <span class="type">String</span>) -&gt; <span class="type">Image</span> {
    <span class="keyword">let</span> systemName: <span class="type">String</span>
    <span class="keyword">switch</span> deviceCategory {
    <span class="keyword">case</span> <span class="string">"iPhone"</span>: systemName = <span class="string">"iphone"</span>
    <span class="keyword">case</span> <span class="string">"iPad"</span>: systemName = <span class="string">"ipad"</span>
    <span class="keyword">case</span> <span class="string">"iPod"</span>: systemName = <span class="string">"ipod"</span>
    <span class="keyword">case</span> <span class="string">"Apple TV"</span>: systemName = <span class="string">"appletv"</span>
    <span class="keyword">case</span> <span class="string">"Apple Watch"</span>: systemName = <span class="string">"applewatch"</span>
    <span class="keyword">case</span> <span class="string">"HomePod"</span>: systemName = <span class="string">"homepod"</span>
    <span class="keyword">default</span>: systemName = <span class="string">"xmark"</span>
    }
    <span class="keyword">return</span> <span class="type">Image</span>(systemName: systemName)
  }
}
</code></pre><p>As before, I'm introducing a new view, <code>SectionIndexTitle</code>, to improve readability:</p><pre><code><span class="keyword">struct</span> SectionIndexTitle: <span class="type">View</span> {
  <span class="keyword">let</span> image: <span class="type">Image</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">8</span>, style: .<span class="dotAccess">continuous</span>)
      .<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">gray</span>.<span class="call">opacity</span>(<span class="number">0.1</span>))
      .<span class="call">frame</span>(width: <span class="number">40</span>, height: <span class="number">40</span>)
      .<span class="call">overlay</span>(
        image
          .<span class="call">foregroundColor</span>(.<span class="dotAccess">blue</span>)
      )
  }
}
</code></pre><h2>Putting it together</h2><p>Now that we have both the list of devices and our <code>SectionIndexTitles</code>, we can put them together via an overlay:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  ...

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollView</span> {
      <span class="type">LazyVStack</span> {
        devicesList
      }
    }
    .<span class="call">overlay</span>(sectionIndexTitles)
    .<span class="call">navigationBarTitle</span>(<span class="string">"Apple Devices"</span>)
  }

  ...

  <span class="keyword">var</span> sectionIndexTitles: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">SectionIndexTitles</span>(titles: devices.<span class="property">keys</span>.<span class="call">sorted</span>())
      .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>, alignment: .<span class="dotAccess">trailing</span>)
      .<span class="call">padding</span>()
  }
}
</code></pre><blockquote><p>We could have used a <code>ZStack</code> as well, however we want our <code>SectionIndexTitles</code> to be on top of our <code>ScrollView</code>, and avoid the titles to expand further than the <code>ScrollView</code> itself.</p></blockquote><h2>ScrollViewReader</h2><p>With the UI in place, it's time to use the new <code>ScrollViewReader</code> component.</p><p>By wrapping our <code>ScrollView</code> into a <code>ScrollViewReader</code>, we're given a <a href="https://developer.apple.com/documentation/swiftui/scrollviewproxy"><code>ScrollViewProxy</code></a> instance, used to programmatically trigger a scroll:<br>this works by calling the <a href="https://developer.apple.com/documentation/swiftui/scrollviewproxy/scrollto(_:anchor:)"><code>scrollTo(_:)</code></a> method on the instance, and passing the <code>id</code> of the view we want to scroll to.</p><blockquote><p>Note that the element we want to scroll to might not be even loaded yet: <code>ScrollViewProxy</code> will still work as expected.</p></blockquote><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  ...

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">ScrollViewReader</span> { proxy <span class="keyword">in</span>
      <span class="type">ScrollView</span> {
        <span class="type">LazyVStack</span> {
          devicesList
        }
      }
      .<span class="call">overlay</span>(sectionIndexTitles)
    }
    .<span class="call">navigationBarTitle</span>(<span class="string">"Apple Devices"</span>)
  }

  ...
}
</code></pre><h2>ScrollViewProxy</h2><p>In our first attempt, we can make each section title a button to jump to that section, in order to do so we need to:</p><ul><li>pass the proxy to our <code>SectionIndexTitles</code></li><li>wrap each <code>SectionIndexTitle</code> into a button with a trigger to scroll to that section</li></ul><pre><code><span class="keyword">struct</span> SectionIndexTitles: <span class="type">View</span> {
  <span class="keyword">let</span> proxy: <span class="type">ScrollViewProxy</span>
  <span class="keyword">let</span> titles: [<span class="type">String</span>]

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">ForEach</span>(titles, id: \.<span class="keyword">self</span>) { title <span class="keyword">in</span>
        <span class="type">Button</span> {
          proxy.<span class="call">scrollTo</span>(title)
        } label: {
          <span class="type">SectionIndexTitle</span>(image: <span class="call">sfSymbol</span>(for: title))
        }
      }
    }
  }

  ...
}
</code></pre><p>These two steps will already make our <code>SectionIndexTitles</code> work:<br>we don't need to add an explicit <code>.id</code> modifier in our <code>ScrollView</code> sections, because our <code>devicesList</code> is defined via a <code>ForEach</code>, where each view has an implicit identifier <code>id: \.key</code> (set in the <code>ForEach</code>), which is equal to our device categories.</p><img src="https://www.fivestars.blog/assets/posts/section-title-index-swiftui/button.gif"/><h2>DragGesture</h2><p>While our first attempt works fine, it doesn't exactly mimic <code>UITableView</code>'s <code>sectionIndexTitles</code>:<br>the way <code>sectionIndexTitles</code> used to work is by dragging our finger on the titles, and only that will make the <code>tableView</code> scroll to the right section.</p><p>In this second attempt, we will add a drag gesture that spans the whole <code>SectionIndexTitles</code> view, and then trigger the right <code>scrollTo</code> action when the finger is over one of the index titles.</p><p>One way to do so is by:</p><ul><li>storing the global <code>dragLocation</code> in a <code>@GestureState</code> variable</li><li>add an "drag location observer" to each section index title, which will trigger the <code>scrollTo</code> action when the gesture is happening on that title.</li></ul><pre><code><span class="keyword">struct</span> SectionIndexTitles: <span class="type">View</span> {
  <span class="keyword">let</span> proxy: <span class="type">ScrollViewProxy</span>
  <span class="keyword">let</span> titles: [<span class="type">String</span>]
  <span class="keyword">@GestureState private var</span> dragLocation: <span class="type">CGPoint</span> = .<span class="dotAccess">zero</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">VStack</span> {
      <span class="type">ForEach</span>(titles, id: \.<span class="keyword">self</span>) { title <span class="keyword">in</span>
        <span class="type">SectionIndexTitle</span>(image: <span class="call">sfSymbol</span>(for: title))
          .<span class="call">background</span>(<span class="call">dragObserver</span>(title: title))
      }
    }
    .<span class="call">gesture</span>(
      <span class="type">DragGesture</span>(minimumDistance: <span class="number">0</span>, coordinateSpace: .<span class="dotAccess">global</span>)
        .<span class="call">updating</span>($dragLocation) { value, state, <span class="keyword">_ in</span>
          state = value.<span class="property">location</span>
        }
    )
  }

  <span class="keyword">func</span> dragObserver(title: <span class="type">String</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">GeometryReader</span> { geometry <span class="keyword">in</span>
      <span class="call">dragObserver</span>(geometry: geometry, title: title)
    }
  }

  <span class="comment">// This function is needed as view builders don't allow to have 
  // pure logic in their body.</span>
  <span class="keyword">private func</span> dragObserver(geometry: <span class="type">GeometryProxy</span>, title: <span class="type">String</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    <span class="keyword">if</span> geometry.<span class="call">frame</span>(in: .<span class="dotAccess">global</span>).<span class="call">contains</span>(dragLocation) {
      <span class="comment">// we need to dispatch to the main queue because we cannot access to the
      // `ScrollViewProxy` instance while the body is rendering</span>
      <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> {
        proxy.<span class="call">scrollTo</span>(title, anchor: .<span class="dotAccess">center</span>)
      }
    }
    <span class="keyword">return</span> <span class="type">Rectangle</span>().<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">clear</span>)
  }

  ...
}
</code></pre><p>And with this, we we've finally achieved our goal! üéâ</p><img src="https://www.fivestars.blog/assets/posts/section-title-index-swiftui/preview.gif"/><p>The final gist can be found <a href="https://gist.github.com/zntfdr/30664611ab48e9f73a22a290fa9064a6">here</a>.</p><h2>List</h2><p>Starting from Xcode 12 beta 3, all we've discussed here holds true for <code>List</code>s as well:</p><img src="https://www.fivestars.blog/assets/posts/section-title-index-swiftui/list.gif"/><p>The new gist can be found <a href="https://gist.github.com/zntfdr/f2cb9f8f5edff371784288f27756cef3">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>SwiftUI doesn't offer everything that UIKit has, it probably never will, however this shouldn't stop us from experimenting and come up with our own SwiftUI solutions that will make our migration to SwiftUI easier.</p><p>I personally really like the example above, because now our <code>SectionIndexTitles</code> is just another SwiftUI view, which makes it incredibly easy to further customize it (if SF Symbols were not already good enough for you) in ways which would not be possible in UIKit.</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/optional-binding</guid><title>Adding optional @Bindings to SwiftUI views</title><description></description><link>https://www.fivestars.blog/articles/optional-binding</link><pubDate>Tue, 30 Jun 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Among the new SwiftUI views from this year WWDC we have <a href="https://developer.apple.com/documentation/swiftui/DisclosureGroup"><code>DisclosureGroup</code></a>.<br><code>DisclosureGroup</code> shows/hides its content based on a disclosure state:</p><pre><code><span class="type">DisclosureGroup</span>(isExpanded: $showingContent) {
   <span class="type">Text</span>(<span class="string">"Content"</span>)
} label: {
   <span class="type">Text</span>(<span class="string">"Tap to show content"</span>)
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/optional-binding/tap.gif"/><p>What caught my eye is that <code>DisclosureGroup</code> comes with a few initializers:<br>some require a <code>isExpanded</code> <code>Binding&lt;Bool&gt;</code> parameter, some don't.</p><pre><code><span class="comment">// no binding</span>
<span class="type">DisclosureGroup</span> {
  <span class="type">Text</span>(<span class="string">"Content"</span>)
} label: {
  <span class="type">Text</span>(<span class="string">"Tap to show content"</span>)
}

<span class="comment">// with binding</span>
<span class="type">DisclosureGroup</span>(isExpanded: $showingContent) {
  <span class="type">Text</span>(<span class="string">"Content"</span>)
} label: {
  <span class="type">Text</span>(<span class="string">"Tap to show content"</span>)
}
</code></pre><p>How can a view deal with getting, and also not getting, a <code>@Binding</code>?<br>In this article we're going to try to create a View with the same API.</p><p>But first, let's have a look at the concepts behind <code>DisclosureGroup</code>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Why having these options?</h2><p>In the <a href="https://www.wwdcnotes.com/notes/wwdc20/10040/">WWDC20 session <code>Data Essentials in SwiftUI</code></a> the SwiftUI team teaches us to ask the following questions when creating a new view:</p><ol><li>What data does this view need?</li><li>How will the view manipulate that data?</li><li>Where will the data come from?</li><li>Who owns the data?</li></ol><p>With <code>DisclosureGroup</code>, it's clear that the <code>isExpanded</code> state could be handled both internally and externally:</p><ul><li>internally, if the state doesn't effect any other part of the view hierarchy.</li><li>externally, if we want to access and manipulate this state somewhere else as well.</li></ul><p>For <code>DisclosureGroup</code> it makes sense to expose and handle both options.</p><p>Let's see how we can mimic this behavior ourselves.</p><h2>Getting started</h2><p>Despite <code>isExpanded</code> not being present in all initializers, a <code>Binding&lt;Bool&gt;</code> state <strong>is necessary</strong> for the view to work. Let's create a view that requires this binding:</p><pre><code><span class="keyword">struct</span> MyDisclosureGroup&lt;Label, Content&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Label</span>: <span class="type">View</span>, <span class="type">Content</span>: <span class="type">View</span> {
  <span class="keyword">@Binding var</span> isExpanded: <span class="type">Bool</span>
  <span class="keyword">var</span> content: () -&gt; <span class="type">Content</span>
  <span class="keyword">var</span> label: () -&gt; <span class="type">Label</span>

  <span class="keyword">@ViewBuilder
  var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">Button</span>(action: { isExpanded.<span class="call">toggle</span>() }, label: label)
    <span class="keyword">if</span> isExpanded {
      <span class="call">content</span>()
    }
  }
}
</code></pre><p>We can now replace <code>DisclosureGroup</code> in our code with <code>MyDisclosureGroup</code>, and everything works exactly in the same way:</p><pre><code><span class="type">MyDisclosureGroup</span>(isExpanded: $showingContent) {
   <span class="type">Text</span>(<span class="string">"Content"</span>)
} label: {
   <span class="type">Text</span>(<span class="string">"Tap to show content"</span>)
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/optional-binding/tap2.gif"/><blockquote><p>This article aims to copy the API and behavior of <code>DisclosureGroup</code>, not its UI.</p></blockquote><h2>Making the Binding State Optional</h2><p>With <code>MyDisclosureGroup</code> there's no way around it: it needs a <code>Binding&lt;Bool&gt;</code> state.</p><p>However, it doesn't matter where this binding comes from, for example we can wrap <code>MyDisclosureGroup</code> into a container that:</p><ul><li>acts as its public interface</li><li>declares a <code>State&lt;Bool&gt;</code></li></ul><p>If a binding is given, the container will pass it to <code>MyDisclosureGroup</code>, otherwise it will pass its own state:</p><pre><code><span class="keyword">struct</span> MyDisclosureGroupContainer&lt;Label, Content&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Label</span>: <span class="type">View</span>, <span class="type">Content</span>: <span class="type">View</span> {
  <span class="keyword">@State private var</span> privateIsExpanded: <span class="type">Bool</span> = <span class="keyword">false
  var</span> isExpanded: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;?
  <span class="keyword">var</span> content: () -&gt; <span class="type">Content</span>
  <span class="keyword">var</span> label: () -&gt; <span class="type">Label</span>

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">MyDisclosureGroup</span>(
      isExpanded: isExpanded ?? $privateIsExpanded,
      content: content,
      label: label
    )
  }
}
</code></pre><p>We can now initialize <code>MyDisclosureGroupContainer</code> by either passing or not a binding. The outcome will be the same:</p><pre><code><span class="comment">// no binding</span>
<span class="type">MyDisclosureGroupContainer</span> {
  <span class="type">Text</span>(<span class="string">"Content"</span>)
} label: {
  <span class="type">Text</span>(<span class="string">"Tap to show content"</span>)
}

<span class="comment">// with binding</span>
<span class="type">MyDisclosureGroupContainer</span>(isExpanded: $showingContent) {
  <span class="type">Text</span>(<span class="string">"Content"</span>)
} label: {
  <span class="type">Text</span>(<span class="string">"Tap to show content"</span>)
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/optional-binding/tap2.gif"/><h2>Making our Public API Pretty</h2><p>Thanks to <code>MyDisclosureGroupContainer</code> we now have a way to handle both cases where a <code>@Binding</code> is passed and not, however this view currenly offers only the default initializer:</p><pre><code><span class="keyword">init</span>(isExpanded: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;? = <span class="keyword">nil</span>, content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>, label: <span class="keyword">@escaping</span> () -&gt; <span class="type">Label</span>)
</code></pre><p>having an optional <code>isExpanded</code> parameter of type <code>Binding&lt;Bool&gt;?</code> is a source of confusion: what does <code>init(isExpanded: nil, ...)</code> do?</p><p>If we don't know the implementation details, this could raise quite a few eyebrows.</p><p>Therefore, let's create two new initializers instead: - one will require a non-optional binding - one will require no binding at all</p><pre><code><span class="keyword">struct</span> MyDisclosureGroupContainer&lt;Label, Content&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Label</span>: <span class="type">View</span>, <span class="type">Content</span>: <span class="type">View</span> {
  <span class="keyword">@State private var</span> myIsExpanded: <span class="type">Bool</span> = <span class="keyword">false
  private var</span> isExpanded: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;?
  <span class="keyword">var</span> content: () -&gt; <span class="type">Content</span>
  <span class="keyword">var</span> label: () -&gt; <span class="type">Label</span>

  <span class="keyword">init</span>(isExpanded: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;, content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>, label: <span class="keyword">@escaping</span> () -&gt; <span class="type">Label</span>) {
    <span class="keyword">self</span>.<span class="keyword">init</span>(isExpanded: .<span class="call">some</span>(isExpanded), content: content, label: label)
  }

  <span class="keyword">init</span>(content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>, label: <span class="keyword">@escaping</span> () -&gt; <span class="type">Label</span>) {
    <span class="keyword">self</span>.<span class="keyword">init</span>(isExpanded: <span class="keyword">nil</span>, content: content, label: label)
  }

  <span class="comment">// private!</span>
  <span class="keyword">private init</span>(isExpanded: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;?, content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>, label: <span class="keyword">@escaping</span> () -&gt; <span class="type">Label</span>) {
    <span class="keyword">self</span>.<span class="property">isExpanded</span> = isExpanded
    <span class="keyword">self</span>.<span class="property">content</span> = content
    <span class="keyword">self</span>.<span class="property">label</span> = label
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">MyDisclosureGroup</span>(
      isExpanded: isExpanded ?? $myIsExpanded,
      content: content,
      label: label
    )
  }
}
</code></pre><p>With this in place, our container now exposes two, easy to understand initializers:</p><pre><code><span class="comment">// with binding</span>
<span class="keyword">init</span>(isExpanded: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;, content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>, label: <span class="keyword">@escaping</span> () -&gt; <span class="type">Label</span>)
<span class="comment">// without binding</span>
<span class="keyword">init</span>(content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>, label: <span class="keyword">@escaping</span> () -&gt; <span class="type">Label</span>)
</code></pre><p>This is much better, developers using these API immediately understand what they do, without worrying what's happening behind the scene.</p><h2>A Container?</h2><p>Let's review what we did so far:</p><ul><li>we've built a view, <code>MyDisclosureGroup</code>, with the actual implementation of our UI, which requires a binding.</li><li>we've built a <code>MyDisclosureGroup</code> container, <code>MyDisclosureGroupContainer</code>, which lets developers use <code>MyDisclosureGroup</code> by either passing a <code>@Binding</code>, or not.</li></ul><p>Note how the developer doesn't really need to know how this works behind the scenes:<br><code>MyDisclosureGroupContainer</code> <strong>is an implementation detail</strong>.</p><p>The first fundamental of <a href="https://swift.org/documentation/api-design-guidelines/#fundamentals">Swift's API Design Guidelines</a> is <code>Clarity at the point of use</code>:<br>we should always strive to hide all the complexity of our views, while being clear on what they do.</p><p>With this in mind we can improve our code by:</p><ul><li>renaming <code>MyDisclosureGroupContainer</code> to <code>MyDisclosureGroup</code></li><li>renaming the original <code>MyDisclosureGroup</code> to <code>OriginalMyDisclosureGroup</code>, and hiding it, for example by putting it inside the "container"</li></ul><pre><code><span class="keyword">struct</span> MyDisclosureGroup&lt;Label, Content&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Label</span>: <span class="type">View</span>, <span class="type">Content</span>: <span class="type">View</span> {
  <span class="keyword">@State private var</span> myIsExpanded: <span class="type">Bool</span> = <span class="keyword">false
  private var</span> isExpanded: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;?
  <span class="keyword">var</span> content: () -&gt; <span class="type">Content</span>
  <span class="keyword">var</span> label: () -&gt; <span class="type">Label</span>

  <span class="keyword">public init</span>(isExpanded: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;, content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>, label: <span class="keyword">@escaping</span> () -&gt; <span class="type">Label</span>) {
    <span class="keyword">self</span>.<span class="keyword">init</span>(isExpanded: .<span class="call">some</span>(isExpanded), content: content, label: label)
  }

  <span class="keyword">public init</span>(content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>, label: <span class="keyword">@escaping</span> () -&gt; <span class="type">Label</span>) {
    <span class="keyword">self</span>.<span class="keyword">init</span>(isExpanded: <span class="keyword">nil</span>, content: content, label: label)
  }

  <span class="keyword">private init</span>(isExpanded: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt;?, content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>, label: <span class="keyword">@escaping</span> () -&gt; <span class="type">Label</span>) {
    <span class="keyword">self</span>.<span class="property">isExpanded</span> = isExpanded
    <span class="keyword">self</span>.<span class="property">content</span> = content
    <span class="keyword">self</span>.<span class="property">label</span> = label
  }

  <span class="keyword">private struct</span> OriginalDisclosureGroup&lt;Label, Content&gt;: <span class="type">View</span> <span class="keyword">where</span> <span class="type">Label</span>: <span class="type">View</span>, <span class="type">Content</span>: <span class="type">View</span> {
    <span class="keyword">@Binding var</span> isExpanded: <span class="type">Bool</span>
    <span class="keyword">var</span> content: () -&gt; <span class="type">Content</span>
    <span class="keyword">var</span> label: () -&gt; <span class="type">Label</span>

    <span class="keyword">@ViewBuilder
    var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
      <span class="type">Button</span>(action: { isExpanded.<span class="call">toggle</span>() }, label: label)
      <span class="keyword">if</span> isExpanded {
        <span class="call">content</span>()
      }
    }
  }

  <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">OriginalDisclosureGroup</span>(
      isExpanded: isExpanded ?? $myIsExpanded,
      content: content,
      label: label
    )
  }
}
</code></pre><p>And with this last change, we've accomplished our goal! üéâ</p><p>The final gist can be found <a href="https://gist.github.com/zntfdr/44b034bd03201ac6d0cfb71049d233fc">here</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>The more I work with Swift, the more I see how we can expose powerful APIs, while also making them easy to use and even look <em>simple</em>. This is one of the best aspects of Swift and SwiftUI, and it's something that we should always strive to do in our own code as well.</p><p>Of course, I have no insights on the actual implementation of <code>DisclosureGroup</code>, but just by finding a way on how to mimic it, we can really appreciate all the tremendous work that both the Swift and SwiftUI team put into making things <em>simple</em> for us.</p><p>What do you think? Do you have any alternative on how to build this view? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more SwiftUI articles! üöÄ</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/wwdc-notes</guid><title>Introducing WWDC Notes</title><description></description><link>https://www.fivestars.blog/articles/wwdc-notes</link><pubDate>Mon, 15 Jun 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>As a university student, there hasn't been a day where I came back home without plenty of new, lengthly notes from all the classes I attended.</p><p>Sometimes my professors would explain concepts way better than the course books, or cover topics that were not in the books at all. I didn't want to miss a thing!</p><p>While my university years are over, the habit of taking notes has never really faded away, and one place where this is clearly manifested at is Apple's WWDC.</p><p>Every year Apple gifts us with hundreds of new sessions that dive deep into new frameworks, show us the evolution of current frameworks, dictate new best practices, and much more.</p><p>All of this WWDC material is incredibly valuable, and I find myself referencing to my WWDC notes over and over, even many years after taking them.</p><p>While this is great, all of these notes were only growing year by year, and with not much of an organization, it started getting harder to find exactly what I needed.</p><p>I had to find a solution, and while I was at it, I thought that, maybe, these notes could be useful to other people as well.</p><p>Introducing...</p><h2><a href="https://www.wwdcnotes.com">WWDC Notes</a> üéâ</h2><p><a href="https://www.wwdcnotes.com">WWDC Notes</a> is a brand new website that contains all my past and future WWDC notes, all the way back to WWDC 2012 (for the moment!). All notes are separated by year, track (Design, Developer Tools, ...), and platform.</p><p>While the website currently contains only my notes, it doesn't have to be that way:<br><a href="https://www.wwdcnotes.com">WWDC Notes</a> content is completely <a href="https://github.com/zntfdr/WWDC-Notes">open source</a> and I welcome everybody to come in and add even more notes or update the current ones with corrections/enhancements/etc.</p><p>I had fun building it and I hope you will find WWDC Notes useful as much as I find it myself!</p><p>This is very much an MVP with more features to come, if you have a chance, <a href="https://www.wwdcnotes.com">please have a look</a>!</p><p>Any feedback/feature request/and more is very welcome, please <a href="https://twitter.com/zntfdr">hit me on Twitter</a>! üòä</p><p>Thank you for reading and I wish everybody a great WWDC 2020!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/wwdc-countdown</guid><title>The WWDC Countdown Talks Challenge</title><description></description><link>https://www.fivestars.blog/articles/wwdc-countdown</link><pubDate>Wed, 3 Jun 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>The amount of amazing content out there is incredible. With so much at our disposal, it's very easy to fall behind and never catch up.</p><p>With speculations indicating a WWDC happening on the first week of June, in early May, exactly 4 weeks before June, <a href="https://twitter.com/zntfdr/status/1257324514108518407">I've publicly challenged myself</a> to watch at least one talk per day for the rest of May, welcoming others to join as well.</p><p>In this post you can find all the videos that I watched, separated by topic. If you would like to see them in the same chronological order as I did, please refer to <a href="https://twitter.com/zntfdr/status/1257324514108518407">this Twitter thread</a> instead.</p><blockquote><p><a href="https://twitter.com/zntfdr/status/1257324514108518407">The Twitter thread</a> also has a short summary for each talk.</p></blockquote><p>Without further ado:</p><h2>SwiftUI &amp; Combine</h2><ul><li><a href="https://www.youtube.com/watch?v=GuK6wwX8M0E&list=PLleLsCcywRxKT3VgBPtzxtRjq-NXK0FZw"><em>SwiftUI under the hood</em></a> by <a href="https://twitter.com/chriseidhof">Chris Eidhof</a> at <a href="https://swiftable.io/">BA: Swiftable</a> 2019.</li><li><a href="https://vimeo.com/showcase/6225806/video/354579304"><em>Building for the Long Haul: Preparing Your App for SwiftUI</em></a> by <a href="https://twitter.com/Frankacy">Frank Courville</a> at <a href="https://www.swiftconf.to/">Swift TO</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=vDzIeFzGAuU"><em>SwiftUI &amp; Combine</em></a> by <a href="https://twitter.com/dimsumthinking">Daniel Steinberg</a> at <a href="https://frenchkit.fr/">FrenchKit</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=cawUX50Pt4k"><em>Getting Started with Combine</em></a> by <a href="https://twitter.com/freak4pc">Shai Mishali</a> at <a href="https://www.tryswift.co/">try! Swift New York</a> 2019.</li><li><a href="https://www.dotconferences.com/2020/02/donny-wals-the-combine-triad"><em>The Combine Triad</em></a> by <a href="https://twitter.com/DonnyWals">Donny Wals</a> at <a href="https://www.dotswift.io/">dotSwift</a> 2020.</li><li><a href="https://www.youtube.com/watch?v=5vMm-grRZBY&feature=youtu.be"><em>Writing game in SwiftUI ‚Äîa madness?</em></a> by <a href="https://twitter.com/myridiphis">Pavel Zak</a> at <a href="https://moconf.by/">MobileOptimized</a> 2019.</li><li><a href="https://vimeo.com/showcase/6225806/video/354555005"><em>Pushing SwiftUI to the Limit</em></a> by <a href="https://twitter.com/nerdonica ">Veronica Ray</a> at <a href="https://www.swiftconf.to/">Swift TO</a> 2019.</li></ul><h2>iOS</h2><ul><li><a href="https://academy.realm.io/posts/tryswift-tim-oliver-advanced-graphics-with-core-animation/"><em>Advanced Graphics with Core Animation</em></a> (<a href="https://www.youtube.com/watch?v=QgRO-51I-pY">Japanese</a>) by <a href="https://twitter.com/TimOliverAU">Tim Oliver</a> at <a href="https://www.tryswift.co/">try! Swift Tokyo</a> 2016.</li><li><a href="https://www.youtube.com/watch?v=x_czrytFGrU&list=PLr5cF6ekyIDhnZ2ESdPshESfyAyxZ01TO&index=36"><em>OMG Collection Views!</em></a> by <a href="https://twitter.com/twostraws">Paul Hudson</a> at <a href="https://mobiconf.org/">Mobiconf</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=HXFHumn0j1I&list=PLr5cF6ekyIDhnZ2ESdPshESfyAyxZ01TO&index=10"><em>0xFEEDFACE</em></a> by <a href="https://twitter.com/kam800">Kamil Borzym</a> at <a href="https://mobiconf.org/">Mobiconf</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=9DIJvVCCMyI&list=PLljEvxF6pJBBSQXDRnQvACukLJGybS17O&index=20"><em>Animations are Assets</em></a> by <a href="https://twitter.com/_inside">Guilherme Rambo</a> at <a href="http://altconf.com/">AltConf</a> 2019.</li></ul><h2>Swift</h2><ul><li><a href="https://www.youtube.com/watch?v=iLDldae64xE"><em>High Performance Systems in Swift</em></a> <a href="https://www.youtube.com/watch?v=WCUj581Dpec">(part 2)</a> by <a href="https://twitter.com/johannesweiss">Johannes Weiss</a> (part 1) and <a href="https://twitter.com/Lukasaoz">Cory Benfield</a> (part 2) at <a href="https://www.dotswift.io/">dotSwift</a> 2019 (part 1) and <a href="https://www.hackingwithswift.com/live">Hacking with Swift Live</a> 2019 (part 2).</li><li><a href="https://www.youtube.com/watch?v=0rHG_Pa86oA"><em>Exploiting The Swift ABI</em></a> by <a href="https://twitter.com/Codafi_">Robert Widmann</a> at <a href="https://meetup.com/swift-language">Swift Language User Group (San Francisco)</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=GzP2oaZRi7Q"><em>Stabilizing your ABI</em></a> by <a href="https://twitter.com/dimsumthinking">Daniel Steinberg</a> at <a href="https://swiftconf.com/">SwiftConf</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=3BVkbWXcFS4"><em>Protocol Witnesses</em></a> by <a href="https://twitter.com/mbrandonw">Brandon Williams</a> at <a href="https://appbuilders.ch/">App Builders</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=jDvk7nztqHw&list=PLr5cF6ekyIDhnZ2ESdPshESfyAyxZ01TO&index=21"><em>Pushing Protocols to Their Limits</em></a> by <a href="https://twitter.com/jgarnham">Josh Garnham</a> at <a href="https://mobiconf.org/">Mobiconf</a> 2019.</li><li><a href="https://vimeo.com/362179375"><em>Swift Programming and Logic</em></a> by <a href="https://twitter.com/inamiy">Yasuhiro Inami</a> at <a href="https://nsspain.com/">NSSPain</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=GnT2ZeHVJe4"><em>Contributing to Swift</em></a> by <a href="https://twitter.com/ayanonagon">Ayaka Nonaka</a> at <a href="https://do-ios.com/">DO iOS</a> 2016.</li></ul><h2>iOS Tools</h2><ul><li><a href="https://academy.realm.io/posts/appbuilders-jp-simard-sourcekit/"><em>SourceKit and You</em></a> by <a href="https://twitter.com/simjp">JP Simard</a> at <a href="https://appbuilders.ch/">App Builders</a> 2016.</li><li><a href="https://www.youtube.com/watch?v=HR-OMaXDgAo"><em>Making Your Own Tools Using SwiftSyntax</em></a> by <a href="https://twitter.com/kitasuke">Yusuke kita</a> at <a href="https://devworld.com.au/">/dev/world/</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=UFyx7EtbcMU"><em>Designing a Design System</em></a> by <a href="https://twitter.com/freak4pc">Shai Mishali</a> at <a href="https://swiftheroes.com/">Swift Heroes</a> 2019.</li><li><a href="https://vimeo.com/337785976"><em>Taking the boilerplate out of your tests with Sourcery</em></a> by <a href="https://twitter.com/v_pradeilles">Vincent Pradeilles</a> at <a href="https://appdevcon.nl/">Appdevcon</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=_MuDpBfuVOw&list=PLAVm70iJlMussetgTInUWGthl0LZ78MOT&index=10"><em>Engineering best practices, mi fan un baffo!</em></a> by <a href="https://twitter.com/mattt">Mattt</a> at <a href="https://www.pragmaconference.com/">Pragma Conference</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=NAPeWoimGx8"><em>Postmortem for switching Lyft's iOS app to Bazel</em></a> by <a href="https://twitter.com/SmileyKeith">Keith Smiley</a> and <a href="https://twitter.com/kastiglione">Dave Lee</a> at <a href="https://bazel.build/">BazelCon</a> 2019.</li><li><a href="https://atscaleconference.com/videos/blazing-fast-scaling-ios-at-uber/"><em>Blazing fast: Scaling iOS at Uber</em></a> by <a href="https://twitter.com/alanzeino">Alan Zeino</a> and <a href="https://twitter.com/loyaltyarm">Nick Cobb</a> at <a href="https://atscaleconference.com/">At Scale</a> 2016.</li></ul><h2>Developer Life</h2><ul><li><a href="https://www.youtube.com/watch?v=mAiNdU1go1A"><em>Mind the gap, user centered design in large organizations</em></a> by <a href="https://twitter.com/LukeW">Luke Wroblewski</a> at <a href="https://www.youtube.com/user/conversionsatgoogle">Conversions Summit</a> 2019.</li><li><a href="https://www.youtube.com/watch?v=pAy6v4MEsnc&list=PLTFt3GGfH3hlCnH183ojUSbKtPmif6OdZ&index=16"><em>Static Site Generation In Swift</em></a> by <a href="https://twitter.com/johnsundell">JohnSundell</a> at <a href="https://www.serversideswift.info/">ServerSide.swift</a> 2019.</li><li><a href="https://vimeo.com/71278954"><em>The Future of Programming</em></a> by <a href="https://twitter.com/worrydream">Bret Victor</a> at DBX conference 2013.</li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Seeing this list makes me so grateful to the amazing Swift/iOS community: regardless of where you are, you can learn from people all around the world, on the topic that matters to you, for free.</p><p>How did the challenge go? Well, I watched two or more talks per day for most of the challenge: my goal was to reduce my talks-to-watch backlog, I think it went very well!</p><p>And since WWDC is still a few weeks away, this extra time allows me to launch a new project, very WWDC and community focused, in the upcoming weeks üòâ</p><p>Observe this space, <a href="https://www.fivestars.blog/feed.rss">rss here</a>, to not miss it!<br>Until then üëãüèª</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swift-scripts-preferences-userDefaults</guid><title>Swift CLI Tools User Preferences</title><description></description><link>https://www.fivestars.blog/articles/swift-scripts-preferences-userDefaults</link><pubDate>Thu, 30 Apr 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>It's common for apps to store user preferences and settings, the same is true for scripts:<br><a href="https://www.ssh.com/ssh/command/"><code>ssh</code></a> needs a place to store the user keys, <a href="https://git-scm.com"><code>git</code></a> a place to store the user name and email, etc.</p><p>While many CLI tools store such data in <a href="https://en.wikipedia.org/w/index.php?title=Dot_file&redirect=no">dot files</a>, in this article let's explore how we can use Foundation's UserDefaults!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>UserDefaults</h2><p>In the surface there's no real difference between using UserDefaults in a script or an app, for example:</p><ul><li>we can read and set any data in the UserDefault's <a href="https://developer.apple.com/documentation/foundation/userdefaults/1416603-standard"><code>standard</code></a> object:</li></ul><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">let</span> userDefaults = <span class="type">UserDefaults</span>.<span class="property">standard</span>

userDefaults.<span class="call">set</span>(<span class="number">5</span>, forKey: <span class="string">"stars"</span>)
<span class="call">print</span>(userDefaults.<span class="call">integer</span>(forKey: <span class="string">"stars"</span>)) <span class="comment">// prints "5"</span>
</code></pre><blockquote><p>The <code>main.swift</code> content.</p></blockquote><ul><li>we can create and use different suites:</li></ul><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">guard 
  let</span> userDefaults = <span class="type">UserDefaults</span>(suiteName: <span class="string">"five.stars"</span>) 
  <span class="keyword">else</span> { <span class="call">exit</span>(<span class="type">EXIT_FAILURE</span>) }

userDefaults.<span class="call">set</span>(<span class="number">5</span>, forKey: <span class="string">"stars"</span>)
<span class="call">print</span>(userDefaults.<span class="call">integer</span>(forKey: <span class="string">"stars"</span>)) <span class="comment">// prints "5"</span>
</code></pre><blockquote><p>The <code>main.swift</code> content.</p></blockquote><ul><li>we can even observe for <code>UserDefaults</code> changes:</li></ul><pre><code><span class="keyword">extension</span> <span class="type">UserDefaults</span> {
  <span class="keyword">@objc dynamic public var</span> stars: <span class="type">Int</span> {
    <span class="keyword">get</span> { <span class="call">integer</span>(forKey: <span class="keyword">#function</span>) }
    <span class="keyword">set</span> { <span class="call">set</span>(newValue, forKey: <span class="keyword">#function</span>) }
  }
}

<span class="keyword">guard 
  let</span> userDefaults = <span class="type">UserDefaults</span>(suiteName: <span class="string">"five.stars"</span>) 
  <span class="keyword">else</span> { <span class="call">exit</span>(<span class="type">EXIT_FAILURE</span>) }

<span class="keyword">let</span> token: <span class="type">NSKeyValueObservation</span> = userDefaults.<span class="call">observe</span>(
  \.<span class="property">stars</span>,
  options: [.<span class="dotAccess">initial</span>, .<span class="dotAccess">new</span>]
) { defaults, <span class="keyword">_ in
  let</span> rating = defaults.<span class="property">stars</span>
  <span class="keyword">let</span> fullStars = <span class="type">String</span>(repeating: <span class="string">"‚òÖ"</span>, count: rating)
  <span class="keyword">let</span> emptyStars = <span class="type">String</span>(repeating: <span class="string">"‚òÜ"</span>, count: <span class="number">5</span> - rating)
  <span class="keyword">let</span> stars: <span class="type">String</span> = fullStars + emptyStars
  <span class="call">print</span>(stars)
  <span class="comment">// üëÜüèª prints the initial value and whenever a new change is made.</span>
}

<span class="type">RunLoop</span>.<span class="property">current</span>.<span class="call">run</span>()
<span class="comment">// üëÜüèª stops the script from terminating</span>
</code></pre><blockquote><p>The <code>main.swift</code> content.</p></blockquote><img src="https://www.fivestars.blog/assets/posts/swift-script-userdefaults/5s-ud.gif"/><blockquote><p>The script in action</p></blockquote><h2>UserDefaults Location</h2><p>Regardless of the platform we're running on, UserDefaults are always stored in <a href="https://en.wikipedia.org/wiki/Property_list">Property List</a> files, which are XML files in disguise, where the elements alternate between <code>key</code> tags and other elements types.</p><blockquote><p>This explains why we can store only just a few handful types in UserDefaults.</p></blockquote><p>In iOS apps, the <a href="https://developer.apple.com/documentation/foundation/userdefaults/1416603-standard"><code>standard</code></a> UserDefaults plist is stored in the app <a href="https://developer.apple.com/documentation/foundation/1413045-nshomedirectory ">home directory</a> under the <code>Library/Preferences</code> folder: the name of the file is the app bundle identifier, for example <code>blog.fivestars.app.plist</code>.</p><p>On macOS, all user applications UserDefaults are stored at <code>~/Library/Preferences</code>, therefore this folder not only contains our app plist file, but all other apps as well.</p><blockquote><p>This is one reason why our apps need to have an unique bundle identifiers.</p></blockquote><p>This works great for apps, but our scripts don't have any bundle identifier: where the UserDefaults data of our tools are stored? It turns out that scripts also use the same folder: instead of using a bundle identifier, the script <a href="https://developer.apple.com/documentation/foundation/userdefaults/1416603-standard"><code>standard</code></a> UserDefaults plist is stored under the name of the script.</p><blockquote><p>e.g. a Swift executable named <code>hello</code> will have its <code>standard</code> UserDefaults stored at <code>~/Library/Preferences/hello.plist</code>.</p></blockquote><p>What about UserDefaults suites? In this case the suite name will be the name of the plist file.</p><blockquote><p>e.g. a script using <code>UserDefaults(suiteName: "five.stars")</code> will have this suite data stored at <code>~/Library/Preferences/five.stars.plist</code>.</p></blockquote><p>Scripts are unsandboxed processes, hence they can read/write <em>any</em> UserDefaults file located in <code>~/Library/Preferences/</code>, all it takes is to know the plist name (a.k.a. the app bundle id):<br>want to read/edit the user preferences for...</p><ul><li>Xcode? Use <code>UserDefaults(suiteName: "com.apple.dt.Xcode")</code></li></ul><ul><li>Finder? Use <code>UserDefaults(suiteName: "com.apple.finder")</code>.</li></ul><ul><li>Etc.</li></ul><blockquote><p>For an easy way to explore even more preferences of both system and 3rd party apps, I suggest to use the free <a href="http://apps.tempel.org/PrefsEditor/index.php">Prefs Editor</a> app.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>In this article we've explored the behind the scenes of our scripts UserDefaults preferences, where they're persisted in our machines, and how scripts can actually access to all apps UserDefaults.</p><p>Do your CLI tools store any preferences? What kind of preferences do you store? Do you use UserDefaults? Please <a href="https://twitter.com/zntfdr">let me know</a>!</p><p>As always, thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/how-covid-19-contact-tracing-works</guid><title>How Apple's and Google‚Äôs Coronavirus Contact Tracing System Works</title><description></description><link>https://www.fivestars.blog/articles/how-covid-19-contact-tracing-works</link><pubDate>Mon, 13 Apr 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>This article is based on the official preliminary technical specifications.</p></blockquote><p>Last Friday <a href="https://www.apple.com/newsroom/2020/04/apple-and-google-partner-on-covid-19-contact-tracing-technology/">Apple</a> and <a href="https://blog.google/inside-google/company-announcements/apple-and-google-partner-covid-19-contact-tracing-technology">Google</a> have announced a new partnership to fight against the current COVID-19 pandemic.</p><p>This partnership comes in two waves:</p><ol><li>Next month, May 2020, the companies will release an API, for each platform, that will enable apps <strong>from public health authorities</strong> to assist in <em>enabling</em> contact tracing access. This will require users to download such apps from the platform app stores.</li></ol><ol start="2"><li>In the <em>coming months</em> both companies will embed a Contact Tracing system at the OS level.</li></ol><p>This article focuses on the second point.</p><blockquote><p>If you'd like a less technical article, please <a href="https://www.theverge.com/2020/4/10/21216715/apple-google-coronavirus-covid-19-contact-tracing-app-details-use">refer to this</a>.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Contact Tracing TL;DR</h2><p>Contact Tracing alerts participants of possible exposure to someone who has been positively diagnosed with corona virus.</p><p>In other words, Contact Tracing reports when/if our device has been in the proximity of a person diagnosed with corona virus device.</p><h2>Technical Details</h2><h3>Inter-Device Communication</h3><p>Contact Tracing uses <a href="https://en.wikipedia.org/wiki/Bluetooth_Low_Energy">Bluetooth LE (Low Energy)</a> for inter-device communication, all iPhones from the iPhone 4S are equipped with it, however I believe Contact Tracing will be released as an iOS 13-only update, which means only iPhones from the iPhone 6s (and 6s Plus) are eligible.</p><p>Bluethooth LE has a theoretical maximum distance/range of 100m, however the effective range is far less than that.</p><p>Similar to WiFi device discovery, the Contact Tracing is based on <strong>advertising</strong>, a.k.a. Bluetooth payloads that our device sends out to anyone within reach, and <strong>scanning</strong>, which is receiving and reading other devices advertisements.</p><p>No connection between devices is ever made:<br>all devices will literally throw messages out in the air and read whatever comes in.</p><h4>Advertising</h4><p>Advertisements will happen at a high frequency: the current specification suggests to send out one advertisement every 200-270 milliseconds.</p><h4>Scanning</h4><p>While advertisements happen with high frequency, the scanning interval and window only need to have sufficient coverage to discover nearby advertisers within 5 minutes.</p><p>Which means that the scanning approach is <em>opportunistic</em>: Contact Tracing scans will piggyback existing device wakes and scan windows (our devices are constantly scanning for WiFi networks and Bluetooth devices), and will do so at least once every 5 minutes.</p><h3>Advertising Message</h3><p>The whole system is based on devices Bluetooth advertisements. These advertisements are all the same for all devices of all platforms, the only difference is a traceable key.<br><br>Contact Tracing defines three keys:</p><ul><li><strong>Tracing Key</strong> An unique key that is generated once per device.</li></ul><ul><li><strong>Daily Tracing Key</strong> A key derived from the Tracing Key, that changes every 24 hours.</li></ul><ul><li><strong>Rolling Proximity Identifier</strong> A key derived from the Daily Tracing Key, that changes every 10 to 20 minutes.</li></ul><p>The Bluetooth advertisement will <strong>always only</strong> contain the current Rolling Proximity Identifier key.</p><blockquote><p>Why does the system need three keys? It doesn't:Contact Tracing would work fine with one unique key per device. These three levels are there for user privacy and safety: - The Tracing Key never leaves the device. - The Daily (Tracing) Key change is there for user privacy. - The ~15 minutes (Rolling Proximity) Key change is there to prevent wireless tracking.</p></blockquote><h3>Scanning Behavior</h3><p>The scanning part translates into collecting other devices Rolling Proximity Identifier keys:<br>such keys are stored and processed exclusively on device.</p><h3>Putting It All Together</h3><h4>What Happens When A User Tests Positive for COVID-19</h4><p>When a user tests positive, it will let the system know (it's unclear <em>how</em> at this stage, I assume via a new app or via the platform Health app) and the relevant user's device Daily Tracing Keys will be uploaded to a <strong>Diagnosis Server</strong>, along with the relative days of each key.</p><blockquote><p>This is the only possible way for the Daily Tracing Keys to leave the device.</p></blockquote><p>A Diagnosis Server is a server that aggregates all Daily Tracing Keys from the users who tested positive, and distributes them to all the users devices (of all platforms) who are using Contact Tracing.</p><h5>Why The Daily Tracing Keys Are Uploaded?</h5><p>A Rolling Proximity Identifier is derived by its Daily Tracing Key and a 10-minute window (remember that this key changes every 10 to 20 minutes?).</p><p>Given a Daily Tracing Key, we can obtain the complete sequence of Rolling Proximity Identifier keys for that day.</p><h4>Identify Any Exposure</h4><p>At this point we know that:</p><ul><li>Each device collects all Rolling Proximity Identifiers advertised by other nearby devices.</li></ul><ul><li>Daily Tracing Keys from diagnosed users devices are uploaded to a Diagnosis Server.</li></ul><ul><li>Given a Daily Tracing Key, we can obtain all its associated Rolling Proximity Identifiers.</li></ul><p>Every device will <em>frequently</em> (it's unclear <em>how</em> frequent at the moment) fetch the list of Daily Tracing Keys from the Diagnosis Server.</p><p>The last step is to compute all Rolling Proximity Identifier sequences for each Daily Tracing Keys fetched from the Diagnosis Server, and try to find a match with the local Rolling Proximity Identifiers collection.</p><p>If a match is found, the user will be alerted. The match information never leaves the device.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>In this article we've seen how the Coronavirus Contact Tracing works, for more detailed information please refer to the official <a href="https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ContactTracing-BluetoothSpecificationv1.1.pdf">Bluetooth</a> and <a href="https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ContactTracing-CryptographySpecification.pdf">Cryptography specifications</a>.</p><p>The system is not flawless and can report false positives, albeit chances are low.</p><blockquote><p>For example: Additional validation can be done on the match step to prevent some false positives: if a computed Rolling Proximity Identifier associated with a 11:00 pm - 11:10 pm interval matches a Rolling Proximity Identifier collected at 8:00 am, chances are this is a coincidence and not a real match.</p></blockquote><p>One more concerning aspect of this system is the fact that all the (very good) privacy/security enforcements come with the cost of a moderation-less system: Diagnosis Server do not store any data beside the given keys and dates. Malicious actors may flood the servers with fake cases.</p><blockquote><p>Please <a href="https://twitter.com/zntfdr">let me know</a> if I missed something that would prevent this behavior.</p></blockquote><blockquote><p>2020/04/14 update: during a <a href="https://www.androidpolice.com/2020/04/13/apple-and-google-are-working-together-to-fight-coronavirus-with-a-new-contact-tracing-tool/">press briefing</a> on Monday April 13th the companies have announced that they are "considering working with healthcare operators to incorporate a lockstep test verification", this would solve the issue raised above.</p></blockquote><p>Lastly, this system will work only if everybody does their part:<br>once the system is available, please opt-in and, more importantly, #stayAtHome.</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p><p>References:</p><ul><li><a href="https://www.apple.com/covid19/contacttracing/">Privacy-Preserving Contact Tracing</a></li><li><a href="https://en.wikipedia.org/wiki/Bluetooth_Low_Energy">Bluetooth Low Energy</a></li><li><a href="https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ContactTracing-BluetoothSpecificationv1.1.pdf">Contact Tracing - Bluetooth Specification</a></li><li><a href="https://covid19-static.cdn-apple.com/applications/covid19/current/static/contact-tracing/pdf/ContactTracing-CryptographySpecification.pdf">Contact Tracing - Cryptography Specification</a></li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swift-subcommands-galore</guid><title>How To Add Extra Commands To CLI Tools</title><description></description><link>https://www.fivestars.blog/articles/swift-subcommands-galore</link><pubDate>Wed, 1 Apr 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>In <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">previous</a> <a href="https://www.fivestars.blog/articles/executables-argument-kind/">entries</a> we've <a href="https://www.fivestars.blog/articles/a-look-into-argument-parser/">extensively</a> <a href="https://www.fivestars.blog/articles/executables-progress/">covered</a> how we can build a new command line tool from scratch.</p><p>While this is great for brand new ideas, sometimes all we need is to add an extra feature to an existing tool: in this article we're going to do just that.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Example</h2><p>Let's say that we would like to add a new <a href="https://git-scm.com"><code>git</code></a> feature for <em>grading</em> the current code base (üò±):<br>in order to do so we will create a new <code>git</code> <strong>subcommand</strong>, <code>$ git star</code>, and we're also going to use <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>!</p><p>For simplicity's sake, our subcommand will ask for a rating from 1 to 5 as an input, and print it out in the terminal. But there's truly no limit on what can we can do.</p><p>Let's get started!</p><h2>Project setup</h2><p>First we need to <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">create a new Swift Package Executable</a>.</p><h3>Naming Convention</h3><p>The package name doesn't really matter, however I suggest you to follow name patterns such as <code>git-star</code>, where the prefix is the tool we're extending, and the postfix is our subcommand, as those are patterns used by similar tools, and also the final name of our binary.</p><p>In our example we will do the following:</p><pre><code>$ mkdir git-star
$ cd git-star
$ swift package <span class="keyword">init</span> --type executable
</code></pre><h3>Adding ArgumentParser Dependency</h3><p>Any swift command tool needs some kind of input: in this example we're going to use Swift's <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>, which we have <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">covered</a> <a href="https://www.fivestars.blog/articles/a-look-into-argument-parser/">previously</a>.</p><p><strong>TL;DR:</strong> your <code>Package.swift</code> should look like this:</p><pre><code><span class="comment">// swift-tools-version:5.1
// The swift-tools-version declares the minimum version of Swift required to build this package.</span>

<span class="keyword">import</span> PackageDescription

<span class="keyword">let</span> package = <span class="type">Package</span>(
    name: <span class="string">"git-swift"</span>,
    dependencies: [
        <span class="comment">// Dependencies declare other packages that this package depends on.</span>
        .<span class="call">package</span>(url: <span class="string">"https://github.com/apple/swift-argument-parser"</span>, from: <span class="string">"0.0.1"</span>),
    ],
    targets: [
        <span class="comment">// Targets are the basic building blocks of a package. A target can define a module or a test suite.
        // Targets can depend on other targets in this package, and on products in packages which this package depends on.</span>
        .<span class="call">target</span>(
            name: <span class="string">"git-swift"</span>,
            dependencies: [<span class="string">"ArgumentParser"</span>]),
        .<span class="call">testTarget</span>(
            name: <span class="string">"git-swiftTests"</span>,
            dependencies: [<span class="string">"git-swift"</span>]),
    ]
)
</code></pre><blockquote><p>The <code>Package.swift</code> content.</p></blockquote><h2>main.swift</h2><p>At this point all is left is to write the actual command, without further ado:</p><pre><code><span class="keyword">import</span> ArgumentParser

<span class="keyword">struct</span> GitStar: <span class="type">ParsableCommand</span> {
    <span class="keyword">@Argument</span>(help: <span class="string">"Your code rating (1-5 only)."</span>)
    <span class="keyword">var</span> rating: <span class="type">Int</span>

    <span class="keyword">func</span> run() <span class="keyword">throws</span> {
        <span class="keyword">let</span> fullStars = <span class="type">String</span>(repeating: <span class="string">"‚òÖ"</span>, count: rating)
        <span class="keyword">let</span> emptyStars = <span class="type">String</span>(repeating: <span class="string">"‚òÜ"</span>, count: <span class="number">5</span> - rating)
        <span class="keyword">let</span> stars: <span class="type">String</span> = fullStars + emptyStars
        <span class="call">print</span>(<span class="string">"Your rating</span> \(stars)<span class="string">"</span>)
    }

    <span class="keyword">func</span> validate() <span class="keyword">throws</span> {
        <span class="keyword">guard</span> <span class="number">1</span>...<span class="number">5</span> ~= rating <span class="keyword">else</span> {
            <span class="keyword">throw</span> <span class="type">ValidationError</span>(<span class="string">"Only ratings between 1 to 5 allowed."</span>)
        }
    }
}

<span class="type">GitStar</span>.<span class="call">main</span>()
</code></pre><blockquote><p>The <code>main.swift</code> content.</p></blockquote><p>The script is nothing out of the ordinary, with standard <code>validate()</code> and <code>run()</code> logics.</p><p>As we've seen in <a href="https://www.fivestars.blog/articles/a-look-into-argument-parser/">A Look Into ArgumentParser</a>, it's important that the name of our <code>ParsableCommand</code> type translates correctly into the the final command line (unless defined otherwise via <a href="https://github.com/apple/swift-argument-parser/blob/6f58e68a6aa3b03bc2cbc36f340f2c12ca5775c3/Sources/ArgumentParser/Parsable%20Types/CommandConfiguration.swift#L13"><code>CommandConfiguration</code></a>).</p><p>The name <code>GitStar</code> translates into <code>git-star</code>, and we can verify so by running <code>$ swift run git-star --help</code>:</p><pre><code>$ swift run git-star --help
&gt; <span class="type">USAGE</span>: git-star &lt;rating&gt;
&gt; 
&gt; <span class="type">ARGUMENTS</span>:
&gt;   &lt;rating&gt;                <span class="type">Your</span> code rating (<span class="number">1</span>-<span class="number">5</span> only).

&gt; <span class="type">OPTIONS</span>:
&gt;   -h, --help              <span class="type">Show</span> help information.
</code></pre><blockquote><p>See the <code>USAGE</code> callout.</p></blockquote><p>Note that this output has no relation whatsoever with the package name or product. If we rename the struct to <code>FiveStars</code> for example, the same command will have different output:</p><pre><code>$ swift run git-star --help
&gt; <span class="type">USAGE</span>: five-stars &lt;rating&gt;
&gt; 
&gt; <span class="type">ARGUMENTS</span>:
&gt;   &lt;rating&gt;                <span class="type">Your</span> code rating (<span class="number">1</span>-<span class="number">5</span> only).

&gt; <span class="type">OPTIONS</span>:
&gt;   -h, --help              <span class="type">Show</span> help information.
</code></pre><blockquote><p>See the <code>USAGE</code> callout.</p></blockquote><h2>Releasing The Script</h2><p><a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">We've covered this before</a>:</p><pre><code>$ swift build -c release
$ cp .<span class="dotAccess">build</span>/release/git-star /usr/local/bin/git-star
</code></pre><h2>The Caveat</h2><p>When an executable placed in <code>/usr/local/bin/</code> has a dash <code>-</code> in its name, and the original command (the prefix) accepts subcommands, then we can run our command with and without the dash, which means that we can now run <code>$ git star</code> from anywhere:</p><pre><code>$ git star <span class="number">5</span>
&gt; <span class="type">Your</span> rating ‚òÖ‚òÖ‚òÖ‚òÖ‚òÖ

$ git star
&gt; <span class="type">Error</span>: <span class="type">Missing</span> expected argument '&lt;rating&gt;'
&gt; <span class="type">Usage</span>: git-star &lt;rating&gt;

$ git star -h
&gt; <span class="type">USAGE</span>: five-stars &lt;rating&gt;
&gt; 
&gt; <span class="type">ARGUMENTS</span>:
&gt;   &lt;rating&gt;                <span class="type">Your</span> code rating (<span class="number">1</span>-<span class="number">5</span> only).
&gt; 
&gt; <span class="type">OPTIONS</span>:
&gt;   -h, --help              <span class="type">Show</span> help information.
</code></pre><blockquote><p>The same approach works regardless of the origin/nature of the executable: even a renamed bash file would do the trick.</p></blockquote><h2>Conclusions</h2><p>While we've built a basic example, it's easy to imagine how we can use this approach to add big, powerful features directly in <code>git</code> and any other tool.</p><p>Also please note that this tutorial doesn't work with all executables: some (üëãüèª <code>xcrun</code>) require extra work (or different paths) in order to achieve the same result.</p><p>Lastly, if you need inspiration on what you can build with this new knowledge, please have a look at <a href="https://github.com/kamranahmedse/git-standup"><code>git-standup</code></a> and <a href="https://github.com/kiliankoe/swift-outdated"><code>swift-outdated</code></a>.</p><p>Do you use any tool with this approach? Have you built or are you planning to make one yourself? <a href="https://twitter.com/zntfdr">Please let me know!</a></p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/what-s-new-in-swift-5-2</guid><title>What's New In Swift 5.2 üèé</title><description></description><link>https://www.fivestars.blog/articles/what-s-new-in-swift-5-2</link><pubDate>Wed, 25 Mar 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Just a little over 6 months after the announcement of <a href="https://www.fivestars.blog/articles/what-s-new-in-swift-5-1/">Swift 5.1</a>, we have a new Swift dot release:<br>Swift 5.2.</p><p>Despite being smaller in comparison to 5.1, Swift 5.2 brings so many new enhancements such as better diagnostics, more keypaths use, subscripts default arguments, and much more.</p><p>For the <a href="https://www.eventpop.me/e/8171-iosdevth-19#event-tickets">19th</a> <a href="https://www.facebook.com/groups/iosthailand/">iOSDevTH meetup</a> I've prepared a what's new in Swift 5.2 presentation:<br>one slide per change, a small comment, and a code example.</p><p>You can see the whole presentation slides here:</p><p><a href="https://speakerdeck.com/zntfdr/whats-new-in-swift-5-dot-2"><img src="https://www.fivestars.blog/assets/posts/what-s-new-in-swift-5-2/first-slide.jpg" alt="slides"/></a></p><blockquote><p>Check out the full slides at <a href="https://speakerdeck.com/zntfdr/whats-new-in-swift-5-dot-2">SpeakerDeck</a></p></blockquote><p>I really like this format, because it lets me quickly revisit all the changes in a simple way: if you download the slides <a href="https://github.com/zntfdr/talks/blob/master/2020%20Whats%20New%20In%20Swift%205.2/whats_new_in_swift_5_2.pdf">pdf</a>, each slide also links to the associated Swift Evolution or Swift Report.</p><p>As with my <a href="https://www.fivestars.blog/articles/what-s-new-in-swift-5-1/">previous</a> <a href="https://www.fivestars.blog/articles/the-state-of-machine-learning-in-ios-13/">talks</a>, I've made the slides, along with other materials, available to download in the <a href="https://github.com/zntfdr/talks"><code>talks</code> repository</a>.</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/executables-progress</guid><title>Swift Executables Progress State ‚è≥</title><description></description><link>https://www.fivestars.blog/articles/executables-progress</link><pubDate>Tue, 24 Mar 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>In the <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">Swift Executables Guide</a> we've seen how, among other things, we can use <a href="https://github.com/apple/swift-tools-support-core/ "><code>TSCUtility</code></a> to show progress to our users while our script is busy.</p><p>Since the outcome of these APIs are very visual, in this new article let's cover all <code>TSCUtility</code> <a href="https://github.com/apple/swift-tools-support-core/blob/fcaa2ce5a852b5355aed5808a6610dc8b6dcf27e/Sources/TSCUtility/ProgressAnimation.swift">animations</a>!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>ProgressAnimationProtocol</h2><p>When looking at <code>TSCUtility</code>'s <a href="https://github.com/apple/swift-tools-support-core/blob/fcaa2ce5a852b5355aed5808a6610dc8b6dcf27e/Sources/TSCUtility/ProgressAnimation.swift"><code>ProgressAnimation.swift</code></a> file, the first thing that pops up is that all animations conform to the <a href="https://github.com/apple/swift-tools-support-core/blob/d57fc3cd2fab8d0c23fdd23bbc9880c6ae3b0858/Sources/TSCUtility/ProgressAnimation.swift#L14"><code>ProgressAnimationProtocol</code> protocol</a>, here's its definition:</p><pre><code><span class="comment">/// A protocol to operate on terminal based progress animations.</span>
<span class="keyword">public protocol</span> ProgressAnimationProtocol {
  <span class="comment">/// Update the animation with a new step.
  /// - Parameters:
  ///   - step: The index of the operation's current step.
  ///   - total: The total number of steps before the operation is complete.
  ///   - text: The description of the current step.</span>
  <span class="keyword">func</span> update(step: <span class="type">Int</span>, total: <span class="type">Int</span>, text: <span class="type">String</span>)

  <span class="comment">/// Complete the animation.
  /// - Parameters:
  ///   - success: Defines if the operation the animation represents was succesful.</span>
  <span class="keyword">func</span> complete(success: <span class="type">Bool</span>)

  <span class="comment">/// Clear the animation.</span>
  <span class="keyword">func</span> clear()
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-tools-support-core/ "><code>TSCUtility</code></a>‚Äôs <a href="https://github.com/apple/swift-tools-support-core/blob/fcaa2ce5a852b5355aed5808a6610dc8b6dcf27e/Sources/TSCUtility/ProgressAnimation.swift"><code>ProgressAnimation.swift</code></a>.</p></blockquote><p>Every animation is responsible to take care of any interpolation needed, and correctly display our progress (by means of progress percentage, or else).</p><p>To start an animation, we call <code>update(step:total:text:)</code>, and we keep doing so until the job has been completed, which is when we let the animation know via <code>complete(success:)</code>.</p><p>Lastly, the <code>ProgressAnimationProtocol</code> requires a <code>clear</code> function, which tells the animation to remove itself, allowing the terminal to proceed as if the animation was never shown.</p><p>Animations are <em>just</em> "print" statements: there's no requirement on the order of the <code>update</code>/<code>complete</code>/<code>clear</code> calls, it's entirely up to us.</p><h2>DynamicProgressAnimation</h2><p>Different terminals types support different <a href="https://en.wikipedia.org/wiki/Control_character">control codes</a>. Some animations are possible only if their control codes are available (e.g. to control the terminal cursor position and clear terminal lines).<br><br>In order to support all terminal types, <code>TSCUtility</code> defines <a href="https://github.com/apple/swift-tools-support-core/blob/7b1b8195cb83c20e1f24f384140be9edad523aa5/Sources/TSCUtility/ProgressAnimation.swift#L271"><code>DynamicProgressAnimation</code></a>, which selects a different animation based on the terminal capability:</p><pre><code><span class="comment">/// A progress animation that adapts to the provided output stream.</span>
<span class="keyword">public class</span> DynamicProgressAnimation: <span class="type">ProgressAnimationProtocol</span> {
  <span class="keyword">private let</span> animation: <span class="type">ProgressAnimationProtocol</span>

  <span class="keyword">public init</span>(
    stream: <span class="type">OutputByteStream</span>,
    ttyTerminalAnimationFactory: (<span class="type">TerminalController</span>) -&gt; <span class="type">ProgressAnimationProtocol</span>,
    dumbTerminalAnimationFactory: () -&gt; <span class="type">ProgressAnimationProtocol</span>,
    defaultAnimationFactory: () -&gt; <span class="type">ProgressAnimationProtocol</span>
  ) {
    <span class="keyword">if let</span> terminal = <span class="type">TerminalController</span>(stream: stream) {
      animation = <span class="call">ttyTerminalAnimationFactory</span>(terminal)
    } <span class="keyword">else if let</span> fileStream = stream <span class="keyword">as</span>? <span class="type">LocalFileOutputByteStream</span>,
      <span class="type">TerminalController</span>.<span class="call">terminalType</span>(fileStream) == .<span class="call">dumb</span> {
      animation = <span class="call">dumbTerminalAnimationFactory</span>()
    } <span class="keyword">else</span> {
      animation = <span class="call">defaultAnimationFactory</span>()
    }
  }

  <span class="keyword">public func</span> update(step: <span class="type">Int</span>, total: <span class="type">Int</span>, text: <span class="type">String</span>) {
    animation.<span class="call">update</span>(step: step, total: total, text: text)
  }

  <span class="keyword">public func</span> complete(success: <span class="type">Bool</span>) {
    animation.<span class="call">complete</span>(success: success)
  }

  <span class="keyword">public func</span> clear() {
    animation.<span class="call">clear</span>()
  }
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-tools-support-core/ "><code>TSCUtility</code></a>‚Äôs <a href="https://github.com/apple/swift-tools-support-core/blob/fcaa2ce5a852b5355aed5808a6610dc8b6dcf27e/Sources/TSCUtility/ProgressAnimation.swift"><code>ProgressAnimation.swift</code></a>.</p></blockquote><p><code>DynamicProgressAnimation</code> takes in three animation factories and uses one of them depending on the given <code>stream</code>, which is an object conforming to the <a href="https://github.com/apple/swift-tools-support-core/blob/f1162ddd0e05e47bf4ae1ae2066332e32e3521fa/Sources/TSCBasic/OutputByteStream.swift#L46"><code>OutputByteStream</code></a> protocol, used to manage different output destinations.</p><p><code>TSCUtility</code> provides two <code>DynamicProgressAnimation</code> subclasses ready for us to use, <code>NinjaProgressAnimation</code> and <code>PercentProgressAnimation</code>.</p><h2>NinjaProgressAnimation</h2><pre><code><span class="comment">/// A ninja-like progress animation that adapts to the provided output stream.</span>
<span class="keyword">public final class</span> NinjaProgressAnimation: <span class="type">DynamicProgressAnimation</span> {
  <span class="keyword">public init</span>(stream: <span class="type">OutputByteStream</span>) {
    <span class="keyword">super</span>.<span class="keyword">init</span>(
      stream: stream,
      ttyTerminalAnimationFactory: { <span class="type">RedrawingNinjaProgressAnimation</span>(terminal: $0) },
      dumbTerminalAnimationFactory: { <span class="type">SingleLinePercentProgressAnimation</span>(stream: stream, header: <span class="keyword">nil</span>) },
      defaultAnimationFactory: { <span class="type">MultiLineNinjaProgressAnimation</span>(stream: stream) }
    )
  }
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-tools-support-core/ "><code>TSCUtility</code></a>‚Äôs <a href="https://github.com/apple/swift-tools-support-core/blob/fcaa2ce5a852b5355aed5808a6610dc8b6dcf27e/Sources/TSCUtility/ProgressAnimation.swift"><code>ProgressAnimation.swift</code></a>.</p></blockquote><p><code>NinjaProgressAnimation</code> defines the three factories for the different terminal types and nothing else:</p><ul><li>in a tty terminal we have <a href="https://github.com/apple/swift-tools-support-core/blob/7b1b8195cb83c20e1f24f384140be9edad523aa5/Sources/TSCUtility/ProgressAnimation.swift#L106"><code>RedrawingNinjaProgressAnimation</code></a>:</li></ul><img src="https://www.fivestars.blog/assets/posts/executables-progress/RedrawingNinjaProgressAnimation.gif" alt="large-contents"/><p>the animation clears itself at every update and "redraws" the new state on the same line.<br> This animation commit its line if we call <code>complete(:)</code> on it, or it removes itself if we call <code>clear()</code>.</p><ul><li>in a <a href="https://en.wikipedia.org/wiki/Computer_terminal#Dumb_terminals">dumb</a> terminal we have <a href="https://github.com/apple/swift-tools-support-core/blob/7b1b8195cb83c20e1f24f384140be9edad523aa5/Sources/TSCUtility/ProgressAnimation.swift#L32"><code>SingleLinePercentProgressAnimation</code></a>:</li></ul><img src="https://www.fivestars.blog/assets/posts/executables-progress/SingleLinePercentProgressAnimation.gif" alt="large-contents"/><p>which draws the same animation without clearing the line first.<br> This animation also ignores <code>clear()</code> calls.</p><ul><li>lastly, we have a default animation when our stream doesn't fit the cases above, <a href="https://github.com/apple/swift-tools-support-core/blob/7b1b8195cb83c20e1f24f384140be9edad523aa5/Sources/TSCUtility/ProgressAnimation.swift#L73"><code>MultiLineNinjaProgressAnimation</code></a>:</li></ul><img src="https://www.fivestars.blog/assets/posts/executables-progress/MultiLineNinjaProgressAnimation.gif" alt="large-contents"/><p>This is a middle ground between the previous two animations, where this new animation has the capability to return and create a new line. However no clear capabilities are used, which means that also in this case <code>clear()</code> calls are ignored.</p><p>If this animation looks familiar, it's because it is! For example, we use it every time a package needs to resolve, download, and compile any package dependency:</p><img src="https://www.fivestars.blog/assets/posts/executables-progress/build.gif" alt="large-contents"/><blockquote><p>You can see the <code>RedrawingNinjaProgressAnimation</code> in the line before the last one in the terminal.</p></blockquote><p>Here's the code to test the animation:</p><pre><code><span class="keyword">import</span> Darwin
<span class="keyword">import</span> TSCBasic
<span class="keyword">import</span> TSCUtility

<span class="keyword">let</span> animation = <span class="type">NinjaProgressAnimation</span>(stream: stdoutStream)

<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">100</span> {
  <span class="keyword">let</span> second: <span class="type">Double</span> = <span class="number">1_000_000</span>
  <span class="call">usleep</span>(<span class="type">UInt32</span>(second * <span class="number">0.05</span>))
  animation.<span class="call">update</span>(step: i, total: <span class="number">100</span>, text: <span class="string">"Loading.."</span>)
}

animation.<span class="call">complete</span>(success: <span class="keyword">true</span>) <span class="comment">// or animation.clear()</span>
</code></pre><blockquote><p>Create a new <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">swift executable</a> and replace the <code>main.swift</code> with the code above.</p></blockquote><blockquote><p>Why Ninja? I guess this refers to the <code>[currentStep/totalSteps]</code> pattern... The forward slash <code>/</code> looks like a sword, right? üòÖ</p></blockquote><blockquote><p>Update: <a href="https://twitter.com/aciidb0mb3r">Ankit Aggarwal</a> from the Swift team <a href="https://twitter.com/aciidb0mb3r/status/1242480330805661698">pointed out</a> that this animation is based on the same animation from the <a href="https://ninja-build.org">ninja build tool</a> (you can see it mentioned <a href="https://github.com/ninja-build/ninja/blob/b50e1e3bc636abd75cb7aa444aeb397cc324e325/doc/manual.asciidoc#environment-variables">here</a>), hence the name. Thank you Ankit!</p></blockquote><h2>PercentProgressAnimation</h2><pre><code><span class="comment">/// A percent-based progress animation that adapts to the provided output stream.</span>
<span class="keyword">public final class</span> PercentProgressAnimation: <span class="type">DynamicProgressAnimation</span> {
    <span class="keyword">public init</span>(stream: <span class="type">OutputByteStream</span>, header: <span class="type">String</span>) {
        <span class="keyword">super</span>.<span class="keyword">init</span>(
            stream: stream,
            ttyTerminalAnimationFactory: { <span class="type">RedrawingLitProgressAnimation</span>(terminal: $0, header: header) },
            dumbTerminalAnimationFactory: { <span class="type">SingleLinePercentProgressAnimation</span>(stream: stream, header: header) },
            defaultAnimationFactory: { <span class="type">MultiLinePercentProgressAnimation</span>(stream: stream, header: header) })
    }
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-tools-support-core/ "><code>TSCUtility</code></a>‚Äôs <a href="https://github.com/apple/swift-tools-support-core/blob/fcaa2ce5a852b5355aed5808a6610dc8b6dcf27e/Sources/TSCUtility/ProgressAnimation.swift"><code>ProgressAnimation.swift</code></a>.</p></blockquote><p>Identically to <code>NinjaProgressAnimation</code>, <code>PercentProgressAnimation</code> defines the three factories for different terminal types:</p><ul><li>in a tty terminal we have <a href="https://github.com/apple/swift-tools-support-core/blob/7b1b8195cb83c20e1f24f384140be9edad523aa5/Sources/TSCUtility/ProgressAnimation.swift#L195"><code>RedrawingLitProgressAnimation</code></a>:</li></ul><img src="https://www.fivestars.blog/assets/posts/executables-progress/RedrawingLitProgressAnimation.gif" alt="large-contents"/><p>as before, the animation <em>clears</em> and <em>redraws</em> itself.</p><ul><li>in a <a href="https://en.wikipedia.org/wiki/Computer_terminal#Dumb_terminals">dumb</a> terminal we get <a href="https://github.com/apple/swift-tools-support-core/blob/7b1b8195cb83c20e1f24f384140be9edad523aa5/Sources/TSCUtility/ProgressAnimation.swift#L32"><code>SingleLinePercentProgressAnimation</code></a>, which is the same as we've seen in <code>NinjaProgressAnimation</code>, plus a header:</li></ul><img src="https://www.fivestars.blog/assets/posts/executables-progress/SingleLinePercentProgressAnimationHeader.gif" alt="large-contents"/><ul><li>lastly, we have <a href="https://github.com/apple/swift-tools-support-core/blob/7b1b8195cb83c20e1f24f384140be9edad523aa5/Sources/TSCUtility/ProgressAnimation.swift#L154"><code>MultiLinePercentProgressAnimation</code></a> for the default animation:</li></ul><img src="https://www.fivestars.blog/assets/posts/executables-progress/MultiLinePercentProgressAnimation.gif" alt="large-contents"/><p>A way to see this animation in the wild is by using the <code>swift test</code> tool, the progress animation will be shown when we do parallel testing and a special environment variable is set.</p><p>Here's an example of me running the <code>FunctionalTests</code> in the <code>swift-package-manager</code>:</p><pre><code><span class="type">SWIFTPM_TEST_RUNNER_PROGRESS_BAR</span>=lit swift test --filter <span class="type">FunctionalTests</span> --parallel
</code></pre><img src="https://www.fivestars.blog/assets/posts/executables-progress/test.gif" alt="large-contents"/><p>Here's the code to test this animation:</p><pre><code><span class="keyword">import</span> Darwin
<span class="keyword">import</span> TSCBasic
<span class="keyword">import</span> TSCUtility

<span class="keyword">let</span> animation = <span class="type">PercentProgressAnimation</span>(stream: stdoutStream, header: <span class="string">"Five Stars"</span>)

<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">100</span> {
  <span class="keyword">let</span> second: <span class="type">Double</span> = <span class="number">1_000_000</span>
  <span class="call">usleep</span>(<span class="type">UInt32</span>(second * <span class="number">0.05</span>))
  animation.<span class="call">update</span>(step: i, total: <span class="number">100</span>, text: <span class="string">"Loading.."</span>)
}

animation.<span class="call">complete</span>(success: <span class="keyword">true</span>) <span class="comment">// or animation.clear()</span>
</code></pre><blockquote><p>Create a new <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">swift executable</a> and replace the <code>main.swift</code> with the code above.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>In this article we've seen how progress animations are defined in <code>TSCUtility</code>, how different terminals require different animations, and how <code>TSCUtility</code> standardizes them by defining three types of animations:</p><ul><li><code>Redrawing</code> when the animation can redraw itself in place</li><li><code>SingleLine</code> when the whole progress is "printed" in one line</li><li><code>MultiLine</code> when we print the progress state in a new line at every update.</li></ul><p>If you need to show progress to in your scripts, you now know where to look!</p><p>As always, any <a href="https://twitter.com/zntfdr">feedback and insight</a> from your side is more than welcome.</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/a-look-into-argument-parser</guid><title>A Look Into ArgumentParser</title><description></description><link>https://www.fivestars.blog/articles/a-look-into-argument-parser</link><pubDate>Tue, 17 Mar 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>The Swift team has <a href="https://swift.org/blog/argument-parser/">recently announced</a> <a href="https://github.com/apple/swift-argument-parser"><code>ArgumentParser</code></a>, a new parse command-line argument library.</p><p>In <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">previous</a> <a href="https://www.fivestars.blog/articles/executables-argument-kind/">entries</a> we've covered how we can parse command-line arguments <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">manually</a>, and with <a href="https://www.fivestars.blog/articles/executables-argument-kind/"><code>TSCUtility</code></a>:</p><p><code>ArgumentParser</code> comes with an <a href="https://github.com/apple/swift-argument-parser/tree/339baea0a5d8c9b26c6e9be47df8e713f6e26234/Documentation">extensive and very well written documentation</a>, please give it a read for a complete overview of the library API.</p><p>With the <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">basics covered</a>, in this article we're going to dive into how things are implemented under the hood, like we did for the <a href="https://www.fivestars.blog/articles/the-swift-behind-the-standard-library-preview-package/">Swift Preview Package</a>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>ParsableCommand Protocol</h2><p>When following the instructions, the first task is create a type conforming to the <a href="https://github.com/apple/swift-argument-parser/blob/339baea0a5d8c9b26c6e9be47df8e713f6e26234/Sources/ArgumentParser/Parsable%20Types/ParsableCommand.swift#L13"><code>ParsableCommand</code> protocol</a>:</p><pre><code><span class="keyword">public protocol</span> ParsableCommand: <span class="type">ParsableArguments</span> {
  <span class="keyword">static var</span> configuration: <span class="type">CommandConfiguration</span> { <span class="keyword">get</span> }
  <span class="keyword">static var</span> _commandName: <span class="type">String</span> { <span class="keyword">get</span> }
  <span class="keyword">func</span> run() <span class="keyword">throws</span>
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/339baea0a5d8c9b26c6e9be47df8e713f6e26234/Sources/ArgumentParser/Parsable%20Types/ParsableCommand.swift"><code>ParsableCommand.swift</code></a>.</p></blockquote><blockquote><p><code>_commandName</code>, which represents our tool name, is marked as internal: it's not for us to implement.</p></blockquote><p>All these methods are <a href="https://github.com/apple/swift-argument-parser/blob/339baea0a5d8c9b26c6e9be47df8e713f6e26234/Sources/ArgumentParser/Parsable%20Types/ParsableCommand.swift#L34">implemented for us already</a>, in our type we only need to take care of any custom logic: mainly the <code>run()</code> behavior and, if necessary, extra configurations such as abstract and subcommand declarations. Here is the default implementation:</p><pre><code><span class="keyword">extension</span> <span class="type">ParsableCommand</span> {
  <span class="keyword">public static var</span> _commandName: <span class="type">String</span> {
    configuration.<span class="property">commandName</span> ??
      <span class="type">String</span>(describing: <span class="type">Self</span>.<span class="keyword">self</span>).<span class="call">convertedToSnakeCase</span>(separator: <span class="string">"-"</span>)
  }
  
  <span class="keyword">public static var</span> configuration: <span class="type">CommandConfiguration</span> {
    <span class="type">CommandConfiguration</span>()
  }
  
  <span class="keyword">public func</span> run() <span class="keyword">throws</span> {
    <span class="keyword">throw</span> <span class="type">CleanExit</span>.<span class="call">helpRequest</span>(<span class="keyword">self</span>)
  }
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/339baea0a5d8c9b26c6e9be47df8e713f6e26234/Sources/ArgumentParser/Parsable%20Types/ParsableCommand.swift"><code>ParsableCommand.swift</code></a></p></blockquote><p>In this default implementation we discover the first <em>magic trick</em> used in ArgumentParser:<br>how our type name transforms from <code>camelCase</code> into a <code>kebab-case</code> command line tool name:</p><pre><code><span class="type">String</span>(describing: <span class="type">Self</span>.<span class="keyword">self</span>).<span class="call">convertedToSnakeCase</span>(separator: <span class="string">"-"</span>)
</code></pre><p><code>Self</code> refers to the type conforming to the protocol, and using <code>String(describing: Self.self)</code> (or <code>String(describing: self)</code>, since <code>_commandName</code> is a static property) will return us our type name as a <code>String</code>.</p><p>Once we have the name, ArgumentParser has a <a href="https://github.com/apple/swift-argument-parser/blob/9ebf401d274c4ef0a634cd4c4494b4a63f12baaf/Sources/ArgumentParser/Utilities/StringExtensions.swift#L95"><code>convertedToSnakeCase(separator:)</code></a> function that takes care of the rest.</p><h2>ParsableArguments Protocol</h2><p>The <code>ParsableArguments</code> protocol requires our types to conform to the <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsable%20Types/ParsableArguments.swift#L27"><code>ParsableArguments</code> protocol</a> as well, let's take a look at that next:</p><pre><code><span class="keyword">public protocol</span> ParsableArguments: <span class="type">Decodable</span> {
  <span class="keyword">init</span>()
  <span class="keyword">mutating func</span> validate() <span class="keyword">throws</span>
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/f6ac7b8118ff5d1bc0faee7f37bf6f8fd8f95602/Sources/ArgumentParser/Parsable%20Types/ParsableArguments.swift"><code>ParsableArguments.swift</code></a></p></blockquote><p>Its definition is <em>A type that can be parsed from a program's command-line arguments</em>, which also explains the required <code>Decodable</code> conformation:<br>the library has its own decoders, <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/ArgumentDecoder.swift#L13"><code>ArgumentDecoder</code></a> and <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/ArgumentDecoder.swift#L114"><code>SingleValueDecoder</code></a>, which are used later on, to decode the command-line arguments into something meaningful.</p><p>Both the initializer and the <code>Decodable</code> conformation are synthesized, the only requirement left is the <code>validate()</code> implementation, however the library offers a <a href="https://github.com/apple/swift-argument-parser/blob/f6ac7b8118ff5d1bc0faee7f37bf6f8fd8f95602/Sources/ArgumentParser/Parsable%20Types/ParsableArguments.swift#L65">default implementation</a> for us already:</p><pre><code><span class="keyword">extension</span> <span class="type">ParsableArguments</span> {
  <span class="keyword">public mutating func</span> validate() <span class="keyword">throws</span> {}
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/f6ac7b8118ff5d1bc0faee7f37bf6f8fd8f95602/Sources/ArgumentParser/Parsable%20Types/ParsableArguments.swift"><code>ParsableArguments.swift</code></a></p></blockquote><blockquote><p>As a reminder, <code>validate()</code> is here for us to make sure that the parsed arguments are valid, not type-wise, but logic-wise.</p></blockquote><h2>The Static Main</h2><p>When following the ArgumentParser instructions, the final step is to call <code>.main()</code> in our type. This static method is not required from the <code>ParsableCommand</code> (nor from <code>ParsableArguments</code> etc) and we haven't defined it, it turns out that it's implemented as a public <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsable%20Types/ParsableCommand.swift#L81">extension of <code>ParsableCommand</code></a>:</p><pre><code><span class="keyword">extension</span> <span class="type">ParsableCommand</span> {
  <span class="keyword">public static func</span> main(<span class="keyword">_</span> arguments: [<span class="type">String</span>]? = <span class="keyword">nil</span>) -&gt; <span class="type">Never</span> {
    <span class="keyword">do</span> {
      <span class="keyword">let</span> command = <span class="keyword">try</span> <span class="call">parseAsRoot</span>(arguments)
      <span class="keyword">try</span> command.<span class="call">run</span>()
      <span class="call">exit</span>()
    } <span class="keyword">catch</span> {
      <span class="call">exit</span>(withError: error)
    }
  }
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/339baea0a5d8c9b26c6e9be47df8e713f6e26234/Sources/ArgumentParser/Parsable%20Types/ParsableCommand.swift"><code>ParsableCommand.swift</code></a></p></blockquote><p>The method does two things:</p><ol><li>parse and initialize our command via a <a href="https://github.com/apple/swift-argument-parser/blob/9ebf401d274c4ef0a634cd4c4494b4a63f12baaf/Sources/ArgumentParser/Parsable%20Types/ParsableCommand.swift#L59"><code>parseAsRoot(_:)</code> function</a>.</li><li>run it</li></ol><p>All the magic happens in the first step, step 2 executes our <code>run()</code> implementation (or the default implementation we've seen above).</p><h2>parseAsRoot</h2><p>The purpose of this method is solely to return an instance of <code>ParsableCommand</code>, more specifically an instance of our type (conforming to <code>ParsableCommand</code>):</p><pre><code><span class="keyword">public static func</span> parseAsRoot(
  <span class="keyword">_</span> arguments: [<span class="type">String</span>]? = <span class="keyword">nil</span>
) <span class="keyword">throws</span> -&gt; <span class="type">ParsableCommand</span> {
  <span class="keyword">var</span> parser = <span class="type">CommandParser</span>(<span class="keyword">self</span>)
  <span class="keyword">let</span> arguments = arguments ?? <span class="type">Array</span>(<span class="type">CommandLine</span>.<span class="property">arguments</span>.<span class="call">dropFirst</span>())
  <span class="keyword">var</span> result = <span class="keyword">try</span> parser.<span class="call">parse</span>(arguments: arguments).<span class="call">get</span>()
  <span class="keyword">do</span> {
    <span class="keyword">try</span> result.<span class="call">validate</span>()
  } <span class="keyword">catch</span> {
    <span class="keyword">throw</span> <span class="type">CommandError</span>(
      commandStack: parser.<span class="property">commandStack</span>,
      parserError: <span class="type">ParserError</span>.<span class="call">userValidationError</span>(error))
  }
  <span class="keyword">return</span> result
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/339baea0a5d8c9b26c6e9be47df8e713f6e26234/Sources/ArgumentParser/Parsable%20Types/ParsableCommand.swift"><code>ParsableCommand.swift</code></a></p></blockquote><p>We first obtain the input arguments via <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/"><code>CommandLine.arguments</code></a>, and then we parse them via a new <code>CommandParser</code> entity:<br>if the parse is successful, we validate the command line inputs (with <code>ParsableArguments</code>'s <code>validate()</code>) and then return the new instance (of our <code>ParsableCommand</code> type), ready to run.</p><h3>CommandParser</h3><p><code>CommandParser</code> structures our command as a tree: a command can contain zero or more subcommands, which can contain subcommands, which can contain subcommands, which... there's no limit set by ArgumentParser.</p><pre><code><span class="keyword">struct</span> CommandParser {
  <span class="keyword">let</span> commandTree: <span class="type">Tree</span>&lt;<span class="type">ParsableCommand</span>.<span class="type">Type</span>&gt;
  <span class="keyword">var</span> currentNode: <span class="type">Tree</span>&lt;<span class="type">ParsableCommand</span>.<span class="type">Type</span>&gt;
  <span class="keyword">var</span> parsedValues: [(type: <span class="type">ParsableCommand</span>.<span class="type">Type</span>, decodedResult: <span class="type">ParsableCommand</span>)] = []
  
  <span class="keyword">var</span> commandStack: [<span class="type">ParsableCommand</span>.<span class="type">Type</span>] {
    <span class="keyword">let</span> result = parsedValues.<span class="call">map</span> { $0.<span class="property">type</span> }
    <span class="keyword">if</span> currentNode.<span class="property">element</span> == result.<span class="property">last</span> {
      <span class="keyword">return</span> result
    } <span class="keyword">else</span> {
      <span class="keyword">return</span> result + [currentNode.<span class="property">element</span>]
    }
  }
  
  <span class="keyword">init</span>(<span class="keyword">_</span> rootCommand: <span class="type">ParsableCommand</span>.<span class="type">Type</span>) {
    <span class="keyword">self</span>.<span class="property">commandTree</span> = <span class="type">Tree</span>(root: rootCommand)
    <span class="keyword">self</span>.<span class="property">currentNode</span> = commandTree
    
    <span class="comment">// A command tree that has a depth greater than zero gets a `help`
    // subcommand.</span>
    <span class="keyword">if</span> !commandTree.<span class="property">isLeaf</span> {
      commandTree.<span class="call">addChild</span>(<span class="type">Tree</span>(<span class="type">HelpCommand</span>.<span class="keyword">self</span>))
    }
  }
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/CommandParser.swift"><code>CommandParser.swift</code></a></p></blockquote><blockquote><p>In the initializer we can see how every command line tool gets a <code>HelpCommand</code>.</p></blockquote><p>Let's look at the <code>parse(_:)</code> method, called by the <code>ParsableCommand</code>'s static <code>main()</code>:</p><pre><code><span class="keyword">mutating func</span> parse(arguments: [<span class="type">String</span>]) -&gt; <span class="type">Result</span>&lt;<span class="type">ParsableCommand</span>, <span class="type">CommandError</span>&gt; {
    <span class="keyword">var</span> split: <span class="type">SplitArguments</span>
    <span class="keyword">do</span> {
      split = <span class="keyword">try</span> <span class="type">SplitArguments</span>(arguments: arguments)
    } <span class="keyword">catch</span> {
      ...
    }
    
    <span class="keyword">do</span> {
      <span class="keyword">try</span> <span class="call">descendingParse</span>(&amp;split)
      <span class="keyword">let</span> result = <span class="keyword">try</span> <span class="call">extractLastParsedValue</span>(split)
      ...

      <span class="keyword">return</span> .<span class="call">success</span>(result)
    } <span class="keyword">catch</span> {
      ...
    }
  }
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/CommandParser.swift"><code>CommandParser.swift</code></a></p></blockquote><p><code>parse(arguments:)</code> can be split in three steps:</p><ol><li>Create a new instance of <code>SplitArguments</code>, a new entity, out of the input string arguments.</li><li>Translate the <code>SplitArguments</code> instance into a <code>ParsableCommand</code> instance.</li><li>Return it.</li></ol><h4>Step 1</h4><p>This step turns the input string arguments into an instance of <code>SplitArguments</code>:</p><pre><code><span class="keyword">struct</span> SplitArguments {
  <span class="keyword">var</span> elements: [(index: <span class="type">Index</span>, element: <span class="type">Element</span>)]
  <span class="keyword">var</span> originalInput: [<span class="type">String</span>]
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/SplitArguments.swift"><code>SplitArguments.swift</code></a></p></blockquote><blockquote><p>This step has no knowledge about our command line tool definition.</p></blockquote><p><code>SplitArguments</code> translates the input array of strings into something more meaningful for a command line tool input: options and values. Options are anything with a dash in the front, values are strings without a dash in front.</p><p>Here's the definition of <code>SplitArguments</code>'s <code>Element</code> (with comments):</p><pre><code><span class="keyword">enum</span> Element: <span class="type">Equatable</span> {
  <span class="keyword">case</span> option(<span class="type">ParsedArgument</span>) <span class="comment">// something with a dash in the front</span>
  <span class="keyword">case</span> value(<span class="type">String</span>) <span class="comment">// values</span>
  <span class="keyword">case</span> terminator <span class="comment">// --, special character</span>
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/SplitArguments.swift"><code>SplitArguments.swift</code></a></p></blockquote><p>Where we introduce <code>ParsedArgument</code>:</p><pre><code><span class="keyword">enum</span> ParsedArgument: <span class="type">Equatable</span>, <span class="type">CustomStringConvertible</span> {
  <span class="keyword">case</span> name(<span class="type">Name</span>) <span class="comment">/// `--foo` or `-f`</span>
  case nameWithValue(<span class="type">Name</span>, <span class="type">String</span>) <span class="comment">// `--foo=bar`</span>
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/SplitArguments.swift"><code>SplitArguments.swift</code></a></p></blockquote><p>Lastly, we have the <code>Index</code> definition:</p><pre><code><span class="keyword">struct</span> Index: <span class="type">Hashable</span>, <span class="type">Comparable</span> {
  <span class="keyword">var</span> inputIndex: <span class="type">InputIndex</span>
  <span class="keyword">var</span> subIndex: <span class="type">SubIndex</span>
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/SplitArguments.swift"><code>SplitArguments.swift</code></a></p></blockquote><p>Each Index has an <code>inputIndex</code>, which is the argument index in the original input, and a <code>subIndex</code>: for example <code>$ tool -af</code> has both <code>-a</code> and <code>-f</code> at the same index, but subindex of 0 and 1 respectively.</p><p>If you'd like to see the actual parsing, please see <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/SplitArguments.swift#L405">here</a>.</p><h4>Step 2</h4><p>At this point we have our complete <code>SplitArguments</code> instance and its time to run <code>CommandParser</code>'s <code>descendingParse</code>:</p><pre><code><span class="keyword">internal mutating func</span> descendingParse(<span class="keyword">_</span> split: <span class="keyword">inout</span> <span class="type">SplitArguments</span>) <span class="keyword">throws</span> {
  <span class="keyword">while true</span> {
    <span class="keyword">try</span> <span class="call">parseCurrent</span>(&amp;split)
    
    <span class="comment">// Look for next command in the argument list.</span>
    <span class="keyword">if let</span> nextCommand = <span class="call">consumeNextCommand</span>(split: &amp;split) {
      currentNode = nextCommand
      <span class="keyword">continue</span>
    }
    
    <span class="comment">// Look for the help flag before falling back to a default command.</span>
    <span class="keyword">try</span> <span class="call">checkForHelpFlag</span>(split)
    
    <span class="comment">// No command was found, so fall back to the default subcommand.</span>
    <span class="keyword">if let</span> defaultSubcommand = currentNode.<span class="property">element</span>.<span class="property">configuration</span>.<span class="property">defaultSubcommand</span> {
      <span class="keyword">guard let</span> subcommandNode = currentNode.<span class="call">firstChild</span>(equalTo: defaultSubcommand) <span class="keyword">else</span> {
        <span class="keyword">throw</span> <span class="type">ParserError</span>.<span class="property">invalidState</span>
      }
      currentNode = subcommandNode
      <span class="keyword">continue</span>
    }
    
    <span class="comment">// No more subcommands to parse.</span>
    <span class="keyword">return</span>
  }
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/CommandParser.swift"><code>CommandParser.swift</code></a></p></blockquote><p>As a reminder, <code>CommandParser</code> thinks of our command line tool as a tree structure (where each node is a <code>ParsableCommand</code> type): in <code>descendingParse</code> we are building said tree based on the parsed <code>SplitArguments</code>.</p><p>We do not create the whole tree structure, but only the relevant branches based on the given <code>SplitArguments</code> instance.</p><p>Let's have a look at <code>parseCurrent(_:)</code> next:</p><pre><code><span class="keyword">fileprivate mutating func</span> parseCurrent(<span class="keyword">_</span> split: <span class="keyword">inout</span> <span class="type">SplitArguments</span>) <span class="keyword">throws</span> {
  <span class="comment">// Build the argument set (i.e. information on how to parse):</span>
  <span class="keyword">let</span> commandArguments = <span class="type">ArgumentSet</span>(currentNode.<span class="property">element</span>)
  
  <span class="comment">// Parse the arguments into a ParsedValues:</span>
  <span class="keyword">let</span> parsedResult = <span class="keyword">try</span> commandArguments.<span class="call">lenientParse</span>(split)
  
  <span class="keyword">let</span> values: <span class="type">ParsedValues</span>
  <span class="keyword">switch</span> parsedResult {
  <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> v):
    values = v
  <span class="keyword">case</span> .<span class="dotAccess">partial</span>(<span class="keyword">let</span> v, <span class="keyword">let</span> e):
    values = v
    <span class="keyword">if</span> currentNode.<span class="property">isLeaf</span> {
      <span class="keyword">throw</span> e
    }
  }
  
  <span class="comment">// Decode the values from ParsedValues into the ParsableCommand:</span>
  <span class="keyword">let</span> decoder = <span class="type">ArgumentDecoder</span>(values: values, previouslyParsedValues: parsedValues)
  <span class="keyword">var</span> decodedResult: <span class="type">ParsableCommand</span>
  <span class="keyword">do</span> {
    decodedResult = <span class="keyword">try</span> currentNode.<span class="property">element</span>.<span class="keyword">init</span>(from: decoder)
  } <span class="keyword">catch</span> {
    ...
  }
  
  <span class="comment">// Decoding was successful, so remove the arguments that were used
  // by the decoder.</span>
  split.<span class="call">removeAll</span>(in: decoder.<span class="property">usedOrigins</span>)
  
  <span class="comment">// Save this decoded result to add to the next command.</span>
  parsedValues.<span class="call">append</span>((currentNode.<span class="property">element</span>, decodedResult))
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Sources/ArgumentParser/Parsing/CommandParser.swift"><code>CommandParser.swift</code></a></p></blockquote><p>First we create a new <code>ArgumentSet</code> instance, which is based on the <code>ParsableCommand</code> type associated with the current node in the tree (if this is the first iteration, we're still at the root):</p><pre><code><span class="keyword">struct</span> ArgumentSet {
  <span class="keyword">var</span> content: <span class="type">Content</span>
  <span class="keyword">var</span> kind: <span class="type">Kind</span> <span class="comment">// Used to generate help text.</span>
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/339baea0a5d8c9b26c6e9be47df8e713f6e26234/Sources/ArgumentParser/Parsing/ArgumentSet.swift"><code>ArgumentSet.swift</code></a>:</p></blockquote><p>Where we define a <code>Content</code>:</p><pre><code><span class="keyword">enum</span> Content {
  <span class="keyword">case</span> arguments([<span class="type">ArgumentDefinition</span>]) <span class="comment">// A leaf list of arguments.</span>
  <span class="keyword">case</span> sets([<span class="type">ArgumentSet</span>]) <span class="comment">// A node with additional `[ArgumentSet]`</span>
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/339baea0a5d8c9b26c6e9be47df8e713f6e26234/Sources/ArgumentParser/Parsing/ArgumentSet.swift"><code>ArgumentSet.swift</code></a>:</p></blockquote><p><code>ArgumentSet</code> helps us create yet again a tree structure of our command line tool, however the emphasis here is on the command line arguments instead of the command line sub/commands.</p><p>Going back to <code>parseCurrent(_:)</code>, here's the <code>ArgumentSet</code> initializer that we use:</p><pre><code><span class="keyword">extension</span> <span class="type">ArgumentSet</span> {
  <span class="keyword">init</span>(<span class="keyword">_</span> type: <span class="type">ParsableArguments</span>.<span class="type">Type</span>) {
    <span class="keyword">let</span> a: [<span class="type">ArgumentSet</span>] = <span class="type">Mirror</span>(reflecting: type.<span class="keyword">init</span>())
      .<span class="dotAccess">children</span>
      .<span class="call">compactMap</span> { child <span class="keyword">in
        guard
          var</span> codingKey = child.<span class="property">label</span>,
          <span class="keyword">let</span> parsed = child.<span class="property">value</span> <span class="keyword">as</span>? <span class="type">ArgumentSetProvider</span>
          <span class="keyword">else</span> { <span class="keyword">return nil</span> }
        
        <span class="comment">// Property wrappers have underscore-prefixed names</span>
        codingKey = <span class="type">String</span>(codingKey.<span class="property">first</span> == <span class="string">"_"</span> ? codingKey.<span class="call">dropFirst</span>(<span class="number">1</span>) : codingKey.<span class="call">dropFirst</span>(<span class="number">0</span>))
        
        <span class="keyword">let</span> key = <span class="type">InputKey</span>(rawValue: codingKey)
        <span class="keyword">return</span> parsed.<span class="call">argumentSet</span>(for: key)
    }
    <span class="keyword">self</span>.<span class="keyword">init</span>(additive: a)
  }
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/f6ac7b8118ff5d1bc0faee7f37bf6f8fd8f95602/Sources/ArgumentParser/Parsable%20Types/ParsableArguments.swift"><code>ParsableArguments.swift</code></a></p></blockquote><p>This initializer is where a second <em>magic trick</em> happens: 1. we first initialize our <code>ParsableArguments</code> type with <code>ParsableArguments</code>'s required <code>init()</code> 2. just to get the instance <a href="https://developer.apple.com/documentation/swift/mirror">Mirror representation</a> 3. and extract its <code>children</code> 4. which are the properties defined in our type, a.k.a. the ones with one of the four ArgumentParser property wrappers (<code>@Argument</code>, <code>@Option</code>, <code>@Flag</code>, and <code>@OptionGroup</code>).</p><p>This is to say, <code>ArgumentSet</code> initialization is where our <code>ParsableCommand</code> type properties auto-magically transform into parsable input arguments that can be read from the command line input.</p><p>Once we have the <code>ArgumentSet</code> instance, we proceed with our <code>parseCurrent(_:)</code> execution by <a href="https://github.com/apple/swift-argument-parser/blob/7f5984a29bf6fa0bd158c3e7e8f39fa31a5f062e/Sources/ArgumentParser/Parsing/ArgumentSet.swift#L277">matching</a> the contents of <code>SplitArguments</code> (which uses as input the input arguments from the command line) with <code>ArgumentSet</code> (which uses as input our type definition).</p><p>This match result is then <a href="https://github.com/apple/swift-argument-parser/blob/fd5b49c8dcd5084c65f622cfb253ed50f72321d1/Sources/ArgumentParser/Parsing/CommandParser.swift#L120">used by the <code>ArgumentDecoder</code></a> to really instantiate our command line and set all the (property wrappers) values.</p><p>The <code>CommandParser</code>'s <code>descendingParse(_:)</code> continues its execution until all the arguments have been consumed:<br>once this is completed, we go back to <code>CommandParser</code>'s <code>parse(arguments:)</code>, which then <a href="https://github.com/apple/swift-argument-parser/blob/fd5b49c8dcd5084c65f622cfb253ed50f72321d1/Sources/ArgumentParser/Parsing/CommandParser.swift#L185">extracts</a> and returns the last parsed <code>ParsableCommand</code> instance. Completing the last two steps of <code>CommandParser</code>'s <code>parse(_:)</code>.</p><h2>Wrapping Up The Static Main</h2><p>At this point we are back to the <code>ParsableCommand</code>'s <code>parseAsRoot(_:)</code> method, with our <code>ParsableCommand</code>instance and all its properties set. There's one last step that we need to take before finally running: do our (custom and optional) <code>ParsableArguments</code>'s input validation.</p><p>Once the validation passes, we finally run our tool, which completes the whole journey.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p><em>Clarity at the point of use</em> is the first fundamental in Swift's <a href="https://swift.org/documentation/api-design-guidelines/#parameter-names">API Design Guidelines</a>, what the Swift team has achieved with ArgumentParser goes well beyond that: it's <em>ease at the point of use</em>.</p><p>The more we dig into this library the more we can appreciate how much complexity is hidden behind a protocol and four property wrappers:<br>with this article I hope to have given you a small glimpse into the tremendous work the Swift team put into the library, and hope you can now also appreciate how elegant this library API truly is.</p><p>Thank you for reading and please don't hesitate to <a href="https://twitter.com/zntfdr">let me know</a> of any other library with such powerful and elegant API üòÉ</p><p><a href="https://www.fivestars.blog/feed.rss">Subscribe</a> and <a href="https://twitter.com/zntfdr">follow me on Twitter</a> for more insights into Swift and all things around the language! Until next time üëãüèª</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/executables-argument-kind</guid><title>TSCUtility's ArgumentParser</title><description></description><link>https://www.fivestars.blog/articles/executables-argument-kind</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>While we have a <a href="https://swift.org/blog/argument-parser/">brand new library</a> from the Swift team that specializes in <a href="https://github.com/apple/swift-argument-parser">argument parsing</a>, it's good to have a look at how we got there, which is the purpose of this article.</p></blockquote><p>In the <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">Swift Executables Guide</a> we've seen how we can use <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a> to easily read and transform launch arguments. The <a href="https://github.com/apple/swift-argument-parser">ArgumentParser package</a> is actually an iteration over <a href="https://github.com/apple/swift-tools-support-core/blob/0.0.1/Sources/TSCUtility/ArgumentParser.swift#L526"><code>TSCUtility</code>'s <code>ArgumentParser</code></a>, which we are going to dive into next.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>An example</h2><blockquote><p>I'm going to make a small example here, however please feel free to bookmark <a href="https://twitter.com/rderik">Derik Ramirez</a>'s awesome <a href="https://rderik.com/blog/command-line-argument-parsing-using-swift-package-manager-s/">argument parsing article</a> for more.</p></blockquote><p>In this example we will require a flag <code>--name</code> with an associated value: after implementing it, the scripts will expect to be launched with something like <code>$ swift run hello --name YourName</code>:</p><ol><li>First, we will define our parser, which we can think of as our command line interface to the user:</li></ol><pre><code><span class="keyword">let</span> parser = <span class="type">ArgumentParser</span>(
  usage: <span class="string">"--name YourName"</span>, 
  overview: <span class="string">"Tell me your name üòä"</span>
)
</code></pre><ol start="2"><li>Then we declare an expected argument via the generic <code>OptionArgument</code>:</li></ol><pre><code><span class="keyword">let</span> nameArgument: <span class="type">OptionArgument</span>&lt;<span class="type">String</span>&gt; = parser.<span class="call">add</span>(
  option: <span class="string">"--name"</span>,
  kind: <span class="type">String</span>.<span class="keyword">self</span>,
  usage: <span class="string">"Specify your name"</span>
)
</code></pre><blockquote><p>Beside the flag, <code>OptionArgument</code> also knows the expected argument value type: <code>kind</code> is a metatype instance conforming to the <a href="https://github.com/apple/swift-tools-support-core/blob/05e8dd50e41731961d73b5d7b181a9a57021e5f8/Sources/TSCUtility/ArgumentParser.swift#L151"><code>ArgumentKind</code> protocol</a>.Exactly as for <code>Decodable</code>, all Swift primitives natively conform to it, and we can make our own types conform to it as well.</p></blockquote><ol start="3"><li>Lastly, we can do the actual parsing:</li></ol><pre><code><span class="keyword">let</span> parseResult = <span class="keyword">try</span>! parser.<span class="call">parse</span>(arguments)
<span class="keyword">if let</span> name: <span class="type">String</span> = parseResult.<span class="call">get</span>(nameArgument) { ... }
</code></pre><p>Here's the complete code:</p><pre><code><span class="keyword">import</span> TSCBasic
<span class="keyword">import</span> TSCUtility

<span class="comment">// Read the arguments.</span>
<span class="keyword">let</span> arguments: [<span class="type">String</span>] = <span class="type">Array</span>(
  <span class="type">CommandLine</span>.<span class="property">arguments</span>.<span class="call">dropFirst</span>()
)

<span class="comment">// Define our parser.</span>
<span class="keyword">let</span> parser = <span class="type">ArgumentParser</span>(
  usage: <span class="string">"--name YourName"</span>,
  overview: <span class="string">"Tell me your name üòä"</span>)

<span class="comment">// Declare expected launch argument(s).</span>
<span class="keyword">let</span> nameArgument: <span class="type">OptionArgument</span>&lt;<span class="type">String</span>&gt; = parser.<span class="call">add</span>(
  option: <span class="string">"--name"</span>,
  kind: <span class="type">String</span>.<span class="keyword">self</span>,
  usage: <span class="string">"Specify your name"</span>)

<span class="comment">// Do the parsing.</span>
<span class="keyword">do</span> {
  <span class="keyword">let</span> parseResult = <span class="keyword">try</span> parser.<span class="call">parse</span>(arguments)
  <span class="keyword">if let</span> name: <span class="type">String</span> = parseResult.<span class="call">get</span>(nameArgument) {
    <span class="call">print</span>(<span class="string">"Hello</span> \(name)<span class="string">"</span>)
  } <span class="keyword">else</span> {
    parser.<span class="call">printUsage</span>(on: stdoutStream)
  }
} <span class="keyword">catch</span> {
   parser.<span class="call">printUsage</span>(on: stdoutStream) 
}
</code></pre><blockquote><p>Replace the <code>main.swift</code> content with this to try it out!</p></blockquote><blockquote><p>In case of any failure, we're asking the parser to print the command line usage: this is done for free, we don't have to do anything to get this behavior! üéâ</p></blockquote><p>And here are a few examples of the script in action:</p><pre><code>$ swift run hello --name <span class="type">Federico</span>
&gt; <span class="type">Hello Federico</span>

$ swift run hello missingFlag
&gt; <span class="type">OVERVIEW</span>: <span class="type">Tell</span> me your name üòä
&gt; 
&gt; <span class="type">USAGE</span>: hello --name <span class="type">YourName</span>
&gt; 
&gt; <span class="type">OPTIONS</span>:
&gt;   --name   <span class="type">Specify</span> your name
&gt;   --help   <span class="type">Display</span> available options

$ swift run hello --help
&gt; <span class="type">OVERVIEW</span>: <span class="type">Tell</span> me your name üòä
&gt; 
&gt; <span class="type">USAGE</span>: hello --name <span class="type">YourName</span>
&gt; 
&gt; <span class="type">OPTIONS</span>:
&gt;   --name   <span class="type">Specify</span> your name
&gt;   --help   <span class="type">Display</span> available options
</code></pre><blockquote><p>This is how the <code>swift</code> command line tool works as well: if you run <code>$ swift --help</code>, or <code>$ swift run --help</code>, etc you will see exactly the same format as our new script.</p></blockquote><h2>ArgumentKind</h2><p>In the example above we declared an expected argument via the generic <code>OptionArgument</code>:</p><pre><code><span class="keyword">let</span> nameArgument: <span class="type">OptionArgument</span>&lt;<span class="type">String</span>&gt; = parser.<span class="call">add</span>(
  option: <span class="string">"--name"</span>,
  kind: <span class="type">String</span>.<span class="keyword">self</span>,
  usage: <span class="string">"Specify your name"</span>
)
</code></pre><p>The <code>kind</code> parameter expects a type conforming to a protocol called <a href="https://github.com/apple/swift-tools-support-core/blob/05e8dd50e41731961d73b5d7b181a9a57021e5f8/Sources/TSCUtility/ArgumentParser.swift#L151"><code>ArgumentKind</code></a>:</p><pre><code><span class="keyword">public protocol</span> ArgumentKind {
  <span class="comment">/// Throwable convertion initializer.</span>
  <span class="keyword">init</span>(argument: <span class="type">String</span>) <span class="keyword">throws</span>

  <span class="comment">/// Type of shell completion to provide for this argument.</span>
  <span class="keyword">static var</span> completion: <span class="type">ShellCompletion</span> { <span class="keyword">get</span> }
}
</code></pre><blockquote><p><code>ArgumentKind</code> definition: I like to think of this protocol as the <a href="https://en.wikipedia.org/wiki/Command-line_interface">CLI</a> version of Swift's <a href="https://github.com/apple/swift/blob/99e60b03b23507eef610895cb41cb28c85ec1601/stdlib/public/core/Codable.swift#L32"><code>Decodable</code></a>.</p></blockquote><p>All it is requested is an initializer <code>init(argument:)</code> that parses the given launch argument, and a static <code>completion</code> property of type <a href="https://github.com/apple/swift-tools-support-core/blob/7b1b8195cb83c20e1f24f384140be9edad523aa5/Sources/TSCUtility/ArgumentParser.swift#L130"><code>ShellCompletion</code></a>:</p><pre><code><span class="keyword">public enum</span> ShellCompletion {
  <span class="comment">/// Offers no completions at all; e.g. for a string identifier.</span>
  <span class="keyword">case</span> none
  
  <span class="comment">/// No specific completions, will offer tool's completions.</span>
  <span class="keyword">case</span> unspecified
  
  <span class="comment">/// Offers filename completions.</span>
  <span class="keyword">case</span> filename
  
  <span class="comment">/// Custom function for generating completions. Must be provided in the script's scope.</span>
  <span class="keyword">case</span> function(<span class="type">String</span>)
  
  <span class="comment">/// Offers completions from predefined list. A description can be provided which is shown in some shells, like zsh.</span>
  <span class="keyword">case</span> values([(value: <span class="type">String</span>, description: <span class="type">String</span>)])
}
</code></pre><blockquote><p><code>ShellCompletion</code> definition.</p></blockquote><p>This second requirement is to provide shell completion to our users.</p><h2>Primitives Conformation</h2><p><code>TSCUtility</code> provides <code>ArgumentKind</code> conformation to the most common primitives:</p><ul><li><a href="https://github.com/apple/swift-tools-support-core/blob/57f63b8a9ee5a18c3bf8413ec734127a74dda692/Sources/TSCUtility/ArgumentParser.swift#L169"><code>String</code></a>:</li></ul><pre><code><span class="keyword">extension</span> <span class="type">String</span>: <span class="type">ArgumentKind</span> {
  <span class="keyword">public init</span>(argument: <span class="type">String</span>) <span class="keyword">throws</span> {
    <span class="keyword">self</span> = argument
  }

  <span class="keyword">public static let</span> completion: <span class="type">ShellCompletion</span> = .<span class="dotAccess">none</span>
}
</code></pre><ul><li><a href="https://github.com/apple/swift-tools-support-core/blob/57f63b8a9ee5a18c3bf8413ec734127a74dda692/Sources/TSCUtility/ArgumentParser.swift#L177"><code>Int</code></a>:</li></ul><pre><code><span class="keyword">extension</span> <span class="type">Int</span>: <span class="type">ArgumentKind</span> {
    <span class="keyword">public init</span>(argument: <span class="type">String</span>) <span class="keyword">throws</span> {
        <span class="keyword">guard let</span> int = <span class="type">Int</span>(argument) <span class="keyword">else</span> {
            <span class="keyword">throw</span> <span class="type">ArgumentConversionError</span>.<span class="call">typeMismatch</span>(value: argument, expectedType: <span class="type">Int</span>.<span class="keyword">self</span>)
        }

        <span class="keyword">self</span> = int
    }

    <span class="keyword">public static let</span> completion: <span class="type">ShellCompletion</span> = .<span class="dotAccess">none</span>
}
</code></pre><ul><li><a href="https://github.com/apple/swift-tools-support-core/blob/57f63b8a9ee5a18c3bf8413ec734127a74dda692/Sources/TSCUtility/ArgumentParser.swift#L189"><code>Bool</code></a>:</li></ul><pre><code><span class="keyword">extension</span> <span class="type">Bool</span>: <span class="type">ArgumentKind</span> {
    <span class="keyword">public init</span>(argument: <span class="type">String</span>) <span class="keyword">throws</span> {
        <span class="keyword">guard let</span> bool = <span class="type">Bool</span>(argument) <span class="keyword">else</span> {
            <span class="keyword">throw</span> <span class="type">ArgumentConversionError</span>.<span class="call">unknown</span>(value: argument)
        }

        <span class="keyword">self</span> = bool
    }

    <span class="keyword">public static var</span> completion: <span class="type">ShellCompletion</span> = .<span class="dotAccess">unspecified</span>
}
</code></pre><blockquote><p>There's a fourth conformation in <code>TSCUtility</code> for a custom type <a href="https://github.com/apple/swift-tools-support-core/blob/7b1b8195cb83c20e1f24f384140be9edad523aa5/Sources/TSCUtility/ArgumentParser.swift#L217"><code>PathArgument</code></a>, we skip it here as it's off topic.</p></blockquote><p>Conforming to <code>ArgumentKind</code> is straightforward, let's make a new conformation next.</p><h2>Custom Conformation</h2><p>In my <a href="https://apps.apple.com/us/developer/federico-zanetello/id1053443073">app suite</a> I have several scripts where I must specify which city I want to work on, this is a good opportunity to define an enum with <code>String</code> <a href="https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html#ID149">Raw Values</a>:</p><pre><code><span class="keyword">enum</span> City: <span class="type">String</span> {
  <span class="keyword">case</span> bangkok
  <span class="keyword">case</span> chongqing
  <span class="keyword">case</span> jakarta
  <span class="keyword">case</span> kualalumpur 
}
</code></pre><p>Then we can define our <code>ArgumentKind</code> initializer:</p><pre><code><span class="keyword">public init</span>(argument: <span class="type">String</span>) <span class="keyword">throws</span> {
  <span class="keyword">guard let</span> city = <span class="type">City</span>(rawValue: argument) <span class="keyword">else</span> {
    <span class="keyword">throw</span> <span class="type">ArgumentConversionError</span>.<span class="call">unknown</span>(value: argument)
  }

  <span class="keyword">self</span> = city
}
</code></pre><blockquote><p>We throw <code>TSCUtility</code>'s <a href="https://github.com/apple/swift-tools-support-core/blob/52e6700615f398688c415560a8ccba95a5bbcc56/Sources/TSCUtility/ArgumentParser.swift#L68"><code>ArgumentConversionError</code></a>, no need to create custom error types!</p></blockquote><p>Lastly, we add the <code>ArgumentKind</code>'s static <code>completion</code> property:</p><pre><code><span class="keyword">public static var</span> completion: <span class="type">ShellCompletion</span> = .<span class="call">values</span>([
  (<span class="string">"bangkok"</span>, <span class="string">"Capital of Thailand"</span>),
  (<span class="string">"chongqing"</span>, <span class="string">"Capital of the Hot Pot!"</span>),
  (<span class="string">"jakarta"</span>, <span class="string">"Capital of Indonesia"</span>),
  (<span class="string">"kualalumpur"</span>, <span class="string">"Capital of Malaysia"</span>)
])
</code></pre><blockquote><p>Making the enum conform to <code>CaseIterable</code> would be more correct, but for brevity's sake ...</p></blockquote><p>And that's it! We can now define a new argument with associated type <code>City</code>, and use it in our script:</p><pre><code><span class="keyword">let</span> parser = <span class="type">ArgumentParser</span>(
  usage: <span class="string">"My new tool"</span>,
  overview: <span class="string">"A five stars tool."</span>
)

<span class="keyword">let</span> cityArgument: <span class="type">OptionArgument</span>&lt;<span class="type">City</span>&gt; = parser.<span class="call">add</span>(
  option: <span class="string">"--city"</span>,
  kind: <span class="type">City</span>.<span class="keyword">self</span>,
  usage: <span class="string">"The city to work on"</span>
)
</code></pre><p>Here's the complete example:</p><pre><code><span class="keyword">import</span> TSCBasic
<span class="keyword">import</span> TSCUtility

<span class="keyword">enum</span> City: <span class="type">String</span>, <span class="type">ArgumentKind</span> {
  <span class="keyword">case</span> bangkok
  <span class="keyword">case</span> chongqing
  <span class="keyword">case</span> jakarta
  <span class="keyword">case</span> kualaLumpur

  <span class="keyword">public init</span>(argument: <span class="type">String</span>) <span class="keyword">throws</span> {
    <span class="keyword">guard let</span> city = <span class="type">City</span>(rawValue: argument) <span class="keyword">else</span> {
      <span class="keyword">throw</span> <span class="type">ArgumentConversionError</span>.<span class="call">unknown</span>(value: argument)
    }

    <span class="keyword">self</span> = city
  }

  <span class="keyword">public static var</span> completion: <span class="type">ShellCompletion</span> = .<span class="call">values</span>([
    (<span class="string">"bangkok"</span>, <span class="string">"Capital of Thailand"</span>),
    (<span class="string">"chongqing"</span>, <span class="string">"Capital of the Hot Pot!"</span>),
    (<span class="string">"jakarta"</span>, <span class="string">"Capital of Indonesia"</span>),
    (<span class="string">"kualalumpur"</span>, <span class="string">"Capital of Malaysia"</span>)
  ])
}

<span class="comment">// Read the arguments.</span>
<span class="keyword">let</span> arguments: [<span class="type">String</span>] = <span class="type">Array</span>(
  <span class="type">CommandLine</span>.<span class="property">arguments</span>.<span class="call">dropFirst</span>()
)

<span class="comment">// Define our parser.</span>
<span class="keyword">let</span> parser = <span class="type">ArgumentParser</span>(
  usage: <span class="string">"My new tool"</span>,
  overview: <span class="string">"A five stars tool."</span>
)

<span class="comment">// Declare expected launch argument(s).</span>
<span class="keyword">let</span> cityArgument: <span class="type">OptionArgument</span>&lt;<span class="type">City</span>&gt; = parser.<span class="call">add</span>(
  option: <span class="string">"--city"</span>,
  kind: <span class="type">City</span>.<span class="keyword">self</span>,
  usage: <span class="string">"The city to work on"</span>,
  completion: <span class="type">City</span>.<span class="property">completion</span>
)

<span class="comment">// Do the parsing.</span>
<span class="keyword">do</span> {
  <span class="keyword">let</span> parseResult = <span class="keyword">try</span> parser.<span class="call">parse</span>(arguments)
  <span class="keyword">if let</span> city: <span class="type">City</span> = parseResult.<span class="call">get</span>(cityArgument) {
    <span class="call">print</span>(<span class="string">"Working on</span> \(city.<span class="property">rawValue</span>) <span class="string">üöÄ"</span>)
  } <span class="keyword">else</span> {
    <span class="call">print</span>(<span class="string">"‚ö†Ô∏è Seems like the city is missing!"</span>)
  }
} <span class="keyword">catch</span> {
   <span class="call">print</span>(error)
}
</code></pre><blockquote><p>Place this in a <a href="https://www.fivestars.blog/articles/ultimate-guide-swift-executables/">Swift Executable</a> <code>main.swift</code> file.</p></blockquote><p>And here we can see the script in action:</p><pre><code>$ swift run yourToolName --city bangkok
&gt; <span class="type">Working</span> on bangkok üöÄ

$ swift run yourToolName 
&gt; ‚ö†Ô∏è <span class="type">Seems</span> like the city <span class="keyword">is</span> missing!
</code></pre><h2>Custom Conformation 2: Extending Types</h2><p>While it's awesome that we can make our own types conform to <code>ArgumentKind</code>, nobody stops us to also <em>extend</em> other types as well.<br>For example, if our script expects an <code>URL</code>, we can extend <a href="https://developer.apple.com/documentation/foundation/url">Foundation's <code>URL</code></a>:</p><pre><code><span class="keyword">import</span> Foundation
<span class="keyword">import</span> TSCUtility

<span class="keyword">extension</span> <span class="type">Foundation</span>.<span class="type">URL</span>: <span class="type">ArgumentKind</span> {

  <span class="keyword">public init</span>(argument: <span class="type">String</span>) <span class="keyword">throws</span> {
    <span class="keyword">guard let</span> url = <span class="type">URL</span>(string: argument) <span class="keyword">else</span> {
      <span class="keyword">throw</span> <span class="type">ArgumentConversionError</span>.<span class="call">unknown</span>(value: argument)
    }

    <span class="keyword">self</span> = url
  }

  <span class="keyword">public static var</span> completion: <span class="type">ShellCompletion</span> = .<span class="dotAccess">none</span>
}
</code></pre><blockquote><p><a href="https://github.com/zntfdr/Selenops/blob/74ab2b0f5afc7948d758ae60374be2e6089f6b58/Sources/selenopsCLI/URL%2BArgumentKind.swift#L11">Code snippet</a> from <a href="https://github.com/zntfdr/Selenops">Selenops, A Swift Web Crawler</a>.</p></blockquote><p>And now we can get an <code>URL</code> instance directly from our parser!</p><h2>Comparison with ArgumentParser</h2><p>As of today, the new <a href="https://github.com/apple/swift-argument-parser">ArgumentParser library</a> does <a href="https://github.com/apple/swift-argument-parser/issues/1">not support auto-completion</a>, therefore ArgumentParser's <code>ArgumentKind</code> equivalent, <a href="https://github.com/apple/swift-argument-parser/blob/f6ac7b8118ff5d1bc0faee7f37bf6f8fd8f95602/Sources/ArgumentParser/Parsable%20Types/ExpressibleByArgument.swift#L13"><code>ExpressibleByArgument</code></a>, only requires an initializer:</p><pre><code><span class="comment">/// A type that can be expressed as a command-line argument.</span>
<span class="keyword">public protocol</span> ExpressibleByArgument {
  <span class="comment">/// Creates a new instance of this type from a command-line-specified
  /// argument.</span>
  <span class="keyword">init</span>?(argument: <span class="type">String</span>)
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>'s <a href="https://github.com/apple/swift-argument-parser/blob/f6ac7b8118ff5d1bc0faee7f37bf6f8fd8f95602/Sources/ArgumentParser/Parsable%20Types/ExpressibleByArgument.swift#L13"><code>ExpressibleByArgument.swift</code></a>.</p></blockquote><p>Having to implement one initializer surely makes adopting the new library faster, however I'm hopeful that auto-completion support <a href="https://github.com/apple/swift-argument-parser/issues/1">will be added in the future</a>.</p><p>If you're interested to learn more about the new library: - have a look at the <a href="https://github.com/apple/swift-argument-parser/tree/be65f492ba72b7a08805bbb2cd1e3e064fbc3be8/Documentation">amazing official documentation</a> - maybe subscribe to <a href="https://www.fivestars.blog/feed.rss">this blog feed RSS</a> üëÄ</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>In this article we've seen how <code>TSCUtility</code>'s <code>ArgumentParser</code> and <code>ArgumentKind</code> are defined and how we can make any type conform to it, we've then compared it with the new ArgumentParser library, noting a little regression. Despite that, both libraries make our scripts argument parsing effortless üöÄ.</p><p>If you're wondering which one you should pick up today: go with <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>. TSCUtility's ArgumentParser will be <a href="https://github.com/apple/swift-argument-parser/issues/5#issuecomment-592572888">completely removed in the future</a>.</p><p>As always you can <a href="https://twitter.com/zntfdr">find me on Twitter</a> for any comment and/or feedback, thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/ultimate-guide-swift-executables</guid><title>The Ultimate Guide To Swift Executables üöÄ</title><description></description><link>https://www.fivestars.blog/articles/ultimate-guide-swift-executables</link><pubDate>Tue, 25 Feb 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Every macOS/iOS developer uses tools such as <a href="https://fastlane.tools">fastlane</a> and <a href="https://github.com/realm/SwiftLint">SwiftLint</a> to automate tasks as much as possible:<br>in this article we're going to dive into how we can build our own tools using Swift.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Why Swift?</h2><p>There are multiple advantages of using Swift: - we know the language - building a script is similar to building an app or a library - everybody in the team can read, understand, and edit what any script does</p><p>In fact, everything is so familiar that we're going to build a script with the Swift Package Manager!</p><h2>Creating An Executable</h2><p>Creating a new package in Xcode defaults into library. Instead, we're going to use the command line to create an executable, please open your favorite terminal and fire the following commands:</p><pre><code>$ mkdir hello
$ cd hello
$ swift package <span class="keyword">init</span> --type executable
</code></pre><p>Once the last command completes, a bunch of new files have been created, and our new executable is ready to run! Let's take a look at what we have first.</p><h2>The Package Structure</h2><p>Before diving into the package structure, it is important to know what a Package Target is.</p><h3>Package Target(s)</h3><p>A Package Target is a basic building block of any Swift Package, you can think of a target as a module or a library, its representation is a <strong>folder</strong>:<br>all files within that folder belongs to that specific target, and every file can access to all other declarations within that folder.</p><p>A Target can depend on other targets, said targets can be within the same package or come from external packages, we will cover both cases in this article.</p><p>There are two kinds of targets: those that are compiled into a module, and those that are compiled into a test suite (more on this soon).</p><h3>The Structure</h3><p>When we run <code>$ swift package init --type executable</code>, the basic structure of our package is automatically generated:</p><pre><code>‚îú‚îÄ‚îÄ <span class="type">Package</span>.<span class="property">swift</span>
‚îú‚îÄ‚îÄ <span class="type">README</span>.<span class="property">md</span>
‚îú‚îÄ‚îÄ <span class="type">Sources</span>
‚îÇ   ‚îî‚îÄ‚îÄ hello
‚îÇ       ‚îî‚îÄ‚îÄ main.<span class="property">swift</span>
‚îî‚îÄ‚îÄ <span class="type">Tests</span>
    ‚îú‚îÄ‚îÄ helloTests
    ‚îÇ   ‚îú‚îÄ‚îÄ helloTests.<span class="property">swift</span>
    ‚îÇ   ‚îî‚îÄ‚îÄ <span class="type">XCTestManifests</span>.<span class="property">swift</span>
    ‚îî‚îÄ‚îÄ <span class="type">LinuxMain</span>.<span class="property">swift</span>
</code></pre><p>This structure is very similar to a <em>library</em> package:</p><ul><li>The <code>Tests</code> folder is where our tests are, we will have a folder for each <strong>test target</strong>.</li><li>The <code>Sources</code> folder is where our script code will live, we will have one folder for each <strong>module target</strong>. The compiler distinguishes <strong>executable modules</strong> from <strong>library modules</strong> thanks to the presence, or absence, of a <code>main.swift</code> file in the target folder.</li><li>The <code>README.md</code> is for us to describe the purpose of the package.</li><li>Lastly, we have the most important file: the <code>Package.swift</code> manifest, we will look at this next.</li></ul><p>From the file structure above we can see that we have two targets:<br>- a <code>helloTests</code> test target. - a <code>hello</code> module target, which we now know is an executable module, as it contains a <code>main.swift</code> file.</p><p>While this is all clear to us now, nothing really works until it's declared in the <code>Package.swift</code> manifest file.</p><h2>The Package Manifest</h2><p><code>Package.swift</code> is the entry point of every package, it showcases all there is to know about it:</p><pre><code><span class="comment">// swift-tools-version:5.1</span>

<span class="keyword">import</span> PackageDescription

<span class="keyword">let</span> package = <span class="type">Package</span>(
    name: <span class="string">"hello"</span>,
    dependencies: [
    ],
    targets: [
        .<span class="call">target</span>(
            name: <span class="string">"hello"</span>,
            dependencies: []),
        .<span class="call">testTarget</span>(
            name: <span class="string">"helloTests"</span>,
            dependencies: [<span class="string">"hello"</span>]),
    ]
)
</code></pre><blockquote><p>The generated <code>Package.swift</code> file.</p></blockquote><blockquote><p>We can double-click on this file to open the whole package in Xcode.</p></blockquote><p>The first line always declares the <em>Swift tools version</em>, which lets the compiler know the minimum version of the Swift tools (such as the <code>PackageDescription</code> module) and Swift language (compatibility) version to use in order to process the manifest file.</p><p>Without this line, the compiler can't know if a package has been written in Swift 3, 6 or else:<br>therefore this line is required, and we wouldn't be able to compile the package without it.</p><p>We then import the <a href="https://github.com/apple/swift-package-manager/tree/334217e5a0d3b8b2a305c1adbc72f81917c0c445/Sources/PackageDescription"><code>PackageDescription</code> module</a>, which defines all the APIs available for us to use when declaring a Package.</p><p>Lastly, we have our package definition, in here we find:</p><ul><li>The package name which defaults to the folder name where we ran the <code>$ swift package init</code> command.</li><li>The package external dependencies there are none at the moment.</li><li>The package targets the generated package has two targets, a module target, <code>.target</code>, and a test target, <code>.testTarget</code>.</li></ul><p>If not specified otherwise, the folder of each target has the same name as the target, and all <code>.target</code> declarations are to be found in the <code>Source</code> folder, while the <code>.testTarget</code> targets are to be found in the <code>Tests</code> folder.</p><p>Note how each target can have its own dependencies, these dependencies can come from within the package itself, like in our <code>.testTarget</code> case, or from external packages (we will see how to do so later on in this article).</p><p>Now that we understand the package structure and its declaration, it's time to look at the content of <code>hello</code> target folder: the <code>main.swift</code> file.</p><h2>main.swift</h2><pre><code><span class="call">print</span>(<span class="string">"Hello, world!"</span>)
</code></pre><p>That's it! The whole body is one print statement ready to be run, let's do so!</p><h2>Build, Run, And Test A Package</h2><pre><code>$ swift build
$ swift run
$ swift test
</code></pre><h3>Building A Package</h3><p><code>swift build</code> will resolve, download, and compile any dependency mentioned in the package manifest file, it will then build the specified target dependencies (if any) and finally the target itself.</p><p>Since our package only has one target, it is inferred, and we can omit its name in the command.<br>The complete command would be <code>$ swift build --target hello</code>.</p><h3>Running A Package</h3><p>As for the build phase, since we only have one target, we can omit its name, however the complete command is <code>$ swift run hello</code>.</p><p>With this, we should see the following in the terminal:</p><pre><code>$ swift run 
&gt; <span class="type">Hello</span>, world!
</code></pre><p>Congratulations on running your first executable!</p><blockquote><p>We don't have to build every time before running:<code>$ swift run</code> will automatically build the target when necessary.</p></blockquote><h3>Testing A Package</h3><p>We can run all the package tests via <code>$ swift test</code>.</p><p>It's best to always run all the tests. If we'd like to run only a subset, the <code>swift test</code> command offers a <code>--filter</code> flag that does exactly that.<br><br>For example, we can run all the tests in <code>helloTests</code> with <code>$ swift test --filter helloTests</code>.</p><h2>Common Patterns</h2><p>There are a few very common use cases in the scripting world, let's cover them!</p><h2>Exit Codes &amp; System Modules</h2><p>All scripts have an exit status (or code) when complete, the most common are <code>0</code> for success and <code>1</code> for failure. While those are the de facto standards, I prefer to avoid writing magic numbers in code:<br><br>this is why you'll see me importing the <code>Darwin</code> module in some examples below: <code>Darwin</code> defines the two values for a successful exit, <code>EXIT_SUCCESS</code>, and unsuccessful exit, <code>EXIT_FAILURE</code>.</p><blockquote><p><a href="https://en.wikipedia.org/wiki/Darwin_(operating_system)">Darwin</a> is Apple‚Äôs UNIX-based core of every Apple OS, I like to think of it as the foundation of the <code>Foundation</code> framework (<code>Foundation</code> imports <code>Darwin</code>) but really Darwin is much more than that.</p></blockquote><p>Here's a silly example, please replace the <code>main.swift</code> content with the following:</p><pre><code><span class="keyword">import</span> Darwin

<span class="comment">// Flip a coin.</span>
<span class="keyword">if</span> <span class="type">Bool</span>.<span class="call">random</span>() {
  <span class="call">exit</span>(<span class="type">EXIT_SUCCESS</span>) <span class="comment">// exit(0)</span>
} <span class="keyword">else</span> {
  <span class="call">exit</span>(<span class="type">EXIT_FAILURE</span>) <span class="comment">// exit(1)</span>
}
</code></pre><p>While this script does absolutely nothing, it will exit with success only 50% of the time.</p><blockquote><p>Hide this script in your company project build phases to see your colleagues lose their minds üòÜ</p></blockquote><p>This script showcases another important aspect of Swift Packages: we do not need to declare system dependencies.<br>All system modules (such as <code>Foundation</code> and <code>Darwin</code>) can be freely imported in our scripts without having to add such dependency in our <code>Package.swift</code> manifest.</p><p>Lastly, if the script ends because it completes its execution, it automatically ends with a success state: we don't need to call <code>exit(EXIT_SUCCESS)</code> at the bottom of every script.</p><h3>Launch Arguments</h3><p>Most scripts need some input before running, for example a path to a folder, a meaningful value, etc.</p><p>This kind of input can be read via the <a href="https://github.com/apple/swift/blob/b6d9dcca46e034fcf622f698139645916f2f4017/stdlib/public/core/CommandLine.swift#L17"><code>CommandLine</code></a> object, which holds the parameters passed to the script at launch.</p><p>To test it out, please replace the current <code>main.swift</code> content with the following:</p><pre><code><span class="keyword">import</span> Darwin

<span class="comment">// We drop the first argument, which is the script execution path.</span>
<span class="keyword">let</span> arguments: [<span class="type">String</span>] = <span class="type">Array</span>(<span class="type">CommandLine</span>.<span class="property">arguments</span>.<span class="call">dropFirst</span>())

<span class="keyword">guard let</span> name: <span class="type">String</span> = arguments.<span class="property">first</span> <span class="keyword">else</span> { 
  <span class="call">exit</span>(<span class="type">EXIT_FAILURE</span>) 
}

<span class="call">print</span>(<span class="string">"Hello</span> \(name)<span class="string">"</span>)
</code></pre><p>And here's how you can run:</p><pre><code>$ swift run hello <span class="type">Swift</span>
&gt; <span class="type">Hello Swift</span>
$ swift run hello <span class="type">Federico</span>
&gt; <span class="type">Hello Federico</span>
</code></pre><p>The first argument of <code>CommandLine.arguments</code> is always the script execution path, while the following arguments are the user inputs, for example:</p><pre><code>$ swift run hello <span class="number">1 2 3</span>
</code></pre><p>Results in a <code>CommandLine.arguments</code> <code>String</code> array of four elements:</p><pre><code>[<span class="string">"&lt;execution-path-here&gt;"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>]
</code></pre><h3>Interactive Scripts</h3><p>Sometimes scripts need more user input after launch, for such cases we can use <a href="https://developer.apple.com/documentation/swift/1641199-readline"><code>readLine()</code></a>:</p><pre><code><span class="keyword">import</span> Darwin

<span class="call">print</span>(<span class="string">"What`s your name?"</span>)

<span class="keyword">guard let</span> name = <span class="call">readLine</span>(), !name.<span class="property">isEmpty</span> <span class="keyword">else</span> {
  <span class="call">exit</span>(<span class="type">EXIT_FAILURE</span>)
}

<span class="call">print</span>(<span class="string">"Hello</span> \(name)<span class="string">"</span>)
</code></pre><p><code>readLine()</code> is a synchronous call that waits for the user to type something (until the return key is pressed) before proceeding, here's how you can run it:</p><pre><code>$ swift run hello
&gt; <span class="type">What</span>`s your name?
&gt; <span class="type">Federico</span>
&gt; <span class="type">Hello Federico</span>
</code></pre><blockquote><p>The third line, <code>Federico</code>, is something that we type in the console.</p></blockquote><h3>Environment Variables</h3><p>A fundamental aspect of many automation/CI tools is having access to the inherited shell <a href="https://en.wikipedia.org/wiki/Environment_variable">environment</a>, in Swift this couldn't be easier:</p><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">let</span> environment: [<span class="type">String</span>: <span class="type">String</span>] = <span class="type">ProcessInfo</span>.<span class="property">processInfo</span>.<span class="property">environment</span>

<span class="keyword">if let</span> secret = environment[<span class="string">"MYSECRET"</span>] {
  <span class="call">print</span>(secret)
}
</code></pre><blockquote><p><a href="https://developer.apple.com/documentation/foundation/processinfo"><code>ProcessInfo</code></a> is part of <code>Foundation</code>.</p></blockquote><pre><code>$ <span class="type">MYSECRET</span>=<span class="type">FiVeStArStOkEn</span> swift run hello
&gt; <span class="type">FiVeStArStOkEn</span>
</code></pre><h3>Pipeline Messages</h3><p>One of the most powerful features of scripts is the concept of <a href="https://en.wikipedia.org/wiki/Pipeline_(Unix)">pipeline</a> messages: this concept lets us chain multiple scripts, where a script <em>input</em> is the <em>output</em> of the previous script.</p><p>In order to support that, we can use <code>Foundation</code>'s <a href="https://developer.apple.com/documentation/foundation/filehandle"><code>FileHandle</code></a>:</p><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">let</span> standardInput: <span class="type">FileHandle</span> = .<span class="dotAccess">standardInput</span>

<span class="keyword">if let</span> input = <span class="type">String</span>(data: standardInput.<span class="property">availableData</span>, encoding: .<span class="dotAccess">utf8</span>) {
  <span class="call">print</span>(input)
}
</code></pre><blockquote><p>This script expects data at launch: if there's no data, it's going to wait until some is given.</p></blockquote><p><code>FileHandle</code> manages data associated with files, sockets, pipes, and devices:<br>in our case we use it to read the available data from the <a href="https://developer.apple.com/documentation/foundation/filehandle/1413686-standardinput"><code>standardInput</code></a> terminal.</p><p>Here's an example where we use our new script in a pipeline with the list command <a href="https://en.wikipedia.org/wiki/Ls"><code>ls</code></a>:</p><pre><code>$ ls -<span class="number">1</span> | swift run hello
&gt; <span class="type">Package</span>.<span class="property">swift</span>
&gt; <span class="type">README</span>.<span class="property">md</span>
&gt; <span class="type">Sources</span>
&gt; <span class="type">Tests</span>
</code></pre><blockquote><p>In this case our script reads the pipeline input and prints it out.This is a similar behavior to the concatenate command <code>cat</code>.</p></blockquote><p>Similarly, here's how we'd use it for our script to pass data to the next script in the pipeline:</p><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">let</span> standardOutput: <span class="type">FileHandle</span> = .<span class="dotAccess">standardOutput</span>

<span class="keyword">if let</span> outputData = <span class="string">"Five stars"</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>) {
  standardOutput.<span class="call">write</span>(outputData)
}
</code></pre><p>In this example we take our script output and pass it to <code>cat</code>:</p><pre><code>$ swift run | cat
&gt; <span class="type">Five</span> stars
</code></pre><blockquote><p><code>cat</code> reads the pipeline input and prints it out.</p></blockquote><h3>Asynchronous Calls</h3><p>In our apps it's completely fine and even encouraged to do work asynchronously: when we pass a block to a <code>DispatchQueue</code>, we know that our block will run at some point in the future.</p><p>In the executables world, our scripts life ends as soon as we reach the end of the <code>main.swift</code> file:<br>if we dispatch something, it's likely that our script ends <em>before</em> the dispatched block had a chance to execute.</p><p>Does it mean that we cannot do any asynchronous work in our scripts? Absolutely not.<br>There are multiple ways to achieve this, I suggest using either <a href="https://developer.apple.com/documentation/foundation/runloop/1412430-run"><code>RunLoop.current.run()</code></a> or <a href="https://developer.apple.com/documentation/dispatch/1452860-dispatchmain"><code>dispatchMain()</code></a>, both of them do a similar thing: - the former puts the script loop on hold and waits for input data to process. - the latter starts a loop on the main queue which waits for blocks to execute.</p><p>What matters is that both stop the script from terminating, this way: - we can do as much (asynchronous) work as we like - once the work is complete, we must send an <code>exit</code> signal to terminate our execution</p><p>As an example, here's how we can make an asynchronous fetch request:</p><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://api.github.com/users/zntfdr"</span>)!
<span class="keyword">let</span> request = <span class="type">URLRequest</span>(url: url)
<span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">dataTask</span>(with: request) { data, <span class="keyword">_</span>, error <span class="keyword">in
  if let</span> data = data {
    <span class="keyword">let</span> responseText = <span class="type">String</span>(data: data, encoding: .<span class="dotAccess">utf8</span>)!
    <span class="call">print</span>(responseText)
    <span class="call">exit</span>(<span class="type">EXIT_SUCCESS</span>)
  } <span class="keyword">else</span> {
    <span class="call">print</span>(error!.localizedDescription)
    <span class="call">exit</span>(<span class="type">EXIT_FAILURE</span>)
  }
}.<span class="call">resume</span>()

<span class="type">RunLoop</span>.<span class="property">current</span>.<span class="call">run</span>() <span class="comment">// or dispatchMain()</span>
</code></pre><blockquote><p>Replace the <code>main.swift</code> content with this to try it out!</p></blockquote><h2>Common Patterns Standards</h2><p>Certain patterns are repeated across many scripts:<br>wouldn't it be great if there was a common standard for all the scripts to conform to?<br><br>The incredible team behind the Swift Package Manager has released two packages that do just that:<br>please welcome <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a> and <a href="https://github.com/apple/swift-tools-support-core"><code>swift-tools-support-core</code></a>.</p><p>More specifically, we're going to use the <code>SwiftToolsSupport</code> product of the latter, which consists of two libraries: <code>TSCUtility</code> and <code>TSCBasic</code> (TSC = <strong>T</strong>ools <strong>S</strong>upport <strong>C</strong>ore).</p><blockquote><p>This package was previously part of the <a href="https://github.com/apple/swift-package-manager">original <code>swift-package-manager</code> package</a>, and these two libraries were previously known as <a href="https://github.com/apple/swift-package-manager/blob/9abcc2260438177cecd7cf5185b144d13e74122b/Package.swift#L69"><code>SPMUtility</code></a> and <a href="https://github.com/apple/swift-package-manager/blob/9abcc2260438177cecd7cf5185b144d13e74122b/Package.swift#L68"><code>Basic</code></a>.</p></blockquote><p>As we will see shortly, these two modules offer powerful abstractions for common operations.</p><p>Even if these packages are released and maintained by people at Apple, they're not system modules, therefore we need to add them as a dependency to our own package, let's see how to do so!</p><h3>Adding a Package Dependency</h3><p>We've seen that <code>Package.swift</code> lists the package dependencies, let's add our new one there:</p><pre><code><span class="keyword">let</span> package = <span class="type">Package</span>(
    ...
    dependencies: [
        .<span class="call">package</span>(url: <span class="string">"https://github.com/apple/swift-tools-support-core.git"</span>,
                 from: <span class="string">"0.0.1"</span>),
        .<span class="call">package</span>(url: <span class="string">"https://github.com/apple/swift-argument-parser"</span>,
                 from: <span class="string">"0.0.1"</span>),
    ],
    targets: [
        ...
    ]
)
</code></pre><blockquote><p>If you'd like to find out the latest official version of any package, use the following link: <code>https://github.com/AUTHOR/PACKAGE/releases/latest</code>, for example <a href="https://github.com/apple/swift-tools-support-core/releases/latest"><code>https://github.com/apple/swift-tools-support-core/releases/latest</code></a>.</p></blockquote><p>Our package now depends on both ArgumentParser and <code>swift-tools-support-core</code>, next we need to declare which targets want to use a product of these packages, to do so, please update the <code>hello</code> target dependencies as seen below:</p><pre><code><span class="keyword">let</span> package = <span class="type">Package</span>(
    ...
    dependencies: [
        ...
    ],
    targets: [
        .<span class="call">target</span>(
            name: <span class="string">"hello"</span>,
            dependencies: [<span class="string">"ArgumentParser"</span>, <span class="string">"SwiftToolsSupport"</span>]),
        .<span class="call">testTarget</span>(...),
    ]
)
</code></pre><p>Our <code>hello</code> target can now use the libraries offered by both <code>ArgumentParser</code> and <code>SwiftToolsSupport</code>, let's try them out!</p><h3>Parse Input Arguments</h3><blockquote><p>This section has been rewritten to use the new Argument Parser, If you'd like to see how we got there, please see my deep dive into <code>TSCUtility</code>'s <code>ArgumentParser</code> <a href="https://www.fivestars.blog/articles/executables-argument-kind/">here</a>.</p></blockquote><blockquote><p>The <code>ArgumentParser</code> library has an incredible <a href="https://github.com/apple/swift-argument-parser/tree/master/Documentation">documentation section</a>, in this article I'm going to make a small example: make sure to bookmark the official <a href="https://github.com/apple/swift-argument-parser/tree/master/Documentation">documentation</a> for many more examples and insights into the library.</p></blockquote><blockquote><p>If you'd like to know more about the inner workings of the <code>ArgumentParser</code> package, please <a href="https://www.fivestars.blog/articles/a-look-into-argument-parser/">see this deep dive</a>.</p></blockquote><p>We've already seen how we can read launch arguments via the <code>CommandLine</code>, so why would we need to use <code>ArgumentParser</code> for this? Let me give you a few reasons:</p><ul><li>Previously we were manually reading an array of strings and then parse/convert them to something meaningful: this is equivalent of fetching a JSON object and then manually parse its contents instead of using <a href="https://www.fivestars.blog/articles/swift-decodable/"><code>JSONDecoder</code></a>.</li></ul><ul><li>Scripts might be launched with more than just raw values: we might expect a combination of flags (for example <code>ls -la</code>, <code>ls -l -a</code>, <code>ls -al</code>, <code>ls -a -l</code> are all valid commands and do the same thing), or a mix of flags and values.</li></ul><ul><li>Good scripts offer auto completion for their arguments.</li></ul><ul><li>Good scripts also come with documentation: wouldn't it be great if all our scripts follow the same pattern?</li></ul><p>...and this is why we use <a href="https://github.com/apple/swift-argument-parser">ArgumentParser</a>, which ticks all the boxes (beside autocompletion, <a href="https://github.com/apple/swift-argument-parser/issues/1">for now</a>), and more.</p><p>In this example we will require a flag <code>--name</code> with an associated value: after implementing it, the scripts will expect to be launched with something like <code>$ swift run hello --name YourName</code>:</p><ol><li>ArgumentParser requires us to define a type conforming to <code>ParsableCommand</code>: <code></code>`swift struct Hello: ParableCommand { } <code></code>`</li></ol><ol start="2"><li>Then we declare one or more expected arguments via one of the four <a href="https://github.com/apple/swift-argument-parser/blob/46464fd2e225193cda964494479e76c3d2c4a842/Documentation/02%20Arguments%2C%20Options%2C%20and%20Flags.md"><code>ArgumentParser</code>'s' property wrappers</a>: <code></code>`swift struct Hello: ParableCommand { @Option(help: "Specify your name.") var name: String } <code></code>`</li></ol><ol start="3"><li>To complete the definition, we need to add our custom logic in the <code>ParsableCommand</code>'s <code>run()</code> method:</li></ol><pre><code><span class="keyword">struct</span> Hello: <span class="type">ParsableCommand</span> {
  <span class="comment">// Declare expected launch argument(s).</span>
  <span class="keyword">@Option</span>(help: <span class="string">"Specify your name."</span>)
  <span class="keyword">var</span> name: <span class="type">String</span>

  <span class="comment">// Our custom logic goes here.</span>
  <span class="keyword">func</span> run() <span class="keyword">throws</span> {
    <span class="call">print</span>(<span class="string">"Hello</span> \(name)<span class="string">"</span>)
  }
}
</code></pre><blockquote><p><code>run()</code> executes only when all the declared launch arguments have been assigned. If an argument has a mistmatch or is missing, the script will rise and error and our logic won't run.</p></blockquote><p>We then can trigger Swift to both do the parsing and execute our logic via a static <code>ParsableCommand</code> function:</p><pre><code><span class="type">Hello</span>.<span class="call">main</span>()
</code></pre><p>Here's the complete code:</p><pre><code><span class="keyword">import</span> ArgumentParser

<span class="comment">// Define our parser.</span>
<span class="keyword">struct</span> Hello: <span class="type">ParsableCommand</span> {
  <span class="comment">// Declare expected launch argument(s).</span>
  <span class="keyword">@Option</span>(help: <span class="string">"Specify your name."</span>)
  <span class="keyword">var</span> name: <span class="type">String</span>

  <span class="keyword">func</span> run() <span class="keyword">throws</span> {
    <span class="call">print</span>(<span class="string">"Hello</span> \(name)<span class="string">"</span>)
  }
}

<span class="comment">// Run the parser.</span>
<span class="type">Hello</span>.<span class="call">main</span>()
</code></pre><blockquote><p>Replace the <code>main.swift</code> content with this to try it out!</p></blockquote><p>And here are a few examples of the script in action:</p><pre><code>$ swift run hello --name <span class="type">Federico</span>
&gt; <span class="type">Hello Federico</span>

$ swift run hello <span class="type">Federico</span>
&gt; <span class="type">Error</span>: <span class="type">Unexpected</span> argument '<span class="type">Federico</span>'
&gt; <span class="type">Usage</span>: hello --name &lt;name&gt;

$ swift run hello --name
&gt; <span class="type">Error</span>: <span class="type">Missing</span> value <span class="keyword">for</span> '--name &lt;name&gt;'
&gt; <span class="type">Usage</span>: hello --name &lt;name&gt;

$ swift run hello --help
&gt; <span class="type">USAGE</span>: hello --name &lt;name&gt;
&gt;
&gt; <span class="type">OPTIONS</span>:
&gt;   --name &lt;name&gt;           <span class="type">Specify</span> your name.
&gt;   -h, --help              <span class="type">Show</span> help information.
</code></pre><blockquote><p>This is how the <code>swift</code> command line tool works as well: if you run <code>$ swift --help</code>, or <code>$ swift run --help</code>, etc you will see exactly the same format as our new script.</p></blockquote><h3>Progress State</h3><p>In our apps we never want to block the UI while we're doing some work.<br>In scripts this is not always the case, because we might need to finish the current work before the user can continue its flow.</p><p>While this is completely fine and acceptable, leaving the terminal frozen while we're doing so is not the best user experience: the user might think that the script is stuck.</p><p>To address this issue, we can use one of the <a href="https://github.com/apple/swift-tools-support-core/blob/fcaa2ce5a852b5355aed5808a6610dc8b6dcf27e/Sources/TSCUtility/ProgressAnimation.swift">progress animations</a> that <code>TSCUtility</code> gives us, here's an example:</p><img src="https://www.fivestars.blog/assets/posts/ultimate-guide-swift-executables/loading.gif"/><p>Adding an animation is pretty straight forward:</p><ol><li>First we initialize the animation itself, in this case we're using <a href="https://github.com/apple/swift-tools-support-core/blob/fcaa2ce5a852b5355aed5808a6610dc8b6dcf27e/Sources/TSCUtility/ProgressAnimation.swift#L260"><code>PercentProgressAnimation</code></a>: <code></code>`swift let animation = PercentProgressAnimation( stream: stdoutStream, header: "Loading Awesome Stuff ‚ú®" ) <code></code>`</li></ol><ol start="2"><li>Then we need to let the animation know when to update: <code></code>`swift animation.update(step: i, total: 100, text: "Loading..") <code></code>` &gt; Note how we don't need to worry about the presentation at all: we only pass the current step, the number ot total steps, and then <code>TSCUtility</code> will take care of the rest for us.</li></ol><ol start="3"><li>Lastly, we call animation complete when the work is done: <code></code>`swift animation.complete(success: true) <code></code>`</li></ol><p>And this is the final code:</p><pre><code><span class="keyword">import</span> Darwin
<span class="keyword">import</span> TSCBasic
<span class="keyword">import</span> TSCUtility

<span class="keyword">let</span> animation = <span class="type">PercentProgressAnimation</span>(
  stream: stdoutStream,
  header: <span class="string">"Loading Awesome Stuff ‚ú®"</span>)

<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">100</span> {
  <span class="keyword">let</span> second: <span class="type">Double</span> = <span class="number">1_000_000</span>
  <span class="call">usleep</span>(<span class="type">UInt32</span>(second * <span class="number">0.05</span>))
  animation.<span class="call">update</span>(step: i, total: <span class="number">100</span>, text: <span class="string">"Loading.."</span>)
}

animation.<span class="call">complete</span>(success: <span class="keyword">true</span>)
<span class="call">print</span>(<span class="string">"Done! üöÄ"</span>)
</code></pre><blockquote><p>Replace the <code>main.swift</code> content with this to try it out!</p></blockquote><h3>Colors</h3><img src="https://www.fivestars.blog/assets/posts/ultimate-guide-swift-executables/colors.png"/><p>The progress state that we just talked about had something new that we haven't touched before: colors! Let's see how we can add colors to our scripts.</p><ol><li>First of all, we need to create a <a href="https://github.com/apple/swift-tools-support-core/blob/de90da12a45fe57991916836b7655128ae987871/Sources/TSCBasic/TerminalController.swift#L18"><code>TerminalController</code></a>, this object helps us control a terminal: for example it allows operations such as cursor movement and colored text output: <code></code>`swift let terminalController = TerminalController(stream: stdoutStream) <code></code>`</li></ol><ol start="2"><li>Then we must choose which <a href="https://github.com/apple/swift-tools-support-core/blob/de90da12a45fe57991916836b7655128ae987871/Sources/TSCBasic/TerminalController.swift#L33"><code>TerminalController.Color</code> variation</a> we would like to use, as of the current release, these are the options: <code>noColor</code>, <code>red</code>, <code>green</code>, <code>yellow</code>, <code>cyan</code>, <code>white</code>, <code>black</code>, and <code>grey</code>.</li></ol><ol start="3"><li>Lastly, we print our message in the command line: <code></code>`swift terminalController?.write("Hello World", inColor: .yellow, bold: true) <code></code>`</li></ol><ol start="4"><li>With the <code>TerminalController</code> we have more control over a simple <code>print</code> command, therefore the command <code>write</code> alone doesn't end the line: we must end the line ourselves by calling <code>endLine()</code>. <code></code>`swift terminalController?.endLine() <code></code>`</li></ol><p>Here's the example:</p><pre><code><span class="keyword">import</span> TSCBasic

<span class="keyword">let</span> terminalController = <span class="type">TerminalController</span>(stream: stdoutStream)

<span class="keyword">let</span> colors: [<span class="type">TerminalController</span>.<span class="type">Color</span>] = [
  .<span class="dotAccess">noColor</span>, .<span class="dotAccess">red</span>, .<span class="dotAccess">green</span>, .<span class="dotAccess">yellow</span>, .<span class="dotAccess">cyan</span>, .<span class="dotAccess">white</span>, .<span class="dotAccess">black</span>, .<span class="dotAccess">grey</span>
]

<span class="keyword">for</span> color <span class="keyword">in</span> colors {
  terminalController?.<span class="call">write</span>(<span class="string">"Hello World"</span>, inColor: color, bold: <span class="keyword">true</span>)
  terminalController?.<span class="call">endLine</span>()
}
</code></pre><blockquote><p>Replace the <code>main.swift</code> content with this to try it out!</p></blockquote><h2>Releasing A Script</h2><p>We now have everything we need to build a great script. There's a final step that we must take in order to complete our journey: ship it!</p><p>So far we've ran the script by using <code>$ swift run hello</code>, but this works only if we are in the <code>hello/</code> folder: how can we run our script from anywhere?</p><p>Two steps:</p><ol><li>Generate our script binary in release mode. <code></code>`shell $ swift build --configuration release <code></code>` Until now we've used the default <code>debug</code> build strategy when building our script, this works great while developing it, however it's no longer necessary when we want to release it. This configuration flag will create a new executable in the <code>.build/release/</code> folder.<ul></ul></li></ol><ol start="2"><li>Copy the new binary to the user binary folder. <code></code>`shell $ cp .build/release/hello /usr/local/bin/hello <code></code>` <code>/usr/local/bin/</code> is a folder know as <em>user binary folder</em> which contains plenty of executable binaries: anything placed there can be launched from the terminal by using its name, which means that we can now run our script with: <code></code>`shell $ hello <code></code>`</li></ol><p>Here are the two command lines for easy copy-pasting:</p><pre><code>$ swift build -c release
$ cp .<span class="dotAccess">build</span>/release/hello /usr/local/bin/hello
</code></pre><p>That's it! We can now run our script from anywhere!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>In this article we've started from exploring how a Swift Executable is structured, how we can read its contents from the package manifest file, and then we've moved into common script patterns and how we can use Apple's <code>swift-tools-support-core</code> in order to achieve high quality scripts without having to do all the work ourselves.</p><p>I hope this reference guide helps you kick-start your Swift scripting journey, and I would love to know what scripts you're going to build! Please let me know <a href="https://twitter.com/zntfdr">on Twitter</a>!</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles! üöÄ</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/the-swift-behind-the-standard-library-preview-package</guid><title>The Swift Behind The Standard Library Preview Package ‚ú®</title><description></description><link>https://www.fivestars.blog/articles/the-swift-behind-the-standard-library-preview-package</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>If you're like me, you cannot wait to put your hands on the latest and greatest Swift features.</p><p>The most obvious example is probably Swift 5's <a href="https://github.com/apple/swift-evolution/blob/master/proposals/0235-add-result.md">introduction of <code>Result</code></a>: by the time it came out, tons of codebases had their own <code>Result</code> implementation already, all mine did.</p><p>There are multiple ways to test and use upcoming features without waiting for new Xcode (beta) releases: until recently the easiest one was via <a href="https://swift.org/download/">Swift</a> <a href="https://developer.apple.com/library/archive/documentation/ToolsLanguages/Conceptual/Xcode_Overview/AlternativeToolchains.html">Toolchains</a>, however, while toolchains are good for experimenting, they cannot be used to release apps to the store.</p><p>Thanks to the Swift team <a href="https://swift.org/blog/preview-package/">announcement</a> and <a href="https://github.com/apple/swift-standard-library-preview">release</a> of the <a href="https://github.com/apple/swift-standard-library-preview">Standard Library Preview Package</a>, this has now changed: with the Preview Package not only we can use and experiment new Swift features before any official release, but we can also ship apps with it!</p><blockquote><p>As the Preview Package is like any other Swift Package, only Swift features that are purely additive and do not access to internal Swift APIs can be previewed this way:other Swift changes (behavioral, breaking, etc) cannot be previewed with this package.</p></blockquote><p>Since this new package is <a href="https://github.com/apple/swift-standard-library-preview">open source</a>, let's have a look at it!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Package Manifest</h2><p>Let's understand its structure first, which we do from its <a href="https://github.com/apple/swift-standard-library-preview/blob/833ea174a771bdc98edfa3529ae05439564e3902/Package.swift"><code>Package.swift</code> manifest</a>:</p><pre><code><span class="keyword">let</span> package = <span class="type">Package</span>(
  name: <span class="string">"swift-standard-library-preview"</span>,
  products: [
    .<span class="call">library</span>(
      name: <span class="string">"StandardLibraryPreview"</span>,
      targets: [<span class="string">"StandardLibraryPreview"</span>]),
  ],
  dependencies: exports.<span class="call">map</span> { $0.<span class="property">packageDependency</span> },
  targets: [
    .<span class="call">target</span>(
      name: <span class="string">"StandardLibraryPreview"</span>,
      dependencies: exports.<span class="call">map</span> { $0.<span class="property">targetDependency</span> }),
    
    .<span class="call">testTarget</span>(
      name: <span class="string">"ExportTests"</span>,
      dependencies: [<span class="string">"StandardLibraryPreview"</span>]),
  ]
)
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-standard-library-preview">Standard Library Preview Package</a>'s <a href="https://github.com/apple/swift-standard-library-preview/blob/833ea174a771bdc98edfa3529ae05439564e3902/Package.swift">Package.swift</a></p></blockquote><p>From this definition we can see that the Preview Package offers one library product named <code>StandardLibraryPreview</code>, which exposes the only target in the package, also named <code>StandardLibraryPreview</code>, which has the same dependencies as the whole package.</p><p>These dependencies are declared in <code>exports</code>, an array of <code>Export</code> elements:</p><pre><code><span class="keyword">struct</span> Export {
  <span class="keyword">var</span> package: <span class="type">String</span>
  <span class="keyword">var</span> requirement: <span class="type">Package</span>.<span class="type">Dependency</span>.<span class="type">Requirement</span>
  
  <span class="keyword">var</span> name: <span class="type">String</span> {
    <span class="keyword">let</span> parts = package.<span class="call">split</span>(separator: <span class="string">"-"</span>)
    <span class="keyword">let</span> <span class="type">SE</span> = parts[<span class="number">1</span>].<span class="call">uppercased</span>()
    <span class="keyword">let</span> name = parts[<span class="number">2</span>...].<span class="call">map</span> { $0.<span class="property">capitalized</span> }.<span class="call">joined</span>()
    <span class="keyword">return</span> <span class="string">"</span>\(<span class="type">SE</span>)<span class="string">_</span>\(name)<span class="string">"</span>
  }
  
  <span class="keyword">var</span> packageDependency: <span class="type">PackageDescription</span>.<span class="type">Package</span>.<span class="type">Dependency</span> {
    .<span class="call">package</span>(url: <span class="string">"https://github.com/apple/</span>\(package)<span class="string">"</span>, requirement)
  }
  
  <span class="keyword">var</span> targetDependency: <span class="type">Target</span>.<span class="type">Dependency</span> {
    .<span class="call">product</span>(name: name, package: package)
  }
}
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-standard-library-preview">Standard Library Preview Package</a>'s <a href="https://github.com/apple/swift-standard-library-preview/blob/833ea174a771bdc98edfa3529ae05439564e3902/Package.swift">Package.swift</a></p></blockquote><p><code>Export</code> tells us that every single Swift Evolution implementation that can be added to the Preview Package needs to:</p><ul><li>be its own Swift Package</li><li>be hosted under Apple's Github organization (<code>https://github.com/apple/...</code>)</li><li>have a <code>package</code> name with at least two dashes</li><li>offer a <code>library</code> product with a name based on the package name</li></ul><p>The last two requirements seems weird at first, but all becomes clear after looking at the actual <code>exports</code> array definition:</p><pre><code><span class="keyword">let</span> exports = [
  <span class="type">Export</span>(package: <span class="string">"swift-se0270-range-set"</span>, requirement: .<span class="call">upToNextMajor</span>(from: <span class="string">"1.0.0"</span>)),
]
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-standard-library-preview">Standard Library Preview Package</a>'s <a href="https://github.com/apple/swift-standard-library-preview/blob/833ea174a771bdc98edfa3529ae05439564e3902/Package.swift">Package.swift</a>.</p></blockquote><blockquote><p>At the moment there's just one Swift Evolution that can be previewed.</p></blockquote><p><a href="https://github.com/apple/swift-se0270-range-set"><code>swift-se0270-range-set</code></a> is the package <a href="https://github.com/apple/swift-se0270-range-set/blob/120fc7efe17b11f7eedd94e7a5e1885fc69efb49/Package.swift#L16">name</a>, while its vended library product name is <a href="https://github.com/apple/swift-se0270-range-set/blob/120fc7efe17b11f7eedd94e7a5e1885fc69efb49/Package.swift#L19"><code>SE0270_RangeSet</code></a>:<br>the two dashes requirement is for Apple to prefix all the packages with <code>swift-</code>, followed by the Swift Evolution code, <code>SE0270</code> in the example above, followed by another dash and then the name of the new swift feature, <code>range-set</code> in this case.</p><p>This naming convention makes it easy to manage all Preview Packages within the GitHub organization.</p><p>The manifest declaration is clever:<br>from now on only the <code>exports</code> definition needs to be updated, either when feature previews are added or removed, everything else will automatically work.</p><p>Every package target has its own folder, let's look at the <code>StandardLibraryPreview</code> folder next.</p><h2>StandardLibraryPreview.swift</h2><p>The only file in the this folder is <code>StandardLibraryPreview.swift</code>, and here it is in its entirety:</p><pre><code><span class="keyword">@_exported import</span> SE0270_RangeSet
</code></pre><blockquote><p>Snippet from <a href="https://github.com/apple/swift-standard-library-preview">Standard Library Preview Package</a>'s <a href="https://github.com/apple/swift-standard-library-preview/blob/833ea174a771bdc98edfa3529ae05439564e3902/Sources/StandardLibraryPreview/StandardLibraryPreview.swift">StandardLibraryPreview.swift</a>.</p></blockquote><p>From the manifest we already knew that <code>SE0270_RangeSet</code> is a library that we could import within the package, but what's this <code>@_exported</code> keyword?</p><h2>@_exported</h2><blockquote><p><code>@_exported</code> hasn't gone through Swift Evolution yet, as we can tell from the underscore prefix, it is possible that its behavior will change in the future.</p></blockquote><p>The short answer stands within the <a href="https://github.com/apple/swift-standard-library-preview/blob/833ea174a771bdc98edfa3529ae05439564e3902/README.md"><code>README</code> of the Preview Package</a>: the Preview Package acts as an umbrella library, re-exporting each of the individual (Swift Evolution Implementations) packages.</p><p>The <code>@_exported</code> attribute lets us export symbols from another module as if they were from ours.</p><p>Let's imagine that we would like to expand a library with new functionalities:<br>we've always been able to can add and use <code>extension</code>s within our module, but what if we would like to wrap up everything in a new module/package?</p><p>At that point we would discover that the users of our new module will have access to all our <code>public</code> types declarations, but won't have access to anything from the original package, not even the <code>public</code> extensions that we've made to elements of the original package.</p><p>To fix this we have two solutions:</p><ul><li>Ask our users to also <code>import</code> the original package, this way everything <code>public</code>, both from the original package and ours, is available to the users.</li></ul><ul><li>Use <code>@_exported</code> in our package: this way our users can <code>import</code> just our module, and they will automatically have access to both our <code>public</code> declarations and also to the ones from the original package. No further <code>import</code> necessary.</li></ul><p>Pretty powerful and elegant, don't you think?</p><h3>Overlay Libraries</h3><p>If we create a package that extends another as described above, we've created what is know as an <a href="https://github.com/apple/swift/blob/d842fa3763e171998ee3c583b4d7894843747e26/docs/Lexicon.rst">Overlay Package</a> (or library, module, etc).</p><p>Apple uses such libraries within its SDKs for example to bring Swift-specific functionality to C-family libraries or frameworks.</p><h3>Umbrella Libraries</h3><p>The Standard Library Preview Package is not an overlay package, instead, it is what is know as an umbrella library, which only exports a subset of packages, without adding any other functionality.</p><p>MacOS's <code>Cocoa</code> framework is another example of umbrella framework, which is an umbrella of three other frameworks: <code>AppKit</code>, <code>Foundation</code>, and <code>CoreData</code>.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>That's it! The whole Standard Library Preview Package contains only two swift files (excluding tests):</p><ul><li>the <code>Package.swift</code> manifest</li><li>the <code>StandardLibraryPreview.swift</code> export file</li></ul><p>I always appreciate when something complicated can be solved in such a simple way: - from the Preview Package user point of view (us!), we need to <code>import StandardLibraryPreview</code>, and we automatically get all the new Swift features - from the Preview Package maintainer point of view, adding/removing new Swift implementations is a matter of removing an entry from the <code>Package.swift</code> <code>exports</code> array, and then remove the associated <code>@_exported import</code> in the <code>StandardLibraryPreview.swift</code> (excluding tests)</p><p>Lastly, we've seen how the Preview Package uses <code>@_exported</code>, a powerful implementation detail that has not yet gone through Swift Evolution, but that plays a very important role in this package.<br><br>If you'd like to know more about <code>@_exported</code> and its possible future evolution, please see <a href="https://forums.swift.org/t/exported-and-fixing-import-visibility/9415">this discussion</a> from the <a href="https://forums.swift.org">Swift Forums</a>.</p><p>Have you ever seen <code>@_export</code> (or <a href="https://forums.swift.org/t/update-on-implementation-only-imports/26996"><code>@_implementationOnly</code></a> or ...) out in the wild? Do you or are you going to use them yourself? If so please <a href="https://twitter.com/zntfdr">let me know on Twitter</a>! I'd love to see more of them üòÉ</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/the-state-of-machine-learning-in-ios-13</guid><title>The State of Machine Learning in iOS 13 ü¶†</title><description></description><link>https://www.fivestars.blog/articles/the-state-of-machine-learning-in-ios-13</link><pubDate>Tue, 4 Feb 2020 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Did you know that the second most discussed topic at WWDC19 was machine learning?</p><p>With 15 videos and about 400 minutes of content, machine learning comes second only to SwiftUI (11 videos and 450 minutes), everything else, including ARKit and Combine, don't come even close.</p><p>2019 was also the year where I've decided to dive deeper in this topic, and the <a href="https://www.facebook.com/groups/iosthailand/">Thai local iOS meetup</a> was kind enough to host my presentation on the matter: on this talk you can find an overview of the current state of machine learning in iOS 13, how to get started, and more.</p><p>You can view the whole presentation here:</p><p>{% include videoThumb.html videoUrl="https://www.youtube.com/watch?v=DUqScctukMo" imageSrc="/assets/posts/the-state-of-machine-learning-in-ios-13/yt.jpeg" %}</p><p>And here are the slides:</p><p><a href="https://speakerdeck.com/zntfdr/the-state-of-machine-learning-in-ios-13"><img src="https://www.fivestars.blog/assets/posts/the-state-of-machine-learning-in-ios-13/first-slide.jpg" alt="slides"/></a></p><blockquote><p>Check out the full slides at <a href="https://speakerdeck.com/zntfdr/the-state-of-machine-learning-in-ios-13">SpeakerDeck</a></p></blockquote><p>As always, you can download slides and other materials in my <a href="https://github.com/zntfdr/talks"><code>talks</code> repository</a> (more talks soon!).</p><p>If you have any feedback, please <a href="https://twitter.com/zntfdr">let me know</a> üòÉ</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/apple-year-2019-review</guid><title>Apple 2019 Year In Review</title><description></description><link>https://www.fivestars.blog/articles/apple-year-2019-review</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>In a year there‚Äôs a ton of stuff happening at Apple.</p><p>In this post I collected the most interesting stories, in chronological order, for each month: if you believe I missed something, please <a href="https://twitter.com/zntfdr">let me know on Twitter</a>. Enjoy!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>January</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/apple-ces-privacy-ad.jpg" alt="large-contents"/><blockquote><p>Image Credit: <a href="https://twitter.com/chrisvelazco/status/1081330848262062080">Chris Velazco</a>.</p></blockquote><p>The year started with <a href="https://www.apple.com/newsroom/2019/01/letter-from-tim-cook-to-apple-investors/">bad news</a> for Apple's investors ahead of the Q1 results, partially blaming lower-than-expected iPhone sales, especially in China.<br><br>Apple also made a couple of unexpected appearances at <a href="https://www.ces.tech">CES</a>:</p><ul><li>first with a <a href="https://bgr.com/2019/01/05/apple-privacy-billboard-ces-las-vegas/">bold stance on privacy</a> (see image above), which is simply perfect as CES is basically a huge Smart TV show, <a href="https://www.theverge.com/2019/10/11/20908128/smart-tv-surveillence-data-collection-home-roku-amazon-fire-princeton-study">and Smart TVs are a privacy nightmare</a>.</li></ul><ul><li>second with <a href="https://www.theverge.com/2019/1/10/18176992/apple-tv-airplay-homekit-itunes-samsung-lg-sony-android-tizen-ces-2019">multiple Smart TV collaborations</a>, where manufacturers cannot access to user data, and where <a href="https://www.theverge.com/2019/1/8/18173637/tv-airplay-2-apple-lg-samsung-sony-vizio-ces-2019">new TV models</a> would get AirPlay 2 support, along with an iTunes app and/or a HomeKit app.</li></ul><p>Ironically, January ends with a huge privacy issue for Apple: a new discovered iOS bug <a href="https://www.macrumors.com/2019/01/28/apple-major-facetime-bug/">let users hear another person's audio before a FaceTime call was answered</a>. Apple was <a href="https://www.macrumors.com/2019/02/01/apple-apologizes-facetime-bug/">prompt in fixing it</a>.</p><h3>References</h3><ul><li><a href="https://www.apple.com/newsroom/2019/01/letter-from-tim-cook-to-apple-investors/">Letter from Tim Cook to Apple investors</a></li><li><a href="https://bgr.com/2019/01/05/apple-privacy-billboard-ces-las-vegas/">Ahead of CES, Apple puts up billboard touting iPhone security</a></li><li><a href="https://www.theverge.com/2019/1/10/18176992/apple-tv-airplay-homekit-itunes-samsung-lg-sony-android-tizen-ces-2019">Apple‚Äôs TV industry embrace was an inevitable surprise</a></li><li><a href="https://www.macrumors.com/2019/01/28/apple-major-facetime-bug/">Serious FaceTime Bug Lets You Hear a Person's Audio Before They Answer</a></li></ul><h2>February</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/fb.jpg" alt="large-contents"/><blockquote><p>Image Credit: <a href="https://techcrunch.com/2019/01/29/facebook-project-atlas/">Bryce Durbin</a>.</p></blockquote><p>In February Apple made some changes among its leads announcing that Deirdre O‚ÄôBrien would <a href="https://www.apple.com/newsroom/2019/02/apple-names-deirdre-obrien-senior-vice-president-of-retail-and-people/">take over Angela Ahrendts's Senior Vice President of Retail title</a>, as Angela, once <a href="https://www.scmp.com/magazines/style/people-events/article/2126533/apples-highest-paid-executive-earns-nearly-twice-much">Apple's highest paid employee</a>, announced her plans to leave Apple.</p><p>But February is probably best remembered for Apple taking down <a href="https://techcrunch.com/2019/01/29/facebook-project-atlas/">Facebook's</a> and <a href="https://arstechnica.com/gadgets/2019/01/apple-shuts-down-googles-internal-ios-apps-just-like-facebook/">Google's</a> enterprise certificates.<br>These certificates are used for distribution of apps exclusively within an organization:<br>instead, two of the most data-powerful companies in the world were using these certificates to get even more data out of their users, which is obviously against Apple's guidelines.</p><p>On a fun note, both companies were also <em>properly</em> using these certificates to distribute apps to their employees for <a href="https://fortune.com/2019/01/30/apple-revokes-development-credentials-for-facebook-apps/">ordering food and other internal services</a>: it must have been a couple of rough days.</p><p>Lastly, Apple continued its push on privacy by telling developers to either <a href="https://techcrunch.com/2019/02/07/apple-glassbox-apps/">remove or properly disclose when apps record the user screen</a>: failing to do so within 24h from Apple's warning, would result in a removal of the app from the app store.</p><h3>References</h3><ul><li><a href="https://www.apple.com/newsroom/2019/02/apple-names-deirdre-obrien-senior-vice-president-of-retail-and-people/">Apple names Deirdre O‚ÄôBrien senior vice president of Retail + People</a></li><li><a href="https://techcrunch.com/2019/01/29/facebook-project-atlas/">Facebook pays teens to install VPN that spies on them</a></li><li><a href="https://arstechnica.com/gadgets/2019/01/apple-shuts-down-googles-internal-ios-apps-just-like-facebook/">Apple revokes Google‚Äôs enterprise iOS certificate, shuts down internal apps</a></li><li><a href="https://techcrunch.com/2019/02/07/apple-glassbox-apps/">Apple tells app developers to disclose or remove screen recording code</a></li></ul><h2>March</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/airpower.jpeg" alt="large-contents"/><p>March was all about expansion with:</p><ul><li>new services such as <a href="https://9to5mac.com/2019/03/25/apple-event-recap-tv-news-more/">Ô£øNews+, Ô£øTv+, Ô£øArcade, and Apple Card</a></li><li>approval for a new <a href="https://www.macrumors.com/2019/03/07/wistron-initial-approval-iphone-factory-india/">iPhone Factory in India</a></li><li><a href="https://finance.yahoo.com/news/apple-brings-watch-ecg-app-145602577.html">Apple Watch ECG capabilities landing in Europe</a></li></ul><p>Then there was some drama between Apple and Spotify, with Spotify launching <a href="https://www.timetoplayfair.com">timetoplayfair.com</a>, <a href="https://www.apple.com/newsroom/2019/03/addressing-spotifys-claims/">Apple responding accordingly</a>, and lastly <a href="https://www.theguardian.com/technology/2019/may/06/apple-eu-investigation-spotify-iphone-app-store">triggering an EU investigation against Apple</a> (that has gone nowhere so far).</p><p>Lastly, March was the month that put an end to AirPower:<br>after multiple rumors and delays, Apple reached out the media to <a href="https://techcrunch.com/2019/03/29/apple-cancels-airpower-product-citing-inability-to-meet-its-high-standards-for-hardware/">announce that AirPower was not going to happen</a>. üïØ</p><h3>References</h3><ul><li><a href="https://www.macrumors.com/2019/03/07/wistron-initial-approval-iphone-factory-india/">Apple Partner Wistron Gets Initial Approval for New iPhone Factory in India</a></li><li><a href="https://www.apple.com/newsroom/2019/03/addressing-spotifys-claims/">Addressing Spotify‚Äôs claims</a></li><li><a href="https://9to5mac.com/2019/03/25/apple-event-recap-tv-news-more/">Apple Announces Ô£øNews+, Ô£øTv+. Ô£øArcade, a new Ô£øTv app, Apple Card</a></li><li><a href="https://finance.yahoo.com/news/apple-brings-watch-ecg-app-145602577.html">Apple Brings Watch With ECG App &amp; AFiB Feature to Europe</a></li><li><a href="https://techcrunch.com/2019/03/29/apple-cancels-airpower-product-citing-inability-to-meet-its-high-standards-for-hardware/">Apple cancels AirPower product, citing inability to meet its high standards for hardware</a></li></ul><h2>April</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/qualcomm.jpg" alt="large-contents"/><p>April has seen a new push on green with Apple:</p><ul><li><a href="https://www.macrumors.com/2019/04/03/apple-cupertino-transportation-projects/">offering $9.7M to the City of Cupertino</a> for public transportation projects (and to avoid taxes)</li><li>announcing that its number of suppliers that run on 100 percent clean energy <a href="https://www.apple.com/newsroom/2019/04/apple-tops-clean-energy-goal-with-new-supplier-commitments/">has reached 44</a> (<a href="https://www.apple.com/environment/pdf/Apple_Environmental_Responsibility_Report_2018.pdf">nearly doubling last year number</a>)</li><li><a href="https://www.macrumors.com/2019/04/18/apple-material-recovery-lab/">opening a new recycling lab</a> in Austin to improve Apple's processes.</li></ul><p>However, the most important news of this month, and probably of the whole year, is the <a href="https://www.macrumors.com/2019/04/16/apple-qualcomm-settlement/">new deal between Apple and Qualcomm</a>, thanks of which Qualcomm will ship modems to Apple until 2025.</p><p>Take note that this deal is not just about 5G modems, that's the <em>least</em> interesting part, the most important part is that Qualcomm will share all of its know-how with Apple for the length of the agreement:<br>after Intel has failed (<a href="https://www.quora.com/Why-arent-Intel-processors-adopted-in-the-mobile-industry">again</a>) to compete in the mobile world, Apple found itself choosing between building its own modems (which takes years), or give in and accept <a href="https://www.theverge.com/2019/1/14/18182441/apple-qualcomm-modem-iphone-xs-max-ftc-trial">Qualcomm's "<em>unfair</em>" conditions</a> (according to Apple).</p><p>With this new deal, guess who has now six more years to prepare before building its own modems?</p><h3>References</h3><ul><li><a href="https://www.macrumors.com/2019/04/03/apple-cupertino-transportation-projects/">Apple Offers City of Cupertino $9.7M for Transportation Projects to Avoid Business Tax</a></li><li><a href="https://www.apple.com/newsroom/2019/04/apple-tops-clean-energy-goal-with-new-supplier-commitments/">Apple tops clean energy goal with new supplier commitments</a></li><li><a href="https://www.macrumors.com/2019/04/18/apple-material-recovery-lab/">Apple Opens Material Recovery Lab in Austin to Improve Recycling Efforts</a></li><li><a href="https://www.macrumors.com/2019/04/16/apple-qualcomm-settlement/">Apple and Qualcomm Reach Settlement, Agree to Drop All Litigation</a></li></ul><h2>May</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/warrent-buffet.png" alt="large-contents"/><blockquote><p>Image Credit: <a href="https://actualidadiphone.com">actualidadiphone.com</a></p></blockquote><p>In a new interview Tim Cook disclosed that <a href="https://www.patentlyapple.com/patently-apple/2019/05/apples-ceo-interviewed-by-cnbc-talked-about-warren-buffet-and-acquiring-20-to-25-companies-in-the-last-6-months.html">Apple has bought 25 new companies</a> in the last 6 months, of which, for most of them, Apple's goal is to "<em>primarily looking for talent and intellectual property</em>".</p><p>Then Apple released its <a href="https://apps.apple.com/us/app/warren-buffetts-paper-wizard/id1461432935">first new game</a> <a href="https://www.macrumors.com/2019/05/06/warren-buffett-paper-wizard-apple/">in 10 years</a>, dedicated to Warren Buffett, a.k.a. the owner of <a href="https://www.marketwatch.com/story/warren-buffett-increases-apple-stake-despite-selling-some-stock-2019-11-15">5% of the company</a>.</p><p>Lastly, Apple made a surprise announcement at the <a href="https://9to5mac.com/2019/05/13/apple-announces-support-for-apple-pay-nfc-stickers-partners-with-bird-scooters-and-more/">TRANSACT conference</a>, which consists of new <a href="https://9to5mac.com/2019/05/13/apple-announces-support-for-apple-pay-nfc-stickers-partners-with-bird-scooters-and-more/">NFC special tags that trigger Apple Pay purchases</a>, without the need to download any app:<br>among its first partner there are <a href="https://www.bird.co/">Bird scooters</a>, <a href="https://www.paybyphone.com/">PayByPhone parking meters</a>, and more.</p><h3>References</h3><ul><li><a href="https://www.patentlyapple.com/patently-apple/2019/05/apples-ceo-interviewed-by-cnbc-talked-about-warren-buffet-and-acquiring-20-to-25-companies-in-the-last-6-months.html">Apple's CEO Interviewed by CNBC &amp; talked about Warren Buffet and Acquiring 20 to 25 Companies in the last 6 months</a></li><li><a href="https://www.macrumors.com/2019/05/06/warren-buffett-paper-wizard-apple/">Warren Buffett's Paper Wizard' is Apple's First iPhone Game Since 2008</a></li><li><a href="https://9to5mac.com/2019/05/13/apple-announces-support-for-apple-pay-nfc-stickers-partners-with-bird-scooters-and-more/">Apple announces support for Apple Pay NFC stickers, partners with Bird scooters and more</a></li></ul><h2>June</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/ive.jpeg" alt="large-contents"/><blockquote><p>Image Credit: <a href="https://www.ft.com/content/3ae35e46-c9a6-11e4-b2ef-00144feab7de">Financial Times</a></p></blockquote><p>June started with a boom thanks to one of the <a href="https://ww.9to5mac.com/2019/06/09/wwdc-top-stories/">biggest Worldwide Developers Conference of the decade</a>.</p><p>Apple also <a href="https://www.computerweekly.com/news/252464940/Apple-cancels-plans-to-build-second-European-datacentre-in-Denmark">cancelled its plans to build a second european data center</a> and, instead, focus on expanding the brand new datacentre in Denmark.</p><p>As always, Apple continued to:</p><ul><li>extend its reach by <a href="https://www.macrumors.com/2019/06/11/apple-joins-cloud-native-computing-foundation/">joining the Cloud Native Computing Foundation</a> (Kubernetes, Prometheus, and more)</li><li>weak its dependency from China by <a href="https://www.macrumors.com/2019/06/27/apple-invest-100-million-in-lcd-japan-display/">investing $100M in the Japanese LCD panel supplier JDI</a></li></ul><p>In a surprising, <a href="https://www.theverge.com/2019/11/28/20986838/jony-ive-last-day-apple">kind of expected</a>, announcement, Apple‚Äôs Chief Design Officer <a href="https://www.apple.com/newsroom/2019/06/jony-ive-to-form-independent-design-company-with-apple-as-client/">Jony Ive is leaving Apple</a>.</p><h3>References</h3><ul><li><a href="https://ww.9to5mac.com/2019/06/09/wwdc-top-stories/">Everything Apple announced at WWDC 2019</a></li><li><a href="https://www.computerweekly.com/news/252464940/Apple-cancels-plans-to-build-second-European-datacentre-in-Denmark">Apple cancels plans to build second European datacentre in Denmark</a></li><li><a href="https://www.macrumors.com/2019/06/11/apple-joins-cloud-native-computing-foundation/">Apple Joins Cloud Native Computing Foundation</a></li><li><a href="https://www.macrumors.com/2019/06/27/apple-invest-100-million-in-lcd-japan-display/">Apple to Invest $100 Million in LCD Panel Maker Japan Display</a></li><li><a href="https://www.apple.com/newsroom/2019/06/jony-ive-to-form-independent-design-company-with-apple-as-client/">Jony Ive to form independent design company with Apple as client</a></li></ul><h2>July</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/intel.jpg" alt="large-contents"/><p>Apple continues its transparency push by publishing a <a href="https://www.macrumors.com/2019/07/02/apple-government-app-takedown-requests/">new report</a> with all App Store take down requests, from any government.</p><p>A year late, to celebrate the App Store 10th year anniversary, Apple has <a href="https://9to5mac.com/2019/07/08/apple-revives-classic-texas-hold-em-ios-game-to-mark-10-years-of-the-app-store/">revived its classic game Texas Hold‚Äôem</a> (that was last updated in 2008!).</p><p>July was a bad month for privacy, as Apple got hit with a new (Apple Watch's) <a href="https://www.imore.com/apple-temporarily-turns-walkie-talkie-fix-eavesdropping-bug?utm_source=im_tw&utm_medium=tw_card&utm_content=54653">Walkie talkie bug</a>, and then with the <a href="https://www.macworld.com/article/3407764/zoom-mac-app-flaw-camera-patch.html">Zoom vulnerability</a>: both cases let the user live audio/video be sent to others without the device owner consent.</p><p>Lastly, in July Apple made its biggest acquisition since Beats from 2014: <a href="https://www.apple.com/newsroom/2019/07/apple-to-acquire-the-majority-of-intels-smartphone-modem-business/">Intel's smartphone modem business</a>.<br>Shortly after April's Qualcomm deal, Intel announced its exit from the 5G smartphone modem business, which left an entire engineering division, and, especially, a ton of Intel's patents, up for grabs: Apple wasted no time in closing this deal.</p><h3>References</h3><ul><li><a href="https://www.macrumors.com/2019/07/02/apple-government-app-takedown-requests/">Apple Shares Government App Store Takedown Requests in Latest Transparency Report</a></li><li><a href="https://9to5mac.com/2019/07/08/apple-revives-classic-texas-hold-em-ios-game-to-mark-10-years-of-the-app-store/">Apple revives classic Texas Hold‚Äôem iOS game to mark 10 years of the App Store</a></li><li><a href="https://www.imore.com/apple-temporarily-turns-walkie-talkie-fix-eavesdropping-bug?utm_source=im_tw&utm_medium=tw_card&utm_content=54653">Apple temporarily turns off Walkie Talkie to fix eavesdropping bug</a></li><li><a href="https://www.macworld.com/article/3407764/zoom-mac-app-flaw-camera-patch.html">Apple pushes new silent updates to address vulnerable Zoom software</a></li><li><a href="https://www.apple.com/newsroom/2019/07/apple-to-acquire-the-majority-of-intels-smartphone-modem-business/">Apple to acquire the majority of Intel's smartphone modem business</a></li></ul><h2>August</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/homepod.png" alt="large-contents"/><p>After all the privacy and transparency focus shown, Apple <a href="https://www.theverge.com/2019/8/2/20751270/apple-stops-contractors-siri-voice-recordings-privacy-opt-out">was caught giving away unauthorized HomePod user voice recordings to external contractors</a>. Apple stopped this as soon as the news broke: regardless, this is not the expected behavior from Apple.</p><p>August was another good month for Apple customers in India, as the country has given Apple <a href="https://www.bloomberg.com/news/articles/2019-08-28/apple-to-benefit-from-new-indian-rules-on-foreign-investment">the green light</a> to start selling its products online.</p><p>This is also the month where Apple opened up a little by:</p><ul><li><a href="https://www.macstories.net/linked/apple-announces-new-initiative-to-support-device-repair-providers/">allowing independent shops to do authorized repairs</a></li><li><a href="https://www.forbes.com/sites/thomasbrewster/2019/08/05/apple-is-giving-out-hacker-friendly-iphones-plots-mac-bug-bounty-sources/#31ba2d784f09">giving away easily-hackable phones</a> to selected researches, in order to make it easier for them to find, and report, iPhone weaknesses</li></ul><h3>References</h3><ul><li><a href="https://www.theverge.com/2019/8/2/20751270/apple-stops-contractors-siri-voice-recordings-privacy-opt-out">Apple stops letting contractors listen to Siri voice recordings and will offer opt-out later</a></li><li><a href="https://www.forbes.com/sites/thomasbrewster/2019/08/05/apple-is-giving-out-hacker-friendly-iphones-plots-mac-bug-bounty-sources/#31ba2d784f09">Apple Hands Hackers Secret iPhones In A Bid To Boost Security</a></li><li><a href="https://www.bloomberg.com/news/articles/2019-08-28/apple-to-benefit-from-new-indian-rules-on-foreign-investment">Apple to Start Online Sales in India After Country Eases Rules</a></li><li><a href="https://www.macstories.net/linked/apple-announces-new-initiative-to-support-device-repair-providers/">Apple offers customers even more options for safe, reliable repairs</a></li></ul><h2>September</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/i11.jpg" alt="large-contents"/><p>Google <a href="https://googleprojectzero.blogspot.com/2019/08/a-very-deep-dive-into-ios-exploit.html">tried to shame Apple</a> on some <a href="https://en.wikipedia.org/wiki/Zero-day_(computing)">0-day vulnerabilities</a>, but Apple <a href="https://www.apple.com/newsroom/2019/09/a-message-about-ios-security/">quickly revealed the truth</a>.</p><p>More good news for Asia as Apple invested <a href="http://timesofindia.indiatimes.com/articleshow/71159370.cms">$1 Billion to boost iPhone manufacturing and export in India</a>, and also Apple-funded China Clean Energy Fund showed <a href="https://www.apple.com/newsroom/2019/09/apple-launched-china-clean-energy-fund-invests-in-three-wind-farms/">its first results</a>.</p><p>In case you didn't notice, this month Apple also released its <a href="https://www.apple.com/iphone-11-pro/">first three-rear-cameras iPhone</a>.</p><h3>References</h3><ul><li><a href="https://www.apple.com/newsroom/2019/09/a-message-about-ios-security/">A message about iOS security</a></li><li><a href="http://timesofindia.indiatimes.com/articleshow/71159370.cms">Apple set to ring in $1 billion investment</a></li><li><a href="https://www.apple.com/newsroom/2019/09/apple-launched-china-clean-energy-fund-invests-in-three-wind-farms/">Apple-launched China Clean Energy Fund invests in three wind farms</a></li><li><a href="https://www.apple.com/iphone-11-pro/">iPhone 11</a></li></ul><h2>October</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/china.jpg" alt="large-contents"/><p>I'm not proud of this month, as Apple has shown how it is easily manipulated by China:</p><ul><li><a href="https://www.npr.org/2019/10/10/768841864/after-china-objects-apple-removes-app-used-by-hong-kong-protesters">by pulling the crowdsourced Hong Kong app</a> that enabled its citizens to locate both pro-democracy activists and Chinese Militia</li><li><a href="https://www.buzzfeednews.com/article/alexkantrowitz/apple-china-tv-protesters-hong-kong-tim-cook">by telling makers of Apple TV+ shows to not anger China</a></li><li><a href="https://www.theregister.co.uk/2019/10/14/apple_china_tencent/">by getting caught sending IP address of its Chinese users to Tencent</a></li><li><a href="https://qz.com/1723334/apple-removes-taiwan-flag-emoji-in-hong-kong-macau-in-ios-13-1-1/">by extending the iOS Taiwanese flag emoji üáπüáº censorship</a> to users in Macau and Hong Kong</li></ul><p>Apple has grown more and more dependent on China over the years, and it is clear from all its investments that it is pushing hard and fast to put its eggs in other baskets, however, for the moment, Apple (and its suppliers) <em>have</em> to play nice with China.</p><h3>References</h3><ul><li><a href="https://www.npr.org/2019/10/10/768841864/after-china-objects-apple-removes-app-used-by-hong-kong-protesters">After China Objects, Apple Removes App Used By Hong Kong Protesters</a></li><li><a href="https://www.buzzfeednews.com/article/alexkantrowitz/apple-china-tv-protesters-hong-kong-tim-cook">Apple Told Some Apple TV+ Show Developers Not To Anger China</a></li><li><a href="https://www.theregister.co.uk/2019/10/14/apple_china_tencent/">Apple insists it's totally not doing that thing it wasn't accused of: We're not handing over Safari URLs to Tencent ‚Äì just people's IP addresses</a></li><li><a href="https://qz.com/1723334/apple-removes-taiwan-flag-emoji-in-hong-kong-macau-in-ios-13-1-1/">Apple bows to China by censoring Taiwan flag emoji</a></li></ul><h2>November</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/esc.jpg" alt="large-contents"/><blockquote><p>Image Credit: <a href="https://www.macworld.com/article/3453356/first-look-16-inch-macbook-pro.html">MacWorld</a></p></blockquote><p>Apple promoted <a href="https://www.bloomberg.com/news/articles/2019-10-31/apple-names-five-vps-including-return-of-early-iphone-executive">AR headset, AirPods, iOS, marketing executives to vice presidents</a>, this is the biggest leadership change since Angela Ahrendts's and Jony Ive's departures.</p><p>Apple continues being adamant in not hiring remote workers:<br>instead of hiring talent around the world, Apple announced that is is going to <a href="https://9to5mac.com/2019/11/04/apple-housing-crisis/">commit $2.5 billion in order help tackle California housing crisis</a>.</p><p>While we're waiting to see what's going to happen to the <a href="https://privacyisimportant.com">privacyisimportant.com</a> domain, <a href="https://www.macrumors.com/2019/03/05/apple-registers-privacyisimportant-com-domain-name/">bought by Apple earlier this year</a>, Apple has overhauled its <a href="https://www.macstories.net/news/apple-reveals-major-update-to-its-privacy-webpage/">Privacy page</a>.</p><p>This month Apple started working on its <a href="https://www.patentlyapple.com/patently-apple/2019/11/apple-breaks-ground-on-new-austin-texas-campus-as-production-begins-for-the-all-new-mac-pro.html">new $1 billion Austin Texas Campus</a>.</p><p><a href="https://www.cnbc.com/2019/11/13/apple-16-inch-macbook-pro.html">Four years later</a>, Apple <a href="https://www.apple.com/macbook-pro-16/">has released a Macbook with no keyboard issues</a>, we can finally shift our focus/hopes back to Apple's innovation and look forward to an ARM Macbook!</p><h3>References</h3><ul><li><a href="https://www.bloomberg.com/news/articles/2019-10-31/apple-names-five-vps-including-return-of-early-iphone-executive">Apple Names Five VPs, Including Return of Early iPhone Executive</a></li><li><a href="https://9to5mac.com/2019/11/04/apple-housing-crisis/">Apple announces $2.5 billion plan to help tackle California housing crisis</a></li><li><a href="https://www.macstories.net/news/apple-reveals-major-update-to-its-privacy-webpage/">Apple Reveals Major Update to Its Privacy Webpage</a></li><li><a href="https://www.patentlyapple.com/patently-apple/2019/11/apple-breaks-ground-on-new-austin-texas-campus-as-production-begins-for-the-all-new-mac-pro.html">Apple Breaks Ground on New Austin Texas Campus as Production begins for the All-New Mac Pro</a></li><li><a href="https://www.apple.com/macbook-pro-16/">Macbook Pro 16-inch</a></li></ul><h2>December</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/airpods.jpeg" alt="large-contents"/><p>December started with Apple being under fire <a href="https://krebsonsecurity.com/2019/12/the-iphone-11-pros-location-data-puzzler/">for enabling location services on the latest iPhones even when all the location-related settings have been explicitly turned off</a>, it turned out it was because of the new <a href="https://www.wired.com/story/apple-u1-chip/">U1 chip</a>: <a href="https://krebsonsecurity.com/2019/12/apple-explains-mysterious-iphone-11-location-requests/">Apple promised</a> to let users to disable this location service in a following update.</p><p>After <a href="https://www.businessinsider.com/apple-mac-pro-2019-price-release-date-2019-11">stalling for six years</a>, the <a href="https://www.apple.com/mac-pro/">Mac Pro is back</a>, more configurable, more powerful, and more expensive than ever (<a href="https://appleinsider.com/articles/19/12/13/no-apples-new-mac-pro-isnt-overpriced">yet not overpriced</a>).</p><p>Despite backorders, the AirPods are so successful that are <a href="https://9to5mac.com/2019/12/12/airpods-to-hit-quarterly-sales-of-4b-surpassing-peak-ipod-sales/">on track to pass peak iPod sales</a>.</p><p>After <a href="https://www.macrumors.com/2018/11/30/apple-music-echo-december/">Apple Music</a> launching on Alexa devices last year, from now on you can also <a href="https://9to5mac.com/2019/12/13/you-can-now-ask-alexa-to-play-apple-podcasts-on-amazon-echo-speakers/">play Apple Podcasts on Amazon Echo devices</a>.</p><h3>References</h3><ul><li><a href="https://krebsonsecurity.com/2019/12/the-iphone-11-pros-location-data-puzzler/">The iPhone 11 Pro‚Äôs Location Data Puzzler</a></li><li><a href="https://krebsonsecurity.com/2019/12/apple-explains-mysterious-iphone-11-location-requests/">Apple Explains Mysterious iPhone 11 Location Requests</a></li><li><a href="https://www.apple.com/mac-pro/">Mac Pro</a></li><li><a href="https://9to5mac.com/2019/12/12/airpods-to-hit-quarterly-sales-of-4b-surpassing-peak-ipod-sales/">AirPods to hit quarterly sales of $4B, surpassing peak iPod sales</a></li><li><a href="https://9to5mac.com/2019/12/13/you-can-now-ask-alexa-to-play-apple-podcasts-on-amazon-echo-speakers/">You can now ask Alexa to play Apple Podcasts on Amazon Echo speakers</a></li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><img src="https://www.fivestars.blog/assets/posts/apple-2019/2019.gif" alt="large-contents"/><p>I believe these 12 months went very well both for Apple and its customers.</p><p>From the customers point of view:</p><ul><li>Some devices got cheaper, while still maintaining the high quality that we all expect</li><li>Many products got <em>quiet spec bumps</em> throughout the year: until recently Apple was known to refresh a device once and leave it untouched for a few years (remember the old Macbook Air? Mac Pro? iPad Air? iPod Touch?), these constant upgrades, even minor ones, if kept up in 2020 and later, will make sure that Apple's line up will stay fresh and customers don't need to worry about buying outdated hardware at full price</li><li>Speaking of products, this year Apple released a lot of product features seemingly based on customers feedback: cheaper, longer battery iPhones, non-butterfly keyboard with escape key Macbook pros, and more</li><li>Apple's privacy push, beside a few speed bumps here and there, is a very good trend for all customers, even non-Apple ones</li></ul><p>From the company point of view:</p><ul><li>product diversification widened, especially with the new, hard push on services (and subscriptions), available even on non-Apple products, I don't see this trend slowing down anytime soon</li><li>the modem chipsets situation is the best it has ever been</li><li>sales seem to be going well, especially with new government deals that will lower/lowered Apple's product prices in emerging markets</li><li>one of Apple's major weaknesses, China, while still strong and very real, is getting less and less relevant, this is another trend I'm sure we will see for years to come, and not only from Apple and its suppliers</li></ul><p>That's it for 2019, this is just a small glimpse of what happened during the year, and I hope to have covered all major events: if you believe I've missed something, <a href="https://twitter.com/zntfdr">please let me know</a>!</p><p>What trends do you think we will witness in 2020? Any big change? Major acquisitions? <a href="https://twitter.com/zntfdr">I'd love to hear your thoughts</a>!</p><p>Thank you for reading and please <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swift-5-1-collection-diffing</guid><title>Swift 5.1 Collection Diffing</title><description></description><link>https://www.fivestars.blog/articles/swift-5-1-collection-diffing</link><pubDate>Tue, 23 Jul 2019 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>Disclaimer: this article refers to the <a href="https://github.com/apple/swift/pull/21845 ">first Swift implementation</a> of collection diffing. The implementation itself <a href="https://github.com/apple/swift/pull/25808">has already been improved</a>, however the concepts behind this article are exactly the same.</p></blockquote><p>Until recently, dealing with dynamic tables/collection views meant one of the following:</p><ul><li>Call <code>reloadData()</code> at every change</li><li>Use a dependency like <a href="https://github.com/Instagram/IGListKit">IGListKit</a> or <a href="https://github.com/ra1028/DifferenceKit">DifferenceKit</a></li><li>Manually deal with every possible change (while praying to not miss anything ü§ûüèª)</li></ul><p>Swift 5.1 introduces a new alternative: Use the new <code>Collection</code>‚Äôs <code>difference(from:)</code>.</p><blockquote><p>Want to know about what else is new Swift 5.1? Check out my <a href="https://www.fivestars.blog/articles/what-s-new-in-swift-5-1/">lightning talk here</a>.</p></blockquote><p>Unlike other features, Swift collection diffing is entirely additive and it is completely written in Swift:<br>this presents us an unique opportunity to learn how the collection diffing is actually implemented without digging into any other lower level language.</p><p>In this article I'm going to do exactly that: at over 5000 words with a lot of technicalities and code, you might want to find a comfortable place before digging in.</p><p>Ready? Let's go!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>CollectionDifference&lt;ChangeElement&gt;</h2><p>Before talking about the function itself, I want to focus on what it returns:<br>an instance of <code>CollectionDifference&lt;ChangeElement&gt;</code>.</p><p><a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L16 ">CollectionDifference</a> is a generic <code>Collection</code> defined as "<em>A collection of insertions and removals that describe the difference between two ordered collection states</em>".</p><p>The generic type <code>ChangeElement</code> is the element type of the two collections that we are diffing, note that, if we look solely at the <code>CollectionDifference</code> definition, <code>ChangeElement</code> is completely unconstrained: it doesn‚Äôt even need to conform to <code>Equatable</code>!</p><p>The elements of this collection are of type <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L227 "><code>CollectionDifference.Change</code></a>, which is a new enum with two cases: <code>.insert</code> and <code>.remove</code>. Before moving into this enum, there are a couple of points that must be disclosed about <code>CollectionDifference</code>:</p><ol><li>The collection <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L253">returns</a> first all the removals (all the <code>.remove</code> cases), and then all the insertions (all the <code>.insert</code> cases). This is assured by <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L168 ">an internal initializer</a>: even if we try to initialize this collection with changes in random order, the initialized collection will be always ordered properly.</li><li>The collection insertions, deletions, and association between the two must be unique (more on this later). This is assured by an <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L89">internal validator</a>: while trying to initialize an unsorted <code>CollectionDifference</code> is allowed, failing this uniqueness validation will fail the collection initialization.</li></ol><h3>Insertions and Removals</h3><p>If we‚Äôre interested exclusively on the insertions <strong>or</strong> the removals of a <code>CollectionDifference</code>, instead of traversing the collection itself, we can use its public properties <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L70 "><code>insertions</code></a> and <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L70 "><code>removals</code></a>, which are two arrays (with elements of type <code>CollectionDifference.Change</code>).</p><p>These arrays are actually where the elements of the main collection are stored, and accessing them directly is more performant the traversing the collection itself.</p><h2>CollectionDifference.Change</h2><p>When comparing two collections, you can think of any change between the collections elements as either:</p><ul><li>an insertion (a new element has been added)</li><li>a removal (an element has been removed)</li><li>or both (when an element changes position, it is <em>removed</em> from the current position and <em>added</em> to the new position).</li></ul><p>With that being said, it comes as no surprise that <code>CollectionDifference.Change</code> is an <code>Enum</code> with two cases: <code>insert</code> and <code>remove</code>.</p><p>Both cases come with three associated values: an offset, an element, and an optional association.</p><h3>Change Offset</h3><p>The offset is the position of the change.</p><p>In case of a removal, it reflects the position where the element <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L30 ">used to be</a>:</p><pre><code><span class="keyword">let</span> oldArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]
<span class="keyword">let</span> newArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span>]

<span class="comment">// The element "c" at index 2 has been removed</span>

<span class="keyword">let</span> difference = newArray.<span class="call">difference</span>(from: oldArray) 
<span class="comment">// difference is a one-element collection
// where the element is of type `.remove` with `offset` 2</span>
</code></pre><p>In the case of an insertion, it reflects the position of the element in the <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L22">final</a> collection:</p><pre><code><span class="keyword">let</span> oldArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]
<span class="keyword">let</span> newArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]

<span class="comment">// A new element "e" has been added at index 4</span>

<span class="keyword">let</span> difference = newArray.<span class="call">difference</span>(from: oldArray) 
<span class="comment">// difference is a one-element collection
// where the element is of type `.insert` with `offset` 4</span>
</code></pre><h3>Change Element</h3><p>This element is the whole reason why <code>CollectionDifference</code> is declared generic:<br>the change element is the actual collection element that has been removed or inserted.</p><pre><code><span class="keyword">let</span> oldArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]
<span class="keyword">let</span> newArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]

<span class="comment">// The element "c" at index 2 has been removed
// A new element "e" has been added at index 3</span>

<span class="keyword">let</span> difference = newArray.<span class="call">difference</span>(from: oldArray)
<span class="comment">// difference is a two elements collection:
// - the first element is of type `.remove` (with offset 2) with element "c"
// - the second element is of type `.insert` (with offset 3) with element "e"</span>
</code></pre><h3>Change Association</h3><p>Again, when an element moves position between two collection states, the change can be considered as a deletion (from the old position) and as an insertion (to the new position).</p><p>This is what the <code>Change</code> association is for: to link that removal and that insertion.<br>The association, called <code>associatedWith</code>, is an index representing <em>the other</em> change offset:<br>if we‚Äôre looking at a <code>.insert</code> change, the <code>associatedWith</code> index will be equal to the associated <code>.remove</code> <code>offset</code> index, and vice versa.</p><p>As change associations add an extra cost on the diffing, they‚Äôre not computed by default:<br>the <code>difference(from:)</code> result is a collection of <code>.remove</code>/<code>.insert</code> elements all with <code>associatedWith</code> value set to <code>nil</code>. If we‚Äôre also interested in this association, we need to call <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L323"><code>.inferringMoves()</code></a> in our difference collection:</p><pre><code><span class="keyword">let</span> oldArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"c"</span>]
<span class="keyword">let</span> newArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>]

<span class="comment">// the element "c" has moved from index 4 to 2
// therefore we can think it as:
// - a removal from position 4
// - and an insertion at position 2</span>

<span class="keyword">let</span> difference = newArray.<span class="call">difference</span>(from: oldArray)
<span class="comment">// difference is a two elements collection 
// - the first element is a `.remove` with offset 4 
//   and associated offset of `nil`
// - the second element is an `.insert` with offset 2
//   and associated offset of `nil`</span>

let differenceWithMoves = difference.<span class="call">inferringMoves</span>()
<span class="comment">// differenceWithMoves is a two elements collection 
// - the first element is a `.remove` with offset 4 
//   and associated offset 2
// - the second element is an `.insert` with offset 2 
//   and associated offset 4</span>
</code></pre><h4>InferringMoves</h4><p><a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L323">This function</a> is straightforward: it scans the whole <code>CollectionDifference</code> instance and adds an association when an element change matches both among the removals and the insertions, otherwise it just returns the Change <em>unchanged</em>.</p><h3>A Look Back to CollectionDifference‚Äôs Rules</h3><p>Now that we have a clear definition of what the <code>Change</code> type is, we can look back to the <code>CollectionDifference</code> definition and have a clearer understanding of some of its rules:</p><ul><li>Having non-unique removals would mean having multiple removals at the same index: it's impossible.</li><li>Same with additions: having multiple additions at the same offset would mean having multiple elements at the same index in the final collection state.</li><li>Lastly, associations must always come in pairs (an insertion linked to a removal and vice versa): there can‚Äôt be a one way association.</li></ul><h3>A Second CollectionDifference Order</h3><p>If we look at the how the collection internal <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L168">init</a> is defined, we can see that <code>CollectionDifference</code> has a clear order that goes beyond "<em>removals first and insertions second</em>":<br>all the insertions are stored in the <code>insertions</code> array in order from lowest to highest <code>offset</code>, and same goes for the deletions with the <code>removals</code> array.</p><p>However, if we look at the <code>CollectionDifference</code> <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift#L253"><code>subscript</code></a>, we can see that the collection is exposed in, again, a different order:<br>the removals are exposed from highest to lowest <code>offset</code>, while the insertions from lowest to highest <code>offset</code>.</p><p>This exposed order allows us to use the returned <code>CollectionDifference</code> instance to transform a collection from the old state to the new state by applying, one by one, the collection <code>Change</code>s:</p><pre><code><span class="keyword">let</span> oldArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]
<span class="keyword">let</span> newArray = [<span class="string">"x"</span>, <span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"c"</span>]

<span class="keyword">var</span> anotherArray = oldArray

<span class="keyword">let</span> difference = newArray.<span class="call">difference</span>(from: oldArray)
<span class="comment">// difference is a four elements collection:
// 1. `.remove` at offset 3
// 2. `.remove` at offset 1 
// 3. `.insert` at offset 0
// 4. `.insert` at offset 2</span>

<span class="keyword">for</span> change <span class="keyword">in</span> difference {
  <span class="keyword">switch</span> change {
  <span class="keyword">case let</span> .<span class="call">remove</span>(offset, <span class="keyword">_</span>, <span class="keyword">_</span>):
    anotherArray.<span class="call">remove</span>(at: offset)
  <span class="keyword">case let</span> .<span class="call">insert</span>(offset, newElement, <span class="keyword">_</span>):
    anotherArray.<span class="call">insert</span>(newElement, at: offset)
  }
}
<span class="comment">// at this point `anotherArray` is equal to `newArray`</span> 
</code></pre><p><code>anotherArray</code> starts in the same state of <code>oldArray</code> and ends up like <code>newArray</code> by following the <code>difference</code> collection order:</p><pre><code>[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>] <span class="comment">// initial state</span>
[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>] <span class="comment">// removal at index 3</span>
[<span class="string">"a"</span>, <span class="string">"c"</span>] <span class="comment">// removal at index 1</span>
[<span class="string">"x"</span>, <span class="string">"a"</span>, <span class="string">"c"</span>] <span class="comment">// insertion at index 0</span>
[<span class="string">"x"</span>, <span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"c"</span>] <span class="comment">// insertion at index 2</span>
</code></pre><p>If the collection was ordered in any another way, we would have obtained a different outcome (or even a crash!).</p><h3>Applying</h3><p>If we need to apply the <code>difference</code> result to a collection, we don‚Äôt have to do it ourselves (like in the example above):<br>Swift offers a new method, <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/Diffing.swift#L68"><code>applying(_:)</code></a>, that does it for us.</p><p>Therefore the example above could have been written entirely as:</p><pre><code><span class="keyword">let</span> oldArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]
<span class="keyword">let</span> newArray = [<span class="string">"x"</span>, <span class="string">"a"</span>, <span class="string">"e"</span>, <span class="string">"c"</span>]

<span class="keyword">var</span> anotherArray = oldArray

<span class="keyword">let</span> difference = newArray.<span class="call">difference</span>(from: oldArray)

<span class="comment">// applying the difference here üëáüèª</span> 
anotherArray = anotherArray.<span class="call">applying</span>(difference)!

<span class="comment">// at this point `anotherArray` is equal to `newArray`</span> 
</code></pre><p>Since this method can be called on <em>any</em> collection (as long the collection elements are compatible), instead of applying the <code>difference</code> in place, it returns a new optional collection with the difference applied.</p><p>The reason why the return type is optional is clear as soon as we imagine doing a <code>remove</code> or an <code>insert</code> to an index out of range:<br>instead of crashing, the function will return <code>nil</code> when the difference is <em>applied</em> to an incompatible collection.</p><h2>difference(from:)</h2><p>Now that we‚Äôve covered the basics, it‚Äôs time to uncover what this method actually does, it might take you by surprise (it did to me!) but the whole implementation is a one liner:</p><pre><code><span class="keyword">extension</span> <span class="type">BidirectionalCollection</span> <span class="keyword">where</span> <span class="type">Element</span> : <span class="type">Equatable</span> {
  <span class="keyword">public func</span> difference&lt;C: <span class="type">BidirectionalCollection</span>&gt;(
    from other: <span class="type">C</span>
  ) -&gt; <span class="type">CollectionDifference</span>&lt;<span class="type">Element</span>&gt; <span class="keyword">where</span> <span class="type">C</span>.<span class="type">Element</span> == <span class="type">Self</span>.<span class="type">Element</span> {
    <span class="keyword">return</span> <span class="call">difference</span>(from: other, by: ==)
  }
}
</code></pre><p>It turns out that we were using a convenience method all along!</p><p>Before digging into the real <code>difference(from:by:)</code> method, it's important to note how it's <code>difference(from:)</code> that requires the elements of the collections to conform to <code>Equatable</code>, this requirement is nowhere to be seen in <code>difference(from:by:)</code> üëçüèª.</p><h2>difference(from:by:)</h2><p>So far we‚Äôve used <code>CollectionDifference</code> to compute the difference in the <em>equality</em> of two states of a collection, however the truth is that this comparison could be used for many more use cases:<br>in fact, the <a href="https://forums.swift.org/t/ordered-collection-diffing/18933 ">original pitch</a> for collection diffing describes the feature as a "<em>diffing functionality [‚Ä¶] necessary to provide easy creation, representation, and application of ordered collection state transitions</em>".<br>A <em>state transition</em> can have different meanings based on the context, therefore it makes a lot of sense for Swift to set no limits on what this <em>transition</em> can be.</p><p>With that being said, it should come with no surprise that the real <code>difference</code> function signature is:</p><pre><code>   <span class="keyword">public func</span> difference&lt;C: <span class="type">BidirectionalCollection</span>&gt;(
    from other: <span class="type">C</span>,
    by areEquivalent: (<span class="type">Element</span>, <span class="type">C</span>.<span class="type">Element</span>) -&gt; <span class="type">Bool</span>
  ) -&gt; <span class="type">CollectionDifference</span>&lt;<span class="type">Element</span>&gt;
  <span class="keyword">where</span> <span class="type">C</span>.<span class="type">Element</span> == <span class="type">Self</span>.<span class="type">Element</span> 
</code></pre><p>Note how non-constraining this function is: all it requires is two <a href="https://developer.apple.com/documentation/swift/bidirectionalcollection "><code>BidirectionalCollection</code></a>s (two collections that can be traversed both by moving backward and/or forward) with the same associated types.</p><p>The associated types don‚Äôt need to conform to any specific protocol, all it matters is that we pass a method that takes two elements of this type and returns a boolean:<br>what this <em>comparison</em> method does, and what it means, is entirely up to the developer.</p><h3>An Example</h3><p>As a fun example, let‚Äôs run <code>difference(from:by:)</code> with two identical collections and a comparison method that returns always <code>false</code>:</p><pre><code><span class="keyword">let</span> oldArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]
<span class="keyword">let</span> newArray = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>] <span class="comment">// same as `oldArray`</span>

let difference = newArray.<span class="call">difference</span>(from: oldArray, 
                                     by: { <span class="keyword">_</span>, <span class="keyword">_  in false</span> })
<span class="comment">// `difference` is a 6 elements collection with:
// - three removals
// - three insertions</span>
</code></pre><p>The result is a collection with three removals and three insertions:<br>this is because our comparison method (which, again, returns always <code>false</code> in this example) removes any connection between any element in either state, therefore the <code>difference</code> algorithm will see this transition as a complete rewrite of the array, regardless of the contents of those arrays!</p><h3>A Note on difference(from:by:) Return Type</h3><p><code>difference</code> returns a non-optional <code>CollectionDifference</code>.<br>Previously I've mentioned that a <code>CollectionDifference</code> initialization fails when we try to initialize it with elements that do not comply to its rules. How does Swift guarantees a non-optional <code>CollectionDifference</code> instance?</p><p>While Swift exposes only one failable initializer for <code>CollectionDifference</code>, it turns out that there's also a non-failable initializer:<br>this second initializer is marked as <code>internal</code>, therefore it can only be used within the Swift repository, and it is not exposed when we use Swift from a toolchain in Xcode.</p><p>This is because the internal initializer is used only with algorithms that have been mathematically proven to instantiate a correct <code>CollectionDifference</code>, therefore it is ok for Swift to return a non-optional collection.</p><h3>Inside difference(from:by:)</h3><p>The first thing that <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/Diffing.swift#L134">this method</a> does is creating two collections, <code>source</code> and <code>target</code>, of internal type <code>_CountingIndexCollection</code>:<br>the <code>source</code> reflects the <em>old</em> state of the original collection, while <code>target</code> reflects the <em>new</em> state of the original collection.</p><p>If we call <code>["a","b","c"].difference(from: ["e", "f", "g"])</code> for example, <code>source</code> mirrors <code>["e", "f", "g"]</code> while <code>target</code> mirrors <code>["a", "b", "c"]</code>.</p><p><code>_CountingIndexCollection</code> is a wrapper of the real collection, with an easy way to get the offset of its indices from its start index.</p><pre><code><span class="keyword">let</span> originalCollection = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>]
<span class="type">Let</span> offsetCollection = <span class="type">_CountingIndexCollection</span>(originalCollection)
<span class="keyword">if let</span> index = offsetCollection.<span class="call">index</span>(of: <span class="string">"d"</span>) {
  <span class="call">print</span>(index.<span class="property">offset</span>) <span class="comment">// prints "3"</span>
  <span class="call">print</span>(offsetCollection[index]) <span class="comment">// prints "d"</span>
}
</code></pre><p>Lastly, the method creates an instance of internal type <code>_CollectionChanges</code>, which takes the newly created <code>source</code> and <code>target</code> collections along with our injected comparison block.</p><p>After the <code>_CollectionChanges</code> initialization is complete, the <code>difference</code> method maps back the <code>_CollectionChanges</code> instance into an array of <code>Change</code> instances, and returns a <code>CollectionDifference</code> initialized with these changes.</p><p>Therefore, the real diffing doesn‚Äôt happen in this method, but inside the <code>_CollectionChanges</code> initialization:<br>we need to explore what this <code>_CollectionChanges</code> is all about.</p><h3>_CollectionChanges</h3><p><a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/Diffing.swift#L247"><code>_CollectionChanges</code></a> is a generic collection of changes (<em>duh!</em>) between a source and target collection. In the documentation it is stated that an instance of this type can be used to:</p><ul><li>Traverse the <a href="http://en.wikipedia.org/wiki/Longest_common_subsequence_problem">longest common subsequence</a> of <code>source</code> and <code>target</code>, which means the longest subsequence common between the two collections. For example, the longest common sequence between X<strong>MJ</strong>Y<strong>AU</strong>Z and <strong>M</strong>Z<strong>JA</strong>WX<strong>U</strong> is MJAU: the subsequence, as long as it is found while traversing both collections in the same direction, doesn‚Äôt have to occupy consecutive positions within the original collections.</li></ul><ul><li>Traverse the <a href="http://en.wikipedia.org/wiki/Edit_distance">shortest edit script</a> of remove and insert operations, which means finding the minimum number of operations needed to transform the <code>source</code> collection into the <code>target</code>.</li></ul><p>These definitions/challenges are actually dual:<br>if we solve one, we've also found a way to solve the other as well!</p><p>Both challenges are very valuable to our diffing: since additions and removals are costly, and no change is free, solving those problems means finding the cheapest (read: fastest) way to turn our old collection state into the new collection.</p><p>Let's take two collections for example, <code>ABCABBA</code> and <code>CBABAC</code>: how many ways there are to transform one into the other?<br>The answer is several: <code>_CollectionChanges</code> promises to find the most efficient one.</p><h3>Endpoint</h3><p>The first declaration that we met inside the <code>_CollectionChanges</code> body is a new <code>typealias</code> that forms a tuple by taking one index of the <code>source</code> collection and one from the <code>target</code> collection:</p><pre><code><span class="keyword">typealias</span> Endpoint = (x: <span class="type">SourceIndex</span>, y: <span class="type">TargetIndex</span>)
</code></pre><p>This is what we will use when associating two locations of the two collections:<br>For example, if we want to associate the first element of the <code>source</code> with the second element of the <code>target</code>, we will define the tuple (nee, the <code>Endpoint</code>) as <code>(1, 2)</code>.</p><h3>PathStorage: An Hidden Swift Game üëæ</h3><p>Let‚Äôs assume to have a 2D chart in front of us. The X-axis is our <code>source</code> collection and our Y-axis is our <code>target</code> collection.</p><pre><code>   | ‚Ä¢ | <span class="type">X</span> | <span class="type">A</span> | <span class="type">B</span> | <span class="type">C</span> | <span class="type">D</span> |
 ‚Ä¢ |   |   |   |   |   |   |
 <span class="type">X</span> |   |   |   |   |   |   |
 <span class="type">Y</span> |   |   |   |   |   |   |
 <span class="type">C</span> |   |   |   |   |   |   |
 <span class="type">D</span> |   |   |   |   |   |   |
</code></pre><p>You‚Äôre now tasked to draw a path that goes:</p><ul><li>from <code>(0,0)</code></li><li>to <code>(lastIndexOfTarget, lastIndexOfSource)</code></li></ul><pre><code>   | ‚Ä¢ | <span class="type">X</span> | <span class="type">A</span> | <span class="type">B</span> | <span class="type">C</span> | <span class="type">D</span> |
 ‚Ä¢ | <span class="type">S</span> |   |   |   |   |   | 
 <span class="type">X</span> |   |   |   |   |   |   | <span class="comment">// S: Start Here</span> 
 <span class="type">Y</span> |   |   |   |   |   |   | <span class="comment">// T: Target Destination</span>
 <span class="type">C</span> |   |   |   |   |   |   |
 <span class="type">D</span> |   |   |   |   |   | <span class="type">T</span> |

<span class="comment">// Start Position S: (0,0)
// Target Position T: (4,5)</span>
</code></pre><blockquote><p>Fill the gaps</p></blockquote><p>Rules:</p><ul><li>You can only advance left to right (no going back)</li><li>You can only advance top to bottom (no going back)</li><li>You can advance left to right and top to bottom at the same time (diagonal move) only if you advance equally in both directions</li><li>You can advance left to right and top to bottom at the same time (diagonal move) only when the X-axis and Y-axis elements are the same</li></ul><blockquote><p>Note: I‚Äôm using the equality as a comparison for simplicity sake, however the rules above are still applied in general sense.</p></blockquote><p>The game is to find the allowed path with the most diagonal moves.</p><p>Sounds familiar? Because it is:<br>this game is exactly what we introduced before in <code>_CollectionChanges</code> as the <em>longest common subsequence</em> challenge.</p><p>Finding the path with the most diagonal moves is the same as finding the <em>longest common subsequence</em> of our two collections, and finding the path with the most diagonal moves means finding the path with as little non-diagonal moves as possible. Non-diagonal moves correspond to a change:</p><ul><li>a vertical move (top to bottom) is an insertion</li><li>while an horizontal move correspond to a deletion.</li></ul><p>Here‚Äôs the solution of the game above:</p><pre><code>   | ‚Ä¢ | <span class="type">X</span> | <span class="type">A</span> | <span class="type">B</span> | <span class="type">C</span> | <span class="type">D</span> |
 ‚Ä¢ | <span class="type">S</span> |   |   |   |   |   | 
 <span class="type">X</span> |   | x | x | x |   |   | <span class="comment">// S: Start Here</span> 
 <span class="type">Y</span> |   |   |   | x |   |   | <span class="comment">// T: Target Destination</span>
 <span class="type">C</span> |   |   |   |   | x |   |
 <span class="type">D</span> |   |   |   |   |   | <span class="type">T</span> |

<span class="comment">// Final path:</span>
(<span class="number">0</span>,<span class="number">0</span>) ‚Üí (<span class="number">1</span>,<span class="number">1</span>) ‚Üí (<span class="number">1</span>,<span class="number">2</span>) ‚Üí (<span class="number">1</span>,<span class="number">3</span>) ‚Üí (<span class="number">2</span>,<span class="number">3</span>) ‚Üí (<span class="number">3</span>,<span class="number">4</span>) ‚Üí (<span class="number">4</span>,<span class="number">5</span>)
</code></pre><p>Let's look at the moves, one by one:</p><ul><li>we start at <code>(0,0)</code>, nothing to see here</li><li>we first move diagonally to <code>(1,1)</code>, as both axis have the value <code>X</code> at that position</li><li>then we move horizontally to <code>(1,2)</code>, which is equivalent to removing <code>A</code></li><li>then we move horizontally to <code>(1,3)</code>, which is equivalent to removing <code>B</code></li><li>then we move vertically to <code>(2,3)</code>, which is equal to inserting <code>Y</code> to our collection</li><li>the we move diagonally to <code>(3,4)</code> which is allowed because we have <code>C</code> in both axis</li><li>lastly we move diagonally to <code>(4,5)</code>, which is allowed because we have <code>D</code> in both axis, arriving to our target destination.</li></ul><p>In other words, we can use this path to find the difference operations necessary to go from <code>target</code> to <code>destination</code>, looking back again to the path: - the two horizontal moves, <code>(1,1) ‚Üí (1,2)</code> and <code>(1,2) ‚Üí (1,3)</code>, correspond to two deletions - the one vertical move, <code>(1,3) ‚Üí (2,3)</code>, correspond to an insertion</p><blockquote><p>Before translating those moves to an <code>offset</code> of <code>CollectionDifference.Change</code> we must remember that the indexes of this path are shifted by one, as <code>(0,0)</code> is the initial position in the chart, and not the start index of each collection.</p></blockquote><p>Remember our <code>Endpoint</code> definition?</p><pre><code><span class="keyword">typealias</span> Endpoint = (x: <span class="type">SourceIndex</span>, y: <span class="type">TargetIndex</span>)
</code></pre><p>The path that we have just found is just an array of endpoints:<br>the second declaration that we find in <code>_CollectionChanges</code> is <code>PathStorage</code>: which is where we store this path.</p><h3>pathStartIndex</h3><p>Our final property found inside <code>_CollectionChanges</code> is <code>pathStartIndex</code>, which is the index in <code>pathStorage</code> of the first segment in the <em>difference path</em>.</p><p>This is an internal optimization:<br>if two collections have the same prefix, like <strong>AE</strong>OS and <strong>AE</strong>FT, it‚Äôs no use to start doing our diffing in the common prefix AE, therefore we skip it and do all our diffing operations starting from the <code>pathStartIndex</code> instead.</p><h3>enum Element</h3><p>This is an <code>internal</code> enum declaration that will help us when we need to transform the path found above into a <code>CollectionDifference.Change</code> instance:</p><pre><code>   <span class="keyword">enum</span> Element {
    <span class="keyword">case</span> removed(<span class="type">Range</span>&lt;<span class="type">SourceIndex</span>&gt;)
    <span class="keyword">case</span> inserted(<span class="type">Range</span>&lt;<span class="type">TargetIndex</span>&gt;)
    <span class="keyword">case</span> matched(<span class="type">Range</span>&lt;<span class="type">SourceIndex</span>&gt;, <span class="type">Range</span>&lt;<span class="type">TargetIndex</span>&gt;)
  }
</code></pre><p>Note how the associated values of each case is a range instead of a simple index:<br>while in the example above we've separated each move to one step, multiple <em>consecutive</em> moves in the same direction can be grouped together into one move, therefore moves like our two horizontal moves <code>(1,1) ‚Üí (1,2) ‚Üí (1,3)</code> can be grouped into one as <code>(1,1) ‚Üí (1,3)</code>, therefore we can describe our path succinctly, and this contraction allows us to use ranges.</p><p>If you recall were we started, we've said that our diffing method initializes a <code>_CollectionChanges</code> instance: &gt; After the <code>_CollectionChanges</code> initialization is complete, the <code>difference</code> method maps back the <code>_CollectionChanges</code> instance into an array of <code>Change</code> instances, and returns a <code>CollectionDifference</code> initialized with these changes.</p><blockquote><p>an excerpt of the chapter "Inside difference(from:by:)"</p></blockquote><p>This <code>Element</code> definition is exactly what <code>_CollectionChanges</code> is a collection of, therefore what our original <code>difference</code> method does is take these <code>Element</code> instances and, one by one, turn them into <code>Change</code>s (while ignoring all the matches).</p><p>We've covered the basics: it's time to look at the <code>_CollectionChanges</code> initialization.</p><h3>_CollectionChanges Main init</h3><blockquote><p>As a reminder, this <code>init</code> has three parameters: our two collection states and the comparison method.</p></blockquote><p>This init does two things: - initialize the <code>pathStartIndex</code> with value <code>0</code> and the <code>PathStorage</code> array to an empty array - call a <code>private</code> method <code>formChanges</code> while passing to it all the <code>init</code> parameters.</p><h3>_CollectionChanges formChanges</h3><blockquote><p>As a reminder, what we want to do now is filling the <code>_CollectionChanges</code>'s <code>PathStorage</code> (which is an array of <code>Endpoint</code>s, which correspond to our path as we've seen above).</p></blockquote><p>Once called, this method does some initial checks.</p><p>If both collection states are empty (e.g. we're comparing two empty arrays), this method stops immediately: the difference is empty as there's nothing to compare.</p><p>If we continue, it means that at least one of the collection states is not empty.</p><p>This is the point where our method finds the common prefix among the collection states (according to our comparison method):</p><ul><li>if the common prefix is equal to at least one of the two collections, then the change between the two collections is trivial: going back to our path game, having a collection equal to the prefix of the other means that we can use diagonal moves until we hit one of the edges. Once we hit the edge, we are only allowed to move either by going down (insertions) or right (deletions). Here are three examples where the collections are one the prefix of the other.</li></ul><pre><code>   <span class="comment">// source = ASDFO 
  // target = ASD
  // the target is a prefix of the source:</span>

     | ‚Ä¢ | <span class="type">A</span> | <span class="type">S</span> | <span class="type">D</span> | <span class="type">F</span> | <span class="type">O</span> |
   ‚Ä¢ | <span class="type">S</span> |   |   |   |   |   | 
   <span class="type">A</span> |   | x |   |   |   |   | <span class="comment">// S: Start Here</span> 
   <span class="type">S</span> |   |   | x |   |   |   | <span class="comment">// T: Target Destination</span>
   <span class="type">D</span> |   |   |   | x | x | <span class="type">T</span> |
                   ‚Üë
          we hit the edge here

  <span class="comment">// Final path:</span>
  (<span class="number">0</span>,<span class="number">0</span>) ‚Üí (<span class="number">3</span>,<span class="number">3</span>) ‚Üí (<span class="number">3</span>,<span class="number">5</span>)

  <span class="comment">// Which translates into:
  // - three matches (0,0) ‚Üí (3,3)
  // - two deletions (of letter F, and O), (3,3) ‚Üí (3,5)

  // source = ASD
  // target = ASDFO
  // the source is a prefix of the target:</span>

     | ‚Ä¢ | <span class="type">A</span> | <span class="type">S</span> | <span class="type">D</span> |
   ‚Ä¢ | <span class="type">S</span> |   |   |   | <span class="comment">// S: Start Here</span> 
   <span class="type">A</span> |   | x |   |   | <span class="comment">// T: Target Destination</span>
   <span class="type">S</span> |   |   | x |   | 
   <span class="type">D</span> |   |   |   | x | ‚Üê we hit the edge here
   <span class="type">F</span> |   |   |   | x |
   <span class="type">O</span> |   |   |   | x |

  <span class="comment">// Final path:</span>
  (<span class="number">0</span>,<span class="number">0</span>) ‚Üí (<span class="number">3</span>,<span class="number">3</span>) ‚Üí (<span class="number">5</span>,<span class="number">3</span>)

  <span class="comment">// Which translates into:
  // - three matches (0,0) ‚Üí (3,3)
  // - two insertions (of letter F, and O), (3,3) ‚Üí (5,3)

  // source = ASD
  // target = ASD
  // both collections are equal, therefore they are each other's prefixes</span>

     | ‚Ä¢ | <span class="type">A</span> | <span class="type">S</span> | <span class="type">D</span> |
   ‚Ä¢ | <span class="type">S</span> |   |   |   | <span class="comment">// S: Start Here</span> 
   <span class="type">A</span> |   | x |   |   | <span class="comment">// T: Target Destination</span>
   <span class="type">S</span> |   |   | x |   | 
   <span class="type">D</span> |   |   |   | <span class="type">T</span> | ‚Üê we hit the edge here

  <span class="comment">// Final path:</span>
  (<span class="number">0</span>,<span class="number">0</span>) ‚Üí (<span class="number">3</span>,<span class="number">3</span>)

  <span class="comment">// Which translates into:
  // - three matches (0,0) ‚Üí (3,3)</span>
</code></pre><blockquote><p>Once again I‚Äôm using the equality as a comparison for simplicity sake.</p></blockquote><p>Based on which of the three cases we fall into, our final <code>pathStorage</code> will have two or three elements (endpoints) and the method returns.</p><ul><li>Lastly, if we arrive here, it means that our collection states are:<ul><li>Not the same (according to our comparison method)</li><li>Not empty</li><li>Might have a common prefix</li></ul></li></ul><p>This is when our method <code>formChanges</code> calls another method, <code>formChangesCore</code>.</p><h3>_CollectionChanges formChangesCore</h3><blockquote><p>Remember what we are accomplishing:we are trying to find the most efficient way to go from one collection state to another, by using as little insertions/deletions as possible, while reusing the <code>source</code> collection elements as much as possible (a.k.a. finding the path with the the most diagonal moves in our path game).</p></blockquote><p>This method is invoked with a few parameters: the usual original collections and comparison method, plus the end indexes on each collection of their common prefix (that we have just computed above).</p><p>Since we've already got rid of the base cases, this method is (finally!) where the magic happens.</p><p>To put it simply, this method implements the "<a href="http://www.xmailserver.org/diff2.pdf">Greedy LCS/SES Algorithm</a>" published in 1986 (!) by <a href="https://en.wikipedia.org/wiki/Eugene_Myers">Eugene¬†W.¬†Myers</a>.</p><h4>The Greedy LCS/SES Algorithm</h4><blockquote><p>Curious on which algorithm IGListKit uses? Check out <a href="http://documents.scribd.com/docs/10ro9oowpo1h81pgh1as.pdf">Paul Heckel's paper here</a>. <a href="https://github.com/lxcid/ListDiff">Here</a>'s a Swift implementation of said algorithm.</p></blockquote><p>Without going too deeply on the theory behind the algorithm, which is explained and demonstrated very clearly in the <a href="http://www.xmailserver.org/diff2.pdf">original paper</a> (approachable by everyone), the algorithm is based on three steps:</p><ol><li>Find the furthest valid path that starts at <code>(0,0)</code> and has up to <code>D</code> non-diagonal moves.</li></ol><ol start="2"><li>If we've reached the Target Destination, end the algorithm.</li></ol><ol start="3"><li>If not, increase <code>D</code> by one (initially set to <code>0</code>) and start again.</li></ol><p>In order to get to the Target Destination, instead of computing over and over all the possible valid paths with <code>D</code> non-diagonal moves, the algorithm stores the previous explored paths.</p><p>However, not all possible paths are stored, nor all the possible paths are explored.</p><p>Instead, the algorithm bases its research for the best path on the <em>diagonals</em> of our 2D chart game, these diagonals are defined as <code>k = x - y</code>. Here are a few examples:</p><pre><code>   diagonal with k = <span class="number">0</span>       diagonal with k = <span class="number">1</span>       diagonal with k = <span class="number">2</span>

     | ‚Ä¢ | <span class="type">A</span> | <span class="type">S</span> | <span class="type">D</span> |         | ‚Ä¢ | <span class="type">A</span> | <span class="type">S</span> | <span class="type">D</span> |         | ‚Ä¢ | <span class="type">A</span> | <span class="type">S</span> | <span class="type">D</span> |    
   ‚Ä¢ | k |   |   |   |       ‚Ä¢ |   | k |   |   |       ‚Ä¢ |   |   | k |   |
   <span class="type">A</span> |   | k |   |   |       <span class="type">A</span> |   |   | k |   |       <span class="type">A</span> |   |   |   | k |
   <span class="type">S</span> |   |   | k |   |       <span class="type">S</span> |   |   |   | k |       <span class="type">S</span> |   |   |   |   | 
   <span class="type">D</span> |   |   |   | k |       <span class="type">D</span> |   |   |   |   |       <span class="type">D</span> |   |   |   |   |
   <span class="type">F</span> |   |   |   |   |       <span class="type">F</span> |   |   |   |   |       <span class="type">F</span> |   |   |   |   |
   <span class="type">O</span> |   |   |   |   |       <span class="type">O</span> |   |   |   |   |       <span class="type">O</span> |   |   |   |   |

  diagonal with k = -<span class="number">1</span>      diagonal with k = -<span class="number">2</span>      diagonal with k = -<span class="number">3</span>

     | ‚Ä¢ | <span class="type">A</span> | <span class="type">S</span> | <span class="type">D</span> |         | ‚Ä¢ | <span class="type">A</span> | <span class="type">S</span> | <span class="type">D</span> |         | ‚Ä¢ | <span class="type">A</span> | <span class="type">S</span> | <span class="type">D</span> |    
   ‚Ä¢ |   |   |   |   |       ‚Ä¢ |   |   |   |   |       ‚Ä¢ |   |   |   |   |
   <span class="type">A</span> | k |   |   |   |       <span class="type">A</span> |   |   |   |   |       <span class="type">A</span> |   |   |   |   |
   <span class="type">S</span> |   | k |   |   |       <span class="type">S</span> | k |   |   |   |       <span class="type">S</span> |   |   |   |   |
   <span class="type">D</span> |   |   | k |   |       <span class="type">D</span> |   | k |   |   |       <span class="type">D</span> | k |   |   |   |
   <span class="type">F</span> |   |   |   | k |       <span class="type">F</span> |   |   | k |   |       <span class="type">F</span> |   | k |   |   |
   <span class="type">O</span> |   |   |   |   |       <span class="type">O</span> |   |   |   | k |       <span class="type">O</span> |   |   | k |   |
</code></pre><p>Here are the first few iterations of the algorithm:</p><ul><li>Initially, the algorithm starts at <code>(0,0)</code> and finds the furthest path with <code>0</code> non diagonal moves, which will necessarily end its path in the 0th diagonal (<code>k = 0</code>).</li></ul><ul><li>On the first iteration (if we haven't reached the Target Destination yet), we try to find the furthest paths that have <code>1</code> non diagonal moves, <strong>starting from where we left in the previous found path</strong>. We will necessarily end up on a diagonal with k equal to 1 or -1 (remember, by moving to the diagonal with <code>k = 1</code> it means that we do an insertion, dually, we perform a removal by moving into the diagonal with <code>k = -1</code>). Assuming that we haven't arrived to the final destination yet, we have 2 potential paths now: one that ends in diagonal 1 and one in diagonal -1. We keep both and keep iterating.</li></ul><ul><li>On the next iteration we will try to find the furthest path with <code>2</code> non diagonal moves, instead of starting from scratch, again, we use the two potential paths from the previous iteration. Starting from the previous two potential paths that ended in diagonal 1 and -1, this iteration paths will necessarily end in either diagonal -2, 0, or 2. If we haven't found the Target Destination yet, we keep the furthest path on each diagonal (three in total) and keep iterating.</li></ul><blockquote><p>Would you like to see this process in action? Robert Elder has an interactive Visualization <a href="http://blog.robertelder.org/diff-algorithm/">here</a> (jump to step 5!)</p></blockquote><p>This iteration keeps going until we finally reach the Target Point.</p><p>A few important observations:</p><ul><li>a path at a given iteration with "x" non-diagonal moves is just a path from the previous iteration, with "x-1" moves, and an extra non diagonal move (and potentially multiple diagonal moves).</li></ul><ul><li>we grow the number of potential paths by one at every iteration:<ul><li>we start with one (that lies at diagonal 0)</li><li>then we grow to 2 (one that lies at diagonal 1, one at diagonal -1)</li><li>then 3 (diagonals -2, 0, 2)</li><li>etcetera</li></ul></li></ul><ul><li>at a given iteration D, all the recorded path will end in one of the following diagonals: { ‚àíD, ‚àíD+2, ... D‚àí2, D }.<ul><li>we start with one path that lays at diagonal 0 (iteration D = 0 -&gt; diagonals {0})</li><li>at the first iteration we have two paths, one at diagonal -1, one at diagonal 1 (iteration D = 1 -&gt; diagonals {-1, 1})</li><li>at the next iteration we have three paths, one at diagonal -2, one at diagonal 0, one at diagonal 2 (iteration D = 2 -&gt; diagonals {-2, 0, 2})</li><li>etcetera</li></ul></li></ul><p>We're basically alternating diagonals (while also expanding at each iteration).</p><blockquote><p>All these observations are demonstrated in the <a href="http://www.xmailserver.org/diff2.pdf">original paper</a>.</p></blockquote><p>That's the whole algorithm! Let's see how to implement it in Swift.</p><h4>The Greedy LCS/SES Algorithm in Swift</h4><p>Since <code>formChanges</code> passes the computed end indexes of the common prefix of our two collection states, the first iteration has been done already:<br>computing the common prefix of the two collections is equivalent to finding the furthest path with <code>0</code> non diagonal moves.</p><p>All we have to do now is to store this first path somewhere.</p><h5>_SearchState</h5><p>As we've observed during the explanation of the algorithm, at every iteration we increase the potential paths by one, and one potential path at a given iteration is exactly a potential path from the previous iteration with one extra non-diagonal move.<br>Therefore we can describe each potential path by pointing at its last move, which is an <code>Endpoint</code> instance as we've defined before, and then refer to its previous path from the previous iteration.<br>This is exactly what the private <code>_SearchState</code> generic struct does.</p><p>This struct relies on an internal generic storage called <code>_LowerTriangularMatrix</code>:<br>by definition, a square matrix is called lower triangular if all the entries above the main diagonal are zero. Example:</p><pre><code>| * | <span class="number">0</span> | <span class="number">0</span> | <span class="number">0</span> |
 | * | * | <span class="number">0</span> | <span class="number">0</span> | 
 | * | * | * | <span class="number">0</span> | 
 | * | * | * | * |  
</code></pre><p>In order to optimize performance and allocation, this <code>_LowerTriangularMatrix</code> externally behaves like a real lower triangular matrix (with subscript and all), however internally is just an array of elements along with a <code>dimension</code> property (this is all this type needs to mirror a real lower triangular matrix).</p><p>Going back to <code>_SearchState</code>, the struct considers every row of its storage (which, again, is a lower triangular matrix) as the <em>search frontier</em> of each iteration, while the columns represent the furthest path on the <em>x</em>th diagonal for that search frontier.</p><p>In other words:</p><ul><li>the position <code>(0,0)</code> in the storage contains the final position of our furthest path with <code>0</code> non-diagonal moves starting at <code>(0,0)</code> in our game chart.</li><li>the positions <code>(1,0)</code> and <code>(1,1)</code> in the storage contain the furthest paths with <code>1</code> non-diagonal moves, the former contains the one that ends in diagonal -1, while the latter contains the one that ends in diagonal 1.</li><li>etcetera</li></ul><h5>The Algorithm</h5><p>Finally let's take a look at the algorithm.</p><p>Each line comes with extended explanation, to associate everything with what we've discussed so far.</p><pre><code><span class="keyword">private mutating func</span> formChangesCore&lt;Source: <span class="type">BidirectionalCollection</span>, 
                                      Target: <span class="type">BidirectionalCollection</span>&gt;(
  from a: <span class="type">Source</span>, to b: <span class="type">Target</span>,
  x: <span class="type">Source</span>.<span class="type">Index</span>, y: <span class="type">Target</span>.<span class="type">Index</span>,
  by areEquivalent: (<span class="type">Source</span>.<span class="type">Element</span>, <span class="type">Target</span>.<span class="type">Element</span>) -&gt; <span class="type">Bool</span>
) <span class="keyword">where</span>
  <span class="type">Source</span>.<span class="type">Element</span> == <span class="type">Target</span>.<span class="type">Element</span>, <span class="type">Source</span>.<span class="type">Index</span> == <span class="type">SourceIndex</span>, 
  <span class="type">Target</span>.<span class="type">Index</span> == <span class="type">TargetIndex</span>
{
  <span class="comment">// current furthest position coordinate, 
  // according to our collection common prefix.
  // a.k.a. the furthest path with `0` non-diagonal moves</span>
  <span class="keyword">var</span> (x, y) = (x, y)

  <span class="comment">// our Target Destination coordinates</span>
  <span class="keyword">let</span> (n, m) = (a.<span class="property">endIndex</span>, b.<span class="property">endIndex</span>)

  <span class="comment">// initialize the storage</span>
  <span class="keyword">var</span> v = <span class="type">_SearchState</span>&lt;<span class="type">Source</span>.<span class="type">Index</span>, <span class="type">Target</span>.<span class="type">Index</span>&gt;(consuming: &amp;pathStorage)

  <span class="comment">// put the end of the common prefix endpoint 
  // at position `(0,0)` of our storage</span>
  v.<span class="call">appendFrontier</span>(repeating: (x, y))

  <span class="comment">// set the iteration number</span>
  <span class="keyword">var</span> d = <span class="number">1</span>
  
  <span class="comment">// used later</span>
  <span class="keyword">var</span> delta = <span class="number">0</span>

  <span class="comment">// iteration body</span>
  outer: <span class="keyword">while true</span> {
    <span class="comment">// expand our storage to contain a new row of _search frontier_
    // a.k.a. the furthest paths endpoints of the `d`th iteration</span>
    v.<span class="call">appendFrontier</span>(repeating: (n, m))

    <span class="comment">// one of the observations of the algorithm was about the fact
    // that at a given iteration D, all the furthest paths would
    // lie at the diagonals { -D, -D + 2, ... D -2, D }
    // This observation explains the following stride</span>
    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="call">stride</span>(from: -d, through: d, by: <span class="number">2</span>) {

      <span class="comment">// if we're finding the leftmost new path, a.k.a. the one with
      // diagonal -d, or if we're finding the new furthest path at a
      // diagonal kth, which is not the right most new diagonal,
      // a.k.a. k == t, and if the furthest path in diagonal k-1 has
      // traveled our `target` collection less than or furthest path
      // in diagonal k+1 in our previous iteration...</span>
      <span class="keyword">if</span> k == -d || (k != d &amp;&amp; v[d - <span class="number">1</span>, k - <span class="number">1</span>].x &lt; v[d - <span class="number">1</span>, k + <span class="number">1</span>].x) {

        <span class="comment">// ...then we start computing our new furthest path by
        // reading the previous iteration furthest path at diagonal
        // k+1</span>
        (x, y) = v[d - <span class="number">1</span>, k + <span class="number">1</span>]

        <span class="comment">// if we are not at the edge, move down by one</span>
        <span class="keyword">if</span> y != m { b.<span class="call">formIndex</span>(after: &amp;y) }
      } <span class="keyword">else</span> {

        <span class="comment">// like above, but this time we use the previous iteration
        // furthest path at diagonal k-1</span>
        (x, y) = v[d - <span class="number">1</span>, k - <span class="number">1</span>]

        <span class="comment">// if we are not at the edge, move right by one</span>
        <span class="keyword">if</span> x != n { a.<span class="call">formIndex</span>(after: &amp;x) }
      }

      <span class="comment">// with the if/else above we have just "used" our non-diagonal
      // move of this iteration

      // now that we've moved either down or right by one, check if
      // we can move diagonally, and do it as long as you can.

      // find the common prefix, according to our comparison method, 
      // from the current position in the two collection states</span>
      <span class="keyword">let</span> matches = a[x..&lt;n].<span class="call">_commonPrefix</span>(with: b[y..&lt;m], 
                                           by: areEquivalent)

      <span class="comment">// our new furthest path at the *d*th iteration for diagonal 
      // *k*th is equivalent to the end of the prefix that we've
      // just found</span>
      (x, y) = (matches.<span class="number">0</span>.<span class="property">endIndex</span>, matches.<span class="number">1</span>.<span class="property">endIndex</span>)

      <span class="comment">// store the new endpoint</span>
      v[d, k] = (x, y)

      <span class="comment">// if this new endpoint matches the target destination...</span>
      <span class="keyword">if</span> x == n &amp;&amp; y == m {
        <span class="comment">// ...note down at which diagonal we've stopped at..</span>
        delta = k

        <span class="comment">// ...and end the algorithm.</span>
        <span class="keyword">break</span> outer
      }
    }
    <span class="comment">// if we haven't found found the target destination yet, 
    // increase the depth by one and iterate again.</span>
    d += <span class="number">1</span>
  }

  <span class="comment">// after finding the cheapest path at the *d*th iteration, on 
  // the *delta*th diagonal, convert our `_SearchState` instance
  // storage into the final `_CollectionChanges` instance.</span>
  <span class="keyword">self</span> = v.<span class="call">removeCollectionChanges</span>(a: a, b: b, d: d, delta: delta)
}
</code></pre><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h3>Conclusions</h3><p>There you have it: if you've come so far, congratulations! You now know exactly how Swift implements the diffing between two collections.</p><p>It took us a long journey to arrive here, however, for something non-trivial and error-prone like collection diffing, it's very good to have a native, efficient solution implemented right into the language itself.</p><p>Lastly, if you are an iOS or mac developer, I would like to remind you that you shouldn't use this in collection and table views:<br>with the upcoming iOS and macOS releases, we will have an even better API that takes care of diffing and more for us. You can watch and hear all about Collection and Table Diffable Data Sources in the WWDC19 session <a href="https://developer.apple.com/videos/play/wwdc2019/220/">here</a>, or, if you prefer an article form, you can read about them in <a href="https://twitter.com/johnsundell">John Sundell</a>'s article <a href="https://wwdcbysundell.com/2019/diffable-data-sources-first-look/">here</a>.</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p><h3>References</h3><ul><li><a href="https://forums.swift.org/t/ordered-collection-diffing/18933 ">The original pitch</a>.</li><li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0240-ordered-collection-diffing.md ">The Swift Evolution proposal</a>.</li><li>The proposal <a href="https://forums.swift.org/t/se-0240-ordered-collection-diffing/19514">review thread</a>.</li><li>The Swift implementation <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/Diffing.swift">here</a> and <a href="https://github.com/apple/swift/blob/a0421124f0de37d696e503c17c05afba19f74cf2/stdlib/public/core/CollectionDifference.swift">here</a>.</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/large-content-viewer</guid><title>iOS 13 Large Content Viewer üîé</title><description></description><link>https://www.fivestars.blog/articles/large-content-viewer</link><pubDate>Tue, 9 Jul 2019 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>When a user uses one of the Larger Text Accessibility Sizes, everything on the screen is huge.</p><p>Some UI elements, however, must stay small, even in these cases:<br>every inch of screen estate is incredibly precious.</p><p>Among such UI elements, for example, we have navigation bars, tab bars, toolbars, and the status bar:</p><img src="https://www.fivestars.blog/assets/posts/large-content-viewer/bars.png" alt="bars"/><blockquote><p>From left to right: Safari.app's Toolbar, Contacts.app's Navigation Bar, iOS Springboard's Status Bar, and News.app's Tab Bar.</p></blockquote><p>Still, the problem remains:<br>users with large text sizes aren't able to read any of those elements. To overcome this, in iOS 11 Apple has introduced the Large Content Viewer:</p><img src="https://www.fivestars.blog/assets/posts/large-content-viewer/large-contents.png" alt="large-contents"/><blockquote><p>The same apps as in the image above, now with Large Content Viewer: imagine a finger on the bars.</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The Large Content Viewer</h2><p>Tap and hold your finger on any bar element and, as long as you're using an accessibility text size, you'll get this big HUD, named Large Content Viewer, showing you both the element icon and title.</p><p>While all of this is awesome, any other UI element was left behind...until now.</p><h3>UILargeContentViewerItem</h3><p>Coming with iOS 13 is a new UIKit protocol named <code>UILargeContentViewerItem</code>, which lets <strong>any</strong> UI element describe what its Large Content Viewer should be.</p><p>The best part is that <a href="https://developer.apple.com/documentation/uikit/uilargecontentvieweritem#conforming-types">most of native UIKit elements</a> (read: any <code>UIView</code> subclass) already conform to this protocol. Let's have a look at its requirements:</p><pre><code><span class="keyword">@available</span>(iOS <span class="number">13.0</span>, *)
<span class="keyword">public protocol</span> UILargeContentViewerItem: <span class="type">NSObjectProtocol</span> {

    <span class="keyword">var</span> showsLargeContentViewer: <span class="type">Bool</span> { <span class="keyword">get</span> }

    <span class="keyword">var</span> largeContentTitle: <span class="type">String</span>? { <span class="keyword">get</span> }

    <span class="keyword">var</span> largeContentImage: <span class="type">UIImage</span>? { <span class="keyword">get</span> }

    <span class="keyword">var</span> scalesLargeContentImage: <span class="type">Bool</span> { <span class="keyword">get</span> }

    <span class="keyword">var</span> largeContentImageInsets: <span class="type">UIEdgeInsets</span> { <span class="keyword">get</span> }
}
</code></pre><ul><li><strong>showsLargeContentViewer</strong> Whether the UI element shows a Large Content Viewer. Return <code>false</code> to have the default behavior (and not show anything).</li><li><strong>largeContentTitle</strong> This is the title shown in the large content viewer, optional.</li><li><strong>largeContentImage</strong> This is the image shown in the large content viewer, optional.</li><li><strong>scalesLargeContentImage</strong> Let iOS know whether the image should be scaled to a size appropriate for the Large Content Viewer, or show the image at its intrinsic size.</li><li><strong>largeContentImageInsets</strong> In case you need to use insets to center the image in the HUD, you can declare them with this property.</li></ul><h3>Disclaimer</h3><p>As stated above, most of your UI already conforms to this protocol, however this doesn't mean that everything in our UI should have its own Large Content Viewer:<br>Apple really wants us to use Dynamic Type as much as possible, and only resort to the Large Content Viewer in very special UI elements (like the UIKit bars we've seen above).</p><p>With the disclaimer out of the way, let's see how we can finally display this HUD.</p><h3>Adoption</h3><p>First of all, we need to let UIKit know that our elements support Large Content Viewer:<br>we do so by setting our views <code>showsLargeContentViewer</code> property to <code>true</code>. While most of UIKit elements conform to the <code>UILargeContentViewerItem</code> protocol, most of them have this option turned off by default.</p><pre><code><span class="keyword">let</span> myView = <span class="type">UIView</span>()
<span class="comment">// ... setup view here</span>
myView.<span class="property">showsLargeContentViewer</span> = <span class="keyword">true</span>
</code></pre><blockquote><p>There's no way to currently do this via storyboard. If you, too, feel this should be added, please write Apple a <a href="https://feedbackassistant.apple.com/feedback/6438145">feedback</a>.</p></blockquote><p>Most views, like <code>UILabel</code>s, <code>UIImage</code>s, <code>UIButton</code>s, and more, already know what they should provide, therefore there's no need to set their <code>largeContentTitle</code> and <code>largeContentImage</code> properties.<br>Regardless, in case you do:</p><pre><code><span class="keyword">let</span> myView = <span class="type">UIView</span>()
<span class="comment">// ... setup view here</span>
myView.<span class="property">largeContentTitle</span> = <span class="string">"Five Stars"</span>
myView.<span class="property">largeContentImage</span> = <span class="type">UIImage</span>(systemName: <span class="string">"star.fill"</span>)
</code></pre><blockquote><p>If you've never seen a <code>UIImage(systemName:)</code> before, have a look at the <a href="https://www.fivestars.blog/articles/ios-dark-mode-how-to/">Dark Mode article</a> where I also talk about Apple's brand new System Symbols.</p></blockquote><p>Lastly, we must add a new <code>UILargeContentViewerInteraction</code> to our views:</p><pre><code><span class="keyword">let</span> myView = <span class="type">UIView</span>()
<span class="comment">// ... setup view here</span>
myView.<span class="call">addInteraction</span>(<span class="type">UILargeContentViewerInteraction</span>())
</code></pre><blockquote><p>Like we've seen in the <a href="https://www.fivestars.blog/articles/uicontextmenuinteraction/">Context Menu article</a>, we don't need to retain these new interactions.</p></blockquote><p>And that's it! Now we're fully supporting the new Large Content Viewer üöÄ.</p><h3>Debugging</h3><p>There are essentially two ways in order to try out this new <em>custom</em> HUD: 1. run your app in a device with one of the accessibility sizes active 2. use the simulator and change the size with the new Environment Overrides button (more on this in the <a href="https://www.fivestars.blog/articles/ios-dark-mode-how-to/">Dark Mode article</a>).</p><p>I like the latter, especially since you can also change the simulator size preference by going in the settings.app and change the accessibility size there (no need to change it at every app launch via Environment Overrides).</p><p>And here's the result in <a href="https://apps.apple.com/us/developer/federico-zanetello/id1053443073">my own apps</a>:</p><img src="https://www.fivestars.blog/assets/posts/large-content-viewer/metro-large-content-viewer.gif" alt="metro-large-content-viewer"/><blockquote><p>Cool, isn't it? #A11y</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Apple is putting an incredible amount of effort to make it easy for developers to make their app more accessible: this new Large Content Viewer is one of many examples of that.</p><p>For more information, watch the WWDC19 session <a href="https://developer.apple.com/videos/play/wwdc2019/261/">Large Content Viewer- Ensuring Readability for Everyone</a> and feel free to watch any other wwdc accessibility session available as well.</p><p>Lastly, if you, too, believe it would be very useful to let developers use this native HUD in other scenarios as well, <a href="https://github.com/SVProgressHUD/SVProgressHUD">without</a> <a href="https://github.com/JonasGessner/JGProgressHUD">the</a> <a href="https://github.com/relatedcode/ProgressHUD">need</a> <a href="https://github.com/johnlui/SwiftNotice">to</a> <a href="https://github.com/pkluz/PKHUD">use</a> <a href="https://github.com/krimpedance/KRProgressHUD">an</a> <a href="https://github.com/harikrishnant1991/JHProgressHUD">external</a> <a href="https://github.com/fifyrio/XYProgressHUD">dependecy</a>, I encourage you to write Apple a <a href="https://feedbackassistant.apple.com/feedback/6438145">feedback</a> like I did.</p><p>As always, if you're going to implement this accessibility feature, I'd love to see it!<br><a href="https://twitter.com/zntfdr">Hit me up on Twitter</a> with your work ü§ó</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/uicontextmenuinteraction</guid><title>Behind The Scenes Of Context Menus</title><description></description><link>https://www.fivestars.blog/articles/uicontextmenuinteraction</link><pubDate>Mon, 24 Jun 2019 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>iOS 13 comes with a fresh interpretation of Peek and Pop called <a href="https://developer.apple.com/design/human-interface-guidelines/ios/controls/context-menus/">Context Menus</a>.</p><img src="https://www.fivestars.blog/assets/posts/uicontextmenuinteraction/splashscreen.gif" alt="contextMenus"/><blockquote><p>The new menus, in both light and dark mode.</p></blockquote><p>What‚Äôs super cool about Context Menus is that they‚Äôre available on <strong>all</strong> iOS 13 and iPadOS devices, regardless of the 3D Touch capability.</p><p>Another key difference with Peek &amp; Pop is in the action menu: the menu is now displayed immediately, we don't have to swipe up anymore (as we had to previously).</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h3>How It Works</h3><p>Context Menus can be triggered in two ways: via long press and, if the device supports 3D Touch, also via force touch.</p><p>Note that I‚Äôve said <em>and</em>, not <em>or</em>:<br>If a device supports 3D Touch, then it can quickly trigger the Context Menu via force touch, however, the long press option is still available üëçüèª</p><blockquote><p>One of the main reasons why Peek and Pop didn‚Äôt make a huge splash was discoverability.3D Touch features are available exclusively on selected iPhones, Context Menus are everywhere, <em>including</em> iPads.While this doesn‚Äôt make the feature more discoverable by itself, more and more people will "stumble" upon it and the start using it throughout the system: they‚Äôll expect your app to support it, too!</p></blockquote><h2>How It Really Works: UIContextMenuInteraction</h2><p>As for Peek and Pop, this new interaction comes with, well, a new interaction: please welcome <a href="https://developer.apple.com/documentation/uikit/uicontextmenuinteraction"><code>UIContextMenuInteraction</code></a>.</p><p><code>UIContextMenuInteraction</code> is very similar to the old (Peek and Pop‚Äôs) <a href="https://developer.apple.com/documentation/uikit/uipreviewinteraction "><code>UIPreviewInteraction</code></a>:<br>all it needs is a <code>UIContextMenuInteractionDelegate</code> and a view.</p><pre><code><span class="keyword">class</span> MyViewController: <span class="type">UIViewController</span>, 
                        <span class="type">UIContextMenuInteractionDelegate</span> {
  <span class="keyword">override func</span> viewDidLoad() {
    <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()

    <span class="comment">// üëáüèª no need to retain this like we had to with Peek and Pop‚Äôs UIPreviewInteraction! ü§©</span>
    <span class="keyword">let</span> interaction = <span class="type">UIContextMenuInteraction</span>(delegate: <span class="keyword">self</span>)
    view.<span class="call">addInteraction</span>(interaction)
  }
}
</code></pre><p>How the menu is triggered (via force touch, long press, or else), is completely abstracted away:<br>all we get, via the delegate, are interaction events. Let‚Äôs take a look at them.</p><h3>UIContextMenuInteractionDelegate</h3><p>Similar to the old <code>UIPreviewInteractionDelegate</code> for Peek and Pop, <code>UIContextMenuInteractionDelegate</code> comes with both optional and required methods:</p><pre><code><span class="keyword">@available</span>(iOS <span class="number">13.0</span>, *)
<span class="keyword">public protocol</span> UIContextMenuInteractionDelegate : <span class="type">NSObjectProtocol</span> {
  
  <span class="keyword">func</span> contextMenuInteraction(<span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>, configurationForMenuAtLocation location: <span class="type">CGPoint</span>) -&gt; <span class="type">UIContextMenuConfiguration</span>?

  optional <span class="keyword">func</span> contextMenuInteraction(<span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>, previewForHighlightingMenuWith configuration: <span class="type">UIContextMenuConfiguration</span>) -&gt; <span class="type">UITargetedPreview</span>?

  optional <span class="keyword">func</span> contextMenuInteraction(<span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>, previewForDismissingMenuWith configuration: <span class="type">UIContextMenuConfiguration</span>) -&gt; <span class="type">UITargetedPreview</span>?

  optional <span class="keyword">func</span> contextMenuInteraction(<span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>, willCommitWithAnimator animator: <span class="type">UIContextMenuInteractionCommitAnimating</span>)

  optional <span class="keyword">func</span> contextMenuInteractionWillPresent(<span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>)

  optional <span class="keyword">func</span> contextMenuInteractionDidEnd(<span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>)
}
</code></pre><ul><li><strong>configurationForMenuAtLocation</strong><ul></ul></li></ul><p>This is the only <em>required</em> method:<br> this is also the first method that is called when a new Context Menu Interactions starts.<br><br>As the name says, the method is asking us to provide a Context Menu for the given view (you can access to the view directly from the passed <code>interaction</code>).<br><br> Returning <code>nil</code> is equivalent to tell the user that, at this time, there‚Äôs no menu to display for that view. Doing so will stop the interaction immediately (no more delegate methods will be called).<br><br><br>Returning a Context Menu Configuration (please refer to <a href="https://kylebashour.com/posts/ios-13-context-menus">this great article</a> by fellow developer <a href="https://twitter.com/kylebshr ">Kyle Bashour</a> on how), will let the system know that we have a menu to display, and the interaction can continue.</p><ul><li><strong>previewForHighlightingMenuWith</strong><ul></ul></li></ul><p>This is the first <em>optional</em> method:<br><br>once we‚Äôve returned a menu, the system gives us a chance to choose which view to focus on.<br><br> This view will be put on focus (along with the context menu), while everything else on the screen will be blurred out (like in the screenshots at the beginning of this article).<br><br><br>By default (without implementing this method, or when returning <code>nil</code>), the focused view will be the one where the <code>UIContextMenuInteraction</code> has been triggered to.</p><p>I n case you‚Äôd like to have a completely new view displayed instead, <a href="https://twitter.com/kylebshr ">Kyle</a> shows how to do so in the ‚Äú<em>Providing a custom preview</em>‚Äú chapter <a href="https://kylebashour.com/posts/ios-13-context-menus">of his article</a>.</p><ul><li><strong>contextMenuInteractionWillPresent </strong> This is the second <em>optional</em> method: it‚Äôs here to let us know that the menu is about to be presented.</li></ul><p>We can use this method call as we please: for example, we might want to track a context menu ‚Äústate‚Äù or similar. It‚Äôs entirely up to you. There‚Äôs a high chance that you don't need this method, but it‚Äôs nice to have it in case you do.</p><p>Once we arrive here, the menu is displayed.</p><ul><li><strong>previewForDismissingMenuWith</strong><ul></ul></li></ul><p>This is the third <em>optional</em> method:<br> it is called when the the Context Menu is being dismissed.</p><p>Exactly like for <code>previewForHighlightingMenuWith</code>, this method is asking us to provide which view the menu is going to dismiss into.</p><ul><li><strong>willCommitWithAnimator</strong><ul></ul></li></ul><p>This is the fourth <em>optional</em> method:<br><br>UIKit calls this method when the user taps in the focused view.</p><p>Consider this as an equivalent to the Pop interaction in Peek and Pop.</p><p>In this method we‚Äôre passed an <code>animator</code> of type <code>UIContextMenuInteractionCommitAnimating</code>, which we can use to inject any custom animations that we want to run alongside the context menu dismissal animations.</p><p>Note that this method is called before <code>previewForDismissingMenuWith</code>.</p><ul><li><strong>contextMenuInteractionDidEnd </strong> This is last <em>optional</em> method:<ul></ul></li></ul><p>it lets us know when a Context Menu interaction has ended, dual to <code>contextMenuInteractionWillPresent</code>.</p><p>Again, UIKit doesn't expect us to do anything at this point, it‚Äôs entirely up to us to give meaning to this call.</p><h3>UIContextMenuInteraction Playground</h3><p>While it‚Äôs very nice to have all of the above documented, we all know the saying ‚Äú<em>a playground is worth a thousand words</em>‚Äù:</p><img src="https://www.fivestars.blog/assets/posts/uicontextmenuinteraction/simple-playground.png" alt="playground screenshots"/><blockquote><p>The Playground.</p></blockquote><p>In this playground you'll find a view controller with one subview offering the new Context Menu interaction:<br>the view controller adopts all the methods described above and logs each one of them when called.</p><p>You can run it in order to get familiar with all the possible flows, for example:</p><ul><li>trigger the context menu and tap on a menu action</li><li>trigger the context menu and tap on the focused view</li><li>trigger the context menu and tap on the background</li></ul><p>Your app is expected to behave differently in each of these scenarios.</p><pre><code><span class="keyword">import</span> UIKit
<span class="keyword">import</span> PlaygroundSupport

<span class="keyword">final class</span> MyViewController: <span class="type">UIViewController</span>,
                               <span class="type">UIContextMenuInteractionDelegate</span> {
  <span class="keyword">override func</span> loadView() {
    <span class="keyword">let</span> view = <span class="type">UIView</span>()
    view.<span class="property">backgroundColor</span> = .<span class="dotAccess">white</span>

    <span class="keyword">let</span> interactionView = <span class="type">UIView</span>()
    interactionView.<span class="property">backgroundColor</span> = .<span class="dotAccess">systemYellow</span>
    interactionView.<span class="property">translatesAutoresizingMaskIntoConstraints</span> = <span class="keyword">false

    let</span> interaction = <span class="type">UIContextMenuInteraction</span>(delegate: <span class="keyword">self</span>)
    interactionView.<span class="call">addInteraction</span>(interaction)
    <span class="call">print</span>(<span class="string">"interaction added"</span>)

    view.<span class="call">addSubview</span>(interactionView)

    <span class="type">NSLayoutConstraint</span>.<span class="call">activate</span>([
      interactionView.<span class="property">centerXAnchor</span>.<span class="call">constraint</span>(equalTo: view.<span class="property">centerXAnchor</span>),
      interactionView.<span class="property">centerYAnchor</span>.<span class="call">constraint</span>(equalTo: view.<span class="property">centerYAnchor</span>),
      interactionView.<span class="property">heightAnchor</span>.<span class="call">constraint</span>(equalTo: interactionView.<span class="property">widthAnchor</span>),
      interactionView.<span class="property">heightAnchor</span>.<span class="call">constraint</span>(equalToConstant: <span class="number">150</span>)
      ])

    <span class="keyword">self</span>.<span class="property">view</span> = view
  }

  <span class="comment">// MARK: UIContextMenuInteractionDelegate</span>

  <span class="keyword">func</span> contextMenuInteraction(
    <span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>,
    configurationForMenuAtLocation location: <span class="type">CGPoint</span>) -&gt; <span class="type">UIContextMenuConfiguration</span>? {
    <span class="call">print</span>(<span class="string">"configurationForMenuAtLocation"</span>)

    <span class="keyword">return</span> <span class="type">UIContextMenuConfiguration</span>(identifier: <span class="keyword">nil</span>,
                                      previewProvider: <span class="keyword">nil</span>,
                                      actionProvider: { [<span class="keyword">weak self</span>] <span class="keyword">_ in
      return self</span>?.<span class="call">makeContextMenu</span>()
    })
  }

  <span class="keyword">private func</span> makeContextMenu() -&gt; <span class="type">UIMenu</span> {
    <span class="keyword">let</span> blog = <span class="type">UIAction</span>(__title: <span class="string">"fivestars.blog"</span>,
                         image: <span class="type">UIImage</span>(systemName: <span class="string">"star.fill"</span>)) { <span class="keyword">_ in</span>
                          <span class="call">print</span>(<span class="string">"https://fivestars.blog"</span>)
    }

    <span class="keyword">let</span> twitter = <span class="type">UIAction</span>(__title: <span class="string">"Federico Zanetello"</span>,
                           image: <span class="type">UIImage</span>(systemName: <span class="string">"at"</span>)) { <span class="keyword">_ in</span>
                            <span class="call">print</span>(<span class="string">"https://twitter.com/zntfdr"</span>)
    }

    <span class="keyword">return</span> <span class="type">UIMenu</span>(__title: <span class="string">""</span>,
                  image: <span class="keyword">nil</span>,
                  identifier: <span class="keyword">nil</span>,
                  children: [blog, twitter])
  }

  <span class="keyword">func</span> contextMenuInteraction(
    <span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>,
    previewForHighlightingMenuWith configuration: <span class="type">UIContextMenuConfiguration</span>)
    -&gt; <span class="type">UITargetedPreview</span>? {
    <span class="call">print</span>(<span class="string">"previewForHighlightingMenuWith"</span>)
    <span class="keyword">return nil</span>
  }

  <span class="keyword">func</span> contextMenuInteraction(
    <span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>,
    previewForDismissingMenuWith configuration: <span class="type">UIContextMenuConfiguration</span>)
    -&gt; <span class="type">UITargetedPreview</span>? {
    <span class="call">print</span>(<span class="string">"previewForDismissingMenuWith"</span>)
    <span class="keyword">return nil</span>
  }

  <span class="keyword">func</span> contextMenuInteraction(
    <span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>,
    willCommitWithAnimator animator: <span class="type">UIContextMenuInteractionCommitAnimating</span>) {
    <span class="call">print</span>(<span class="string">"willCommitWithAnimator"</span>)
  }

  <span class="keyword">func</span> contextMenuInteractionWillPresent(
    <span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>) {
    <span class="call">print</span>(<span class="string">"willPresent"</span>)
  }

  <span class="keyword">func</span> contextMenuInteractionDidEnd(
    <span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>) {
    <span class="call">print</span>(<span class="string">"didEnd"</span>)
  }
}

<span class="type">PlaygroundPage</span>.<span class="property">current</span>.<span class="property">liveView</span> = <span class="type">MyViewController</span>()
<span class="type">PlaygroundPage</span>.<span class="property">current</span>.<span class="property">needsIndefiniteExecution</span> = <span class="keyword">true</span>
</code></pre><blockquote><p>Find the gist <a href="https://gist.github.com/zntfdr/9bdbe0f7918cb1e63e816d3ff0b50191">here</a>.</p></blockquote><h2>UIContextMenuInteraction Custom Behavior</h2><p>Now that we have a firm grasp on how Context Menus work, let me ask you: is it possible to use this new interaction for something entirely custom?</p><p>The answer is yes, and it‚Äôs very simple to do so.</p><p>As you might recall, the only required delegate method is <code>configurationForMenuAtLocation</code>, which is asking us to provide a menu for a given view.<br><br>What is important to pay attention to is the parameters passed in the method:<br>an interaction (<code>UIContextMenuInteraction</code>) and a location (<code>CGPoint</code>).</p><p>Thanks to the former we obtain the view where the interaction has been triggered from, meanwhile, with the latter, we get the exact interaction touch point on that view.</p><p>Once we have these two pieces of information, we can return <code>nil</code> to the method, which stops the context menu interaction, and then we can freely carry on with our own custom interaction instead.</p><h3>Custom Interaction Playground</h3><img src="https://www.fivestars.blog/assets/posts/uicontextmenuinteraction/stars-playground.png" alt="playground screenshots"/><blockquote><p>Stars, stars everywhere!</p></blockquote><p>As an example of custom behavior, in this playground I use the new interaction to draw stars in the main view: long press or force touch anywhere and a star is drawn at that exact position.</p><p>The possibilities of what you can do with it are truly limitless.</p><pre><code><span class="keyword">import</span> UIKit
<span class="keyword">import</span> PlaygroundSupport

<span class="keyword">final class</span> MyViewController: <span class="type">UIViewController</span>,
                               <span class="type">UIContextMenuInteractionDelegate</span> {
  <span class="keyword">override func</span> loadView() {
    <span class="keyword">let</span> view = <span class="type">UIView</span>()
    view.<span class="property">backgroundColor</span> = .<span class="dotAccess">white</span>

    <span class="keyword">let</span> contextMenuInteraction = <span class="type">UIContextMenuInteraction</span>(delegate: <span class="keyword">self</span>)
    view.<span class="call">addInteraction</span>(contextMenuInteraction)

    <span class="keyword">self</span>.<span class="property">view</span> = view
  }

  <span class="comment">// MARK: UIContextMenuInteractionDelegate</span>

  <span class="keyword">func</span> contextMenuInteraction(
    <span class="keyword">_</span> interaction: <span class="type">UIContextMenuInteraction</span>,
    configurationForMenuAtLocation location: <span class="type">CGPoint</span>) -&gt; <span class="type">UIContextMenuConfiguration</span>? {
    <span class="call">addLabel</span>(text: <span class="string">"‚≠êÔ∏è"</span>, at: location)
    <span class="keyword">return nil</span>
  }

  <span class="keyword">private func</span> addLabel(text: <span class="type">String</span>,
                        at location: <span class="type">CGPoint</span>) {
    <span class="keyword">let</span> label = <span class="type">UILabel</span>()
    label.<span class="property">text</span> = text
    label.<span class="property">textAlignment</span> = .<span class="dotAccess">center</span>
    label.<span class="property">font</span> = .<span class="call">preferredFont</span>(forTextStyle: .<span class="dotAccess">largeTitle</span>)
    label.<span class="property">frame</span>.<span class="property">size</span> = <span class="type">CGSize</span>(width: <span class="number">40</span>, height: <span class="number">25</span>)

    view.<span class="call">addSubview</span>(label)
    label.<span class="property">center</span> = location
  }
}

<span class="type">PlaygroundPage</span>.<span class="property">current</span>.<span class="property">liveView</span> = <span class="type">MyViewController</span>()
<span class="type">PlaygroundPage</span>.<span class="property">current</span>.<span class="property">needsIndefiniteExecution</span> = <span class="keyword">true</span>
</code></pre><blockquote><p>Find the gist <a href="https://gist.github.com/zntfdr/c5da8dd09513d383606f9c7d0c78a44c">here</a>.</p></blockquote><blockquote><p>A real application example can be found in <a href="https://apps.apple.com/us/developer/federico-zanetello/id1053443073">my metro apps</a>:by customizing this interaction, users can quickly start a journey from wherever they are, known via GPS location, to the metro station they tap into with the new gesture.</p></blockquote><p>This gesture enables users to skip several steps at once:<br>by adding something alike in your app, your users, too, can get exactly what they need from your app within <strong>seconds</strong> from the app launch! üöÄ</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h3>Conclusions</h3><p><code>UIContextMenuInteraction</code> is a new, welcome take on Peek and Pop that will surely see more widespread adoption and use across many apps.<br><br>Even with the default behavior, this is a clear step in the right direction: I look forward to try it in your apps!</p><p>Lastly, if you're going to implement a custom interaction, <a href="https://twitter.com/zntfdr ">please let me know on Twitter</a>! I would love to see how you're using it ü§©</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p><p>PS<br>If this article feels strangely familiar, it's because it is:<br>this article is the 2019 edition of the great <a href="https://krakendev.io/uipreviewinteraction">UIPreviewInteraction article</a> by <a href="https://twitter.com/krakendev ">Hector Matos</a>, back from 2016(!). Time flies.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/what-s-new-in-swift-5-1</guid><title>What's New In Swift 5.1 üèé</title><description></description><link>https://www.fivestars.blog/articles/what-s-new-in-swift-5-1</link><pubDate>Wed, 12 Jun 2019 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Among tons of new shiny things announced last week at WWDC19 (ü§Ø), the first beta of Xcode 11 with Swift 5.1 was delivered.</p><p>Even though this is a dot release, Swift 5.1 brings exciting new features and enhancements, affecting every single Swift codebase out there.</p><p>For my company monthly talk I've decided to present what's new in Swift 5.1 in a simple and concise format, with actual example code.</p><p>You can see the whole presentation slides here:</p><p><a href="https://speakerdeck.com/zntfdr/whats-new-in-swift-5-dot-1"><img src="https://www.fivestars.blog/assets/posts/what-s-new-in-swift-5-1/first-slide.jpg" alt="slides"/></a></p><blockquote><p>Check out the full slides at <a href="https://speakerdeck.com/zntfdr/whats-new-in-swift-5-dot-1">SpeakerDeck</a></p></blockquote><blockquote><p>Be aware that I did <em>not</em> talk about the new features that Apple has sneakily shipped with Xcode 11, as those did not go throughout the normal evolution process and can still change.If you're interested in those, as you should, since they're a fundamental part to understand how SwiftUI works, you can check <a href="https://www.swiftbysundell.com/posts/the-swift-51-features-that-power-swiftuis-api">this</a> awesome article by <a href="https://www.swiftbysundell.com/posts/the-swift-51-features-that-power-swiftuis-api">John Sundell</a>.</p></blockquote><p>You can also download the slides, along with other materials, in this new <a href="https://github.com/zntfdr/talks"><code>talks</code> repository</a> that I've just created (hope to add more and more talks soon!).</p><p>Obviously the slides alone is not like being there during the presentation, still, if you have any feedback, please <a href="https://twitter.com/zntfdr">let me know</a>!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/ios-dark-mode-how-to</guid><title>How To Adopt Dark Mode In Your iOS App üåô</title><description></description><link>https://www.fivestars.blog/articles/ios-dark-mode-how-to</link><pubDate>Tue, 11 Jun 2019 00:00:00 +0700</pubDate><content:encoded><![CDATA[<img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/metroapps.png" alt="metroapps"/><blockquote><p>My <a href="https://itunes.apple.com/app/bangkok-metro/id1095112370">metro app</a>, both in dark and light mode.</p></blockquote><blockquote><p>This article is also available in <a href="https://qiita.com/tamappe/items/3bf89a55ab85d0488b8a">Japanese üáØüáµ</a>.</p></blockquote><p>Rejoice! iOS 13 comes with Dark Mode! ü§©</p><p>I've just finished adopting the new appearance in my own apps, and I've learned a few things along the way: let‚Äôs see how you can do it, too!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Two Steps Back First</h2><p>Before diving in, we need to be aware of a few things:<br>In order to give our users the best experience, it is really important that you don‚Äôt skip this part. Ready? Let‚Äôs go!</p><h3>Requirements</h3><p>For your app to support Dark Mode, it must: 1. <strong>Have been built and released with Xcode 11 </strong><br> If you use Xcode 10 (or earlier), the app will always display its normal appearance, even on devices with Dark Mode enabled. 2. <strong>Run on an iOS 13 device</strong><br> Only devices running iOS 13 (or later) support Dark Mode, previous versions of iOS will resort to the default appearance.<br> You cannot enforce Dark Mode on an older iOS over the default appearance (actually, <a href="https://rambo.codes/ios/2018/10/03/unleashing-the-power-of-asset-catalogs-and-bundles-on-ios.html">you can</a>, however it involves creating a lot of custom logic to do so, it‚Äôs not worth it).</p><blockquote><p>‚ö†Ô∏è Here's another way to look at it: if your app has not been updated with Dark Mode support by the time iOS 13 launches, the app will always display its default appearance, regardless of the iOS system settings. If your users have enabled Dark Mode and your app doesn‚Äôt support it yet, your app will flash your users with that bright default interface! üôà</p></blockquote><blockquote><p>Using Apple words: ‚Äú<em>You really don't want to be that one light appearance that's stuck in dark appearance</em>‚Äù.</p></blockquote><h3>Your App Supports Dark Mode Already</h3><p>This is both the cool and scary part:<br>Once the (two!) requirements above have been fulfilled, whenever Dark Mode is enabled, your UI will automatically switch appearance.</p><p>This is awesome, because it means that we get a lot of work done for free:<br>however, if we don‚Äôt make sure that our app looks good in dark mode, some of our UI will certainly look weird, probably with bright shiny colors, even in this new appearance. This would be a really bad experience for your users, read on to avoid this.</p><h3>You Can Force One Appearance Over The Other</h3><p>If you really wish to avoid adopting dark mode in your app, drop the ‚Äúlight mode‚Äù indefinitely in favor of dark mode, or simply postpone your dark mode adoption to another time, add a new key <code>UIUserInterfaceStyle</code> in your app <code>info.plist</code> and set its value to <code>Light</code> or <code>Dark</code>.</p><blockquote><p>Another way to do so would be to keep shipping your app with Xcode 10 üòÜ</p></blockquote><h3>Don‚Äôt Force One Appearance Over The Other</h3><p>Using Apple words: ‚Äú<em>Only a small subset of apps really should be dark all the time, and those are media-centric or content-creation apps</em>‚Äú. Unless you have a very good reason to offer just one interface appearance, make sure to always respect the system preference. It doesn‚Äôt matter how much you prefer one over the other.</p><blockquote><p>Apple allows you to have an in-app setting where the user can choose which mode to use in your app, regardless of the system preference: again, unless your app has a very good reason to do so, the best experience is to respect the system mode. Don‚Äôt offer unnecessary, redundant settings.</p></blockquote><h3>Dark Mode Is Not The Only New Mode</h3><p>This might have not hit the press as much as Dark Mode, however iOS has always had two modes: default and high contrast (you can enable this in any iOS device by going to <code>Settings &gt; Accessibility &gt; Increase Contrast</code>, tap also on <code>General</code> if you're still running iOS 12).</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/high-contrast.png" alt="high-contrast"/><blockquote><p>Left: iMessage in high contrast. Right: iMessage in the default appearance.</p></blockquote><p>While you might be able to read with ease both left and right images, for someone else having some help (read: high contrast) would be great, for others it is the only way possible to read anything at all.</p><p>Now that we are aware of this, it‚Äôs clear that we have to take care of four appearances:</p><ol><li>Default</li><li>Default High Contrast</li><li>Dark Mode</li><li>Dark Mode High Contrast</li></ol><p>This is another reason why it is really important to stick with default UIKit (or SwiftUI) elements as much as possible: - if we do so, we get support for all of these appearances for free. - If we create our own colors and UI components, we must take care of each mode, element, and element state ourselves. This work grows exponentially.</p><h2>Let‚Äôs Get Started!</h2><p>If you‚Äôve made it so far, congratulations! üéâ From now on we will talk about what you can do, right now, to support the new interface appearances.</p><h3>Step 1: Colors</h3><p>At the end of the day, all our app do is throwing colors at the screen: getting colors right means having your app 99% ready for Dark Mode.</p><h4>(Dynamic) System Colors</h4><p>Until iOS 12, <code>UIColor</code> has offered us a few simple colors like <code>.red</code>, <code>.yellow</code> etcetera: you don‚Äôt want to use these colors any longer. These colors are <em>static</em>, which means that their tint never changes.</p><p>With iOS 13 and Xcode 11, Apple is introducing System Colors:</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/system-colors-rainbow.png" alt="rainbow"/><blockquote><p>Top: System Colors in the default interface. Bottom: System Colors in dark mode.Xcode Playground <a href="https://gist.github.com/zntfdr/bb8173970414d4b4e90d3a6b18f01e4b">here</a>.</p></blockquote><p>From left to right: <code>.systemBlue</code>, <code>.systemGray</code>, <code>.systemGreen</code>, <code>.systemIndigo</code>, <code>.systemOrange</code>, <code>.systemPink</code>, <code>.systemPurple</code>, <code>.systemRed</code>, <code>.systemTeal</code>, <code>.systemYellow</code>.</p><p>As you can see from the picture above, contrary to the old static colors, system colors are dynamic: their tint will adapt to the current system interface.</p><p>But those are not the only new colors! We also have a full range of grayscale colors, where the differente between dark and light appearance is even more obvious:</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/system-colors-grayscale.png" alt="grayscale"/><blockquote><p>Top: System Colors Grayscale in the default interface. Bottom: System Colors Grayscale in dark mode.Xcode Playground <a href="https://gist.github.com/zntfdr/c21da4fb2bc60c27a6c7cd0227543f8a">here</a>.</p></blockquote><p>From left to right: <code>.systemGray</code>, <code>.systemGray2</code>, <code>.systemGray3</code>, <code>.systemGray4</code>, <code>.systemGray5</code>, <code>.systemGray6</code>.</p><blockquote><p>All dynamic system colors also come with a special tint for high contrast. #a11y</p></blockquote><p>By using these dynamic colors (e.g. <a href="https://developer.apple.com/documentation/uikit/uicolor/3173141-systemblue"><code>UIColor.systemBlue</code></a> instead of <code>UIColor.blue</code>), your interface will automatically pick the right tint for the current system preference, no further work required! üéâ</p><h4>(Dynamic) Semantic Colors</h4><p>Xcode 10 and earlier offered two colors named <code>.lightText</code> and <code>.darkText</code>.<br>The use of these is now discuraged, as they're static, and will not adapt to any interface. Instead, from Xcode 11 we a full new suite of semantic colors such as <a href="https://developer.apple.com/documentation/uikit/uicolor/3173131-label"><code>UIColor.label</code></a>, <a href="https://developer.apple.com/documentation/uikit/uicolor/3173134-placeholdertext"><code>UIColor.placeholderText</code></a>, <a href="https://developer.apple.com/documentation/uikit/uicolor/3173140-systembackground"><code>UIColor.systemBackground</code></a> etc.</p><p>Instead of describing a shade, these colors names are based on their intended usage: most of the time you want to use these, as, like system colors, they‚Äôre dynamic.</p><p>Most importantly, semantic colors ensure that your app has a similar appearance to the rest of the system. By using these, your app will feel native, which is always the best experience for the user.</p><p>The more you use these dynamic colors, the faster you‚Äôll properly adapt to Dark Mode.</p><blockquote><p>Still supporting iOS 12 and earlier? Worry not: fellow developer <a href="https://twitter.com/noahsark769">Noah Gilmore</a> shows you how to use the new colors while also maintaining backward compability in his brand new article "<a href="https://noahgilmore.com/blog/dark-mode-uicolor-compatibility/">Backwards compatibility for iOS 13 system colors</a>" üíØ.</p></blockquote><h4>(Dynamic) Custom Colors: The Assets Catalog</h4><p>This should always be your very last option to look at.</p><p>This is the only option that requires a lot of work, trial, and error, for both you and the design team:<br>let Apple do the work for you, they‚Äôve invested an unbelievable amount of time from their super talented teams on this, trust and use their work, your app will be fine.</p><p>With the disclaimer out of the way, how do you define and use your own dynamic colors?<br>Since iOS 11 and Xcode 9 we can add colors into assets catalogs.</p><p>Now you can also define a dark variant for each color in there as well:<br>to do so, select a color in your assets catalog, open the Attribute Inspector (shortcut: <code>‚åò‚å•4</code>), and set its appearance from <code>None</code> to <code>Any, Dark</code>:</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/assets-dark-mode.png" alt="assets-dark-mode"/><blockquote><p>Our own dynamic color!</p></blockquote><p>At this point a new color box for the Dark appearance will appear: congratulations! You have just created your first dynamic color! Set each variant to its appropriate tint and you're good to go.</p><p>Don't forget to enable high contrast as well:</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/assets-high-contrast.png" alt="assets-high-contrast"/><blockquote><p>Four variants for the same color üòÖ</p></blockquote><p>Again, I strongly suggest to use System and Semantic Colors as much as possible: in case of a button for example, using custom colors means defining one color <a href="https://developer.apple.com/documentation/uikit/uibutton#1656634">for each button state</a>: <code>.normal</code>, <code>.highlighted</code>, <code>.focused</code>, <code>.selected</code>, and <code>.disabled</code>.<br>This means requiring a different color for each state, for each appearance. If you do the math, one button now requires (5 states * 4 appearances =) 20, t-w-e-n-t-y, different tints! üò±</p><blockquote><p>A heads-up in case you still want to go this route:for pressed button colors, using a darkened version of the default color doesn‚Äôt work any longer, as the effect is correct for light interfaces, however dark interfaces require a lighter color instead. üëçüèª</p></blockquote><h4>(Dynamic) Custom Colors In Code üôà</h4><p>If you‚Äôre still targeting iOS 10 (which doesn‚Äôt support colors declarations in the asset catalog) or don‚Äôt want or can‚Äôt use the options above, then the very last option available is to define colors in code:</p><pre><code><span class="keyword">let</span> dynamicColor = <span class="type">UIColor</span> { (traitCollection: <span class="type">UITraitCollection</span>) -&gt; <span class="type">UIColor</span> <span class="keyword">in
    switch</span> traitCollection.<span class="property">userInterfaceStyle</span> {
    <span class="keyword">case</span>
      .<span class="dotAccess">unspecified</span>,
      .<span class="dotAccess">light</span>: <span class="keyword">return</span> .<span class="dotAccess">white</span>
    <span class="keyword">case</span> .<span class="dotAccess">dark</span>: <span class="keyword">return</span> .<span class="dotAccess">black</span>
    }
}
</code></pre><p>Don‚Äôt do this, drop iOS 10 and use assets catalogs.<br>### Step 2: Images</p><p>Almost every app displays images and/or symbols in the UI. Unless those images display user content (like a profile picture), then it‚Äôs very good design to have one image variant for each mode. Let‚Äôs see how.</p><h4>SF Symbols</h4><p>Apple introduced <a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">SF Symbols</a> at WWDC19. SF Symbols is a huge collection of glyphs (over 1500!) that are available for developers to use in their own apps.<br>Apple itself uses SF Symbols in every stock app like Reminders, News, Maps and more:</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/stock-apps.png" alt="stock-apps-sfsymbols"/><blockquote><p>Some examples of iOS stock apps using SF Symbols</p></blockquote><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/stock-apps-sf-symbols.jpg" alt="stock-apps-sfsymbols-2"/><blockquote><p>Some of the SF Symbols used in the screenshots above: can you spot them?</p></blockquote><p>Not only Apple uses them, but it also encurage us to do so, too. In Apple Words:<br>"<em>The system uses SF Symbols, which automatically look great in Dark Mode, and full-color images that are optimized for both light and dark appearances. Use SF Symbols wherever possible.</em>"</p><p>To recap, SF Symbols are a bunch of glyphs ready to be used in our apps:<br>wherever there's a glyph in your UI, see if you can replace it with one of these 1500+ glyphs that we get for free. Beside being vector images, which look perfect at any size, they also come built-in with the system: no need to package them up in our app! Yay for smaller app sizes!</p><p>If you're using storyboards, you can tell Xcode which symbol to use by typing the correct glyph name in the image name field (find the name in Apple's SF Symbols app available in Apple <a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">SF Symbols guideline</a>).</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/storyboard-example.png" alt="storyboard-example"/><blockquote><p>Note how the Attribute Inspector confirms that we're using a system symbol with the "System" callout</p></blockquote><p>Alternatively, you can fetch any of them by using the new api <code>UIImage(systemName:)</code>:</p><pre><code><span class="type">UIImage</span>(systemName: <span class="string">"star.fill"</span>)
</code></pre><p>Cannot find something that you fancy? You can always export any of the available glyphs (as .svg) from the official <a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">SF Symbols</a> app and change them to perfectly meet your needs üëçüèª</p><p>For more information about SF Symbols, watch the WWDC19 session <a href="https://developer.apple.com/videos/play/wwdc2019/206/ ">206: Introducing SF Symbols</a>.</p><p>If you would like to access to the whole list of symbols from anywhere, fellow developer <a href="https://twitter.com/noahsark769">Noah Gilmore</a> (again!) has your back with his new website <a href="https://sfsymbols.com">sfsymbols.com</a>, very handy if you're on the go üòé.</p><blockquote><p>Since SF Symbols can be exported from the SF Symbols app, you can always package them in your app bundle: this way you can use the new symbols while still maintaining retrocompability.</p></blockquote><h4>Custom Template Images (Glyphs)</h4><p>Like SF Symbols, template images are monocrome images that are defined in our Xcode assets catalog by selecting "render as" <code>Template Image</code> in the Attribute Inspector.</p><p>By using them, you get several advantages. To name one, you gain dark mode for free.</p><p>When using template images, remember to set the UIImageView tint to one of the dynamic colors described above:</p><pre><code><span class="keyword">let</span> glyphImage = <span class="type">UIImage</span>(named: <span class="string">"myGlyph"</span>)
<span class="keyword">let</span> glyphImageView = <span class="type">UIImageView</span>(image: glyphImage)
glyphImageView.<span class="property">tintColor</span> = .<span class="dotAccess">systemYellow</span>
</code></pre><h4>Other Images</h4><p>For all other kind of images that are not template images or symbols such as photos and more, we can follow the same steps as for custom colors: set their appearance to <code>Any, Dark</code> in the assets catalog and drop a new variant for each appearance.</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/assets-example.png" alt="storyboard-example"/><blockquote><p>Example stolen from Apple's <a href="https://developer.apple.com/documentation/uikit/appearance_customization/adopting_ios_dark_mode">sample app</a>.</p></blockquote><p>For more tips around images, use <a href="https://developer.apple.com/documentation/appkit/images_and_pdf/providing_images_for_different_appearances">this</a> Apple guide.</p><blockquote><p>Note that adding a dark variant to any assets in the catalog doesn't break retrocompatibility: older iOS versions will always choose the asset tagged with <code>Any Appearance</code>.</p></blockquote><h3>Step 3: UIVisualEffectViews - Semantic Materials</h3><blockquote><p>In case you need a quick catch-up with what you can do with these fantastic views, here‚Äôs <a href="http://nikolakirev.com/blog/uivisualeffect-swift-tutorial">a very clear article</a> by <a href="https://twitter.com/NikolaKirev">Nikola Kirev</a>.</p></blockquote><p>Like for <code>UIColor</code>s, until iOS 12 we had static <code>UIBlurEffect.Style</code>s (namely <code>.dark</code>, <code>.light</code> and <code>.extraLight</code>).<br>Xcode 11 has revamped these styles with brand new Semantic Materials:<br>we go from a delicate, semitransparent <code>.systemUltraThinMaterial</code>, to <code>.systemThinMaterial</code>, to <code>.systemMaterial</code>, until we arrive to a heavy <code>.systemThickMaterial</code>.</p><p>You can see them all here (grab the playground under the image):</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/system-materials.jpg" alt="materials"/><blockquote><p>Top: System Materials with vibrant label in the default interface. Bottom: System Materials with vibrant label in dark mode.Xcode Playground <a href="https://gist.github.com/zntfdr/70cf54afdb204278ca4947f23cae2ce8">here</a>.</p></blockquote><p>Note how the text vibrancy dynamically adapts based on both the interface appearance and the <code>UIVisualEffectView</code> effect it sits on: we don't need to worry about readability, because iOS takes care of it for us üíØ.</p><h3>Step 4: Drawing Attributed Text</h3><p>When drawing attributed text, if not specified, the <code>.foregroundColor</code> property is set to <code>.black</code>:<br>set it to a proper color instead (e.g. <code>UIColor.label</code>).</p><pre><code><span class="keyword">let</span> textToDraw = <span class="string">"FiveStars.blog"</span>
<span class="keyword">let</span> attributes: [<span class="type">NSAttributedString</span>.<span class="type">Key</span>: <span class="type">AnyObject</span>] = 
  [.<span class="dotAccess">font</span>: <span class="type">UIFont</span>.<span class="call">preferredFont</span>(forTextStyle: .<span class="dotAccess">title3</span>),
   .<span class="dotAccess">foregroundColor</span>: .<span class="dotAccess">label</span>]
textToDraw.<span class="call">draw</span>(at: <span class="type">CGPoint</span>.<span class="property">zero</span>, withAttributes: attributes)
</code></pre><h3>Step 5: Dark Mode in CALayers</h3><p><code>CALayer</code>s don‚Äôt understand dynamic colors.</p><p>When working with dynamic colors at this level, you can get the current <code>UITraitCollection</code> (which contains the active mode in <code>.userInterfaceStyle</code>) from the layer's view by calling <code>view.traitCollection</code>.<br>Once obtained, you can resolve any dynamic color for example with:</p><pre><code><span class="keyword">let</span> resolvedColor = <span class="type">UIColor</span>.<span class="property">label</span>.<span class="call">resolvedColor</span>(with: traitCollection) 
layer.<span class="property">borderColor</span> = resolvedColor.<span class="property">cgColor</span> 
</code></pre><p>In case where we need to resolve multiple colors, there's a <code>UITraitCollection</code> has a handy <a href="https://developer.apple.com/documentation/uikit/uitraitcollection/3238082-performascurrent"><code>performAsCurrent()</code></a> method that lets us do just that:</p><pre><code><span class="keyword">let</span> manyDynamicColors = ...

traitCollection.<span class="call">performAsCurrent</span> {
 <span class="keyword">for</span> resolvedColor <span class="keyword">in</span> manyDynamicColors {
   <span class="keyword">let</span> resolvedCGColor = resolvedColor.<span class="property">cgColor</span>
   ...
 }
}
</code></pre><h3>Step 6: Overriding The System Appearance</h3><p>Sometimes it make sense for a view to stick with one appearance, regardless of the system preference.<br>With iOS 13, <code>UIView</code>, <code>UIViewController</code>, and <code>UIWindow</code> have gained a new <code>overrideUserInterfaceStyle</code> property that lets us override the system appearance:</p><pre><code><span class="keyword">let</span> view = <span class="type">UIView</span>()
<span class="comment">// this view will inherit the appearance of its superview</span>

<span class="keyword">let</span> darkView = <span class="type">UIView</span>()
darkView.<span class="property">overrideUserInterfaceStyle</span> = .<span class="dotAccess">dark</span>
<span class="comment">// this view (and its subviews) will always be in dark mode</span>
</code></pre><p><code>overrideUserInterfaceStyle</code> is an enum instance of type <code>UIUserInterfaceStyle</code>. This enum cases are either <code>.dark</code>, <code>.light</code>, or <code>.unspecified</code>, which is used to say that the view/viewController/window will inherit the interface from its superview/parentController/system.</p><p>Setting this property effects that specific view/viewController/window and anything that is "below" it.</p><p>By doing so, its view and <em>all its sub views</em> will adopt your preference instead of the system one.</p><p>In case you‚Äôd like a view to go back to listen to the system preference, set back the <code>overrideUserInterfaceStyle</code> property to <code>.unspecified</code>.</p><pre><code><span class="keyword">let</span> viewWithCustomAppearance = <span class="type">UIView</span>()
viewWithCustomAppearance.<span class="property">overrideUserInterfaceStyle</span> = .<span class="dotAccess">dark</span>
<span class="comment">// this view (and its subviews) are now in dark mode</span>

viewWithCustomAppearance.<span class="property">overrideUserInterfaceStyle</span> = .<span class="dotAccess">unspecified</span>
<span class="comment">// this view (and its subviews) follow the appearance of this view superview</span>
</code></pre><h2>A Deeper Look</h2><p>If your app completely relies on storyboards for the UI, then congratulations! You‚Äôre now set to fully support Dark Mode. Not all of us are this lucky, if you‚Äôre not among these people (üôãüèª‚Äç‚ôÇÔ∏è), read on.</p><h3>Behind The Scenes: Draw Time</h3><p>iOS picks the right tint/image of our dynamic colors/images at draw time: but when is ‚Äúdraw time‚Äù exactly?</p><p>As you know, our views can become invalid at some point in their lifetime:<br>maybe the user has rotated the screen, maybe a UIView needs to add a new element in the interface, etc.</p><p>From now on, our views will become invalid also every time the interface appearance changes.</p><p>You're always guaranteed to have iOS pick the right tint/material/image when you're inside any of the following methods:</p><table><thead><tr><th><code>UIView</code></th><th><code>UIViewController</code></th><th><code>UIPresentationController</code></th></tr></thead><tbody><tr><td><code>draw()</code></td><td><code>viewWillLayoutSubviews()</code></td><td><code>containerViewWillLayoutSubviews()</code></td></tr><tr><td><code>layoutSubviews()</code></td><td><code>viewDidLayoutSubviews()</code></td><td><code>containerViewDidLayoutSubviews()</code></td></tr><tr><td><code>traitCollectionDidChange()</code></td><td><code>traitCollectionDidChange()</code></td><td><code>traitCollectionDidChange()</code></td></tr><tr><td><code>tintColorDidChange()</code></td><td></td><td></td></tr></tbody></table><p>Therefore, put your appearance-specific logic in any of them (make sure to not do unnecessary work though!).</p><blockquote><p>If you're unfamiliar with these methods, I suggest you to have a look at <a href="http://tech.gc.com/demystifying-ios-layout/">this great article</a> about Auto Layout life cycle.For even more insights, you can watch WWDC 2015 sessions <a href="https://developer.apple.com/videos/play/wwdc2015/218">218</a> and <a href="https://developer.apple.com/videos/play/wwdc2015/218">219</a>, which are part 1 and 2 of "Mysteries of Auto Layout" (part 2 is the most important one).</p></blockquote><blockquote><p>A small reminder: these methods are exposed to developers to be overridden, not to be called.Call their complementary methods like <code>setNeedsUpdateConstraints()</code>, <code>setNeedsLayout()</code>, etc. in order to trigger them.</p></blockquote><p>Do not put appearance-specific code in <code>init</code>, <code>viewDidLoad</code> or other places:<br>these methods will be not be triggered again when/if the interface appearance changes.</p><h3>Debugging Dark Mode</h3><p>You're almost set to start adopting Dark Mode! There are just a couple of things that you should know first.</p><h4>Storyboards</h4><p>In scoreboards and <code>.xib</code> files, beside choosing the device and orientation to preview your screens in, you can now also toggle the interface preference between light and dark:</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/interface-storyboard.png" alt="interface-storyboard"/><blockquote><p>One of my storyboards, fully supporting Dark Mode.</p></blockquote><p>I found it much faster to adopt dark mode by using this toggle rather than changing something and then testing it by building and running the app, I suggest you to do the same, especially if the screen you're working on is not easy to get into.</p><h4>Simulator</h4><p>In Xcode 11 there‚Äôs a new button in the debugging toolbar: this button lets you access to an Environment Overrides popup which lets you, among other things, change font size and switch interface mode, you can even enable high contrast!</p><img src="https://www.fivestars.blog/assets/posts/ios-dark-mode-how-to/environment-overrides.png" alt="overrides"/><blockquote><p>No need to use the Accessibility Inspector anymore, hurray!</p></blockquote><p>Use it to test both interfaces on the simulator, this is the only way to change the interface appearance in there!</p><p>Obviously don't forget to test each screen on a real device before shipping üòâ.</p><h2>Where To start</h2><p>Now that you're finally ready to adopt dark mode, here‚Äôs a roadmap for you to follow:</p><ol><li>Download and install Xcode 11 beta (duh!)</li><li>Build and Run your app with dark mode enabled</li><li>Fix the obvious "mistakes" spotted</li><li>Add dark variants to all your assets</li><li>Adapt Dark Mode one screen at a time:<ul><li>Start from the <code>.xib</code>s files</li><li>Move to storyboards</li><li>Move to code</li><li>Repeat for all screens 6. Make sure to set the foreground key when drawing attributed text 7. Move all your appearance logic in the ‚ÄúDraw time‚Äù functions</li></ul></li></ol><p>Some heads up:</p><ul><li>don‚Äôt forget to test your app in light mode, too üòÑ</li><li>don't forget the LaunchScreen storyboard!</li></ul><h2>Tips</h2><h3>Design System</h3><p>If your app uses a Design System, then congratulations! Adopting Dark Mode will take you literally 5 minutes (assuming you've read this whole article).</p><p>If your app doesn't have one yet, now it's a great time to start building one.<br>In case you're unfamiliar with this concept, I suggest you to watch the awesome talk "<em>Building a Mobile Design System</em>" by fellow developer <a href="https://twitter.com/krstnfx">Kristina Fox</a> from <a href="https://www.tryswift.co">Try! Swift Tokyo</a> (<a href="https://www.youtube.com/watch?v=Fvq8PQKJj_k">video</a>, <a href="https://speakerdeck.com/krstnfx/building-a-mobile-design-system">slides</a>).</p><h3>Assets Catalog: bid farewell to iOS 10</h3><p>With iOS 12 adoption being over 85% as of June 2019, it's a no brainer to drop iOS 10 support. With that we can finally declare and use custom colors directly from the assets catalog, which will make your dark mode adoption quick and easy.</p><h3>Use Storyboards and Xibs</h3><p>Use your storyboards/xibs with the interface appearance toggle to preview each screen in both appearances, no need to build and run your app over and over to test every change.</p><h3>Use SwiftUI</h3><p>Anything built with SwiftUI automatically supports dark/light mode and their high contrast variants.</p><h2>Dark Mode Resources</h2><p>Apple has multiple great resources around adopting Dark Mode: - I suggest you to start from the <a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/dark-mode/">Dark Mode section</a> of Apple Human Interface Guidelines and choose where to go from there (plenty of links in that chapter!).<br>- another interesting resource from Apple is <a href="https://developer.apple.com/documentation/appkit/supporting_dark_mode_in_your_interface">Supporting Dark Mode in Your Interface</a>, which was written last year for macOS but still very valid for iOS.</p><p>Obviously there are also a few WWDC19 sessions that are a must watch:</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2019/214/">Implementing Dark Mode on iOS</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2019/808/">What's New in iOS Design</a></li></ul><p>It's also very good to watch the previous year sessions where we were first introduced to Dark Mode (in macOS):</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2018/210/">Introducing Dark Mode</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2018/218/">Advanced Dark Mode sessions</a></li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Dark Mode has been in the works for years and we finally have it in our hands:<br>I'm using it everyday on my macs and I‚Äôm very excited to finally be able to use it on iOS, too.<br><br>What do you think? Will you use Dark Mode right away? Do you think adopting it in your apps is going to take a lot of effort?<br>I personally can‚Äôt wait to see it released! Feel free to <a href="https://twitter.com/zntfdr">reach me out on Twitter</a> and share screenshots of your apps in Dark Mode! ü§©</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/wwdc19-wishlist</guid><title>My WWDC19 Wishlist üßû‚Äç‚ôÇÔ∏è</title><description></description><link>https://www.fivestars.blog/articles/wwdc19-wishlist</link><pubDate>Tue, 7 May 2019 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Every year, Mac and iOS Developers all around the world welcome WWDC with excitement, high hopes, and a long list of wishes that we would love Apple to announce.</p><p>Some of those wishes are very humble, like a fix for a radar filed 5 years ago, while others are very ambitious, like the opening of a private framework and much, much more.</p><p>I thought it would be fun to make my #wwdc19 wishlist public, without further ado:</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Dark Mode</h2><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/dark-mode.gif" alt="dark-mode"/><blockquote><p>Photo credit: <a href="https://www.angelakismax.com/personal#/ios/">Angela Kismax</a>.</p></blockquote><p>This is a given: macOS gained Dark Mode in 2018 and, with Apple releasing Marzipan this year, UIKit apps must gain Dark Mode support. I‚Äôm really excited for this new feature and can‚Äôt wait to try it out myself.</p><blockquote><p><a href="https://openradar.appspot.com/26852871">Open Radar</a>, <a href="rdar://26852871">rdar://26852871</a></p></blockquote><h2>ARKit Occlusion</h2><table><tbody><tr><td><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/niantic-ar-standard.gif" alt="standard AR"/></td><td><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/niantic-ar-occlusion.gif" alt="enhanced AR"/></td></tr></tbody></table><blockquote><p>Left: AR without occlusion. Right: AR with occlusion. Video credit: <a href="https://www.youtube.com/watch?v=7ZrmPTPgY3I ">Niantic</a>. Gif credit: <a href="https://www.theverge.com/2018/6/28/17514340/niantic-labs-pokemon-go-ar-demo-pikachu-occlusion ">The Verge</a></p></blockquote><p>Apple has done a tremendous job with ARKit. This is probably the framework that Apple is pushing the most, and I don‚Äôt expect that to change anytime soon, especially since there are rumors of an Apple AR headset in the works.</p><p>One of the main limitations of this framework has been the lack of a native way to enable obstacle occlusion. As seen in the gifs above, this addition is key to maintain the illusion of an immersive AR experience: having this feature offered in ARKit would improve greatly the AR experience for millions of users.</p><blockquote><p><a href="https://openradar.appspot.com/50478914">Open Radar</a>, <a href="rdar://50478914">rdar://50478914</a></p></blockquote><h2>End of Subscriptions Madness</h2><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/subscription-1.jpg" alt="subscription-hig"/><blockquote><p>The unofficial App Review HIG addendum showing acceptable renewable subscriptions pitch screens, by <a href="https://twitter.com/agiletortoise/status/1075042403751477249">Greg Pierce</a></p></blockquote><p>If you <a href="https://twitter.com/zntfdr">follow me</a>, <a href="https://twitter.com/drbarnard">David Barnard</a>, <a href="https://twitter.com/agiletortoise">Greg Pierce</a>, or other developers that offer auto-renewable subscriptions in their app, you already know <a href="https://twitter.com/agiletortoise/status/1075042403751477249">the pain</a> <a href="https://medium.com/revenuecat-blog/apple-will-reject-your-subscription-app-if-you-dont-include-this-disclosure-bba95244405d">we have to go through</a>: the rules around such subscriptions, particularly regarding the subscription details disclosure, are ever-changing, subject to personal interpretation (inconsistent even within the App Review Team), and by far the main source of constant app rejections. It‚Äôs very, very frustrating.</p><p>Apple even launched a <a href="https://developer.apple.com/design/human-interface-guidelines/subscriptions/overview/">Subscriptions Human Interface Guidelines Page</a> early this year, however fellow developer David Barnard <a href="https://twitter.com/drbarnard/status/1089154933822230528">quickly pointed out</a> that not even Apple's own examples would pass a real App Review üôÉ.</p><p>I would love for Apple to end all of this. Thousands of hours have been wasted, between both Apple employees and third party developers. It is beyond nonsensical. Apple‚Äôs own apps don‚Äôt follow their own guideline, it‚Äôs just bad all around.</p><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/subscription-2.jpg" alt="subscription-confirmation"/><blockquote><p>Apple's confirmation Sheet</p></blockquote><p>I'm certain that there's a legal reason behind all of this, however, since Apple already presents a confirmation sheet where people have to authenticate and approve a transaction, I believe that it would make sense to move all these fine prints in there, too (maybe this confirmation sheet could be a two step process, or something similar).</p><p>This way developers could focus solely on the content of the app, while the legal side is taken care of by the iOS sheet.</p><blockquote><p><a href="https://openradar.appspot.com/50479123">Open Radar</a>, <a href="rdar://50479123">rdar://50479123</a></p></blockquote><h2>Alternate App Icons Management</h2><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/app-icon.gif" alt="change-icon-confirmation"/><blockquote><p>Apple's confirmation after changing an app icon.</p></blockquote><p>Users can change their apps icons since iOS 10.3.</p><p>While this is awesome, the developer implementation is not friendly:</p><ul><li>all these alternate icons images must be placed at the root of the app project, which means having tons of <code>.png</code>s (one for each size, for each custom icon) just sitting there.</li></ul><ul><li>all alternate icons (again, one for each size, for each custom icon) must be declared, one by one, into the app‚Äôs <code>info.plist</code>.</li></ul><ul><li>there‚Äôs no native way to automate this.</li></ul><p>The whole process is very error prone and could be completely replaced by letting developers add alternate icons directly in one assets catalog. As someone with several apps on the App Store, this would make me very happy and make me want to offer way more alternate icons.</p><blockquote><p><a href="https://openradar.appspot.com/50479188">Open Radar</a>, <a href="rdar://50479188">rdar://50479188</a></p></blockquote><h2>Multiple Bedtime Scheduling</h2><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/bed-time.png" alt="ios-12-bed-time"/><blockquote><p>iOS 12 Bedtime.</p></blockquote><p>One of my favorite introductions in iOS 12 is <a href="https://support.apple.com/en-is/HT208655">Bedtime</a>.</p><p>I work out three times a week: on the days that I work out, I must wake up before 6am in order to hit the gym and then go to work at a reasonable time. Currently, there‚Äôs no way to set two different <em>bedtimes</em>, depending on the day of the week.</p><p>Even If I had a more regular schedule, I still would like to have a <em>weekday</em> bedtime, and a <em>weekend</em> bedtime. Again, with iOS 12 this is not possible.</p><p>Having the possibility to define multiple bedtimes would be awesome: for the moment, I'm back to <em>normal</em> alarms.</p><blockquote><p><a href="https://openradar.appspot.com/50479208">Open Radar</a>, <a href="rdar://50479208">rdar://50479208</a></p></blockquote><h2>Push Notifications Spam Reporting</h2><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/notifications-hell.jpg" alt="notifications-hell"/><blockquote><p>Notifications Hell (credits: <a href="https://documentation.onesignal.com/docs/action-buttons">OneSignal</a>)</p></blockquote><p>iOS 12 brought us great notifications enhancements such as Deliver Quietly, Group Notifications, and a quick way to turn off an app notifications directly from any notification.</p><p>These are great ways for users to protect themselves from <em>noisy</em> apps however, this is not the best user experience.</p><p>Instead, I expect Apple to notice misbehaving apps (a.k.a. the ones that continuously push advertisements as notifications) and remove their notifications privilege altogether (maybe only temporarily first, and permanently later, if the misbehavior continues), don't ask the users to manually protect themselves, for every device they own.</p><p>I completely understand that detecting this behavior is basically impossible for the Apple Review team, especially since an app could "<em>play nice</em>" when it is in review, and start sending notifications only once it has been approved.</p><p>I think we, as app users, could be of great help: as soon as we get an iMessage from a unknown contact, Apple prompts us with an action to report it as junk (see picture below on the left, just under the text bubble).</p><p>Apple could implement something similar for notifications, you can see a mock on the image below on the right.</p><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/report.jpg" alt="report-message-as-spam"/><blockquote><p>Left: the current report junk iMessage implementation (credits: <a href="https://www.iphonelife.com/content/fake-text-message-how-to-report-block-spam-text-messages">iPhoneLife</a>). Right: A mock up of what report junk for notifications could be.</p></blockquote><p>Once Apple receives multiple reports of the same app, then, and only then, an internal investigation is opened and it is decided whether to take further action or not.</p><p>This way:</p><ul><li>Apple doesn't need to observe this behavior during app review (again, apps can act nicely when in review, and start sending spam notifications only after approval)</li><li>Apple doesn't need to actively analyze every single notification that goes through its <a href="https://developer.apple.com/library/archive/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1">Push Notification service</a>.</li><li>We users do the reporting for Apple.</li></ul><p>It‚Äôs a win-win situation.</p><blockquote><p><a href="https://openradar.appspot.com/50479242">Open Radar</a>, <a href="rdar://50479242">rdar://50479242</a></p></blockquote><h2>Smarter, Self-conscious Siri</h2><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/siri.jpg" alt="siri"/><blockquote><p>Photo Credits: <a href="https://www.apple.com/siri/">Apple</a></p></blockquote><p>My best purchase of 2018 was an HomePod: it feels empowering to simply shout actions anywhere at home and having them executed, especially after <a href="https://twitter.com/zntfdr/status/1079201278398320641">I started using HomeKit</a>.</p><p>With that being said, Siri still has a long way to go: among the improvements that I would like to see, there's Siri being more self conscious.</p><p>Questions like ‚ÄúWhen is the next Apple Event?‚Äù, ‚ÄúWhat is the battery on my phone?‚Äú should always have a clear answer. When asked for an action that has to run on a device, I would like Siri (from the HomePod) to forward it to the correct device, not saying that it can‚Äôt do that on an HomePod. And other <em>small</em> details like this.</p><p>Being able to handoff music from one device to another, a-la "Hey Siri, continue play on my iPad/HomePod/iPhone/Airpods" would also be great.</p><p>Lastly, I would like to see Siri improving every week: so far it seems like Siri improves only when a new major iOS release comes out.</p><blockquote><p><a href="https://openradar.appspot.com/50479268">Open Radar</a>, <a href="rdar://50479268">rdar://50479268</a></p></blockquote><h2>Variable Width App Title</h2><table><tbody><tr><td><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/icon-title-XS.jpg" alt="icon-xs"/></td><td><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/icon-title-M.jpg" alt="icon-m"/></td><td><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/icon-title-L.jpg" alt="icon-l"/></td><td><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/icon-title-XL.jpg" alt="icon-xl"/></td></tr></tbody></table><blockquote><p>The Stack Exchange app icon and title with different text size preferences</p></blockquote><p>Apple does an astounding job to improve iOS accessibility every year: every time I show these features to people, they're blown away.</p><p>One aspect that is not yet very accessible yet is the app title, currently statically defined in the app <code>info.plist</code> under the <code>Bundle Display Name</code> key (<code>CFBundleDisplayName</code>): it can be localized, but that's it.</p><p>If the title is too long, it will be truncated: even if the title is not truncated at the current font size, this doesn't guarantee that it won't be truncated when the user set a different font size (see example above).</p><p>Since Xcode 10, we have the possibility to use <a href="https://useyourloaf.com/blog/variable-width-strings/">Variable Width Strings</a>, where the actual content of our string varies based on the space available.</p><p>It would be awesome if we could use this for the app titles, too.</p><blockquote><p>Another situation where the title might get truncated is after updating the app, or when the app is being tested via TestFlight:this is because of the blue/orange indicator next to the title that appears under these circumstances. While the dot is a nice reminder of the app state (just updated for blue, beta for orange), this indicator actually <em>steals</em> space from the title, which might therefore get truncated.</p></blockquote><blockquote><p><a href="https://openradar.appspot.com/50479294">Open Radar</a>, <a href="rdar://50479294">rdar://50479294</a></p></blockquote><h2>Network Sandboxing</h2><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/ios-sandboxing.png" alt="ios-sandboxing"/><blockquote><p><a href="https://krausefx.com/blog/ios-app-network-sandboxing ">Network Sandboxing</a>, concept by <a href="https://twitter.com/KrauseFx">Felix Krause</a></p></blockquote><p>iOS does an awesome job at protecting the privacy of its users. Want to listen to the microphone? Ask for authorization. Use the camera? Ask for authorization. Access the photo library? User location? Contacts? Reminders? Ask for authorization.</p><p>One aspect where apps have been completely free to do as they please is networking: as soon as any app is launched, without the user knowing, said app can start sending requests and data to any server in the world.</p><p>Even if the user trusts the developer behind an app, that app might use a framework that does <em>more</em> than what it promises on paper, and both the user and the developer using that framework cannot do anything about it (yet).</p><p>A very clean way to fix all of this would be for Apple to introduce Network Sandboxing: a concept presented by <a href="https://twitter.com/KrauseFx">Felix Krause</a> <a href="https://krausefx.com/blog/ios-app-network-sandboxing ">one year ago</a>.</p><p>In short, Apple could demand developers to disclose which domains their app need to access to, and make sure that any other request outside those is blocked. Felix goes more in detail in <a href="https://krausefx.com/blog/ios-app-network-sandboxing ">his article</a>, I suggest you to have a look there if you're interested in this topic.</p><blockquote><p><a href="https://openradar.appspot.com/50479334">Open Radar</a>, <a href="rdar://50479334">rdar://50479334</a></p></blockquote><h2>A macOS-friendly Marzipan</h2><img src="https://www.fivestars.blog/assets/posts/wwdc19-wishlist/marzipan-plz.png" alt="Home.app marzipan"/><blockquote><p>The Home.app running on macOS</p></blockquote><p>Having iOS apps like Home, News, Voice Memos etc on the Mac is way better than no app at all.</p><p>However, there are some elements in those apps that don‚Äôt have a home on the Mac: the screen shot above shows an example of an option <em>window</em>, very different than anything we've seen so far on desktop.</p><p>My hope is that the version of Marzipan that we will see released next month will give a chance to developers to make their iOS apps feel and look like native macOS apps (on macOS).</p><p>Speaking of Marzipan, I‚Äôve always wanted to access my Health.app data on iPad and Mac, maybe Marzipan will take care of this ü§ûüèª.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Obviously these are only a few points, I‚Äôm sure I‚Äôve forgotten plenty and, to be honest, I haven‚Äôt put much thought on it (I want Apple to surprise me üòÅ).</p><p>I know that many wishes above are easier said than done, as pretty much anything in the software world, however a man can dream!</p><p>Regardless of whether any of these points will become a reality or not, I'm super excited for next month WWDC and can't wait to play with all the brand new technologies that we will see!</p><p>What do you think? Did I completely miss something? What are your wishes for this year WWDC? Let me know on <a href="https://twitter.com/zntfdr">Twitter @zntfdr</a> üòÅ.</p><p>Thank you for reading and <a href="https://www.fivestars.blog/feed.rss">stay tuned</a> for more articles!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/five-stars</guid><title>Introducing Five Stars</title><description></description><link>https://www.fivestars.blog/articles/five-stars</link><pubDate>Wed, 1 May 2019 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>After posting for nearly two years in <a href="https://medium.com/swiftly-swift">Swiftly Swift</a>, and a hiatus of almost two years after that, I welcome you to my new blog!</p><p>A lot has happened since my last update, and I have various reasons behind the lack of posts: for starters, as somebody that cares deeply about everything that surrounds Apple, I felt too constrained by my previous, self-imposed, blog name.</p><p>I still want to write about Swift and iOS Development, however I don't want these topics to be the limit of what you can expect here: from now on do expect new experimental, meta, opinionistic, and just <em>different</em> articles as well.</p><p>In the meanwhile I've also become a full-time iOS Developer: previously I was building apps, learning, and writing about iOS development exclusively during my own spare time. I'm very happy to have turned my main hobby into something that I enjoy doing all day (almost) every day!</p><p>Thanks to this last change, my iOS knowledge, learning, and experience simply skyrocketed and, even to this day, I keep a pace that simply was not possible just two years ago. I'm very grateful for this opportunity, and this blog will definitively benefit and reflect these new gains.</p><p>Lastly, I want to mention that I've never stopped doing iOS development. In fact I'm more than happy to let you know that <a href="https://itunes.apple.com/us/developer/federico-zanetello/id1053443073?at=1001laCc">my own apps</a> are now more popular than ever, have more than double the revenue since my last update, and <a href="https://twitter.com/zntfdr/status/1117414145865830401">have been even featured in the App Store</a>, multiple times!</p><p>The future ahead is bright: I hope you will join me in this journey.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/dijkstra-algorithm-swift-2</guid><title>The Right Way To Write Dijkstra‚Äôs Algorithm In Swift üëæ</title><description></description><link>https://www.fivestars.blog/articles/dijkstra-algorithm-swift-2</link><pubDate>Tue, 29 Aug 2017 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>Update: this project is now <a href="https://github.com/zntfdr/Connection">open source</a>.</p></blockquote><p>Last week <a href="https://www.fivestars.blog/articles/dijkstra-algorithm-swift/">I‚Äôve written about how to code the famous Dijkstra‚Äôs Algorithm in Swift</a>: this article is its follow up.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>My Reason</h2><p>I didn‚Äôt write the previous article and spent time doing research just for the article‚Äôs sake: a similar algorithm is implemented in all my <a href="https://itunes.apple.com/us/developer/kimchi-media/id1053443073?at=1001laCc">üöá Metro Apps</a>.</p><p>With this article I‚Äôm going to show you why you don‚Äôt need to follow my same path, by taking advantage of the tools offered by Apple and <em>obtain the same result with much less effort</em> (while gaining other benefits as well).</p><h2>Introducing GameplayKit</h2><p>Among the dozens of Apple‚Äôs frameworks there‚Äôs <em>GameplayKit</em>: this framework is always available to you, regardless of whether your App is game or not.</p><p>But what is GameplayKit? I‚Äôm glad you asked! I‚Äôll let <a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/index.html">Apple‚Äôs GameplayKit Guide</a> answer this for you:</p><blockquote><p>GameplayKit is a collection of foundational tools and technologies for building games in iOS, OS X, and tvOS. Building, evolving, and maintaining a sophisticated game requires a well-planned design‚Ää‚Äî‚ÄäGameplayKit provides architectural tools to help you design modular, scalable game architecture with minimal effort.Wow, this framework sounds like a lot of stuff!</p></blockquote><h3>GameplayKit Cores</h3><img src="https://www.fivestars.blog/assets/posts/dijkstra-algorithm-swift-2/cores.png" alt="cores"/><blockquote><p>GameplayKit Cores</p></blockquote><p>Let‚Äôs use the <a href="https://en.wikipedia.org/wiki/Divide_and_conquer_algorithm">Divide And Conquer Paradigm</a> to understand this GameplayKit better, here are its main cores (from <a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/index.html">Apple‚Äôs GameplayKit Guide</a>):</p><ol><li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/RandomSources.html#//apple_ref/doc/uid/TP40015172-CH9-SW1">Randomization</a> Use these robust, flexible implementations of standard algorithms as the building blocks for many kinds of game mechanics.</li></ol><ol start="2"><li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/EntityComponent.html#//apple_ref/doc/uid/TP40015172-CH6-SW1">Entities and Components</a> Design more reusable gameplay code by building on this architecture.</li></ol><ol start="3"><li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/StateMachine.html#//apple_ref/doc/uid/TP40015172-CH7-SW1">State Machines</a> Use this architecture to untangle complex procedural code in your gameplay designs.</li></ol><ol start="4"><li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/Minmax.html#//apple_ref/doc/uid/TP40015172-CH2-SW1">The Minmax Strategist</a> Create a model for your turn-based game and AI player objects that use the model to plan optimal moves.</li></ol><ol start="5"><li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/Pathfinding.html#//apple_ref/doc/uid/TP40015172-CH3-SW1">Pathfinding</a> Describe a game world as a graph, allowing GameplayKit to plan optimal routes for game characters to follow.</li></ol><ol start="6"><li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/Agent.html#//apple_ref/doc/uid/TP40015172-CH8-SW1">Agents, Goals, and Behaviors</a> Use this simulation to let game characters move themselves based on high-level goals and react to their surroundings.</li><li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/RuleSystems.html#//apple_ref/doc/uid/TP40015172-CH10-SW1">Rule Systems</a> Separate game design from executable code to speed up your gameplay development cycle, or implement fuzzy logic reasoning to add realistic behavior to your game.</li></ol><p>Wait‚Ä¶.what‚Äôs the fifth point again?</p><blockquote><p>5. <a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/Pathfinding.html#//apple_ref/doc/uid/TP40015172-CH3-SW1">Pathfinding</a> Describe [...] world as a graph, [‚Ä¶] plan optimal routes [...]</p></blockquote><p>This sounds a lot like what we‚Äôre trying to do! Let‚Äôs dig deeper.</p><p>GameplayKit Pathfinding If you read the whole <a href="https://developer.apple.com/library/content/documentation/General/Conceptual/GameplayKit_Guide/Pathfinding.html#//apple_ref/doc/uid/TP40015172-CH3-SW1">Pathfinding introduction</a>, you‚Äôll discover that we can use it in three cases:</p><ul><li>Case 1‚Ää‚Äî‚ÄäA Continuous space interrupted by obstacles</li></ul><img src="https://www.fivestars.blog/assets/posts/dijkstra-algorithm-swift-2/case1.png" alt="case1"/><ul><li>Case 2‚Ää‚Äî‚ÄäA discrete two-dimensional grid, where the only valid locations are those with integer coordinates</li></ul><img src="https://www.fivestars.blog/assets/posts/dijkstra-algorithm-swift-2/case2.png" alt="case2"/><ul><li>Case 3‚Ää‚Äî‚ÄäA collection of discrete locations and the connections between them.</li></ul><img src="https://www.fivestars.blog/assets/posts/dijkstra-algorithm-swift-2/case3.png" alt="case3"/><p>Wow! The third case sounds exactly what we‚Äôre trying to do! üôåüèª Let‚Äôs implement it!</p><h2>GameplayKit Entities</h2><h3>Graph</h3><p>Firstly, GameplayKit want us to create a new graph, this is done by creating a new <code>GKGraph</code> instance:</p><pre><code><span class="keyword">let</span> myGraph = <span class="type">GKGraph</span>()
</code></pre><h3>Nodes</h3><p>Secondly, we will need to define our nodes: again, GameplayKit has us covered with its <code>GKGraphNode</code> class:</p><pre><code><span class="keyword">let</span> nodeA = <span class="type">GKGraphNode</span>()
<span class="keyword">let</span> nodeB = <span class="type">GKGraphNode</span>()
<span class="keyword">let</span> nodeC = <span class="type">GKGraphNode</span>()
<span class="keyword">let</span> nodeD = <span class="type">GKGraphNode</span>()
<span class="keyword">let</span> nodeE = <span class="type">GKGraphNode</span>()
</code></pre><p>Please don‚Äôt forget to add them into our Graph:</p><pre><code>myGraph.<span class="call">add</span>([nodeA, nodeB, nodeC, nodeD, nodeE])
</code></pre><h3>Node Connections</h3><p>While <a href="https://www.fivestars.blog/articles/dijkstra-algorithm-swift/">I created a different class for the Connections</a>, GameplayKit takes a much easier approach and just offers a <code>GKGraphNode</code> method <code>addConnection(to:[GKGraphNode], bidirectional: Bool)</code>:</p><pre><code>nodeA.<span class="call">addConnections</span>(to: [nodeB, nodeD], bidirectional: <span class="keyword">true</span>)
nodeB.<span class="call">addConnections</span>(to: [nodeD], bidirectional: <span class="keyword">true</span>)
nodeC.<span class="call">addConnections</span>(to: [nodeE], bidirectional: <span class="keyword">false</span>)
nodeD.<span class="call">addConnections</span>(to: [nodeC], bidirectional: <span class="keyword">false</span>)
</code></pre><p>GameplayKit way is much simpler than mine: this is because Apple‚Äôs framework assumes each <strong>connection weight</strong> to <strong>always</strong> be the <strong>same</strong> (I will take care of this point at the end of the article).</p><h3>Dijkstra‚Äôs Algorithm</h3><p>We‚Äôve now defined the whole Graph! The only thing missing is the shortest path finder algorithm: how do we go from <code>nodeA</code> to <code>nodeE</code>s? Well‚Ä¶</p><pre><code>myGraph.<span class="call">findPath</span>(from: nodeA, to: nodeE)
</code></pre><blockquote><p>Yup, that‚Äôs one line.</p></blockquote><p>Wait, what? That‚Äôs it? Yes, the <a href="https://developer.apple.com/documentation/gameplaykit/gkgraph/1501270-findpath"><code>findPath</code> method</a> returns us an array of nodes that describe the path from the start node to the target node, or an empty array if there‚Äôs no path between the two nodes. üéâüéâ</p><h3>Complete Code</h3><p>Just to make you understand how amazing GameplayKit is, here‚Äôs the full code we‚Äôve written so far (you can run it in a Xcode/Swift Playground):</p><pre><code><span class="keyword">import</span> GameplayKit

<span class="keyword">let</span> myGraph = <span class="type">GKGraph</span>() <span class="comment">// declaring the Graph</span>
<span class="keyword">let</span> nodeA = <span class="type">GKGraphNode</span>() <span class="comment">// declaring the Graph Nodes</span>
<span class="keyword">let</span> nodeB = <span class="type">GKGraphNode</span>()
<span class="keyword">let</span> nodeC = <span class="type">GKGraphNode</span>()
<span class="keyword">let</span> nodeD = <span class="type">GKGraphNode</span>()
<span class="keyword">let</span> nodeE = <span class="type">GKGraphNode</span>()

myGraph.<span class="call">add</span>([nodeA, nodeB, nodeC, nodeD, nodeE]) <span class="comment">// adding the Graph Nodes to the Graph</span>
nodeA.<span class="call">addConnections</span>(to: [nodeB, nodeD], bidirectional: <span class="keyword">true</span>) <span class="comment">// declaring the Graph Nodes connections</span>
nodeB.<span class="call">addConnections</span>(to: [nodeD], bidirectional: <span class="keyword">true</span>)
nodeC.<span class="call">addConnections</span>(to: [nodeE], bidirectional: <span class="keyword">false</span>)
nodeD.<span class="call">addConnections</span>(to: [nodeC], bidirectional: <span class="keyword">false</span>)

<span class="keyword">let</span> path: [<span class="type">GKGraphNode</span>] = myGraph.<span class="call">findPath</span>(from: nodeA, to: nodeE) <span class="comment">// finding the path between two nodes</span>
</code></pre><p>Our whole application now takes less lines of code than my shortestPath algorithm, it‚Äôs amazing how powerful this framework is! üöÄüöÄüöÄ</p><h2>Weighted Connections</h2><p>One of the GameplayKit shortcomings is the lack of weighted connections between nodes.</p><p>I‚Äôve tackled myself with this problem and found out an elegant minimal solution: subclass <code>GKGraphNode</code> and override the <code>cost(to node: GKGraphNode)</code> method. <a href="https://gist.github.com/zntfdr/c93fc2863ac0a847a90865564ca22121">Here‚Äôs my quick implementation</a>.</p><blockquote><p>In short, each node stores its connections cost in its (new)travelCost property: everything else stays the same üíØ</p></blockquote><h2>Final Note</h2><p>The cool thing about GameplayKit is that we have no idea which shortestPath algorithm it uses: it could be <a href="https://www.fivestars.blog/articles/dijkstra-algorithm-swift/">Dijkstra</a>‚Äôs, it could be <a href="https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm">Bellman‚ÄìFord</a>‚Äôs, or it could be completely something else.</p><p>And you <em>should not care</em>, this has been taken care by very talented people at Apple, the problem is solved: by letting them taking care of this, we can <em>focus on building better products üíØ</em>.</p><blockquote><p>On the same vibe: <a href="https://twitter.com/stevenhepting/status/878339681485635585">Have you ever wondered which algorithm Swift uses when we call <code>sort</code></a>?</p></blockquote><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Both this and my <a href="https://www.fivestars.blog/articles/dijkstra-algorithm-swift/">previous article</a> has shown you a way to implement a shortestPath finder algorithm into your code.</p><p>The main reason why I like the latter much more than the former is, again, because most the core code of this option is maintained by dozens of people that work all year around in order to make it as fastest and as efficient as possible, while always taking advantage of the latest Apple hardware, and more.</p><p>If you write the code yourself, you‚Äôre the one maintaining: no one else will help you improve it, if there‚Äôs a bug, only you can find it and fix it. If you work on something else, that code will never improve (unless it‚Äôs open source).</p><p>If there‚Äôs one takeaway from this post, let it be this:<br><strong>Take advantage of the tools that are offered to you: the less you depend on yourself, the more powerful you are.</strong></p><p>Catch you in the next article! üëãüèª</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/dijkstra-algorithm-swift</guid><title>Dijkstra‚Äôs Algorithm In Swift</title><description></description><link>https://www.fivestars.blog/articles/dijkstra-algorithm-swift</link><pubDate>Tue, 22 Aug 2017 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>If you‚Äôve ever heard of the term Graph Theory, surely you‚Äôre acquaintance with the Dijkstra‚Äôs Algorithm.</p><p>If you‚Äôre not, it‚Äôs all right! This article includes everything you need to know.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Quick Introduction</h2><p>This chapter will bring you up to speed on what <em>Graph Theory</em> and the <em>Dijkstra‚Äôs Algorithm</em> are.</p><p>If you‚Äôre confident enough, you can skip this part! (üöÄ jump to the <code>Swift Time</code> chapter)</p><h3>Graph Theory</h3><img src="https://www.fivestars.blog/assets/posts/dijkstra-algorithm-swift/graph.png" alt="graph"/><p>See the picture above? This is a what in Mathematics and Computer Science we call a <strong>Graph</strong>.</p><p>The circles are called <strong>Nodes</strong> (or <em>vertices</em>) and they represent the graph entities (more on this later) while the lines connecting the nodes are called <strong>Connections</strong> (or <em>edges</em>).</p><p>These connections, which always connect two nodes, are mainly of two types: bidirectional and mono-directional.<br>The former means that the connection works in both ways (duh!), while the latter means that the connection exists only from one node to the other, but not vice-versa (you will need a second connection to go the other way around).</p><p>These simple concepts have huge applications all over the world and you are probably using them all the time!</p><h4>Real World Examples</h4><h5>Bidirectional Graph: Facebook</h5><p>Let‚Äôs visualize your Facebook friends Graph!<br>You might end up with something like this:</p><img src="https://www.fivestars.blog/assets/posts/dijkstra-algorithm-swift/facebook.png" alt="facebook"/><blockquote><p>Picture from <a href="https://mathematica.stackexchange.com/questions/11673/how-to-play-with-facebook-data-inside-mathematica">Mathematica StackExchange</a>.</p></blockquote><p>In this graph each <strong>node</strong> is a <strong>person</strong>, and each (bidirectional) <strong>connection</strong> represents the <strong>friendship</strong> between these people.</p><blockquote><p>‚ÄúCoincidentally‚Äù Facebook has a developer API called Graph.</p></blockquote><h5>Mono-directional Graph: Twitter</h5><p>If we take a look at our followers on Twitter, the result might be something like this:</p><img src="https://www.fivestars.blog/assets/posts/dijkstra-algorithm-swift/twitter.png" alt="twitter"/><blockquote><p>Picture from <a href="http://www.smrfoundation.org/2009/10/01/twitter-flickr-networks-in-nodexl-version-95-lots-of-new-features-improved-performance-2/">Social Media Research Foundation</a>.</p></blockquote><p>In this case each node is a Twitter Account, but the connections now are <strong>mono</strong>-directional, because if I follow you, this doesn‚Äôt imply that you are following me back.</p><h4>Dijkstra‚Äôs Algorithm</h4><p>Now that we understand what a Graph is, let‚Äôs talk about one of its hottest topics: the Shortest Path Problem.</p><p>This challenge is super simple to understand:<br>given two nodes in one Graph, find the shortest way to go from one node to the other (if it exists).</p><p>For us it‚Äôs a simple game (like solving a maze), but for a machine it‚Äôs a challenge that has to be solved as quick as possible.</p><p>Again, this is something that you‚Äôre using all the time, just think about how the Apple Maps App computes the best route, or how LinkedIn determines that a profile is a first/second/third level connection from you.</p><img src="https://www.fivestars.blog/assets/posts/dijkstra-algorithm-swift/linkedin.png" alt="linkedin"/><blockquote><p>Picture from <a href="https://www.linkedin.com/pulse/building-new-business-relationships-connecting-your-linkedin-miller">Linkedin</a>.</p></blockquote><p>One of the most famous (dare I say, <em>THE</em> most famous) Shortest Path Finder Algorithm is Dijkstra‚Äôs Algorithm, which is based on three steps:</p><ol><li>Find the cheapest unvisited node reachable</li></ol><ol start="2"><li>Mark it as visited and keep track on which nodes you can visit from it</li></ol><ol start="3"><li>Repeat</li></ol><p>The algorithm ends as soon as we reach the destination node, or whenever there are no more reachable nodes.</p><p>When I say <em>cheap</em> I mean the node that costs less to reach from all the nodes we‚Äôve visited so far.</p><p>This cost comes from the connections: sometimes the graph connections are equal (like the Facebook friendships, there‚Äôs no difference between one connection and another) but sometimes they differ: if you have two ways to go to your home, one way might be <em>easier</em>/<em>cheaper</em>, than the other because on the latter you may have to climb a mountain or something.</p><h2>Swift Time!</h2><p>Now that we‚Äôre all up to speed, let‚Äôs implement everything in Swift!</p><h3>Node</h3><pre><code><span class="keyword">class</span> Node {
  <span class="keyword">var</span> visited = <span class="keyword">false
  var</span> connections: [<span class="type">Connection</span>] = []
}
</code></pre><p>The Node class will be nothing more than a property (used by the algorithm) to see if we‚Äôve visited it already, and an array of connections to other nodes.</p><h3>Connection</h3><pre><code><span class="keyword">class</span> Connection {
  <span class="keyword">public let</span> to: <span class="type">Node</span>
  <span class="keyword">public let</span> weight: <span class="type">Int</span>
  
  <span class="keyword">public init</span>(to node: <span class="type">Node</span>, weight: <span class="type">Int</span>) {
    <span class="call">assert</span>(weight &gt;= <span class="number">0</span>, <span class="string">"weight has to be equal or greater than zero"</span>)
    <span class="keyword">self</span>.<span class="property">to</span> = node
    <span class="keyword">self</span>.<span class="property">weight</span> = weight
  }
}
</code></pre><p>As seen in the <code>Node</code> definition, each connection is assigned to a specific node, therefore all we need to define inside the connection itself is its weight (also known as cost) and the node it connects to.</p><p>I‚Äôm obviously using the mono-directional connections, this way it‚Äôs easier to manage both bidirectional and mono-directional Graphs.</p><h3>Path</h3><p>Lastly we need define a path: a path is nothing more than a successions of nodes.</p><p>This will help us keeping track which paths in our graph we‚Äôve already visited and how we got there.</p><p>More importantly, our algorithm will return us this entity to describe the shortest path between our challenge source node and destination node.</p><p>We will use a recursive way for this definition:</p><pre><code><span class="keyword">class</span> Path {
  <span class="keyword">public let</span> cumulativeWeight: <span class="type">Int</span>
  <span class="keyword">public let</span> node: <span class="type">Node</span>
  <span class="keyword">public let</span> previousPath: <span class="type">Path</span>?
  
  <span class="keyword">init</span>(to node: <span class="type">Node</span>, via connection: <span class="type">Connection</span>? = <span class="keyword">nil</span>, previousPath path: <span class="type">Path</span>? = <span class="keyword">nil</span>) {
    <span class="keyword">if
      let</span> previousPath = path,
      <span class="keyword">let</span> viaConnection = <span class="call">connection</span> {
      <span class="keyword">self</span>.<span class="property">cumulativeWeight</span> = viaConnection.<span class="property">weight</span> + previousPath.<span class="property">cumulativeWeight</span>
    } <span class="keyword">else</span> {
      <span class="keyword">self</span>.<span class="property">cumulativeWeight</span> = <span class="number">0</span>
    }
    
    <span class="keyword">self</span>.<span class="property">node</span> = node
    <span class="keyword">self</span>.<span class="property">previousPath</span> = path
  }
}
</code></pre><p>For convenience, I‚Äôm also adding a <code>cumulativeWeight</code> property to keep track on the cost to reach the path‚Äôs node: this cost is the sum of all the connections weights that we have traveled from the source node to this node.</p><h3>The Algorithm</h3><p>Everything is set! Let‚Äôs dig into the algorithm:</p><pre><code><span class="keyword">func</span> shortestPath(source: <span class="type">Node</span>, destination: <span class="type">Node</span>) -&gt; <span class="type">Path</span>? {
  <span class="keyword">var</span> frontier: [<span class="type">Path</span>] = [] {
    <span class="keyword">didSet</span> { frontier.<span class="call">sort</span> { <span class="keyword">return</span> $0.<span class="property">cumulativeWeight</span> &lt; $1.<span class="property">cumulativeWeight</span> } } <span class="comment">// the frontier has to be always ordered</span>
  }
  
  frontier.<span class="call">append</span>(<span class="type">Path</span>(to: source)) <span class="comment">// the frontier is made by a path that starts nowhere and ends in the source</span>
  
  <span class="keyword">while</span> !frontier.<span class="call">isEmpty</span> {
    <span class="keyword">let</span> cheapestPathInFrontier = frontier.<span class="call">removeFirst</span>() <span class="comment">// getting the cheapest path available</span>
    <span class="keyword">guard</span> !cheapestPathInFrontier.<span class="property">node</span>.<span class="property">visited</span> <span class="keyword">else</span> { <span class="keyword">continue</span> } <span class="comment">// making sure we haven't visited the node already</span>
    
    <span class="keyword">if</span> cheapestPathInFrontier.<span class="property">node</span> === destination {
      <span class="keyword">return</span> cheapestPathInFrontier <span class="comment">// found the cheapest path üòé</span>
    }
    
    cheapestPathInFrontier.<span class="property">node</span>.<span class="property">visited</span> = <span class="keyword">true
    
    for</span> connection <span class="keyword">in</span> cheapestPathInFrontier.<span class="property">node</span>.<span class="property">connections</span> <span class="keyword">where</span> !connection.<span class="property">to</span>.<span class="property">visited</span> { <span class="comment">// adding new paths to our frontier</span>
      frontier.<span class="call">append</span>(<span class="type">Path</span>(to: connection.<span class="property">to</span>, via: connection, previousPath: cheapestPathInFrontier))
    }
  } <span class="comment">// end while</span>
  <span class="keyword">return nil</span> <span class="comment">// we didn't find a path üò£</span>
}
</code></pre><blockquote><p>Yup, just 23 lines of code.</p></blockquote><p>Firstly we define the <code>frontier</code>: the <code>frontier</code> is a collection of paths to nodes that can reach from the nodes the we‚Äôve visited so far.</p><p>It‚Äôs initially empty, but as soon as we launch the script we will add a path to our start node (line <code>6</code>).</p><p>We can now start following the Dijkstra‚Äôs Algorithm steps:</p><h4>1. Find the cheapest unvisited node</h4><p>To do so we extract the cheapest path from our frontier (line <code>9</code>), check if the node was not visited yet and, if it is not, we proceed to the next step (line <code>10</code>).</p><h4>2. Mark it as visited and keep track on which nodes you can visit from it</h4><p>As soon as we reach this step we make sure to mark our node as visited (line <code>16</code>), and then we add all the new (unvisited) reachable nodes from this node by exploring its connections (lines <code>18‚Äì20</code>).</p><h4>3. Repeat</h4><p>The <code>while</code> cycle is now complete, therefore we really just repeat the two steps above!</p><h4>Note 1</h4><p>As you may have noticed, we do something between step 1 and 2 (line <code>12‚Äì14</code>): we check if the new cheapest node is our destination node: if it is, congrats! üéâ We‚Äôve completed the algorithm! Otherwise we continue to step 2.</p><h4>Note 2</h4><p>The algorithm may return an optional (line <code>1</code> and <code>22</code>): it is possible that the source and destination nodes don‚Äôt have a path that connect each other.</p><h2>üëæ Swift Playground</h2><p>All right! We‚Äôve now everything we need to play with the Dijkstra algorithm in Swift! Here‚Äôs the Playground with an example at the bottom.</p><pre><code><span class="keyword">class</span> Node {
  <span class="keyword">var</span> visited = <span class="keyword">false
  var</span> connections: [<span class="type">Connection</span>] = []
}

<span class="keyword">class</span> Connection {
  <span class="keyword">public let</span> to: <span class="type">Node</span>
  <span class="keyword">public let</span> weight: <span class="type">Int</span>
  
  <span class="keyword">public init</span>(to node: <span class="type">Node</span>, weight: <span class="type">Int</span>) {
    <span class="call">assert</span>(weight &gt;= <span class="number">0</span>, <span class="string">"weight has to be equal or greater than zero"</span>)
    <span class="keyword">self</span>.<span class="property">to</span> = node
    <span class="keyword">self</span>.<span class="property">weight</span> = weight
  }
}

<span class="keyword">class</span> Path {
  <span class="keyword">public let</span> cumulativeWeight: <span class="type">Int</span>
  <span class="keyword">public let</span> node: <span class="type">Node</span>
  <span class="keyword">public let</span> previousPath: <span class="type">Path</span>?
  
  <span class="keyword">init</span>(to node: <span class="type">Node</span>, via connection: <span class="type">Connection</span>? = <span class="keyword">nil</span>, previousPath path: <span class="type">Path</span>? = <span class="keyword">nil</span>) {
    <span class="keyword">if
      let</span> previousPath = path,
      <span class="keyword">let</span> viaConnection = <span class="call">connection</span> {
      <span class="keyword">self</span>.<span class="property">cumulativeWeight</span> = viaConnection.<span class="property">weight</span> + previousPath.<span class="property">cumulativeWeight</span>
    } <span class="keyword">else</span> {
      <span class="keyword">self</span>.<span class="property">cumulativeWeight</span> = <span class="number">0</span>
    }
    
    <span class="keyword">self</span>.<span class="property">node</span> = node
    <span class="keyword">self</span>.<span class="property">previousPath</span> = path
  }
}

<span class="keyword">extension</span> <span class="type">Path</span> {
  <span class="keyword">var</span> array: [<span class="type">Node</span>] {
    <span class="keyword">var</span> array: [<span class="type">Node</span>] = [<span class="keyword">self</span>.<span class="property">node</span>]
    
    <span class="keyword">var</span> iterativePath = <span class="keyword">self
    while let</span> path = iterativePath.<span class="call">previousPath</span> {
      array.<span class="call">append</span>(path.<span class="property">node</span>)
      
      iterativePath = path
    }
    
    <span class="keyword">return</span> array
  }
}

<span class="keyword">func</span> shortestPath(source: <span class="type">Node</span>, destination: <span class="type">Node</span>) -&gt; <span class="type">Path</span>? {
  <span class="keyword">var</span> frontier: [<span class="type">Path</span>] = [] {
    <span class="keyword">didSet</span> { frontier.<span class="call">sort</span> { <span class="keyword">return</span> $0.<span class="property">cumulativeWeight</span> &lt; $1.<span class="property">cumulativeWeight</span> } } <span class="comment">// the frontier has to be always ordered</span>
  }
  
  frontier.<span class="call">append</span>(<span class="type">Path</span>(to: source)) <span class="comment">// the frontier is made by a path that starts nowhere and ends in the source</span>
  
  <span class="keyword">while</span> !frontier.<span class="call">isEmpty</span> {
    <span class="keyword">let</span> cheapestPathInFrontier = frontier.<span class="call">removeFirst</span>() <span class="comment">// getting the cheapest path available</span>
    <span class="keyword">guard</span> !cheapestPathInFrontier.<span class="property">node</span>.<span class="property">visited</span> <span class="keyword">else</span> { <span class="keyword">continue</span> } <span class="comment">// making sure we haven't visited the node already</span>
    
    <span class="keyword">if</span> cheapestPathInFrontier.<span class="property">node</span> === destination {
      <span class="keyword">return</span> cheapestPathInFrontier <span class="comment">// found the cheapest path üòé</span>
    }
    
    cheapestPathInFrontier.<span class="property">node</span>.<span class="property">visited</span> = <span class="keyword">true
    
    for</span> connection <span class="keyword">in</span> cheapestPathInFrontier.<span class="property">node</span>.<span class="property">connections</span> <span class="keyword">where</span> !connection.<span class="property">to</span>.<span class="property">visited</span> { <span class="comment">// adding new paths to our frontier</span>
      frontier.<span class="call">append</span>(<span class="type">Path</span>(to: connection.<span class="property">to</span>, via: connection, previousPath: cheapestPathInFrontier))
    }
  } <span class="comment">// end while</span>
  <span class="keyword">return nil</span> <span class="comment">// we didn't find a path üò£</span>
}

<span class="comment">// **** EXAMPLE BELOW ****</span>
<span class="keyword">class</span> MyNode: <span class="type">Node</span> {
  <span class="keyword">let</span> name: <span class="type">String</span>
  
  <span class="keyword">init</span>(name: <span class="type">String</span>) {
    <span class="keyword">self</span>.<span class="property">name</span> = name
    <span class="keyword">super</span>.<span class="keyword">init</span>()
  }
}

<span class="keyword">let</span> nodeA = <span class="type">MyNode</span>(name: <span class="string">"A"</span>)
<span class="keyword">let</span> nodeB = <span class="type">MyNode</span>(name: <span class="string">"B"</span>)
<span class="keyword">let</span> nodeC = <span class="type">MyNode</span>(name: <span class="string">"C"</span>)
<span class="keyword">let</span> nodeD = <span class="type">MyNode</span>(name: <span class="string">"D"</span>)
<span class="keyword">let</span> nodeE = <span class="type">MyNode</span>(name: <span class="string">"E"</span>)

nodeA.<span class="property">connections</span>.<span class="call">append</span>(<span class="type">Connection</span>(to: nodeB, weight: <span class="number">1</span>))
nodeB.<span class="property">connections</span>.<span class="call">append</span>(<span class="type">Connection</span>(to: nodeC, weight: <span class="number">3</span>))
nodeC.<span class="property">connections</span>.<span class="call">append</span>(<span class="type">Connection</span>(to: nodeD, weight: <span class="number">1</span>))
nodeB.<span class="property">connections</span>.<span class="call">append</span>(<span class="type">Connection</span>(to: nodeE, weight: <span class="number">1</span>))
nodeE.<span class="property">connections</span>.<span class="call">append</span>(<span class="type">Connection</span>(to: nodeC, weight: <span class="number">1</span>))

<span class="keyword">let</span> sourceNode = nodeA
<span class="keyword">let</span> destinationNode = nodeD

<span class="keyword">var</span> path = <span class="call">shortestPath</span>(source: sourceNode, destination: destinationNode)

<span class="keyword">if let</span> succession: [<span class="type">String</span>] = path?.<span class="property">array</span>.<span class="call">reversed</span>().<span class="call">flatMap</span>({ $0 <span class="keyword">as</span>? <span class="type">MyNode</span>}).<span class="call">map</span>({$0.<span class="property">name</span>}) {
  <span class="call">print</span>(<span class="string">"üèÅ Quickest path:</span> \(succession)<span class="string">"</span>)
} <span class="keyword">else</span> {
  <span class="call">print</span>(<span class="string">"üí• No path between</span> \(sourceNode.<span class="property">name</span>) <span class="string">&amp;</span> \(destinationNode.<span class="property">name</span>)<span class="string">"</span>)
}
</code></pre><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusion</h2><p>In the academic world there are discussions on whether Graph Theory should replace Geometry in our schools curriculum: as a Computer Engineer myself, I can see why this might happen in the future üòÅ.</p><p>I hope you‚Äôve learn something new today! Till next time üëãüèª</p><blockquote><p>‚ö†Ô∏èÔ∏è NoteÔ∏è ‚ö†Ô∏èÔ∏è Some readers have pointed out that the <code>frontier</code> array is not the most efficient approach to obtain the cheapest available path, because of its sorting overhead. I agree, there are better ways: for example by using <a href="https://en.wikipedia.org/wiki/Priority_queue">Priority Queue</a> data structure. Thanks to <a href="https://www.reddit.com/user/madiyar">u/madiyar</a> and <a href="https://medium.com/u/fe5937eabcda">Ilya Myakotin</a> for the support!</p></blockquote>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/little-xcode-beta-surprises</guid><title>Little Xcode Beta Surprises üéÅ: Core Graphics Codable Conformance</title><description></description><link>https://www.fivestars.blog/articles/little-xcode-beta-surprises</link><pubDate>Tue, 25 Jul 2017 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>If you have dove straight into <a href="https://www.fivestars.blog/articles/swift-decodable/">Swift 4‚Äôs <code>Codable</code> protocol</a> as early as Xcode 9 Beta 1, while firing up one of the latest betas (<a href="https://twitter.com/zntfdr/status/885881044896841728">3 or later</a>) you might have seen a warning similar to this:</p><img src="https://www.fivestars.blog/assets/posts/xcode-beta-surprises/warning.png" alt="warning"/><blockquote><p>Surprise!</p></blockquote><p>The <a href="https://developer.apple.com/documentation/coregraphics">Core Graphics Framework</a> is not open source <a href="http://github.com/apple/swift">like Swift</a>, so it wasn‚Äôt something that we could have seen coming. Still, this is great news!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Geometric Data Types Codable Conformance</h2><p>It turns out that <a href="https://developer.apple.com/documentation/coregraphics?changes=latest_minor#2008762">every single <code>CoreGraphics</code> Geometric Data Type</a> now conforms to <code>Codable</code>, namely:</p><ul><li><code>CGFloat</code></li><li><code>CGPoint</code></li><li><code>CGSize</code></li><li><code>CGRect</code></li><li><code>CGVector</code></li><li><code>CGAffineTransform</code></li></ul><p>Awesome! How do we take advantage of this?</p><h2>Following the new Conformance</h2><p>If we store <code>CGPoints</code>/<code>CGSizes</code>/etc somewhere, we must now make sure to do so in the same way as the new <code>Codable</code> conformance expect them to.</p><p>Let‚Äôs find out how!</p><h3>Try 1: Source Code</h3><p>The easiest way would be to look at the source code, if we go to the <code>CGPoint</code> definition for example, this is what we‚Äôll see:</p><img src="https://www.fivestars.blog/assets/posts/xcode-beta-surprises/closed-source.png" alt="closed-source"/><blockquote><p>Closed Source won‚Äôt show us any useful information</p></blockquote><p>Again, the Core Graphics Framework is not open source, so we get to see only the headers and the definitions of the public functions. This won‚Äôt help us understand how things work behind the scene, let‚Äôs try another way‚Ä¶</p><p>Try 2: Apple‚Äôs Documentation My second best guess was <a href="https://developer.apple.com/documentation/coregraphics/cgpoint/2919705-init?changes=latest_minor">Apple‚Äôs Documentation</a>, boy was it disappointing:</p><img src="https://www.fivestars.blog/assets/posts/xcode-beta-surprises/apple-doc.png" alt="apple-doc"/><blockquote><p>No overview available ü§£</p></blockquote><h4>Try 3: The Hard Way (Playgrounds!)</h4><p>Tired of guessing new ways to uncover the mystery, I‚Äôve decided to do things the easy way. I‚Äôve fired up a new playground and start coding:</p><img src="https://www.fivestars.blog/assets/posts/xcode-beta-surprises/playground.png" alt="playground"/><blockquote><p>Can‚Äôt go wrong with Playgrounds! (code <a href="https://gist.github.com/zntfdr/62bcaf71a533ad49b70b1cfc3b0eac82">here</a>)</p></blockquote><p>So there you have it! üéâüéâüéâ</p><h2>The Undocumented CoreGraphics Conformance</h2><p>To make a quick recap, this is how you store/read the data (as seen in the Playground above):</p><ul><li><code>GFloat</code> Expect just a number, with an optional decimal point <code>.</code> to split the integer part from the fractional part (if there‚Äôs a fractional part)</li></ul><ul><li><code>CGPoint</code> Expect an array of two <code>CGFloats</code>, the first represents the <code>x</code>, the second the <code>y</code></li></ul><ul><li><code>CGSize</code> Expect an array of two <code>CGFloats</code>, the first represents the <code>width</code>, the second the <code>height</code></li></ul><ul><li><code>CGVector</code> Expect an array of two <code>CGFloats</code>, the first represents the <code>dx</code>, the second the <code>dy</code></li></ul><ul><li><code>CGRect</code> Expect an array of two arrays of two <code>CGFloat</code>, the first represents the origin (<code>CGPoint</code>), the second array the size (<code>CGSize</code>)</li></ul><ul><li><code>CGAffineTransform</code> Expect an array of six <code>CGFloat</code>s, representing (in order) <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>tx</code>, and <code>ty</code></li></ul><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>It‚Äôs great that Apple has decided to start conforming its Frameworks Data Objects to <code>Codable</code>, I‚Äôm looking forward to more and more Apple‚Äôs Framework jump on the <code>Codable</code> wagon! (please do <code>Core Location</code> next?)</p><h2>Update: Source Code</h2><blockquote><p>(2017‚Äì08‚Äì01) While my mission is now complete, <a href="https://medium.com/@londeix">Bartosz Polaczyk</a> <a href="https://medium.com/@londeix/there-is-however-a-way-to-look-into-source-code-try-1-6071081adc49">has pointed out</a> that there‚Äôs an actual way to see the <code>Codable</code> conformance source code üéâ</p></blockquote><p>It turns out that, if we look at the Swift source code, we have the complete CoreGraphics <code>Codable</code> conformance <a href="https://github.com/apple/swift/blob/391d49a31e5117585d05a2d003047698142fd1a6/stdlib/public/SDK/CoreGraphics/CoreGraphics.swift">here</a>!</p><p>Everything written above is still 100% true and perfectly valid, but it‚Äôs awesome to have the actual code: thank you <a href="https://medium.com/@londeix">Bartosz Polaczyk</a> üôå</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/swift-decodable</guid><title>Swift 4 Decodable: Beyond The Basics üì¶</title><description></description><link>https://www.fivestars.blog/articles/swift-decodable</link><pubDate>Tue, 20 Jun 2017 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>One of the features that I was looking forward to this year WWDC was <a href="https://developer.apple.com/documentation/swift/codable"><code>Codable</code></a>, which is just a <a href="https://github.com/apple/swift/blob/ff1e770e6f1df0f6d10ee5962be5f34c37ff3cc7/stdlib/public/core/Codable.swift#L43">type alias</a> of the <a href="https://developer.apple.com/documentation/swift/encodable"><code>Encodable</code></a> and <a href="https://developer.apple.com/documentation/swift/decodable"><code>Decodable</code></a> protocols.</p><p>I‚Äôve just spent a whole week shifting my Swift projects from using <a href="https://www.fivestars.blog/articles/parse-json-swift-2/">custom JSON parsers</a> to <code>Decodable</code> (<a href="https://twitter.com/zntfdr/status/876797117322244097">while removing a lot of code! üéâ</a>), this post showcases what I‚Äôve learned along the way.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Basics</h2><blockquote><p>If you haven‚Äôt seen it already, I suggest you to watch the <a href="https://developer.apple.com/videos/play/wwdc2017/212/">related WWDC session</a> (the <code>Codable</code> part starts past 23 minutes).</p></blockquote><p>In short: you can now convert a set of data from a <em>JSON Object</em> or <em>Property List</em> to an equivalent <code>Struct</code> or <code>Class</code>, basically without writing a single line of code.</p><p>Here‚Äôs an example:</p><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">struct</span> Swifter: <span class="type">Decodable</span> {
  <span class="keyword">let</span> fullName: <span class="type">String</span>
  <span class="keyword">let</span> id: <span class="type">Int</span>
  <span class="keyword">let</span> twitter: <span class="type">URL</span>
}

<span class="keyword">let</span> json = <span class="string">"""
{
 "fullName": "Federico Zanetello",
 "id": 123456,
 "twitter": "http://twitter.com/zntfdr"
}
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)! <span class="comment">// our data in native (JSON) format</span>
<span class="keyword">let</span> myStruct = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">Swifter</span>.<span class="keyword">self</span>, from: json) <span class="comment">// Decoding our data</span>
<span class="call">print</span>(myStruct) <span class="comment">// decoded!!!!!</span>
</code></pre><h2>What the Compiler Does Without Telling Us</h2><p>If we look at the <code>Decodable</code> <a href="https://developer.apple.com/documentation/swift/decodable">documentation</a>, we see that the protocol requires the implementation of a <code>init(from: Decoder)</code> method.</p><p>We didn‚Äôt implemented it in the Playground: why did it work?</p><p>It‚Äôs for the same reason why we don‚Äôt have to implement a <code>Swifter</code> initializer, but we can still go ahead and initialize our struct: the Swift compiler provides one for us! üôå</p><h2>Conforming to Decodable</h2><p>All of the above is great and just works‚Ñ¢ as long as all we need to parse is a subsets of primitives (strings, numbers, bools, etc) or other structures that conform to the <code>Decodable</code> protocol.</p><p>But what about parsing more ‚Äúcomplex structures‚Äù? Well, in this case we have to do some work.</p><h2>Implementing init(from: Decoder)</h2><blockquote><p>‚ö†Ô∏è This part might be a bit trickier to understand: everything will be clear with the examples below!</p></blockquote><p>Before diving into our own implementation of this initializer, let‚Äôs take a look at the main players:</p><h3>The Decoder</h3><p>As the name implies, the <a href="https://developer.apple.com/documentation/swift/decoder"><code>Decoder</code></a> transforms something into something else: in our case this means moving from a native format (e.g. JSON) into an in-memory representation.</p><p>We will focus on two of the Decoder‚Äôs functions:</p><ol><li><code>container&lt;Key&gt;(keyedBy: Key.Type)</code></li><li><code>singleValueContainer()</code></li></ol><p>In both cases, the <code>Decoder</code> returns a (Data) <em>Container</em>.</p><p>With the first function, the <code>Decoder</code> returns a <a href="https://developer.apple.com/documentation/swift/codingkey">keyed</a> container, <a href="https://developer.apple.com/documentation/swift/keyeddecodingcontainer"><code>KeyedDecodingContainer:</code></a> to reach the actual data, we must first tell the container which keys to look for (more on this later!).</p><p>The second function tells the decoder that there‚Äôs no key: the returned container, <a href="https://developer.apple.com/documentation/swift/singlevaluedecodingcontainer"><code>SingleValueDecodingContainer</code></a>, is actually the data that we want!</p><h3>The Containers</h3><p>Thanks to our <code>Decoder</code> we‚Äôve moved from a raw native format to a structure that we can play with (our containers). Time to extract our data! Let‚Äôs take a look at the two containers that we‚Äôve just discovered:</p><h4>KeyedDecodingContainer</h4><p>In this case we know that our container is keyed, you can think of this container as a dictionary <code>[Key: Any]</code>.</p><p>Different keys can hold different types of data: which is why the container offers several <code>decode(Type:forKey:)</code> methods.</p><p>This method is where the magic happens: by calling it, the container returns us our data‚Äôs value of the <strong>given type</strong> for the <strong>given key</strong> (examples below!).</p><p>Most importantly, the container offers the generic method <a href="https://developer.apple.com/documentation/swift/keyeddecodingcontainer/2894918-decode"><code>decode&lt;T&gt;(T.Type, forKey: K) throws -&gt; T where T: Decodable</code></a> which means that any type, as long as it conforms to <code>Decodable</code>, can be used with this function! üéâüéâ</p><h4>SingleValueDecodingContainer</h4><p>Everything works as above, just without any keys.</p><h3>Implementing our init(from: Decoder)</h3><p>We‚Äôve seen all the players that will help us go from data stored in our disk to data that we can use in our App: let‚Äôs put them all together!</p><p>Take the playground at the start of the article for example: instead of letting the compiler doing it for us, let‚Äôs implement our own <code>init(from: Decoder)</code>.</p><h4>Step 1: Choosing The Right Decoder</h4><p>The example‚Äôs data is a JSON object, therefore we will use the <a href="https://github.com/apple/swift/blob/dbe77601f348583eb892a5b9fff09327e23b00c2/stdlib/public/SDK/Foundation/JSONEncoder.swift#L789">Swift Library‚Äôs <code>JSONDecoder</code></a>.</p><pre><code><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()
</code></pre><blockquote><p>‚ö†Ô∏è JSON and P-list encoders and decoders are embedded in the Swift Library: you can write your own coders to support different formats!</p></blockquote><h4>Step 2: Determining The Right Container</h4><p>In our case the data is keyed:</p><pre><code>{
 <span class="string">"fullName"</span>: <span class="string">"Federico Zanetello"</span>,
 <span class="string">"id"</span>: <span class="number">123456</span>,
 <span class="string">"twitter"</span>: <span class="string">"http://twitter.com/zntfdr"</span>
}
</code></pre><p>To reach <code>"Federico Zanetello"</code> we must ask for the value of key <code>"fullName"</code>, to reach <code>123456</code> we must ask for the valued of index <code>"id"</code>, etc.</p><p>Therefore, we must use a <code>KeyedDecodingContainer</code> Container (by calling the Decoder‚Äôs method <code>container&lt;Key&gt;(keyedBy: Key.Type)</code>).</p><p>But before doing so, as requested by the method, we must declare our keys: <a href="https://github.com/apple/swift/blob/890c2d50159892e5160481c6882e10a2fc75e249/stdlib/public/core/Codable.swift#L50"><code>Key</code> is actually a protocol</a> and the easiest way to implement it is by declaring our keys as an <code>enum</code> of type <code>String</code>:</p><pre><code><span class="keyword">enum</span> MyStructKeys: <span class="type">String</span>, <span class="type">CodingKey</span> {
  <span class="keyword">case</span> fullName = <span class="string">"fullName"</span>
  <span class="keyword">case</span> id = <span class="string">"id"</span>
  <span class="keyword">case</span> twitter = <span class="string">"twitter"</span>
}
</code></pre><blockquote><p>Note: you don‚Äôt have to write = ‚Äú‚Ä¶‚Äù in each case: but for clarity‚Äôs sake I‚Äôve chosen to write it.</p></blockquote><p>Now that we have our keys set up, we can go on and create our container:</p><pre><code><span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">container</span>(keyedBy: <span class="type">MyStructKeys</span>.<span class="keyword">self</span>)
</code></pre><h4>Step 3: Extracting Our Data</h4><p>Finally, we must convert the container‚Äôs data into something that we can use in our app:</p><pre><code><span class="keyword">let</span> fullName: <span class="type">String</span> = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">fullName</span>)
<span class="keyword">let</span> id: <span class="type">Int</span> = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">id</span>)
<span class="keyword">let</span> twitter: <span class="type">URL</span> = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">URL</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">twitter</span>)
</code></pre><h4>Step 4: Initializing our Struct/Class</h4><p>We can use the default Swifter initializer:</p><pre><code><span class="keyword">let</span> myStruct = <span class="type">Swifter</span>(fullName: fullName, id: id, twitter: twitter)
</code></pre><p>Voila! We‚Äôve just implemented Decodable all by ourselves! üëèüèªüëèüèª Here‚Äôs the final playground:</p><pre><code><span class="comment">//: Playground - noun: a place where people can play</span>
<span class="keyword">import</span> Foundation

<span class="keyword">struct</span> Swifter {
  <span class="keyword">let</span> fullName: <span class="type">String</span>
  <span class="keyword">let</span> id: <span class="type">Int</span>
  <span class="keyword">let</span> twitter: <span class="type">URL</span>
  
  <span class="keyword">init</span>(fullName: <span class="type">String</span>, id: <span class="type">Int</span>, twitter: <span class="type">URL</span>) { <span class="comment">// default struct initializer</span>
    <span class="keyword">self</span>.<span class="property">fullName</span> = fullName
    <span class="keyword">self</span>.<span class="property">id</span> = id
    <span class="keyword">self</span>.<span class="property">twitter</span> = twitter
  }
}

<span class="keyword">extension</span> <span class="type">Swifter</span>: <span class="type">Decodable</span> {
  <span class="keyword">enum</span> MyStructKeys: <span class="type">String</span>, <span class="type">CodingKey</span> { <span class="comment">// declaring our keys</span> 
    <span class="keyword">case</span> fullName = <span class="string">"fullName"</span>
    <span class="keyword">case</span> id = <span class="string">"id"</span>
    <span class="keyword">case</span> twitter = <span class="string">"twitter"</span>
  }
  
  <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
    <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">container</span>(keyedBy: <span class="type">MyStructKeys</span>.<span class="keyword">self</span>) <span class="comment">// defining our (keyed) container</span>
    <span class="keyword">let</span> fullName: <span class="type">String</span> = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">String</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">fullName</span>) <span class="comment">// extracting the data</span>
    <span class="keyword">let</span> id: <span class="type">Int</span> = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">Int</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">id</span>) <span class="comment">// extracting the data</span>
    <span class="keyword">let</span> twitter: <span class="type">URL</span> = <span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">URL</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">twitter</span>) <span class="comment">// extracting the data</span>
    
    <span class="keyword">self</span>.<span class="keyword">init</span>(fullName: fullName, id: id, twitter: twitter) <span class="comment">// initializing our struct</span>
  }
}

<span class="keyword">let</span> json = <span class="string">"""
{
 "fullName": "Federico Zanetello",
 "id": 123456,
 "twitter": "http://twitter.com/zntfdr"
}
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)! <span class="comment">// our native (JSON) data</span>
<span class="keyword">let</span> myStruct = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">Swifter</span>.<span class="keyword">self</span>, from: json) <span class="comment">// decoding our data</span>
<span class="call">print</span>(myStruct) <span class="comment">// decoded!</span>
</code></pre><h2>Going further (More Playgrounds!)</h2><p>Now that our <code>Swifter</code> struct conforms to <code>Decodable</code>, any other struct/class/etc that contains such data can automatically decode Swifter for free. For example:</p><h2>Arrays</h2><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">struct</span> Swifter: <span class="type">Decodable</span> {
  <span class="keyword">let</span> fullName: <span class="type">String</span>
  <span class="keyword">let</span> id: <span class="type">Int</span>
  <span class="keyword">let</span> twitter: <span class="type">URL</span>
}

<span class="keyword">let</span> json = <span class="string">"""
[{
 "fullName": "Federico Zanetello",
 "id": 123456,
 "twitter": "http://twitter.com/zntfdr"
},{
 "fullName": "Federico Zanetello",
 "id": 123456,
 "twitter": "http://twitter.com/zntfdr"
},{
 "fullName": "Federico Zanetello",
 "id": 123456,
 "twitter": "http://twitter.com/zntfdr"
}]
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)! <span class="comment">// our data in native format</span>
<span class="keyword">let</span> myStructArray = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>([<span class="type">Swifter</span>].<span class="keyword">self</span>, from: json)

myStructArray.<span class="call">forEach</span> { <span class="call">print</span>($0) } <span class="comment">// decoded!!!!!</span>
</code></pre><h2>Dictionaries</h2><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">struct</span> Swifter: <span class="type">Codable</span> {
  <span class="keyword">let</span> fullName: <span class="type">String</span>
  <span class="keyword">let</span> id: <span class="type">Int</span>
  <span class="keyword">let</span> twitter: <span class="type">URL</span>
}

<span class="keyword">let</span> json = <span class="string">"""
{
  "one": {
    "fullName": "Federico Zanetello",
    "id": 123456,
    "twitter": "http://twitter.com/zntfdr"
  },
  "two": {
    "fullName": "Federico Zanetello",
    "id": 123456,
    "twitter": "http://twitter.com/zntfdr"
  },
  "three": {
    "fullName": "Federico Zanetello",
    "id": 123456,
    "twitter": "http://twitter.com/zntfdr"
  }
}
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)! <span class="comment">// our data in native format</span>
<span class="keyword">let</span> myStructDictionary = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>([<span class="type">String</span>: <span class="type">Swifter</span>].<span class="keyword">self</span>, from: json)

myStructDictionary.<span class="call">forEach</span> { <span class="call">print</span>(<span class="string">"</span>\($0.<span class="property">key</span>)<span class="string">:</span> \($0.<span class="property">value</span>)<span class="string">"</span>) } <span class="comment">// decoded!!!!!</span>
</code></pre><h2>Enums</h2><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">struct</span> Swifter: <span class="type">Decodable</span> {
  <span class="keyword">let</span> fullName: <span class="type">String</span>
  <span class="keyword">let</span> id: <span class="type">Int</span>
  <span class="keyword">let</span> twitter: <span class="type">URL</span>
}

<span class="keyword">enum</span> SwifterOrBool: <span class="type">Decodable</span> {
  <span class="keyword">case</span> swifter(<span class="type">Swifter</span>)
  <span class="keyword">case</span> bool(<span class="type">Bool</span>)
}

<span class="keyword">extension</span> <span class="type">SwifterOrBool</span>: <span class="type">Decodable</span> {
  <span class="keyword">enum</span> CodingKeys: <span class="type">String</span>, <span class="type">CodingKey</span> {
    <span class="keyword">case</span> swifter, bool
  }
  
  <span class="keyword">init</span>(from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
    <span class="keyword">let</span> container = <span class="keyword">try</span> decoder.<span class="call">container</span>(keyedBy: <span class="type">CodingKeys</span>.<span class="keyword">self</span>)
    <span class="keyword">if let</span> swifter = <span class="keyword">try</span> container.<span class="call">decodeIfPresent</span>(<span class="type">Swifter</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">swifter</span>) {
      <span class="keyword">self</span> = .<span class="call">swifter</span>(swifter)
    } <span class="keyword">else</span> {
      <span class="keyword">self</span> = .<span class="call">bool</span>(<span class="keyword">try</span> container.<span class="call">decode</span>(<span class="type">Bool</span>.<span class="keyword">self</span>, forKey: .<span class="dotAccess">bool</span>))
    }
  }
}

<span class="keyword">let</span> json = <span class="string">"""
[{
"swifter": {
   "fullName": "Federico Zanetello",
   "id": 123456,
   "twitter": "http://twitter.com/zntfdr"
  }
},
{ "bool": true },
{ "bool": false },
{
"swifter": {
   "fullName": "Federico Zanetello",
   "id": 123456,
   "twitter": "http://twitter.com/zntfdr"
  }
}]
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)! <span class="comment">// our native (JSON) data</span>
<span class="keyword">let</span> myEnumArray = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>([<span class="type">SwifterOrBool</span>].<span class="keyword">self</span>, from: json) <span class="comment">// decoding our data</span>
  
myEnumArray.<span class="call">forEach</span> { <span class="call">print</span>($0) } <span class="comment">// decoded!</span>
</code></pre><h2>More Complex Structs</h2><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">struct</span> Swifter: <span class="type">Decodable</span> {
  <span class="keyword">let</span> fullName: <span class="type">String</span>
  <span class="keyword">let</span> id: <span class="type">Int</span>
  <span class="keyword">let</span> twitter: <span class="type">URL</span>
}

<span class="keyword">struct</span> MoreComplexStruct: <span class="type">Decodable</span> {
  <span class="keyword">let</span> swifter: <span class="type">Swifter</span>
  <span class="keyword">let</span> lovesSwift: <span class="type">Bool</span>
}

<span class="keyword">let</span> json = <span class="string">"""
{
  "swifter": {
    "fullName": "Federico Zanetello",
    "id": 123456,
    "twitter": "http://twitter.com/zntfdr"
  },
  "lovesSwift": true
}
"""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)! <span class="comment">// our data in native format</span>
<span class="keyword">let</span> myMoreComplexStruct = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">MoreComplexStruct</span>.<span class="keyword">self</span>, from: json)

<span class="call">print</span>(myMoreComplexStruct.<span class="property">swifter</span>) <span class="comment">// decoded!!!!!</span>
</code></pre><p>And so on!</p><h2>Before Departing</h2><p>In all probability, during your first <code>Decodable</code> implementations, something will go wrong: maybe it‚Äôs a key mismatch, maybe it‚Äôs a type mismatch, etc.</p><p>To detect all of these errors early, I suggest you to use Swift Playgrounds with <a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ErrorHandling.html">error handling</a> as much as possible:</p><pre><code><span class="keyword">do</span> {
  <span class="keyword">let</span> myStruct = <span class="keyword">try</span> <span class="type">JSONDecoder</span>().<span class="call">decode</span>(<span class="type">Swifter</span>.<span class="keyword">self</span>, from: json) <span class="comment">// do your decoding here</span>
} <span class="keyword">catch</span> {
  <span class="call">print</span>(error) <span class="comment">// any decoding error will be printed here!</span>
}
</code></pre><blockquote><p>You can go even deeper by splitting different types of <a href="https://developer.apple.com/documentation/swift/decodingerror">Decoding Errors</a>.</p></blockquote><p>Even on the first Xcode 9 beta, the error messages are clear and on point üíØ.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>I was really looking forward to this new Swift 4 feature and I‚Äôm very happy with its implementation. Time to drop all <a href="https://twitter.com/zntfdr/status/876797117322244097">those custom JSON parsers</a>!</p><p>That‚Äôs all for today! Happy <strong>De</strong>coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/build-compass-app-swift</guid><title>How to Build a Compass App in Swift üß≠</title><description></description><link>https://www.fivestars.blog/articles/build-compass-app-swift</link><pubDate>Tue, 2 May 2017 00:00:00 +0700</pubDate><content:encoded><![CDATA[<blockquote><p>‚ö†Ô∏è This article assumes that you‚Äôre already somehow familiar with the Core Location Framework</p></blockquote><p>Back in 2007 both Android and iOS (then <em>iPhone OS</em>) were at the very early stages of what has become the smartphone biggest revolution.</p><p>Along with the Android announcement, Google also launched its first Android Developer Challenge, aimed to raise developers interest to the platform.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><p>Among the several entries to the challenge there was <a href="http://enkinblog.blogspot.com/">Enkin</a>, essentially Google Maps on steroids. If you have 7 minutes to spare, here‚Äôs the video entry:</p><div class="videoThumbnail" style="background-image: url(/assets/posts/build-compass-app-swift/enkin-youtube-thumbnail.jpg)">
  <a style="width:100%;height:100%;" target="_blank" rel="nofollow" href="https://youtube.com/watch?v=2V6MNp_tWG0">
    <div class="playButton">
      <img src="https://www.fivestars.blog/common/play-video.png"/>
    </div>
  </a>
</div><blockquote><p>These guys didn‚Äôt win the challenge‚Ä¶<a href="http://enkinblog.blogspot.com/2009/12/whole-story-so-far.html">they got hired by Google!</a></p></blockquote><p>Bare in mind that, at the time, most of the world still didn‚Äôt know what Android or an iPhone were, we also didn‚Äôt have the App/Play Store yet!</p><p>After watching that video, my mind was completely blown away ü§Ø</p><p>Now let‚Äôs skip forward to 10 years later (today!), how difficult it is to create something similar? Well, replicating the whole Enkin concept might take too long, let‚Äôs start with the compass: how hard it is to create a Compass app?</p><h2>The Basics: iPhone Heading</h2><p>Nowadays every iOS device has a magnetometer on board, that plus iOS‚Äôs <code>CLLocationManager</code> makes this first challenge incredibly easy.</p><p>One of the functionalities of <code>CLLocationManager</code> is reporting the device <strong>Heading</strong>.</p><p>The Heading comes in the form of a <a href="https://developer.apple.com/reference/corelocation/clheading"><code>CLHeading</code></a> data object which, among its properties, contains <a href="https://developer.apple.com/reference/corelocation/clheading/1423568-trueheading"><code>trueHeading</code></a>, that is the actual device orientation relative to <a href="https://en.wikipedia.org/wiki/True_north">true north</a>, in degrees.</p><p>Just imagine a <em>2D vector</em> with origin on your home button and pointing towards the earpiece speaker: the <code>trueHeading</code> is the angle between that vector and the vector starting from the same point but pointing towards the true north.</p><p>If your phone points exactly to the True North you‚Äôll get a heading of 0 (zero) degrees, if it points towards East you‚Äôll get 90 degrees etc.</p><h2>The Picture</h2><p>We need a picture of something pointing, you can choose anything you want, what it matter is that the North arrow points up, this is what I use:</p><img src="https://www.fivestars.blog/assets/posts/build-compass-app-swift/compass.jpeg" alt="compass"/><p>Why it is important that it points up? Because this way, when we get a 0-degree (zero-degree) heading, we know that we don‚Äôt have to rotate the picture, as it is already pointing to the right direction!</p><p>If we get any other heading angle, then we know that we will need to rotate the picture exactly of the same degrees.</p><h2>Code Snippets</h2><p>These are the core parts for our first Compass App:</p><h3>Location Manager</h3><p>This is the <code>CLLocationManager</code> declaration, with the request to start monitoring the device heading embedded in.</p><pre><code><span class="keyword">let</span> locationManager: <span class="type">CLLocationManager</span> = {
  $0.<span class="call">requestWhenInUseAuthorization</span>()
  $0.<span class="call">startUpdatingHeading</span>()
  <span class="keyword">return</span> $0
}(<span class="type">CLLocationManager</span>())
</code></pre><h3>Location Manager Delegate</h3><p>As I‚Äôve said above, all we have to do is rotate our image of the same angle as our heading, I didn‚Äôt lie:</p><pre><code><span class="keyword">func</span> locationManager(<span class="keyword">_</span> manager: <span class="type">CLLocationManager</span>, didUpdateHeading newHeading: <span class="type">CLHeading</span>) {
  <span class="type">UIView</span>.<span class="call">animate</span>(withDuration: <span class="number">0.5</span>) {
    <span class="keyword">let</span> angle = newHeading.<span class="property">trueHeading</span>.<span class="property">toRadians</span> <span class="comment">// convert from degrees to radians</span>
    <span class="keyword">self</span>.<span class="property">imageView</span>.<span class="property">transform</span> = <span class="type">CGAffineTransform</span>(rotationAngle: angle) <span class="comment">// rotate the picture</span>
  }
}
</code></pre><p><code>CGAffineTransform</code> requires a <code>rotationAngle</code> expressed in radians, therefore I‚Äôve added a small extension to convert our heading angle to radians:</p><pre><code><span class="keyword">extension</span> <span class="type">CGFloat</span> {
  <span class="keyword">var</span> toRadians: <span class="type">CGFloat</span> { <span class="keyword">return self</span> * .<span class="dotAccess">pi</span> / <span class="number">180</span> }
  <span class="keyword">var</span> toDegrees: <span class="type">CGFloat</span> { <span class="keyword">return self</span> * <span class="number">180</span> / .<span class="dotAccess">pi</span> }
}
</code></pre><blockquote><p><a href="https://twitter.com/zntfdr/status/847799450143670273">New in Swift 3.1: the œÄ value is defined as a static property on Double, Float, and CGFloat!</a></p></blockquote><p>That‚Äôs it! This is all you need to build your first compass app! üéâ</p><h2>Pointing At Any Direction</h2><p>Our first target is complete, we can build a whole Compass App in less than 50 lines of code!</p><p>One of the cool features about Enkin is that, given the location, the App can point at things around you.</p><p>Say we have a Movie Theater that we really, really, like. However, we get lost fairly often and we always miss the first five minutes of every movie. We want to put an end to that: how can we build an app that always points at our movie theater?</p><p>Obviously knowing only the device heading is not enough anymore, to solve this new challenge we must have three parameters: our device heading, our device location, and our movie theater location.</p><h3>The Parameters</h3><p>We‚Äôve seen how to get the device heading and obviously we know by heart the GPS location of our beloved movie theater.</p><p>To also keep track of our location we will need to update our Location Manager declaration to request not only the device heading, but also our device location:</p><pre><code><span class="keyword">let</span> locationManager: <span class="type">CLLocationManager</span> = {
  $0.<span class="call">requestWhenInUseAuthorization</span>()
  $0.<span class="call">startUpdatingLocation</span>() <span class="comment">// now we request to monitor the device location!</span>
  $0.<span class="call">startUpdatingHeading</span>()
  <span class="keyword">return</span> $0
}(<span class="type">CLLocationManager</span>())
</code></pre><p>All it‚Äôs left to do now is to declare and fill in our delegate‚Äôs <a href="https://developer.apple.com/reference/corelocation/cllocationmanagerdelegate/1423615-locationmanager"><code>locationManager(_:, didUpdateLocations:)</code></a> function, then we will have all our parameters!</p><pre><code><span class="keyword">func</span> locationManager(<span class="keyword">_</span> manager: <span class="type">CLLocationManager</span>, didUpdateLocations locations: [<span class="type">CLLocation</span>]) {
  <span class="keyword">guard let</span> currentLocation = locations.<span class="property">last</span> <span class="keyword">else</span> { <span class="keyword">return</span> }
  lastLocation = currentLocation <span class="comment">// store this location somewhere</span>
}
</code></pre><h2>Rotate The (Compass) Picture</h2><p>Now that have our three parameters, we need to rotate our picture accordingly to where the movie theater is.</p><p>In order to do that, first we must compute the <a href="https://en.wikipedia.org/wiki/Bearing_%28navigation%29">Bearing</a> angle between our location and the Movie Theater.</p><p>In this case saying ‚ÄúA picture is worth a thousand words‚Äù really shines, this is what the Bearing between two locations is:</p><blockquote><p>Note: Œ≤ is our Bearing</p></blockquote><img src="https://www.fivestars.blog/assets/posts/build-compass-app-swift/bearing-wiki-picture.jpeg" alt="bearing-wiki-picture"/><blockquote><p>Picture shamelessly stolen from <a href="http://stackoverflow.com/questions/8123049/calculate-bearing-between-two-locations-lat-long">StackOverflow</a>.</p></blockquote><p>If your phone points exactly to the true north, the Bearing is the angle that your device must rotate in order to point right to our movie theater.</p><p>In order to compute our bearing, we must project our GPS locations (the device‚Äôs and the theater's) into a 2D plane, and then apply the formula above.</p><p>There‚Äôs no definitive way to map each GPS location to a 2D panel point, this is why we have so many different world <a href="https://en.wikipedia.org/wiki/Map_projection">map projections</a>. Luckily, in our case any projection will do.</p><p>There are plenty of solutions for the bearing problem on StackOverflow, I just pick one and went on with the rest of the project:</p><pre><code><span class="keyword">public extension</span> <span class="type">CLLocation</span> {
  <span class="keyword">func</span> bearingToLocationRadian(<span class="keyword">_</span> destinationLocation: <span class="type">CLLocation</span>) -&gt; <span class="type">CGFloat</span> {
    
    <span class="keyword">let</span> lat1 = <span class="keyword">self</span>.<span class="property">coordinate</span>.<span class="property">latitude</span>.<span class="property">degreesToRadians</span>
    <span class="keyword">let</span> lon1 = <span class="keyword">self</span>.<span class="property">coordinate</span>.<span class="property">longitude</span>.<span class="property">degreesToRadians</span>
    
    <span class="keyword">let</span> lat2 = destinationLocation.<span class="property">coordinate</span>.<span class="property">latitude</span>.<span class="property">degreesToRadians</span>
    <span class="keyword">let</span> lon2 = destinationLocation.<span class="property">coordinate</span>.<span class="property">longitude</span>.<span class="property">degreesToRadians</span>
    
    <span class="keyword">let</span> dLon = lon2 - lon1
    
    <span class="keyword">let</span> y = <span class="call">sin</span>(dLon) * <span class="call">cos</span>(lat2)
    <span class="keyword">let</span> x = <span class="call">cos</span>(lat1) * <span class="call">sin</span>(lat2) - <span class="call">sin</span>(lat1) * <span class="call">cos</span>(lat2) * <span class="call">cos</span>(dLon)
    <span class="keyword">let</span> radiansBearing = <span class="call">atan2</span>(y, x)
    
    <span class="keyword">return</span> <span class="type">CGFloat</span>(radiansBearing)
  }
  
  <span class="keyword">func</span> bearingToLocationDegrees(destinationLocation: <span class="type">CLLocation</span>) -&gt; <span class="type">CGFloat</span> {
    <span class="keyword">return</span> <span class="call">bearingToLocationRadian</span>(destinationLocation).<span class="property">radiansToDegrees</span>
  }
}
</code></pre><blockquote><p>This piece of code takes care of both the projection and the bearing computation. Credits to <a href="http://stackoverflow.com/questions/3925942/cllocation-category-for-calculating-bearing-w-haversine-function#answer-31817498">Fabrizio Bartolomucci</a>.</p></blockquote><p>We can now finally update our image rotation with the device latest heading and bearing:</p><pre><code><span class="type">UIView</span>.<span class="call">animate</span>(withDuration: <span class="number">0.5</span>) {
  <span class="keyword">self</span>.<span class="property">imageView</span>.<span class="property">transform</span> = <span class="type">CGAffineTransform</span>(rotationAngle: latestBearing - latestHeading)
}
</code></pre><p>That‚Äôs it! No more arriving late to the movies! üòÜ</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Code Snippet</h2><p>We‚Äôve seen quite a bit in this post and, because of this, I‚Äôve decided to open source the <a href="https://github.com/zntfdr/Compass">whole Compass app</a>.</p><p><a href="https://github.com/zntfdr/Compass"><img src="https://www.fivestars.blog/assets/posts/build-compass-app-swift/compass-github-screenshot.png" alt="compass-github"/></a></p><blockquote><p>Click on the picture to jump <a href="https://github.com/zntfdr/Compass">to the repository</a>.</p></blockquote><p>Once launched, the app will point you towards the North, you can tap anywhere and a World map will be shown: tap wherever you‚Äôd like and the compass will start pointing at that new location.</p><blockquote><p>Beside what we‚Äôve seen in this post, the app also handles interface rotation (landscape left/right, portrait ..) and device rotation (a.k.a. device upside down etc). <a href="https://github.com/zntfdr/Compass">Check out the source code</a>!</p></blockquote><p>The app is also available on the <a href="https://itunes.apple.com/app/compass/id1231545538">App Store</a> (because..why not?), completely free of charge.</p><p>That‚Äôs it for today, happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/build-web-crawler-swift</guid><title>How to Build a Web Crawler in Swift üï∑</title><description></description><link>https://www.fivestars.blog/articles/build-web-crawler-swift</link><pubDate>Tue, 4 Apr 2017 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>More often than not, my <a href="https://itunes.apple.com/us/developer/kimchi-media/id1053443073">App Suite</a> is thirsty for information that can be found around the Web.</p><p>Unless it‚Äôs something that takes a couple of minutes, for this kind of needs I like to automate as much as possible (<a href="https://twitter.com/zntfdr/status/823926576345530368">it saves hours of work!</a>).</p><p>My go-to languages have always been Python and Javascript however, the recent launch of <a href="https://swiftbysundell.com">John Sundell</a>‚Äôs <a href="https://github.com/JohnSundell/Marathon">Marathon</a> made me wonder: is Swift ready for scripting? ü§î</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Building A Web Crawler in Swift</h2><p>Since I needed to extract some information from the Internet, this time I‚Äôve decided to give Swift a try.</p><p>There are two main ways to do scripts in Swift:</p><ol><li>by following <a href="https://krakendev.io/">Hector Matos</a>‚Äôs <a href="https://krakendev.io/blog/scripting-in-swift">awesome guide here</a></li><li>by using <a href="https://swiftbysundell.com">John Sundell</a>‚Äôs <a href="https://github.com/JohnSundell/Marathon">Marathon</a> (the <code>README.md</code> is all you need)</li></ol><p>It turns out, coding a Swift script is not any different than coding a new Swift <code>class</code>, <code>function</code> etc. I‚Äôve never felt out of home.</p><p>Also, building a Web Crawler in Swift is incredibly easy:</p><pre><code><span class="keyword">import</span> Foundation

<span class="comment">// Input your parameters here</span>
<span class="keyword">let</span> startUrl = <span class="type">URL</span>(string: <span class="string">"https://developer.apple.com/swift/"</span>)!
<span class="keyword">let</span> wordToSearch = <span class="string">"Swift"</span>
<span class="keyword">let</span> maximumPagesToVisit = <span class="number">10</span>

<span class="comment">// Crawler Parameters</span>
<span class="keyword">let</span> semaphore = <span class="type">DispatchSemaphore</span>(value: <span class="number">0</span>)
<span class="keyword">var</span> visitedPages: <span class="type">Set</span>&lt;<span class="type">URL</span>&gt; = []
<span class="keyword">var</span> pagesToVisit: <span class="type">Set</span>&lt;<span class="type">URL</span>&gt; = [startUrl]

<span class="comment">// Crawler Core</span>
<span class="keyword">func</span> crawl() {
  <span class="keyword">guard</span> visitedPages.<span class="property">count</span> &lt;= maximumPagesToVisit <span class="keyword">else</span> {
    <span class="call">print</span>(<span class="string">"üèÅ Reached max number of pages to visit"</span>)
    semaphore.<span class="call">signal</span>()
    <span class="keyword">return</span>
  }
  <span class="keyword">guard let</span> pageToVisit = pagesToVisit.<span class="call">popFirst</span>() <span class="keyword">else</span> {
    <span class="call">print</span>(<span class="string">"üèÅ No more pages to visit"</span>)
    semaphore.<span class="call">signal</span>()
    <span class="keyword">return</span>
  }
  <span class="keyword">if</span> visitedPages.<span class="call">contains</span>(pageToVisit) {
    <span class="call">crawl</span>()
  } <span class="keyword">else</span> {
    <span class="call">visit</span>(page: pageToVisit)
  }
}

<span class="keyword">func</span> visit(page url: <span class="type">URL</span>) {
  visitedPages.<span class="call">insert</span>(url)
  
  <span class="keyword">let</span> task = <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">dataTask</span>(with: url) { data, response, error <span class="keyword">in
    defer</span> { <span class="call">crawl</span>() }
    <span class="keyword">guard
      let</span> data = data,
      error == <span class="keyword">nil</span>,
      <span class="keyword">let</span> document = <span class="type">String</span>(data: data, encoding: .<span class="dotAccess">utf8</span>) <span class="keyword">else</span> { <span class="keyword">return</span> }
    <span class="call">parse</span>(document: document, url: url)
  }
  
  <span class="call">print</span>(<span class="string">"üîé Visiting page:</span> \(url)<span class="string">"</span>)
  task.<span class="call">resume</span>()
}

<span class="keyword">func</span> parse(document: <span class="type">String</span>, url: <span class="type">URL</span>) {
  <span class="keyword">func</span> find(word: <span class="type">String</span>) {
    <span class="keyword">if</span> document.<span class="call">contains</span>(word) {
      <span class="call">print</span>(<span class="string">"‚úÖ Word '</span>\(word)<span class="string">' found at page</span> \(url)<span class="string">"</span>)
    }
  }
  
  <span class="keyword">func</span> collectLinks() -&gt; [<span class="type">URL</span>] {
    <span class="keyword">func</span> getMatches(pattern: <span class="type">String</span>, text: <span class="type">String</span>) -&gt; [<span class="type">String</span>] {
      <span class="comment">// used to remove the 'href="' &amp; '"' from the matches</span>
      <span class="keyword">func</span> trim(url: <span class="type">String</span>) -&gt; <span class="type">String</span> {
        <span class="keyword">return</span> <span class="type">String</span>(url.<span class="property">characters</span>.<span class="call">dropLast</span>()).<span class="call">substring</span>(from: url.<span class="call">index</span>(url.<span class="property">startIndex</span>, offsetBy: <span class="string">"href=\"".characters.count))</span>
      }
      
      <span class="keyword">let</span> regex = <span class="keyword">try</span>! <span class="type">NSRegularExpression</span>(pattern: pattern, options: [.<span class="dotAccess">caseInsensitive</span>])
      <span class="keyword">let</span> matches = regex.<span class="call">matches</span>(in: text, options: [.<span class="dotAccess">reportCompletion</span>], range: <span class="type">NSRange</span>(location: <span class="number">0</span>, length: text.<span class="property">characters</span>.<span class="property">count</span>))
      <span class="keyword">return</span> matches.<span class="call">map</span> { <span class="call">trim</span>(url: (text <span class="keyword">as</span> <span class="type">NSString</span>).<span class="call">substring</span>(with: $0.<span class="property">range</span>)) }
    }
    
    <span class="keyword">let</span> pattern = <span class="string">"href=\"(http://.*?|https://.*?)\""</span>
    <span class="keyword">let</span> matches = <span class="call">getMatches</span>(pattern: pattern, text: document)
    <span class="keyword">return</span> matches.<span class="call">flatMap</span> { <span class="type">URL</span>(string: $0) }
  }
  
  <span class="call">find</span>(word: wordToSearch)
  <span class="call">collectLinks</span>().<span class="call">forEach</span> { pagesToVisit.<span class="call">insert</span>($0) }
}

<span class="call">crawl</span>()
semaphore.<span class="call">wait</span>()
</code></pre><p>I believe the script is pretty self-explanatory: you input a starting web page, the number of maximum webpages to crawl, and the word you‚Äôre interested in.</p><p>In my case, I didn‚Äôt need these inputs to change: but if you do want them to, <a href="https://krakendev.io/">Hector Matos</a> explains how to write a script that takes arguments <a href="https://krakendev.io/blog/scripting-in-swift">here</a>.</p><p>Once launched, the script will start crawling the web from the given page and jump around all the links it can find.</p><img src="https://www.fivestars.blog/assets/posts/build-web-crawler-swift/log.png" alt="log"/><blockquote><p>If you want a deeper explanation, please see <a href="https://medium.com/@zntfdr/deeper-swift-web-crawler-script-explanation-7f69352cf97a">here</a>.</p></blockquote><p>In conclusion, I‚Äôd say that, depending on what you want to do, and by using the right tools, Swift sure is one of the very viable options for scripting!</p><h2>A Note About Semaphores</h2><p>If you‚Äôre wondering why there is a <code>DispatchSemaphore</code> in the script above, it‚Äôs because any Swift Script exits as soon as its <a href="https://en.wikipedia.org/wiki/Control_flow">control flow</a> reaches the end.</p><p>If you must handle asynchronicity (like in my case, due to the loading of webpages), you need to have something that makes your script stay alive.</p><blockquote><p>Shameless plug: if want to know more about Semaphores, make sure to read my previous article <a href="https://www.fivestars.blog/articles/semaphores/">here</a>.</p></blockquote><h2>Scripts and Xcode Playgrounds</h2><p>If your script allows it, I‚Äôd suggest you to use Xcode Playgrounds during the script development:</p><p>This way it‚Äôs much faster to test it without the need to keep switching between your terminal and your code editor.</p><p>Once ready, you can quickly turn it into a real script.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Code Snippets</h2><p>For this post I‚Äôve made a small repository, <a href="https://github.com/zntfdr/Selenops">Selenops üï∑</a> (a spider that flies, yay! üò±), on GitHub: in there you'll find the very same script written as an Xcode Playground, as a Marathon Script, and as a standard ‚Äú<em>Command Line Tool</em>‚Äù Script.</p><p>Happy Scripting!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/semaphores</guid><title>A Quick Look at Semaphores in Swift üö¶</title><description></description><link>https://www.fivestars.blog/articles/semaphores</link><pubDate>Tue, 14 Mar 2017 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>First of all, if you‚Äôre not familiar with the <code>Grand Central Dispatch</code> (GCD) and Dispatch Queues, please head over <a href="http://www.appcoda.com/grand-central-dispatch/">this awesome article</a> from <a href="http://www.appcoda.com/">AppCoda</a>.</p><p>All right! Time to talk about Semaphores!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Introduction</h2><p>Let‚Äôs imagine a group of <em>writers</em> that must share a single <em>pen</em>. Obviously only one <em>writer</em> can use the <em>pen</em> at any given time.</p><p>Now, imagine that those <em>writers</em> are our threads and that the <em>pen</em> is our shared resource (it can be anything: a file, a variable, the right to do something, etc).</p><p>How do we make sure that our resource is really <a href="https://en.wikipedia.org/wiki/Mutual_exclusion">mutually exclusive</a>?</p><h2>Implementing our own Resource Control Access</h2><p>Someone may think: well I can just use a <code>resourceIsAvailable</code> <code>Bool</code> and set it to <code>true</code>/<code>false</code>:</p><pre><code><span class="keyword">if</span> (resourceIsAvailable) {
  resourceIsAvailable = <span class="keyword">false</span>
  useResource()
  resourceIsAvailable = <span class="keyword">true</span>
} <span class="keyword">else</span> {
  <span class="comment">// resource is not available, wait or do something else</span>
}
</code></pre><p>The problem is that, on concurrency, <strong>there‚Äôs no guarantee of knowing which thread, among all, is going to execute the next step, regardless of their priority</strong>.</p><h3>Example</h3><p>Imagine that we‚Äôve implemented the code above and that we have two threads, <em>threadA</em> and <em>threadB</em>, that would like to use a mutual exclusive resource:</p><ul><li>threadA reads the if-condition and sees that the resource is available, great!</li><li>But, before the execution of the next line (resourceIsAvalilable = false), the processor turns to threadB and it also reads the if-condition.</li><li>Now we have two threads that believe that the resource is available and both are going to execute the use-the-resource block.</li></ul><p>Writing thread-safe code without GCD is not an easy task.</p><h2>How Semaphores Work</h2><p>Three steps:</p><ol><li>Whenever we would like to use one shared resource, we send a <strong>request</strong> to its semaphore;</li><li>Once the semaphore gives us the green light (see what I did here?) we can assume that the resource is ours and we can use it;</li><li>Once the resource is no longer necessary, we let the semaphore know by sending him a <strong>signal</strong>, allowing him to assign the resource to another thread.</li></ol><p>When this resource is only one and can be used only by one thread at any given time, you can think of these <strong>request</strong>/<strong>signal</strong> as the resource <strong>lock</strong>/<strong>unlock</strong>.</p><h2>What‚Äôs Happening Behind the Scenes</h2><h3>The Structure</h3><p>The Semaphore is composed by:</p><ul><li>a <em>counter</em> that let the Semaphore know how many threads can use its resource(s)</li><li>a <em>FIFO queue</em> for tracking the threads waiting for the resource</li></ul><h3>Resource Request: wait()</h3><p>When the semaphore receives a request, it checks if its <strong>counter</strong> is above zero:</p><ul><li>if it is, then the semaphore decrements it and gives the thread the green light</li><li>otherwise it pushes the thread at the end of its queue;</li></ul><h3>Resource Release: signal()</h3><p>Once the semaphore receives a signal, it checks if its FIFO queue has threads in it:</p><ul><li>if there are, then the semaphore pulls the first thread and give him the green light</li><li>otherwise it increments its <em>counter</em></li></ul><h3>Warning: Busy Waiting</h3><p>When a thread sends a <code>wait()</code> resource request to the semaphore, the thread <strong>freezes</strong> until the semaphore gives the thread the green light.</p><blockquote><p>‚ö†Ô∏èÔ∏è If you do this in the main thread, the whole app will freeze ‚ö†Ô∏èÔ∏è</p></blockquote><h2>Using Semaphores in Swift (with GCD)</h2><p>Let‚Äôs write some code!</p><h3>Declaration</h3><p>Declaring a Semaphore is simple:</p><pre><code><span class="keyword">let</span> semaphore = <span class="type">DispatchSemaphore</span>(value: <span class="number">1</span>)
</code></pre><p>The <code>value</code> parameter is the number of threads that can access to the resource as for the semaphore creation.</p><h3>Resource Request</h3><p>To request the semaphore‚Äôs <strong>resource</strong>(s), we just call:</p><pre><code>  semaphore.<span class="call">wait</span>()
</code></pre><blockquote><p>Note that the semaphore is not physically giving us anything, the resource has to be in the thread‚Äôs scope already, we just use the resource only between our request and release calls.</p></blockquote><p>Once the semaphore gives us its blessing, the thread resumes its normal execution and can consider the resource his to use.</p><h3>Resource Release</h3><p>To release the resource we write:</p><pre><code>semaphore.<span class="call">signal</span>()
</code></pre><p>After sending this signal we aren‚Äôt allowed to touch the resource anymore, until we request for it again.</p><h2>Semaphore Playgrounds</h2><p>Following <a href="http://www.appcoda.com/grand-central-dispatch/">AppCoda article</a> examples, let‚Äôs see this Semaphore in action!</p><blockquote><p>Warning: these are Xcode Playgrounds, as Swift Playgrounds don‚Äôt support Logging just yet.</p></blockquote><p>In these playgrounds we have two threads, one with slightly higher priority than the other, that print 10 times an emoji and incremental numbers.</p><h3>Semaphore-less Playground</h3><pre><code><span class="keyword">import</span> Foundation
<span class="keyword">import</span> PlaygroundSupport

<span class="keyword">let</span> higherPriority = <span class="type">DispatchQueue</span>.<span class="call">global</span>(qos: .<span class="dotAccess">userInitiated</span>)
<span class="keyword">let</span> lowerPriority = <span class="type">DispatchQueue</span>.<span class="call">global</span>(qos: .<span class="dotAccess">utility</span>)

<span class="keyword">func</span> asyncPrint(queue: <span class="type">DispatchQueue</span>, symbol: <span class="type">String</span>) {
  queue.<span class="call">async</span> {
    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">10</span> {
      <span class="call">print</span>(symbol, i)
    }
  }
}

<span class="call">asyncPrint</span>(queue: higherPriority, symbol: <span class="string">"üî¥"</span>)
<span class="call">asyncPrint</span>(queue: lowerPriority, symbol: <span class="string">"üîµ"</span>)

<span class="type">PlaygroundPage</span>.<span class="property">current</span>.<span class="property">needsIndefiniteExecution</span> = <span class="keyword">true</span>
</code></pre><p>As you can Imagine, the higher priority thread finishes first most of the times:</p><img src="https://www.fivestars.blog/assets/posts/semaphores/semaphoreless.png" alt="semaphoreless"/><h3>Semaphore Playground</h3><p>In this case we will use the same code as before, but we will give the right to print the <em>emoji</em>+<em>number</em>* sequence only to one thread at a time.</p><p>In order to do so we will define one semaphore and update our <code>asyncPrint</code> function:</p><pre><code><span class="keyword">import</span> Foundation
<span class="keyword">import</span> PlaygroundSupport

<span class="keyword">let</span> higherPriority = <span class="type">DispatchQueue</span>.<span class="call">global</span>(qos: .<span class="dotAccess">userInitiated</span>)
<span class="keyword">let</span> lowerPriority = <span class="type">DispatchQueue</span>.<span class="call">global</span>(qos: .<span class="dotAccess">utility</span>)

<span class="keyword">let</span> semaphore = <span class="type">DispatchSemaphore</span>(value: <span class="number">1</span>)

<span class="keyword">func</span> asyncPrint(queue: <span class="type">DispatchQueue</span>, symbol: <span class="type">String</span>) {
  queue.<span class="call">async</span> {
    <span class="call">print</span>(<span class="string">"</span>\(symbol) <span class="string">waiting"</span>)
    semaphore.<span class="call">wait</span>()  <span class="comment">// requesting the resource</span>
    
    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">10</span> {
      <span class="call">print</span>(symbol, i)
    }
    
    <span class="call">print</span>(<span class="string">"</span>\(symbol) <span class="string">signal"</span>)
    semaphore.<span class="call">signal</span>() <span class="comment">// releasing the resource</span>
  }
}

<span class="call">asyncPrint</span>(queue: higherPriority, symbol: <span class="string">"üî¥"</span>)
<span class="call">asyncPrint</span>(queue: lowerPriority, symbol: <span class="string">"üîµ"</span>)

<span class="type">PlaygroundPage</span>.<span class="property">current</span>.<span class="property">needsIndefiniteExecution</span> = <span class="keyword">true</span>
</code></pre><p>I‚Äôve also added a couple more <code>print</code> commands to see the actual state of each thread during our execution.</p><img src="https://www.fivestars.blog/assets/posts/semaphores/semaphorePlayground1.png" alt="semaphorePlayground1"/><p>As you can see, when one thread starts printing the sequence, the other thread must wait until the first one ends, then the semaphore will receive the signal from the first thread and then, only then, the second thread can start printing its own sequence.</p><p>It doesn‚Äôt matter at which point of the sequence the second thread will send the <code>wait()</code> request, it will always have to wait until the other thread is done.</p><h4>Priority Inversion</h4><p>Now that we understand how everything works, please take a look at the following log:</p><img src="https://www.fivestars.blog/assets/posts/semaphores/priority-inversion.png" alt="priority-inversion"/><p>In this case, with the exact code above, the processor has decided to execute the low priority thread first.</p><p>When this happens, the high priority thread must wait the low priority thread to finish! This is ok, it can happen. The problem is that the low priority thread has low priority even when one high priority thread is waiting for him: this is called <a href="https://en.wikipedia.org/wiki/Priority_inversion">Priority Inversion</a>.</p><p>In other programming concepts different than the Semaphore, when this happens the low priority thread will temporarily inherit the priority of the highest priority thread that is waiting on him: this is called <a href="https://en.wikipedia.org/wiki/Priority_inheritance">Priority Inheritance</a>.</p><p>With Semaphores this is not the case because, actually, anybody can call the <code>signal()</code> function (not only the thread that is currently using the resource).</p><h4>Thread Starvation</h4><p>To make things even worse, let‚Äôs imagine that between our high &amp; low priority threads there are 1000 more middle-priority threads.</p><p>If we have a case of <em>Priority Inversion</em> like above, the high priority thread must wait for the low priority thread, but, most of the time, the processor will execute the middle priority threads, as they have higher priority than our low priority one.</p><p>In this scenario our high priority thread is being starved of CPU time (hence the concept of <a href="https://en.wikipedia.org/wiki/Starvation_%28computer_science%29">Starvation</a>).</p><h5>Solutions</h5><p>In my opinion, it‚Äôs better to use Semaphores only among threads of the same priority. If this is not your case, I suggest you to look at other solutions such as <a href="https://en.wikipedia.org/wiki/Critical_section">Regions</a> and <a href="https://en.wikipedia.org/wiki/Monitor_%28synchronization%29">Monitors</a>.</p><h3>Deadlock Playground</h3><p>This time we have two threads that use two mutual exclusive resources ‚ÄúA‚Äù and ‚ÄúB‚Äù.</p><p>If the two resources can be used separately, it makes sense to define one semaphore for each resource. If not, one semaphore can manage both.</p><p>I want to make an example with the former case (2 resources, 2 semaphores) with a twist: the high priority thread will use first resource ‚ÄúA‚Äù and then ‚ÄúB‚Äù, while our low priority one will use first resource ‚ÄúB‚Äù and then ‚ÄúA‚Äù.</p><p>Here‚Äôs the code:</p><pre><code><span class="keyword">import</span> Foundation
<span class="keyword">import</span> PlaygroundSupport

<span class="keyword">let</span> higherPriority = <span class="type">DispatchQueue</span>.<span class="call">global</span>(qos: .<span class="dotAccess">userInitiated</span>)
<span class="keyword">let</span> lowerPriority = <span class="type">DispatchQueue</span>.<span class="call">global</span>(qos: .<span class="dotAccess">utility</span>)

<span class="keyword">let</span> semaphoreA = <span class="type">DispatchSemaphore</span>(value: <span class="number">1</span>)
<span class="keyword">let</span> semaphoreB = <span class="type">DispatchSemaphore</span>(value: <span class="number">1</span>)

<span class="keyword">func</span> asyncPrint(queue: <span class="type">DispatchQueue</span>, symbol: <span class="type">String</span>, firstResource: <span class="type">String</span>, firstSemaphore: <span class="type">DispatchSemaphore</span>, secondResource: <span class="type">String</span>, secondSemaphore: <span class="type">DispatchSemaphore</span>) {
  <span class="keyword">func</span> requestResource(<span class="keyword">_</span> resource: <span class="type">String</span>, with semaphore: <span class="type">DispatchSemaphore</span>) {
    <span class="call">print</span>(<span class="string">"</span>\(symbol) <span class="string">waiting resource</span> \(resource)<span class="string">"</span>)
    semaphore.<span class="call">wait</span>()  <span class="comment">// requesting the resource</span>
  }
  
  queue.<span class="call">async</span> {
    <span class="call">requestResource</span>(firstResource, with: firstSemaphore)
    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>...<span class="number">10</span> {
      <span class="keyword">if</span> i == <span class="number">5</span> {
        <span class="call">requestResource</span>(secondResource, with: secondSemaphore)
      }
      <span class="call">print</span>(symbol, i)
    }
    
    <span class="call">print</span>(<span class="string">"</span>\(symbol) <span class="string">releasing resources"</span>)
    firstSemaphore.<span class="call">signal</span>() <span class="comment">// releasing first resource</span>
    secondSemaphore.<span class="call">signal</span>() <span class="comment">// releasing second resource</span>
  }
}

<span class="call">asyncPrint</span>(queue: higherPriority, symbol: <span class="string">"üî¥"</span>, firstResource: <span class="string">"A"</span>, firstSemaphore: semaphoreA, secondResource: <span class="string">"B"</span>, secondSemaphore: semaphoreB)
<span class="call">asyncPrint</span>(queue: lowerPriority, symbol: <span class="string">"üîµ"</span>, firstResource: <span class="string">"B"</span>, firstSemaphore: semaphoreB, secondResource: <span class="string">"A"</span>, secondSemaphore: semaphoreA)

<span class="type">PlaygroundPage</span>.<span class="property">current</span>.<span class="property">needsIndefiniteExecution</span> = <span class="keyword">true</span>
</code></pre><p>If we‚Äôre lucky, this is what happens:</p><img src="https://www.fivestars.blog/assets/posts/semaphores/deadlock-1.png" alt="deadlock-1"/><p>Simply, the high priority thread will be served with the first resource, then the second and only later the the processor will move to the low priority thread.</p><p>However, if we‚Äôre unlucky, this can also happen:</p><img src="https://www.fivestars.blog/assets/posts/semaphores/deadlock-2.png" alt="deadlock-2"/><p>Both threads didn‚Äôt finish their execution! Let‚Äôs review the current state:</p><ul><li>The high priority thread is waiting for the resource ‚ÄúB‚Äù, which is held by the low priority thread</li><li>The low priority thread is waiting for the resource ‚ÄúA‚Äù, which is held by the high priority thread</li></ul><p>Both threads are waiting on each other with no possibility to move forward: welcome to a <a href="https://en.wikipedia.org/wiki/Deadlock">Thread Deadlock</a>!</p><h4>Solutions</h4><p>Avoiding <a href="https://en.wikipedia.org/wiki/Deadlock">deadlocks</a> is not simple. The best solution would be preventing them by writing code that <a href="https://en.wikipedia.org/wiki/Deadlock_prevention_algorithms">can‚Äôt possibly reach this state</a>.</p><p>In other OSs, for example, one of the deadlock threads could be killed (in order to release all its resources) with the hope that other threads can continue their execution.</p><p>‚Ä¶or you can just use the <a href="https://en.wikipedia.org/wiki/Ostrich_algorithm">Ostrich Algorithm</a> üòÜ.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Semaphores are a little nice concept that can be very handy in many applications. Just, be careful: look both ways before crossing.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/secret-storing-loading-images</guid><title>The Secret of Storing and Loading UIImage(s)</title><description></description><link>https://www.fivestars.blog/articles/secret-storing-loading-images</link><pubDate>Tue, 28 Feb 2017 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Sometimes we need to create images on the fly.</p><p>These images can‚Äôt be put in our Assets Catalog because, for example, they‚Äôre tailored to the current user, or for similar reasons.</p><p>If these images are compute-intensive, a.k.a. the user <strong>will</strong> notice that something is going on before the picture is shown, it‚Äôs better to create them <strong>once, as early as possible, and store them</strong> on the device.</p><p>Let‚Äôs walk through the whole process!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Storing an UIImage ‚¨áÔ∏è</h2><p>The storing part is quite easy.</p><p>First, we declare where do we want to store the image, in order to do so we create a <code>URL</code> that ends with the image name and format:</p><pre><code><span class="keyword">let</span> imageName = <span class="string">""</span> <span class="comment">// your image name here</span>
<span class="keyword">let</span> imagePath: <span class="type">String</span> = <span class="string">"</span>\(<span class="type">NSSearchPathForDirectoriesInDomains</span>(.<span class="dotAccess">documentDirectory</span>, .<span class="dotAccess">userDomainMask</span>, <span class="keyword">true</span>)[<span class="number">0</span>])<span class="string">/</span>\(imageName)<span class="string">.png"</span>
<span class="keyword">let</span> imageUrl: <span class="type">URL</span> = <span class="type">URL</span>(fileURLWithPath: imagePath)
</code></pre><p>Obviously, we will need to pay attention to uniquely name each one of our pictures.</p><p>Second, we do the actual storing:</p><pre><code><span class="keyword">let</span> newImage: <span class="type">UIImage</span> = <span class="comment">// create your UIImage here</span>
<span class="keyword">try</span>? <span class="type">UIImagePNGRepresentation</span>(newImage)?.<span class="call">write</span>(to: imageUrl)
</code></pre><h2>Loading an UIImage ‚¨ÜÔ∏è</h2><p>This is also super easy. Again, first we will declare where the image is stored (exactly the same code snippet above):</p><pre><code><span class="keyword">let</span> imageName = <span class="string">""</span> <span class="comment">// your image name here</span>
<span class="keyword">let</span> imagePath: <span class="type">String</span> = <span class="string">"</span>\(<span class="type">NSSearchPathForDirectoriesInDomains</span>(.<span class="dotAccess">documentDirectory</span>, .<span class="dotAccess">userDomainMask</span>, <span class="keyword">true</span>)[<span class="number">0</span>])<span class="string">/</span>\(imageName)<span class="string">.png"</span>
<span class="keyword">let</span> imageUrl: <span class="type">URL</span> = <span class="type">URL</span>(fileURLWithPath: imagePath)
</code></pre><p>Second, we do the actual loading:</p><pre><code><span class="keyword">guard</span>
  <span class="type">FileManager</span>.<span class="property">default</span>.<span class="call">fileExists</span>(atPath: imagePath),
  <span class="keyword">let</span> imageData: <span class="type">Data</span> = <span class="keyword">try</span>? <span class="type">Data</span>(contentsOf: imageUrl),
  <span class="keyword">let</span> image: <span class="type">UIImage</span> = <span class="type">UIImage</span>(data: imageData) { 
    <span class="keyword">return</span> <span class="comment">// No image found!</span>
}
</code></pre><h2>The Catch üò±</h2><p>If our device was a non-retina one, the code above would work as promised.</p><p>However, if you run it on an iPhone 7 for example, the loaded image would be twice as big as the original one (on both axes)!</p><p>How come is that? Well‚Ä¶we‚Äôre working with <code>UIImage</code>!</p><p>We‚Äôre storing <code>UIImage</code>s, which are made out of <strong>points</strong>, as PNGs, which are made out of <strong>pixels</strong>!</p><blockquote><p>Quick reminder: points are a resolution-independent measurement.</p></blockquote><p>To make our code work regardless of the device pixel density, we must handle each possible correspondence (a.k.a. render factor) between points and pixels. So how do we handle all of this variety?</p><p>The solution couldn‚Äôt be any simpler: load the stored image with a scale based on the current device <a href="https://developer.apple.com/reference/uikit/uiscreen/1617836-scale#discussion">screen render factor</a>.</p><pre><code><span class="keyword">let</span> image: <span class="type">UIImage</span> = <span class="type">UIImage</span>(data: imageData, scale: <span class="type">UIScreen</span>.<span class="property">main</span>.<span class="property">scale</span>)
</code></pre><p>That‚Äôs it, now we can create, store, and load as many images as we want, it won‚Äôt matter on which device they‚Äôre displayed, they will always render properly! üéâ</p><h2>Code Snippet</h2><p>As every Swift post, it wouldn‚Äôt be right to end it without introducing at least an extension that makes everybody‚Äôs life simpler. Without further ado:</p><pre><code><span class="keyword">extension</span> <span class="type">UIImage</span> {
  <span class="keyword">func</span> load(image imageName: <span class="type">String</span>) -&gt; <span class="type">UIImage</span> {
    <span class="comment">// declare image location</span>
    <span class="keyword">let</span> imagePath: <span class="type">String</span> = <span class="string">"</span>\(<span class="type">NSSearchPathForDirectoriesInDomains</span>(.<span class="dotAccess">documentDirectory</span>, .<span class="dotAccess">userDomainMask</span>, <span class="keyword">true</span>)[<span class="number">0</span>])<span class="string">/</span>\(imageName)<span class="string">.png"</span>
    <span class="keyword">let</span> imageUrl: <span class="type">URL</span> = <span class="type">URL</span>(fileURLWithPath: imagePath)

    <span class="comment">// check if the image is stored already</span>
    <span class="keyword">if</span> <span class="type">FileManager</span>.<span class="property">default</span>.<span class="call">fileExists</span>(atPath: imagePath),
       <span class="keyword">let</span> imageData: <span class="type">Data</span> = <span class="keyword">try</span>? <span class="type">Data</span>(contentsOf: imageUrl),
       <span class="keyword">let</span> image: <span class="type">UIImage</span> = <span class="type">UIImage</span>(data: imageData, scale: <span class="type">UIScreen</span>.<span class="property">main</span>.<span class="property">scale</span>) {
      <span class="keyword">return</span> image
    }

    <span class="comment">// image has not been created yet: create it, store it, return it</span>
    <span class="keyword">let</span> newImage: <span class="type">UIImage</span> = <span class="comment">// create your UIImage here</span>
    <span class="keyword">try</span>? <span class="type">UIImagePNGRepresentation</span>(newImage)?.<span class="call">write</span>(to: imageUrl)
    <span class="keyword">return</span> newImage
  }
}
</code></pre><p>Thanks to this extension we don‚Äôt have to worry about creating, storing, or loading images: we just call <code>UIImage.load(_:)</code> and we‚Äôre done!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Working with <code>UIImage</code>s and images is easy, however we must pay close attention when our pictures move from one world to the other!</p><p>Happy coding!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/christmas-xcode-theme</guid><title>Christmas Xcode Theme üéÖüèª</title><description></description><link>https://www.fivestars.blog/articles/christmas-xcode-theme</link><pubDate>Tue, 13 Dec 2016 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>The holidays are coming, the house is decorated, gifts are bought, cheerful lights are scattered all around the world, happy warm music is playing‚Ä¶</p><img src="https://www.fivestars.blog/assets/posts/christmas-xcode-theme/christmas-fire.gif" alt="christmas-fire"/><p>‚Ä¶but we all know that we can‚Äôt stay away from Xcode even during this time! Why not bring a bit of the Christmas Spirit to Xcode then? ‚õÑ</p><p>Introducing‚Ä¶the <a href="https://github.com/zntfdr/Christmas">Christmas Xcode Theme</a>! üéÑ</p><img src="https://www.fivestars.blog/assets/posts/christmas-xcode-theme/christmas-xcode-theme.png" alt="christmas-xcode-theme"/><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2><a href="https://github.com/zntfdr/Christmas">Download it here</a></h2><p>üéÅ A gift to all of you, Happy Swiftly Holidays! üéÅ</p><h2>Code Snippet</h2><p>If you're interested in the Twelve Days of Christmas song code, here it is:</p><pre><code><span class="keyword">let</span> gifts = [ <span class="string">"partridge in a pear tree"</span>, <span class="string">"Two turtle doves"</span>,       <span class="string">"Three French hens"</span>,
              <span class="string">"Four calling birds"</span>,       <span class="string">"Five golden rings"</span>,      <span class="string">"Six geese a-laying"</span>,
              <span class="string">"Seven swans a-swimming"</span>,   <span class="string">"Eight maids a-milking"</span>,  <span class="string">"Nine ladies dancing"</span>,
              <span class="string">"Ten lords a-leaping"</span>,      <span class="string">"Eleven pipers piping"</span>,   <span class="string">"Twelve drummers drumming"</span> ]

<span class="keyword">let</span> nth = [ <span class="string">"first"</span>,   <span class="string">"second"</span>, <span class="string">"third"</span>, <span class="string">"fourth"</span>, <span class="string">"fifth"</span>,    <span class="string">"sixth"</span>,
            <span class="string">"seventh"</span>, <span class="string">"eighth"</span>, <span class="string">"ninth"</span>, <span class="string">"tenth"</span>,  <span class="string">"eleventh"</span>, <span class="string">"twelfth"</span> ]

<span class="keyword">func</span> gifts(for day: <span class="type">Int</span>) -&gt; <span class="type">String</span> {
  <span class="keyword">var</span> result = <span class="string">"On the</span> \(nth[day-<span class="number">1</span>]) <span class="string">day of Christmas, my true love sent to me:\n"</span>
  <span class="keyword">if</span> day &gt; <span class="number">1</span> {
    <span class="keyword">for</span> again <span class="keyword">in</span> <span class="number">1</span>..&lt;day {            <span class="comment">//              .</span>
      <span class="keyword">let</span> n = day - again             <span class="comment">//           __/ \__</span>
      result += gifts[n]              <span class="comment">//           \     /          /  /</span>
      <span class="keyword">if</span> n &gt; <span class="number">1</span> { result += <span class="string">","</span> }      <span class="comment">//           /.'o'.\         /| /|   _  _   _</span>
      result += <span class="string">"\n"</span>                  <span class="comment">//            .o.'.         / |/ |  (/_/ (_/ (_(_/</span>
    }                                 <span class="comment">//           .'.'o'.     `-'     `-'  ,-        /</span>
    result += <span class="string">"And a "</span>                <span class="comment">//          o'.o.'.o.               _/,'  /)           _/_</span>
  } <span class="keyword">else</span> {                            <span class="comment">//         .'.o.'.'.o.              /    /_  _   . _   / _ _   __  _</span>
    result += <span class="string">"A "</span>                    <span class="comment">//        .o.'.o.'.o.'.             (   / (_/ (_(_/ )_(_/ / /_(_(_/_)</span>
  }                                   <span class="comment">//           [_____]                 `-'</span>
  <span class="keyword">return</span> result + gifts[<span class="number">0</span>] + <span class="string">".\n"</span>    <span class="comment">//            \___/</span>
}

<span class="keyword">for</span> day <span class="keyword">in</span> <span class="number">1</span>...<span class="number">12</span> {
  <span class="call">print</span>(<span class="call">gifts</span>(for: day))
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/use-new-features-mantain-backward-compatibility</guid><title>Use New Awesome iOS Features While Maintaining Backward Compatibility</title><description></description><link>https://www.fivestars.blog/articles/use-new-features-mantain-backward-compatibility</link><pubDate>Tue, 29 Nov 2016 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Every year at WWDC Apple blesses us with plenty of new awesome tools that we can‚Äôt wait to implement in our apps.</p><img src="https://www.fivestars.blog/assets/posts/use-new-features-mantain-backward-compatibility/hello-wwdc.jpeg" alt="hello-wwdc"/><p>However, most of the time, our apps must support previous iOS versions, too.</p><p>This might seem a big show-stopper and, in fact, there are many developers that are holding on in adding the latest new features because of this.</p><p>Well, I‚Äôm here to tell you that, thanks to Swift, it is incredibly clean and easy to add new iOS features, while maintaining backward compatibility!</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Example</h2><p>Let‚Äôs use a real example: one of my new favorite toys from this year WWDC is <a href="https://developer.apple.com/reference/uikit/uipreviewinteraction"><code>UIPreviewInteraction</code></a>.</p><p>Basically, this (iOS 10.0+) class listens to the very same touch interactions of Peek and Pop for your <code>UIView</code>, but gives you complete control on what to do with it.</p><p>To implement it, we must follow just two steps:</p><ol><li>Add a <code>UIPreviewInteraction</code> property to our <code>UIView</code></li><li>Create a <code>UIPreviewInteractionDelegate</code></li></ol><h2>1. Adding a UIPreviewInteraction Property to our UIView</h2><p>Obviously, if we add the property as it is, the compiler will complain:</p><pre><code><span class="keyword">class</span> MyView: <span class="type">UIView</span> {
  <span class="keyword">fileprivate var</span> myPreviewInteraction: <span class="type">UIPreviewInteraction</span>
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/use-new-features-mantain-backward-compatibility/UIPreviewInteraction-unavailable.png" alt="UIPreviewInteraction-unavailable"/><p>How do we overcome this? Easy: we don‚Äôt tell the compiler what the property is.</p><p>Furthermore, since we use the property only in iOS 10 and above, we will make it an optional, so the property will be nil for previous iOS versions:</p><pre><code><span class="keyword">class</span> MyView: <span class="type">UIView</span> {
  <span class="keyword">fileprivate var</span> myPreviewInteraction: <span class="type">Any</span>? = <span class="keyword">nil</span>
}
</code></pre><p>Ok, now we can compile! üéâ However, at some point, we must declare that the property is a UIPreviewInteraction.</p><p>How?</p><p>Simple, we use one of the most precious <strong>Swift 2</strong> gifts: <code>#available</code>, a.k.a. Swift‚Äôs Automatic Operating System Availability Checking API:</p><pre><code><span class="keyword">class</span> MyView: <span class="type">UIView</span> {
  <span class="keyword">fileprivate var</span> myPreviewInteraction: <span class="type">Any</span>? = <span class="keyword">nil
  
  init</span>() {
    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>.<span class="property">zero</span>)
    <span class="keyword">if #available</span>(iOS <span class="number">10.0</span>, *) {
      myPreviewInteraction = <span class="type">UIPreviewInteraction</span>(view: <span class="keyword">self</span>)
    }
  }
}
</code></pre><p>Great! Now our property will be:</p><ul><li><code>nil</code> in any iOS prior to 10;</li><li>an instance of <code>UIPreviewInteraction</code> for iOS 10.0+!</li></ul><h2>2. Create a UIPreviewInteractionDelegate</h2><p>For simplicity‚Äôs sake, I will use the same <code>UIView</code> class as my delegate as well.</p><p>One more time, if we simply try to make our <code>UIView</code> class conform to the <code>UIPreviewInteractionDelegate</code>, the compiler will complain:</p><pre><code><span class="keyword">extension</span> <span class="type">MyView</span>: <span class="type">UIPreviewInteractionDelegate</span> {
  <span class="keyword">public func</span> previewInteraction(<span class="keyword">_</span> previewInteraction: <span class="type">UIPreviewInteraction</span>, didUpdatePreviewTransition transitionProgress: <span class="type">CGFloat</span>, ended: <span class="type">Bool</span>) { }
  <span class="keyword">public func</span> previewInteractionDidCancel(<span class="keyword">_</span> previewInteraction: <span class="type">UIPreviewInteraction</span>) { }
}
</code></pre><img src="https://www.fivestars.blog/assets/posts/use-new-features-mantain-backward-compatibility/UIPreviewInteraction-unavailable-2.png" alt="UIPreviewInteraction-unavailable-2"/><p>And, one more time, Swift 2‚Äôs Automatic Operating System Availability Checking API comes to the rescue!</p><pre><code><span class="keyword">@available</span>(iOS <span class="number">10.0</span>, *)
<span class="keyword">extension</span> <span class="type">MyView</span>: <span class="type">UIPreviewInteractionDelegate</span> {
  <span class="keyword">public func</span> previewInteraction(<span class="keyword">_</span> previewInteraction: <span class="type">UIPreviewInteraction</span>, didUpdatePreviewTransition transitionProgress: <span class="type">CGFloat</span>, ended: <span class="type">Bool</span>) { }
  <span class="keyword">public func</span> previewInteractionDidCancel(<span class="keyword">_</span> previewInteraction: <span class="type">UIPreviewInteraction</span>) { }
}
</code></pre><p>Now, let‚Äôs not forget to add the view as its own delegate in our initializer‚Ä¶and we‚Äôre done!</p><pre><code><span class="keyword">class</span> MyView: <span class="type">UIView</span> {
  <span class="keyword">fileprivate var</span> myPreviewInteraction: <span class="type">Any</span>? = <span class="keyword">nil
  
  init</span>() {
    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>.<span class="property">zero</span>)
    <span class="keyword">if #available</span>(iOS <span class="number">10.0</span>, *) {
      myPreviewInteraction = <span class="type">UIPreviewInteraction</span>(view: <span class="keyword">self</span>
      (myPreviewInteraction <span class="keyword">as</span>! <span class="type">UIPreviewInteraction</span>).<span class="property">delegate</span> = <span class="keyword">self</span>
    }
  }
}
</code></pre><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><p>Even though our apps has to support older iOS versions, this must not stop us to implement the latest and greatest iOS features!</p><p>It‚Äôs true, this solution won‚Äôt add the same functionality to previous iOS releases, but it‚Äôs still way better than waiting years to drop support of older iOS versions to finally implement what‚Äôs available to us today.</p><h2>Code Snippet</h2><p>Here's the final, complete, code snippet:</p><pre><code><span class="keyword">import</span> UIKit

<span class="keyword">class</span> MyView: <span class="type">UIView</span> {
  <span class="keyword">fileprivate var</span> myPreviewInteraction: <span class="type">Any</span>? = <span class="keyword">nil
  
  init</span>() {
    <span class="keyword">super</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>.<span class="property">zero</span>)
    
    <span class="keyword">if #available</span>(iOS <span class="number">10.0</span>, *) {
      myPreviewInteraction = <span class="type">UIPreviewInteraction</span>(view: <span class="keyword">self</span>)
      (myPreviewInteraction <span class="keyword">as</span>! <span class="type">UIPreviewInteraction</span>).<span class="property">delegate</span> = <span class="keyword">self</span>
    }
  }
  
  <span class="keyword">required init</span>?(coder aDecoder: <span class="type">NSCoder</span>) {
    <span class="call">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)
  }
}

<span class="keyword">@available</span>(iOS <span class="number">10.0</span>, *)
<span class="keyword">extension</span> <span class="type">MyView</span>: <span class="type">UIPreviewInteractionDelegate</span> {
  <span class="keyword">public func</span> previewInteraction(<span class="keyword">_</span> previewInteraction: <span class="type">UIPreviewInteraction</span>, didUpdatePreviewTransition transitionProgress: <span class="type">CGFloat</span>, ended: <span class="type">Bool</span>) { }
  <span class="keyword">public func</span> previewInteractionDidCancel(<span class="keyword">_</span> previewInteraction: <span class="type">UIPreviewInteraction</span>) { }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/first-app-journey</guid><title>My (First App) Journey to the Apple Store</title><description></description><link>https://www.fivestars.blog/articles/first-app-journey</link><pubDate>Mon, 1 Feb 2016 00:00:00 +0700</pubDate><content:encoded><![CDATA[<h4><em>A tale of three months of Apple Review Rejections</em></h4><p>Last year I finally made the jump: I bought a Macbook and started learning Swift and iOS App Development.</p><p>About 3 months later I submitted my first app to the App Store: I couldn‚Äôt be so proud!</p><p><em>Disclaimer: I‚Äôm a Software Engineer, your mileage might vary.</em></p><p>Swift is an amazing language and, after dealing with the fact that <a href="http://redqueencoder.com/minimum-viable-ios-engineer/">I can‚Äôt know everything</a> there is in Cocoa Touch, there was nobody to stop me building and launching my app.</p><p>Boy, was I wrong.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>The App</h2><p>Quick description of the App I‚Äôve submitted:</p><p>it‚Äôs the standard Twitter App with real-time functionalities: just input any keyword you're interested in and let the Tweets flow on your screen as they‚Äôre posted! (<a href="https://www.youtube.com/watch?v=756d2fXJjas">here‚Äôs a 50-seconds video of the app in action</a>).</p><h2>First Rejection</h2><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejection-1.png" alt="rejection-1"/><p>See the little email above? This is the very kind way Apple uses to let you know that <strong>no</strong>, your app is not going to the App Store just yet.</p><p>My app was pretty simple: I was quite surprised when I woke up with a rejection in my mailbox.</p><p>It turns out, the App Review Team didn‚Äôt even have to launch the app in order to reject it: naively, in the app description, among other keyword comparison examples, I put ‚ÄúiOS vs. <strong>Android</strong>‚Äù:</p><blockquote><p>3.1 Apps or metadata that mentions the name of any other mobile platform will be rejected</p></blockquote><p>The App Store Review 3.1 Guideline is as clear as it gets: this rejection is completely my fault. Luckily there‚Äôs no need to change the App binary, let‚Äôs change the description and re-submit the app!</p><h2>Second Rejection</h2><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejection-2.png" alt="rejection-2"/><img src="https://www.fivestars.blog/assets/posts/first-app-journey/14-3-details.png" alt="rejection-2-details"/><blockquote><p>The App Review message</p></blockquote><p>This time the App Review Team summoned the App Store Review 14.3 Guideline (under the <em>Personal attacks</em> chapter):</p><blockquote><p>14.3 Apps that display user generated content must include a method for filtering objectionable material, a mechanism for users to flag offensive content, and the ability to block abusive users from the service</p></blockquote><p>My app doesn‚Äôt let the user generate any content: it just shows you Twitter‚Äôs content (where you can report/flag/block anything/anyone you want).</p><p>Even if I were to implement what I was asked to, <strong>the App uses only real time data</strong>, it would be of no use to the app itself.</p><p>If a user were to flag a Tweet, <strong>that Tweet would be <em>old</em> already</strong>: it would <em>never</em> be displayed on the App again, ever!</p><p>I felt that the Guideline 14.3 didn‚Äôt applied to my case so I wrote an appeal with the reasons above:</p><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejection-3.png" alt="rejection-3"/><blockquote><p>The App Review Board replied to my appeal within a few hours.</p></blockquote><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejection-3-details.png" alt="rejection-3-details"/><blockquote><p>The Appeal response</p></blockquote><p>Lesson learned: if your app shows user generated content, implement a flag/moderator/block mechanism, <strong>even if the content is not created within your app</strong>.</p><p>Luckily for me, Twitter API offers everything I need:</p><ol><li><a href="https://dev.twitter.com/rest/reference/post/users/report_spam">A Report/Flag mechanism</a>;</li><li><a href="https://dev.twitter.com/streaming/overview/request-parameters#filter_level">A Filter for sensible content</a>;</li></ol><table><tbody><tr><td><img src="https://www.fivestars.blog/assets/posts/first-app-journey/flag.gif" alt="flag"/></td><td><img src="https://www.fivestars.blog/assets/posts/first-app-journey/filter.gif" alt="filter"/></td></tr></tbody></table><blockquote><p>My two additions to comply with App Store Review 14.3 Guideline</p></blockquote><p>Time for another submission!</p><h2>Third Rejection</h2><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejection-4.png" alt="rejection-4"/><blockquote><p>At least now I‚Äôm used to it</p></blockquote><p>While waiting for each review, I kept adding more and more features to the app, at some point I even added some non-consumable in-App Purchases.</p><p>That‚Äôs too bad, because these in-App Purchases were the reason of the new rejection.</p><p>All my in-App Purchases are non-consumable: once the user buys one, this purchase can be ‚Äú<em>bought</em>‚Äù (again) as many times as the user wants, <strong>for free</strong>.</p><p>I like to have as little UI elements as possible: since these in-App Purchases can be ‚Äú<em>re-bought</em>‚Äù <strong>for free</strong>, I didn‚Äôt implement a Restore button.</p><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejection-4-message.png" alt="rejection-4-message"/><blockquote><p>The App Review message</p></blockquote><p>After explaining my logic above, the App Review replied:</p><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejection-4-reply.png" alt="rejection-4-reply"/><blockquote><p>If you reply kindly to the App Review message, they will reply kindly as well!</p></blockquote><p>Lesson learned: Restore button it is!</p><p>This time, probably out of pity, the reviewer suggested me to request an expedited review (via the <a href="http://developer.apple.com/appstore/contact/appreviewteam/">Expedited Review Request form</a>) after I submitted the new binary with the restore button.</p><pre><code><span class="keyword">@IBACTION func</span> restoreTap(sender: <span class="type">UIButton</span>) {
  <span class="type">SKPaymentQueue</span>.<span class="call">defaultQueue</span>().<span class="call">restoreCompleteTransactions</span>()
}
</code></pre><p>Implementing the restore button was the quickest change that I‚Äôve ever made: I just had to drag a button to the storyboard and write 3 lines of code, connecting the <code>UIButton</code> to the associated <code>UIViewController</code> class.</p><img src="https://www.fivestars.blog/assets/posts/first-app-journey/expedited-review-reply.png" alt="expedited-review-reply"/><blockquote><p>Why did I even try?</p></blockquote><p>Seems like the Expedited Review Team didn‚Äôt have the same compassion of the previous reviewer. I have to wait for another round of App Reviews.</p><h2>Fourth Rejection</h2><p>I actually saw this submission going into review before falling asleep and I had a good feeling that I would wake up with an accepted app, HA, I better keep dreaming:</p><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejection-5.png" alt="rejection-5"/><blockquote><p>This is how the only kind of mail that I expect from Apple.</p></blockquote><p>This time the Reviewer thought he/she needed some special Twitter authorization in order to use the app:</p><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejection-5-message.png" alt="rejection-5-message"/><p>After explaining that any Twitter account will do, the app went under review again and‚Ä¶..it was accepted!</p><table><tbody><tr><td><img src="https://www.fivestars.blog/assets/posts/first-app-journey/dream.gif" alt="dream"/></td><td><img src="https://www.fivestars.blog/assets/posts/first-app-journey/pending.png" alt="filter"/></td></tr></tbody></table><blockquote><p>Do you mean‚Ä¶I finally made it?</p></blockquote><p>Too bad I had a change of heart on the App name. There‚Äôs only one way to change the name now:</p><img src="https://www.fivestars.blog/assets/posts/first-app-journey/developer-rejected.png" alt="developer-rejected"/><blockquote><p>I really missed having my app rejected</p></blockquote><p>Changed the app name, let‚Äôs make a new submission!</p><h2>Fifth Rejection</h2><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejection-6.png" alt="rejection-6"/><blockquote><p>Were you expecting anything else?</p></blockquote><p>The reviewer (I assume, newly employed) was using an iPad and was claiming that he couldn‚Äôt get past the Twitter authorization screen: that‚Äôs the screen that shows up when you launch the App for the first time.</p><p>The problem was not very clear because of the reviewer‚Äôs inaccurately cropped screenshots and ambiguous messages.</p><p>After a few messages exchanged, I recorded myself using the App in an iPad: the app went under review again and then it was accepted!</p><p>Lesson Learned: Don‚Äôt assume that everybody in the App Review Team knows what they‚Äôre doing.</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusions</h2><img src="https://www.fivestars.blog/assets/posts/first-app-journey/rejected-wall.jpeg" alt="rejection-wall"/><p>After building the app in just 3 months, I had to enjoy 3 more months of App Rejections before finally releasing it to the Apple Store.</p><p>During these months I learned quite a lot: I hope to have given you a sneak peek of both my frustration and passion that has kept me company during this journey.</p><p>If you made it this far, I would like to leave you with a few suggestions for your next submission (after all, I‚Äôm an expert now <em>/sarcasm</em>):</p><ul><li>Read the <a href="https://developer.apple.com/app-store/review/guidelines/">App Store Review Guidelines</a> every once in a while: it‚Äôs much shorter that what I expected and it will save you a few rejections</li><li>When submitting a new build, use the App Review Information fields to guide the reviewers and letting them know what has been changed/fixed/updated from the previous build</li></ul><img src="https://www.fivestars.blog/assets/posts/first-app-journey/app-review-information.png" alt="app-review-information"/><ul><li>In case you‚Äôre submitting a new build after a rejection, use the Notes field also to point out what you did to overcome the last rejection</li><li>Be polite: when reviewers reject your app, thank them and gently ask for more information (if needed) or let them know that you‚Äôre going to fix the issue(s) with a new submission</li><li>I‚Äôve always worked with very polite and kind reviewers that were more than happy to help me with any issue I had</li><li>Be patient: releasing an app can be a burden, Apple has very high standards and this is why its Store is not polluted like the competition</li></ul><p>Good luck with your next submission!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fivestars.blog/articles/parse-json-swift-2</guid><title>Parsing JSON Objects in Swift 2</title><description></description><link>https://www.fivestars.blog/articles/parse-json-swift-2</link><pubDate>Wed, 6 Jan 2016 00:00:00 +0700</pubDate><content:encoded><![CDATA[<p>Over the past New Year‚Äôs holiday break, thanks to <a href="https://natashatherobot.com">NatashaTheRobot</a> <a href="https://swiftnews.curated.co/issues/67">Newsletter</a>, I had the opportunity to read <a href="http://www.jessesquires.com/swift-failable-initializers-revisited/">Failable initializers, revisited</a> by <a href="http://www.jessesquires.com/">Jesse Squires</a>.</p><p>It‚Äôs a great article that teaches you how to fragment your code into smaller, nicer, and reusable sub-problems. You should <a href="http://www.jessesquires.com/swift-failable-initializers-revisited/">go check it out</a>.</p><p>However, there are a few points about the article example, a.k.a. how to parse JSON objects, that I didn‚Äôt like:</p><h3>Architecture Complexity</h3><p>Developers have to introduce one protocol (<code>JSONParserType</code>), two structs (one generic <code>JSONValidator</code>, and one for each model to parse, conforming to the just introduced <code>JSONParserType</code> protocol) and, finally, one generic function to wrap everything up nicely;</p><h3>Memory Accesses</h3><p>Having one <code>JSONValidator</code> and one <code>JSONParser</code> means going through all the (model) JSON keys at least twice (as Jesse writes, it‚Äôs up to the developer to decide whether to have these two structs merged or not);</p><h3>The Never-Ending Temptation</h3><p>In the lights of the previous point, developers might feel authorized to use forced unwrapping inside the <code>JSONParser</code> struct! üò±</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>One Protocol to rule them all</h2><p>While the previous architecture works perfectly, there‚Äôs a simpler way to gather all Jesse solution‚Äôs advantages in just <strong>one, little protocol</strong>:</p><pre><code><span class="keyword">protocol</span> JSONParser {
    <span class="keyword">static func</span> obtainModel(from json: <span class="type">JSON</span>) -&gt; <span class="type">Self</span>?
}
</code></pre><p>This protocol contains only one static function for your model struct, or final class, that will try to parse the JSON object: if successful, it will return the new, initialized model, otherwise it will return nil.</p><p>Even better, thanks to the Swift <code>Guard</code> and <code>Extension</code> statements, its implementation is as elegant as it gets, here‚Äôs an example:</p><pre><code><span class="comment">// Some model</span>
<span class="keyword">struct</span> MyModel {
    <span class="keyword">let</span> name: <span class="type">String</span>
    <span class="keyword">let</span> number: <span class="type">Int</span>
    <span class="keyword">let</span> date: <span class="type">NSDate</span>
}

<span class="comment">// Conforming to the new protocol</span>
<span class="keyword">extension</span> <span class="type">MyModel</span>: <span class="type">JSONParser</span> {
    <span class="keyword">static func</span> obtainModel(from json: <span class="type">JSON</span>) -&gt; <span class="type">MyModel</span>? {
        <span class="keyword">guard let</span> 
            <span class="comment">// parse json and construct MyModel</span>
        <span class="keyword">else</span> { <span class="keyword">return nil</span> }
        
        <span class="keyword">return</span> <span class="type">MyModel</span>(name: name, number: number, date: date)
    }
}
</code></pre><p>If you mind letting your models know where their sources come from, one of Jesse‚Äôs strong arguments, you can conform your models to JSONParser in another file and set the extension access level to private (thanks to <a href="http://www.swift-studies.com/">Swift Studies</a> for the tip).</p><p>Finally, this is how you actually use it:</p><pre><code><span class="keyword">let</span> json = <span class="type">JSON</span>(data: dataFromServer)

<span class="keyword">if let</span> model = <span class="type">MyModel</span>.<span class="call">obtainModel</span>(from: json) {
    <span class="comment">// success</span>
} <span class="keyword">else</span> {
    <span class="comment">// failure</span>
}
</code></pre><p>Pretty minimal, isn‚Äôt it?</p><div class="sponsor-container" style="margin: 1em 0;">
    <a href="https://github.com/getstream/stream-chat-swift/" class="support" style="margin: 0; border: 2px solid #87b4ff">
    <picture>
       <source srcset="/images/support/stream-dark.png" media="(prefers-color-scheme: dark)">
       <img src="https://www.fivestars.blog/images/support/stream.png" style="max-height: 4em">
     </picture>
     <p><b><u>Open Source iOS & macOS Chat SDK</u></b> - Check out Stream's Cross-Platform Open Source Chat SDK on GitHub! Write once and deploy your app with fully featured chat UI on iOS and macOS!</p>
  </a>
  <div class="fineprint fineprint-container">
    <span>Support FIVE STARS by checking out this sponsor, find more details <a href="https://www.fivestars.blog/sponsor/">here</a>.</span>
  </div>
</div><h2>Conclusion</h2><p>In this context, failable initializers suck. With just a little effort, we can write a much more beautiful and clean code for all our needs.</p><p>Happy parsing!</p>]]></content:encoded></item></channel></rss>