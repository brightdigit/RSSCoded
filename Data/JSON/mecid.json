{
  "version": "https://jsonfeed.org/version/1",
  "title": "Swift with Majid",
  "home_page_url": "https://swiftwithmajid.com/",
  "description": "Majid's blog about Swift development",
  "author": {
    "name": "Majid Jabrayilov"
  },
  "items": [
    {
      "guid": "https://swiftwithmajid.com/2021/06/16/mastering-list-in-swiftui",
      "url": "https://swiftwithmajid.com/2021/06/16/mastering-list-in-swiftui/",
      "title": "Mastering List in SwiftUI",
      "content_html": "<p>List is the crucial view for many apps. I can’t imagine an app that doesn’t use a list view anywhere in the view hierarchy. During WWDC21, list view became even more powerful and brought us all the needed features of <em>UITableView</em>. This week, we will learn how to use the list view in SwiftUI and master its features.</p>\n\n<div class=\"ads\">\n    <span>\n        Why don’t more iOS apps use voice? Machine learning for voice is hard, and using Siri is clunky and rigid. So we open-sourced an iOS library (also Android, Node, Python, &amp; React Native), and built a no-code web tool to make custom wake words, speech recognizers, and AI voices—for all devs! <a href=\"https://www.spokestack.io/?utm_source=swiftui_weekly&amp;utm_medium=email&amp;utm_campaign=maker_launch_PAID\">Try it for free.</a>\n    </span>\n</div>\n\n<h4 id=\"basics\">Basics</h4>\n<p>List view is straightforward but very powerful. You can use it similarly to other SwiftUI views. To create a list view in SwiftUI, you should initiate the <em>List</em> struct with a <em>ViewBuilder</em> closure that defines the content of the list.</p>\n\n<blockquote>\n  <p>To learn more about <em>ViewBuilder</em>, take a look at my dedicated <a href=\"/2019/12/18/the-power-of-viewbuilder-in-swiftui/\">“The power of @ViewBuilder in SwiftUI”</a> post.</p>\n</blockquote>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">List</span> <span class=\"p\">{</span>\n            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Hello\"</span><span class=\"p\">)</span>\n            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"World\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img src=\"/public/list0.png\" alt=\"list\" /></p>\n\n<p>Usually, we use the list view to display an array of similar items. To achieve this behavior with SwiftUI, we should use another version of <em>List</em> structs’s initializer to map every item in the collection to its view representation.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Message</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">id</span> <span class=\"o\">=</span> <span class=\"kt\">UUID</span><span class=\"p\">()</span>\n    <span class=\"k\">let</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Message</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"Hello\"</span><span class=\"p\">),</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"World\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">List</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can see in the example above, we construct the list by providing a messages array and the keypath defining the message’s <em>ID</em>. SwiftUI uses the <em>ID</em> to differentiate the items and animate changes like insert, remove and reorder. Remember that you should provide a keypath to the stable <em>ID</em> property. For example, it might be a stored property from your database.</p>\n\n<h4 id=\"sections\">Sections</h4>\n<p>Sometimes we need to display the content of the list view in different sections. We can make it happen using the <em>Section</em> view in SwiftUI.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">incoming</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Message</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"Incoming message 1\"</span><span class=\"p\">),</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"Incoming message 2\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">outgoing</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Message</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"Outgoing message 1\"</span><span class=\"p\">),</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"Outgoing message 2\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">List</span> <span class=\"p\">{</span>\n            <span class=\"kt\">Section</span><span class=\"p\">(</span><span class=\"nv\">header</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Incoming\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">incoming</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"kt\">Section</span><span class=\"p\">(</span><span class=\"nv\">header</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Outgoing\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">outgoing</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img src=\"/public/list2.png\" alt=\"list\" /></p>\n\n<p>As you can see here, we use the <em>ForEach</em> view to iterate over collections of items and map them to particular views. It also needs a keypath to the <em>ID</em> field to differentiate the items in the collection.</p>\n\n<h4 id=\"recursive\">Recursive</h4>\n<p>I didn’t face this case too often, but we have to display recursive data structures like trees in our apps from time to time. You can easily do that with the list view in SwiftUI. There is a particular <em>List</em> struct initializer that accepts a keypath for the recursive field of your data structure. It will use the keypath to traverse and display your data recursively.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Tree</span><span class=\"o\">&lt;</span><span class=\"kt\">Value</span><span class=\"p\">:</span> <span class=\"kt\">Hashable</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"kt\">Hashable</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"kt\">Value</span>\n    <span class=\"k\">var</span> <span class=\"nv\">children</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Tree</span><span class=\"o\">&lt;</span><span class=\"kt\">Value</span><span class=\"o\">&gt;</span><span class=\"p\">]?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">tree</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Tree</span><span class=\"o\">&lt;</span><span class=\"kt\">Int</span><span class=\"o\">&gt;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span>\n            <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"nv\">children</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n                <span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span>\n                    <span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n                    <span class=\"nv\">children</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                        <span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n                        <span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">value</span><span class=\"p\">:</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n    \n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">List</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nv\">children</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">item</span> <span class=\"k\">in</span>\n            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">))</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img src=\"/public/list3.png\" alt=\"list\" /></p>\n\n<p>As you can see in the example above, we define the <em>Tree</em> struct with the <em>children</em> field, which is another array of trees. Then, we initiate the list view and provide a keypath to the recursive field.</p>\n\n<blockquote>\n  <p>To learn more about displaying recursive data, take a look at my <a href=\"/2020/09/02/displaying-recursive-data-using-outlinegroup-in-swiftui/\">“Displaying recursive data using OutlineGroup in SwiftUI”</a> post.</p>\n</blockquote>\n\n<h4 id=\"selection\">Selection</h4>\n<p>List view provides you an opportunity to select items only in the edit mode. However, we usually want to mark several items to delete or move them together. Therefore, to enable the selection interface, we have to move the view to the edit mode and provide a selection binding to the list view.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">selection</span><span class=\"p\">:</span> <span class=\"kt\">Set</span><span class=\"o\">&lt;</span><span class=\"kt\">UUID</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Message</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"Hello\"</span><span class=\"p\">),</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"World\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span><span class=\"p\">(</span><span class=\"nv\">selection</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">selection</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"List\"</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">toolbar</span> <span class=\"p\">{</span> <span class=\"kt\">EditButton</span><span class=\"p\">()</span> <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><img src=\"/public/list4.png\" alt=\"list\" /></p>\n\n<p>We add the edit button in the toolbar. Edit button toggles the edit mode for the current scope and enables the editing interface. You can allow both single and multi-selection modes. It depends on the type of selection binding you provide. SwiftUI enables multi selection mode when you give a binding to the <em>Set</em>, or it uses single selection binding when you pass the binding to the single <em>ID</em> item.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">selection</span><span class=\"p\">:</span> <span class=\"kt\">UUID</span><span class=\"p\">?</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Message</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"Hello\"</span><span class=\"p\">),</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"World\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span><span class=\"p\">(</span><span class=\"nv\">selection</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">selection</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"List\"</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">toolbar</span> <span class=\"p\">{</span> <span class=\"kt\">EditButton</span><span class=\"p\">()</span> <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here we provide a binding to the single item <em>ID</em>. That’s why SwiftUI enables the single selection mode on the list.</p>\n\n<h4 id=\"swipe-actions\">Swipe actions</h4>\n<p>We can enable leading and trailing swipe actions for the list items. We can quickly achieve that by using the new <em>swipeActions</em> view modifier.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Message</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"Hello\"</span><span class=\"p\">),</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"World\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n                        <span class=\"o\">.</span><span class=\"nf\">swipeActions</span><span class=\"p\">(</span><span class=\"nv\">edge</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">trailing</span><span class=\"p\">,</span> <span class=\"nv\">allowsFullSwipe</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Delete\"</span><span class=\"p\">,</span> <span class=\"nv\">role</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">destructive</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">removeAll</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"p\">}</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"List\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In the example above, we add the opportunity to remove the items from the list using a trailing edge swipe. We can provide multiple actions on every edge. Here is another example with two swipeable actions on the leading edge with different button colors.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Message</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"Hello\"</span><span class=\"p\">),</span>\n        <span class=\"kt\">Message</span><span class=\"p\">(</span><span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"s\">\"World\"</span><span class=\"p\">)</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n                        <span class=\"o\">.</span><span class=\"nf\">swipeActions</span><span class=\"p\">(</span><span class=\"nv\">edge</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">,</span> <span class=\"nv\">allowsFullSwipe</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Favorite\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"c1\">// do some work here</span>\n                            <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">tint</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"p\">)</span>\n\n                            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Move\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"c1\">// do some work here</span>\n                            <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">tint</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">)</span>\n                        <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"List\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"styling-options\">Styling options</h4>\n<p>SwiftUI provides a few different styles for the list view. It includes <em>plain, sidebar, inset, grouped, inset, and insetGrouped</em> styles. By default, SwiftUI uses <em>insetGrouped</em> style, but you can change it to any style you need using the <em>listStyle</em> view modifier. Keep in mind that the <em>listStyle</em> view modifier uses the environment to propagate the selected style, and it will affect all the list views down in the view hierarchy.</p>\n\n<blockquote>\n  <p>To learn more about environment in SwiftUI, take a look at my <a href=\"/2019/08/21/the-power-of-environment-in-swiftui/\">“The power of Environment in SwiftUI”</a> post.</p>\n</blockquote>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span> <span class=\"p\">{</span>\n                <span class=\"kt\">Section</span><span class=\"p\">(</span><span class=\"nv\">header</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Section 1\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Hello\"</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"kt\">Section</span><span class=\"p\">(</span><span class=\"nv\">header</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Section 2\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"World\"</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">listStyle</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">plain</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"List\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>SwiftUI also provides us a set of view modifier which allows us to change the tint color of separators, list items or completely hide them from the list.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span> <span class=\"p\">{</span>\n                <span class=\"kt\">Section</span><span class=\"p\">(</span><span class=\"nv\">header</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Section 1\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">Label</span><span class=\"p\">(</span><span class=\"s\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"nv\">systemImage</span><span class=\"p\">:</span> <span class=\"s\">\"message\"</span><span class=\"p\">)</span>\n                        <span class=\"o\">.</span><span class=\"nf\">listItemTint</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"kt\">Section</span><span class=\"p\">(</span><span class=\"nv\">header</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Section 2\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"World\"</span><span class=\"p\">)</span>\n                        <span class=\"o\">.</span><span class=\"nf\">listRowSeparatorTint</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">listStyle</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">grouped</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">listSectionSeparator</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">hidden</span><span class=\"p\">,</span> <span class=\"nv\">edges</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"List\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n<p>This week we learned how to use the most crucial SwiftUI view. So I’m happy to cover the list view in my blog finally. I hope you enjoy the post. Feel free to follow me on <a href=\"https://twitter.com/mecid\">Twitter</a> and ask your questions related to this post. Thanks for reading, and see you next week!</p>",
      "summary": "List is the crucial view for many apps. I can’t imagine an app that doesn’t use a list view anywhere in the view hierarchy. During WWDC21, list view became even more powerful and brought us all the needed features of UITableView. This week, we will learn how to use the list view in SwiftUI and master its features.",
      "date_published": "2021-06-16T00:00:00.000Z",
      "author": {
        "name": "Majid Jabrayilov"
      }
    },
    {
      "guid": "https://swiftwithmajid.com/2021/06/08/what-is-new-in-swiftui-after-wwdc21",
      "url": "https://swiftwithmajid.com/2021/06/08/what-is-new-in-swiftui-after-wwdc21/",
      "title": "What is new in SwiftUI after WWDC21",
      "content_html": "<p>WWDC21 is finally here, and there are many new things in the updated version of SwiftUI. I’m happy to share with you that many items on my wishlist have finally arrived. In this post, I will try to give you a summary of the significant SwiftUI additions of this year.</p>\n\n<div class=\"ads\">\n    <span>\n        Why don’t more iOS apps use voice? Machine learning for voice is hard, and using Siri is clunky and rigid. So we open-sourced an iOS library (also Android, Node, Python, &amp; React Native), and built a no-code web tool to make custom wake words, speech recognizers, and AI voices—for all devs! <a href=\"https://www.spokestack.io/?utm_source=swiftui_weekly&amp;utm_medium=email&amp;utm_campaign=maker_launch_PAID\">Try it for free.</a>\n    </span>\n</div>\n\n<h4 id=\"list\">List</h4>\n<p>The <em>List</em> view is the most common view in our apps. The <em>List</em> view managed <em>UITableView</em> under the hood but didn’t expose all the great features of <em>UITableView</em> till today. Now we have view modifiers that expose the styling options for separators and tint colors in sections and cells. Let’s see how we can use them.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"s\">\"World\"</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n                        <span class=\"o\">.</span><span class=\"nf\">listRowSeparatorTint</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>\n                        <span class=\"o\">.</span><span class=\"nf\">listRowSeparator</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">visible</span><span class=\"p\">,</span> <span class=\"nv\">edges</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">listSectionSeparator</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">visible</span><span class=\"p\">,</span> <span class=\"nv\">edges</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">listSectionSeparatorTint</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">purple</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"Messages\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>SwiftUI also provides the new <em>swipeActions</em> view modifier that we can use to attach the swipeable action to views inside a list.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"s\">\"World\"</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n                        <span class=\"o\">.</span><span class=\"nf\">swipeActions</span><span class=\"p\">(</span><span class=\"nv\">edge</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">trailing</span><span class=\"p\">,</span> <span class=\"nv\">allowsFullSwipe</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Remove\"</span><span class=\"p\">,</span> <span class=\"nv\">role</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">destructive</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">removeAll</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span> <span class=\"o\">==</span> <span class=\"n\">message</span> <span class=\"p\">}</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                        <span class=\"o\">.</span><span class=\"nf\">swipeActions</span><span class=\"p\">(</span><span class=\"nv\">edge</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">,</span> <span class=\"nv\">allowsFullSwipe</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Copy\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                                <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"Messages\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can see in the example above, we also have new <em>ButtonRole</em> enum that allows specifying a role for the button, which can be either <em>destructive</em> or <em>cancel</em>.</p>\n\n<h4 id=\"pull-to-refresh\">Pull-to-Refresh</h4>\n<p>I used to have the pull-to-refresh gesture in the screens where the content can be updated or refetched. SwiftUI provides the new <em>refreshable</em> view modifier that we can use to attach the pull-to-refresh gesture and a callback that SwiftUI runs as soon as the user enables the gesture.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"s\">\"World\"</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">refreshable</span> <span class=\"p\">{</span>\n                <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"s\">\"!!!\"</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"Messages\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"search\">Search</h4>\n<p>Another thing that I really missed in SwiftUI is <em>SearchBar</em> and <em>SearchController</em>’s functionality. Fortunately, this iteration of SwiftUI is packed with a brand new collection of view modifiers that enables powerful search capabilities.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">query</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s\">\"Hello\"</span><span class=\"p\">,</span> <span class=\"s\">\"World\"</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span> <span class=\"p\">{</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">searchable</span><span class=\"p\">(</span><span class=\"s\">\"Search term\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"nv\">placement</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">automatic</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">onChange</span><span class=\"p\">(</span><span class=\"nv\">of</span><span class=\"p\">:</span> <span class=\"n\">query</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"Messages\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"asyncimage\">AsyncImage</h4>\n<p>The thing I didn’t expect was the new <em>AsyncImage</em> view. <em>AsyncImage</em> view allows you to download and present remote images using <em>URLSession</em>. It provides a very lovely API which very easy to use. Let’s take a look at it.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">Post</span><span class=\"p\">:</span> <span class=\"kt\">Hashable</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">image</span><span class=\"p\">:</span> <span class=\"kt\">URL</span>\n    <span class=\"k\">let</span> <span class=\"nv\">title</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n    <span class=\"k\">let</span> <span class=\"nv\">content</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">PostView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">post</span><span class=\"p\">:</span> <span class=\"kt\">Post</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">HStack</span> <span class=\"p\">{</span>\n            <span class=\"kt\">AsyncImage</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">)</span>\n            <span class=\"kt\">VStack</span> <span class=\"p\">{</span>\n                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>\n                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">secondary</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"text-and-attributedstring\">Text and AttributedString</h4>\n<p>Swift Foundation has a new <em>AttributedString</em> type and SwiftUI supports it out of the box. You can now pass the instances of <em>AttributedString</em> to <em>Text</em> view to display it. An interesting detail here is the ability to display markdown content using the new <em>AttributedString</em>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">PostView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">post</span><span class=\"p\">:</span> <span class=\"kt\">Post</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">markdown</span><span class=\"p\">:</span> <span class=\"kt\">AttributedString</span> <span class=\"p\">{</span>\n        <span class=\"k\">try!</span> <span class=\"kt\">AttributedString</span><span class=\"p\">(</span><span class=\"nv\">markdown</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">HStack</span> <span class=\"p\">{</span>\n            <span class=\"kt\">AsyncImage</span><span class=\"p\">(</span><span class=\"nv\">url</span><span class=\"p\">:</span> <span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">)</span>\n            <span class=\"kt\">VStack</span> <span class=\"p\">{</span>\n                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">)</span>\n                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">markdown</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As the bonus we gain markdown support everywhere with <em>Text</em> view.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"**Happy WWDC21**\"</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"focus-management\">Focus management</h4>\n<p>Finally, SwiftUI provides us a way to manage the focus in our views. There are brand new @<em>FocusState</em> property wrappers and a <em>focused</em> view modifier that we can use to toggle first responders.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">LoginForm</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">enum</span> <span class=\"kt\">Field</span><span class=\"p\">:</span> <span class=\"kt\">Hashable</span> <span class=\"p\">{</span>\n        <span class=\"k\">case</span> <span class=\"n\">usernameField</span>\n        <span class=\"k\">case</span> <span class=\"n\">passwordField</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">username</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">password</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"kd\">@FocusState</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">focusedField</span><span class=\"p\">:</span> <span class=\"kt\">Field</span><span class=\"p\">?</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>\n            <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Username\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">username</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">focused</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"n\">focusedField</span><span class=\"p\">,</span> <span class=\"nv\">equals</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">usernameField</span><span class=\"p\">)</span>\n\n            <span class=\"kt\">SecureField</span><span class=\"p\">(</span><span class=\"s\">\"Password\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">password</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">focused</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"n\">focusedField</span><span class=\"p\">,</span> <span class=\"nv\">equals</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">passwordField</span><span class=\"p\">)</span>\n\n            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Sign In\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">if</span> <span class=\"n\">username</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"p\">{</span>\n                    <span class=\"n\">focusedField</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">usernameField</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">password</span><span class=\"o\">.</span><span class=\"n\">isEmpty</span> <span class=\"p\">{</span>\n                    <span class=\"n\">focusedField</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">passwordField</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nf\">handleLogin</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"canvas\">Canvas</h4>\n<p>SwiftUI <em>Canvas</em> is a new way to gain more control over lower-level drawing primitives. It is a modern, GPU-accelerated equivalent of <em>drawRect</em>. We can use <em>Canvas</em> to draw shapes using <em>Path</em>. We can also draw images, texts, and other SwiftUI views.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Canvas</span> <span class=\"p\">{</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">size</span> <span class=\"k\">in</span>\n            <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span>\n                <span class=\"kt\">Circle</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">origin</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">zero</span><span class=\"p\">,</span> <span class=\"nv\">size</span><span class=\"p\">:</span> <span class=\"n\">size</span><span class=\"p\">)),</span>\n                <span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">color</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"materials\">Materials</h4>\n<p>iOS provides materials or blur effects that create a translucent effect you can use to evoke a sense of depth. The effect of material lets views and controls hint at background content without distracting from foreground content. We didn’t have access to materials in previous versions of SwiftUI. Fortunately, the new version of SwiftUI provides us a whole range of physical materials from ultra-thin to ultra-thick and semantic bars material.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">ZStack</span> <span class=\"p\">{</span>\n    <span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">teal</span>\n    <span class=\"kt\">Label</span><span class=\"p\">(</span><span class=\"s\">\"Flag\"</span><span class=\"p\">,</span> <span class=\"nv\">systemImage</span><span class=\"p\">:</span> <span class=\"s\">\"flag.fill\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">padding</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">regularMaterial</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"timelineview\">TimelineView</h4>\n<p><em>TimelineView</em> is another brand new SwiftUI view. Usually, SwiftUI updates views only during environment or state changes. In case of <em>TimelineView</em>, SwiftUI updates it according to a schedule that you provide. It might be very useful while building clock or workout apps.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">TimelineView</span><span class=\"p\">(</span><span class=\"kt\">PeriodicTimelineSchedule</span><span class=\"p\">(</span><span class=\"nv\">from</span><span class=\"p\">:</span> <span class=\"n\">startDate</span><span class=\"p\">,</span> <span class=\"nv\">by</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"n\">context</span> <span class=\"k\">in</span>\n    <span class=\"kt\">AnalogTimerView</span><span class=\"p\">(</span><span class=\"nv\">date</span><span class=\"p\">:</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n<p>There are many other additions worth mentioning, like a brand new Accessibility Rotors API, the new <em>SectionedFetchRequest</em> property wrapper that allows you to make sectioned requests to Core Data, and much more.</p>\n\n<p>I hope to cover all these new features of the SwiftUI framework in the upcoming weeks. Feel free to follow me on <a href=\"https://twitter.com/mecid\">Twitter</a> and ask your questions related to this post. Thanks for reading, and see you next week!</p>",
      "summary": "WWDC21 is finally here, and there are many new things in the updated version of SwiftUI. I’m happy to share with you that many items on my wishlist have finally arrived. In this post, I will try to give you a summary of the significant SwiftUI additions of this year.",
      "date_published": "2021-06-08T00:00:00.000Z",
      "author": {
        "name": "Majid Jabrayilov"
      }
    },
    {
      "guid": "https://swiftwithmajid.com/2021/06/02/frames-in-swiftui",
      "url": "https://swiftwithmajid.com/2021/06/02/frames-in-swiftui/",
      "title": "Frames in SwiftUI",
      "content_html": "<p>SwiftUI provides us a magical frame modifier that you might think is very simple and straightforward to use. But there is a lot of complicated logic under the hood. This week we will talk about fixed and flexible frames and the frame modifier to control them.</p>\n\n<div class=\"ads\">\n    <span>\n        Why don’t more iOS apps use voice? Machine learning for voice is hard, and using Siri is clunky and rigid. So we open-sourced an iOS library (also Android, Node, Python, &amp; React Native), and built a no-code web tool to make custom wake words, speech recognizers, and AI voices—for all devs! <a href=\"https://www.spokestack.io/?utm_source=swiftui_weekly&amp;utm_medium=email&amp;utm_campaign=maker_launch_PAID\">Try it for free.</a>\n    </span>\n</div>\n\n<h4 id=\"fixed-frame\">Fixed frame</h4>\n<p>Let’s start with the straightforward type of frame called a fixed frame. The fixed frame is a way to create an invisible frame around the view that will propose the size you mention to the view. It doesn’t mean that the frame will set the size of the view inside. The frame only suggests the size, and the view can completely ignore it. Let’s take a look two different examples.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">PlaygroundPage</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"nf\">setLiveView</span><span class=\"p\">(</span>\n    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Happy WWDC 21!\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">border</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">black</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><img src=\"/public/fixed-frame2.png\" alt=\"fixed-frame\" /></p>\n\n<p>As you can see in the example above, we have a <em>Text</em> view that shrinks its content to fit the size proposed by the frame.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">PlaygroundPage</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"nf\">setLiveView</span><span class=\"p\">(</span>\n    <span class=\"kt\">Rectangle</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"nf\">fill</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">border</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">yellow</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">black</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><img src=\"/public/fixed-frame1.png\" alt=\"fixed-frame\" /></p>\n\n<p>In the second example, we use a green rectangle with the size of 100x100. We also add a small fixed frame around the rectangle, but in this case, the green rectangle ignores the size proposed by the frame and draws itself outside of the frame.</p>\n\n<blockquote>\n  <p>To learn more about layout process in SwiftUI, take a look at my <a href=\"/2020/04/15/layout-priorities-in-swiftui/\">“Layout priorities in SwiftUI”</a> post.</p>\n</blockquote>\n\n<h4 id=\"flexible-frame\">Flexible frame</h4>\n<p>There is another version of the frame modifier that accepts seven parameters.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">frame</span><span class=\"p\">(</span>\n    <span class=\"nv\">minWidth</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n    <span class=\"nv\">idealWidth</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n    <span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n    <span class=\"nv\">minHeight</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n    <span class=\"nv\">idealHeight</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n    <span class=\"nv\">maxHeight</span><span class=\"p\">:</span> <span class=\"kt\">CGFloat</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n    <span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"kt\">Alignment</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">center</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{}</span>\n</code></pre></div></div>\n\n<p>Let’s focus on the horizontal axis because the same applies to the vertical. We will talk about ideal width and height in the next section because it doesn’t affect flexible frames. As you can see, there are optional parameters for minimal and maximal width. You have three options here:</p>\n<ol>\n  <li>You provide both minimal and maximal value.</li>\n  <li>You provide only minimal value.</li>\n  <li>You provide only maximal value.</li>\n</ol>\n\n<p>Let’s start with the first one when you provide both minimal and maximal value. In this case, SwiftUI completely ignores the size of the child inside the frame and clamps the final size of the frame between minimal and maximal value.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">PlaygroundPage</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"nf\">setLiveView</span><span class=\"p\">(</span>\n    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Happy WWDC 21!\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">border</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">minWidth</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"mi\">50</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">border</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">black</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><img src=\"/public/flexible-frame1.png\" alt=\"flexible-frame\" /></p>\n\n<p>In the second case, we have only minimal value provided, which leads to the situation where SwiftUI checks the content size of a child view inside a frame and makes a decision based on this value. The final size of the frame will be the minimum value that you pass if the content size of the child view is smaller than the value you provide. Otherwise, it will be equal to the content size of the child view.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">PlaygroundPage</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"nf\">setLiveView</span><span class=\"p\">(</span>\n    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Happy WWDC 21!\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">border</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">minWidth</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">border</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">black</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><img src=\"/public/flexible-frame2.png\" alt=\"flexible-frame\" /></p>\n\n<p>In the third case, we have only maximal value provided, and it leads to the condition where SwiftUI checks the content size of a child view inside a frame. It sets the final size of the frame to the maximal value whenever the content size bigger than the size you pass. Otherwise, it will be equal to the content size of the child view.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">PlaygroundPage</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"o\">.</span><span class=\"nf\">setLiveView</span><span class=\"p\">(</span>\n    <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Happy WWDC 21!\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">white</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">border</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">green</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">maxWidth</span><span class=\"p\">:</span> <span class=\"mi\">40</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">border</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">red</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">frame</span><span class=\"p\">(</span><span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">,</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"mi\">300</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">background</span><span class=\"p\">(</span><span class=\"kt\">Color</span><span class=\"o\">.</span><span class=\"n\">black</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><img src=\"/public/flexible-frame3.png\" alt=\"flexible-frame\" /></p>\n\n<h4 id=\"ideal-size\">Ideal size</h4>\n<p>Ideal width and heigh parameters allow us to provide an intrinsic size. Intrinsic size is usually the size of the content. In the case of the <em>Text</em> view, it is the size of the string presented in the view. In the case of a shape like a <em>Rectangle</em> or <em>Circle</em>, the ideal size is undefined, and the view tries to fill the available space. The frame modifier allows you to provide the ideal size for the views that don’t have content. SwiftUI uses ideal size only in conjunction with the <em>fixedSize</em> modifier.</p>\n\n<blockquote>\n  <p>To learn more about the fixedSize modifier, take a look at my <a href=\"/2020/04/29/the-magic-of-fixed-size-modifier-in-swiftui/\">“The magic of fixed size modifier in SwiftUI”</a> post.</p>\n</blockquote>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n<p>The most challenging topic in SwiftUI for me was frame behavior. Fixed-size, flexible frames, ideal size, so many options for a single frame modifier. I hope you enjoy the post. Feel free to follow me on <a href=\"https://twitter.com/mecid\">Twitter</a> and ask your questions related to this post. Thanks for reading, and see you next week!</p>",
      "summary": "SwiftUI provides us a magical frame modifier that you might think is very simple and straightforward to use. But there is a lot of complicated logic under the hood. This week we will talk about fixed and flexible frames and the frame modifier to control them.",
      "date_published": "2021-06-02T00:00:00.000Z",
      "author": {
        "name": "Majid Jabrayilov"
      }
    },
    {
      "guid": "https://swiftwithmajid.com/2021/05/26/swiftui-wishlist-for-wwdc21",
      "url": "https://swiftwithmajid.com/2021/05/26/swiftui-wishlist-for-wwdc21/",
      "title": "SwiftUI wishlist for WWDC21",
      "content_html": "<p>WWDC21 is coming pretty soon, and it is a great chance to think about the new features that I want to see in SwiftUI. This wishlist contains not only the list of the features I want to use but also possible APIs. Remember that this post is the result of my imagination, and most of the code examples don’t exist at the moment.</p>\n\n<div class=\"ads\">\n    <span>\n        Why don’t more iOS apps use voice? Machine learning for voice is hard, and using Siri is clunky and rigid. So we open-sourced an iOS library (also Android, Node, Python, &amp; React Native), and built a no-code web tool to make custom wake words, speech recognizers, and AI voices—for all devs! <a href=\"https://www.spokestack.io/?utm_source=swiftui_weekly&amp;utm_medium=email&amp;utm_campaign=maker_launch_PAID\">Try it for free.</a>\n    </span>\n</div>\n\n<h4 id=\"list-and-scrollview\">List and ScrollView</h4>\n<p>SwiftUI provides you both <em>List</em> and <em>ScrollView</em>, but under the hood, these views still use the UIKit implementation of <em>UITableView</em> and <em>UIScrollView</em>. I love how <em>UITableView</em> works and the API it provides us. But SwiftUI’s <em>List</em> and <em>ScrollView</em> don’t expose all the powerful features of <em>UITableView</em> and <em>UIScrollView</em>.</p>\n\n<p>Almost all the screens in my apps use the List view in different styles, and I hope to see more APIs from <em>UITableView</em>, which allows styling separators, cell backgrounds using the <em>ListStyle</em> protocol.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">messages</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">String</span><span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">List</span> <span class=\"p\">{</span>\n            <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"k\">self</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">message</span> <span class=\"k\">in</span>\n                <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">listStyle</span><span class=\"p\">(</span><span class=\"kt\">DefaultListStyle</span><span class=\"p\">(</span><span class=\"nv\">separator</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"k\">none</span><span class=\"p\">,</span> <span class=\"nv\">selection</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">single</span><span class=\"p\">))</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p><em>ScrollView</em> is another crucial component for many screens. I usually build my apps with accessibility in mind and support Dynamic Type out of the box. <em>ScrollView</em> is must-have root view for every screen where you want Dynamic Type. <em>ScrollView</em> in SwiftUI is still missing paging and content offset features that we used to see in <em>UIScrollView</em>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">RootView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">offset</span><span class=\"p\">:</span> <span class=\"kt\">CGPoint</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">zero</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">ScrollView</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">vertical</span><span class=\"p\">,</span> <span class=\"nv\">showsIndicators</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span> <span class=\"nv\">offset</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">offset</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"Very long text\"</span><span class=\"p\">)</span>\n            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"Jump to top\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">zero</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>We can read the content offset of ScrollView using preferences API in SwiftUI. To learn more, take a look at my dedicated <a href=\"/2020/09/24/mastering-scrollview-in-swiftui/\">“Mastering ScrollView in SwiftUI”</a> post.</p>\n</blockquote>\n\n<h4 id=\"compositionallayout\">CompositionalLayout</h4>\n<p>During the last year, Apple gave us <em>LazyHGrid</em> and <em>LazyVGrid</em> views, which we can use to build views like calendars or photo grids. Grids work great, and I love them, but we want to use the power of <em>CompositionalLayout</em> that we have in UIKit. I don’t think that Apple should get rid of <em>LazyHGrid</em> and <em>LazyVGrid</em> views, but they can introduce a new <em>CompositionaView</em> that supports all the features of <em>CompositionalLayout</em>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">AppStoreView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">featured</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">App</span><span class=\"p\">]</span>\n    <span class=\"k\">let</span> <span class=\"nv\">appsWeLove</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">App</span><span class=\"p\">]</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">CompositionaView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">Section</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">groupPagingCentered</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"kt\">Group</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">horizontal</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">fractionalWidth</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">),</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">fractionalHeight</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">featured</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">app</span> <span class=\"k\">in</span>\n                        <span class=\"kt\">FeatureAppView</span><span class=\"p\">(</span><span class=\"nv\">app</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"kt\">Section</span> <span class=\"p\">{</span>\n                <span class=\"kt\">Group</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">vertical</span><span class=\"p\">,</span> <span class=\"nv\">width</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">fractionalWidth</span><span class=\"p\">(</span><span class=\"mf\">0.9</span><span class=\"p\">),</span> <span class=\"nv\">height</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">estimated</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">appsWeLove</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">app</span> <span class=\"k\">in</span>\n                        <span class=\"kt\">SmallAppView</span><span class=\"p\">(</span><span class=\"nv\">app</span><span class=\"p\">:</span> <span class=\"n\">app</span><span class=\"p\">)</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"navigation\">Navigation</h4>\n<p>Navigation is another point of pain in SwiftUI. It works great for simple use cases but doesn’t provide enough flexibility for complex solutions. What I want to use is some sort of <em>RouterView</em> that maps destinations to concrete views.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">Destination</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">home</span>\n    <span class=\"k\">case</span> <span class=\"n\">login</span>\n    <span class=\"k\">case</span> <span class=\"nf\">profile</span><span class=\"p\">(</span><span class=\"kt\">UUID</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"n\">settings</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">struct</span> <span class=\"kt\">RootView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">RouterView</span><span class=\"p\">(</span><span class=\"nv\">initial</span><span class=\"p\">:</span> <span class=\"kt\">Destination</span><span class=\"o\">.</span><span class=\"n\">home</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">destination</span> <span class=\"k\">in</span>\n            <span class=\"k\">switch</span> <span class=\"n\">destination</span> <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">home</span><span class=\"p\">:</span> <span class=\"kt\">HomeView</span><span class=\"p\">()</span>\n            <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">login</span><span class=\"p\">:</span> <span class=\"kt\">LoginView</span><span class=\"p\">()</span>\n            <span class=\"k\">case</span> <span class=\"kd\">let</span> <span class=\"o\">.</span><span class=\"nf\">profile</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span> <span class=\"kt\">ProfileView</span><span class=\"p\">(</span><span class=\"nv\">user</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"p\">)</span>\n            <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">settings</span><span class=\"p\">:</span> <span class=\"kt\">SettingsView</span><span class=\"p\">()</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We also can have a router in the environment and mutate the state of navigation using the environment value.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ProfileView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">user</span><span class=\"p\">:</span> <span class=\"kt\">UUID</span>\n    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">router</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>\n            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"push settings screen\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">router</span><span class=\"o\">.</span><span class=\"nf\">push</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"go home\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">router</span><span class=\"o\">.</span><span class=\"nf\">popToRoot</span><span class=\"p\">()</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>To learn more about advanced techniques while building navigation in SwiftUI, take a look at my <a href=\"/2021/01/27/lazy-navigation-in-swiftui/\">“Lazy navigation in SwiftUI”</a> post.</p>\n</blockquote>\n\n<h4 id=\"focus-management-and-text-fields\">Focus management and text fields</h4>\n<p>Sign-up form with multiple text fields is what I usually implement using UIKit and then wrap with <em>UIViewControllerRepresentable</em>. It is literally impossible to handle the first responder in SwiftUI and move the focus from one view to another.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">LoginView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">email</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">password</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n\n    <span class=\"kd\">@State</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">hasFilledCredentials</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n    <span class=\"kd\">@Namespace</span> <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">namespace</span>\n\n    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">resetFocus</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">resetFocus</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">VStack</span> <span class=\"p\">{</span>\n            <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"email\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">email</span><span class=\"p\">)</span>\n                <span class=\"o\">.</span><span class=\"nf\">prefersDefaultFocus</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">hasFilledCredentials</span><span class=\"p\">,</span> <span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"n\">namespace</span><span class=\"p\">)</span>\n\n            <span class=\"kt\">SecureField</span><span class=\"p\">(</span><span class=\"s\">\"password\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">password</span><span class=\"p\">)</span>\n\n            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"login\"</span><span class=\"p\">)</span> <span class=\"p\">{}</span>\n                <span class=\"o\">.</span><span class=\"nf\">prefersDefaultFocus</span><span class=\"p\">(</span><span class=\"n\">hasFilledCredentials</span><span class=\"p\">,</span> <span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"n\">namespace</span><span class=\"p\">)</span>\n\n            <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"s\">\"reset credentials\"</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                <span class=\"n\">hasFilledCredentials</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>\n                <span class=\"nf\">resetFocus</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"n\">namespace</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">focusScope</span><span class=\"p\">(</span><span class=\"n\">namespace</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You might wonder, but this is the real API that we have in SwiftUI at the moment. Unfortunately, it is available only for tvOS and watchOS, but I wish to see it for iOS and macOS.</p>\n\n<blockquote>\n  <p>To learn more about focus management in SwiftUI, take a look at my <a href=\"/2020/12/02/focus-management-in-swiftui/\">“Focus management in SwiftUI”</a> post.</p>\n</blockquote>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n<p>I didn’t mention small things like <em>Pull-to-Refresh, SearchBar, TextView</em>, but I still expect them to appear. SwiftUI has its own set of pros and cons. But for me, it is the way to go with my projects. I’m so excited about the upcoming WWDC and hope to see at least a part of the features I mentioned in this post. I hope you enjoy the post. Feel free to follow me on <a href=\"https://twitter.com/mecid\">Twitter</a> and ask your questions related to this post. Thanks for reading, and see you next week!</p>",
      "summary": "WWDC21 is coming pretty soon, and it is a great chance to think about the new features that I want to see in SwiftUI. This wishlist contains not only the list of the features I want to use but also possible APIs. Remember that this post is the result of my imagination, and most of the code examples don’t exist at the moment.",
      "date_published": "2021-05-26T00:00:00.000Z",
      "author": {
        "name": "Majid Jabrayilov"
      }
    },
    {
      "guid": "https://swiftwithmajid.com/2021/05/12/combining-multiple-combine-publishers-in-swift",
      "url": "https://swiftwithmajid.com/2021/05/12/combining-multiple-combine-publishers-in-swift/",
      "title": "Combining multiple Combine publishers in Swift",
      "content_html": "<p>I’ve already covered a few essential topics from the Combine framework story. We talked about handling errors and chaining operations, but today I want to talk about running multiple operations in parallel and handing results in a single place. This week we will learn how to use zip, merge and combine operators.</p>\n\n<div class=\"ads\">\n    <span>\n        Why don’t more iOS apps use voice? Machine learning for voice is hard, and using Siri is clunky and rigid. So we open-sourced an iOS library (also Android, Node, Python, &amp; React Native), and built a no-code web tool to make custom wake words, speech recognizers, and AI voices—for all devs! <a href=\"https://www.spokestack.io/?utm_source=swiftui_weekly&amp;utm_medium=email&amp;utm_campaign=maker_launch_PAID\">Try it for free.</a>\n    </span>\n</div>\n\n<h4 id=\"zip\">Zip</h4>\n<p><em>Zip</em> operator is handy when you have a couple of publishers and need to wait for values from both of them. For example, assume that you are working on some kind of store app. You have a product screen where you show product details and the list of related products. In this case, you might want to display details and associated products at the same time. You can achieve this behavior using the <em>Zip</em> operator.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">ProductViewModel</span><span class=\"p\">:</span> <span class=\"kt\">ObservableObject</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@Published</span> <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">product</span><span class=\"p\">:</span> <span class=\"kt\">Product</span><span class=\"p\">?</span>\n    <span class=\"kd\">@Published</span> <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">related</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Product</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">let</span> <span class=\"nv\">service</span> <span class=\"o\">=</span> <span class=\"kt\">ProductsService</span><span class=\"p\">()</span>\n    <span class=\"kd\">private</span> <span class=\"k\">var</span> <span class=\"nv\">cancellable</span><span class=\"p\">:</span> <span class=\"kt\">AnyCancellable</span><span class=\"p\">?</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"n\">_</span> <span class=\"nv\">product</span><span class=\"p\">:</span> <span class=\"kt\">UUID</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">cancellable</span> <span class=\"o\">=</span> <span class=\"kt\">Publishers</span><span class=\"o\">.</span><span class=\"kt\">Zip</span><span class=\"p\">(</span>\n            <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"nf\">fetch</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">),</span>\n            <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"nf\">fetchRelatedProducts</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"n\">product</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">sink</span><span class=\"p\">(</span>\n            <span class=\"nv\">receiveCompletion</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n            <span class=\"nv\">receiveValue</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"p\">[</span><span class=\"k\">weak</span> <span class=\"k\">self</span><span class=\"p\">]</span> <span class=\"n\">product</span><span class=\"p\">,</span> <span class=\"n\">related</span> <span class=\"k\">in</span>\n                <span class=\"k\">self</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">product</span>\n                <span class=\"k\">self</span><span class=\"p\">?</span><span class=\"o\">.</span><span class=\"n\">related</span> <span class=\"o\">=</span> <span class=\"n\">related</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>To learn more about designing API with Combine publishers, take a look at my <a href=\"/2021/04/07/designing-api-using-combine-framework/\">“Designing API using Combine framework”</a> post.</p>\n</blockquote>\n\n<p>As you can see in the example above, we use <em>Zip</em> to fetch product details and related products. As soon as both publishers emit the value <em>sink</em> subscriber will assign them to the stored properties.</p>\n\n<h4 id=\"combinelatest\">CombineLatest</h4>\n<p>The main downside of the <em>Zip</em> operator is that it delivers values only when all the publishers emit. Sometimes we want to obtain all the values even when some of them change more often than others. For example, assume that you are working on a signup screen where you have text fields for email, password, and repeated password. You also have a signup button that should be enabled when all the text fields contain valid data.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">SignUpViewModel</span><span class=\"p\">:</span> <span class=\"kt\">ObservableObject</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">email</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">password1</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">password2</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">isValid</span><span class=\"p\">:</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Never</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Publishers</span>\n            <span class=\"o\">.</span><span class=\"kt\">CombineLatest3</span><span class=\"p\">(</span><span class=\"err\">$</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"err\">$</span><span class=\"n\">password1</span><span class=\"p\">,</span> <span class=\"err\">$</span><span class=\"n\">password2</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">allSatisfy</span> <span class=\"p\">{</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">password1</span><span class=\"p\">,</span> <span class=\"n\">password2</span> <span class=\"k\">in</span>\n                <span class=\"n\">email</span><span class=\"o\">.</span><span class=\"nf\">contains</span><span class=\"p\">(</span><span class=\"s\">\"@\"</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span>\n                    <span class=\"n\">password1</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">7</span> <span class=\"o\">&amp;&amp;</span>\n                    <span class=\"n\">password1</span> <span class=\"o\">==</span> <span class=\"n\">password2</span>\n            <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here we have the signup screen’s view model. It contains a few stored properties which we are going to use in our view. It also has <em>isValid</em> computed property that creates a validation publisher.</p>\n\n<p>As you can see, we use the <em>CombineLatest</em> operator to obtain the latest values from all the publishers. <em>CombineLatest</em> publisher collects the first value from all three publishers and emits them as a single tuple. <em>CombineLatest</em> continues sending new values even when only one publisher emits a new value.</p>\n\n<p>On the other hand, the <em>Zip</em> operator sends a new value only when all the publishers emit new values.</p>\n\n<h4 id=\"mergemany\">MergeMany</h4>\n<p><em>Merge</em> is another helpful operator provided by the Combine framework that you can use to join a few different publishers with the same output type. I often use the <em>Merge</em> operator while fetching locally cached data and fetching new data from the webserver.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">FavoritesViewModel</span><span class=\"p\">:</span> <span class=\"kt\">ObservableObject</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@Published</span> <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">products</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Product</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">let</span> <span class=\"nv\">service</span> <span class=\"o\">=</span> <span class=\"kt\">ProductsService</span><span class=\"p\">()</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">fetch</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Publishers</span><span class=\"o\">.</span><span class=\"kt\">MergeMany</span><span class=\"p\">(</span>\n            <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"nf\">fetchCachedFavorites</span><span class=\"p\">(),</span>\n            <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"nf\">fetchFavorites</span><span class=\"p\">()</span>\n        <span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">replaceError</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"p\">[])</span>\n        <span class=\"o\">.</span><span class=\"nf\">assign</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"err\">$</span><span class=\"n\">products</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can see, the <em>MergeMany</em> operator allows me to create a single pipe for cached and fresh data where the cached information usually appears first and then replaced by new data.</p>\n\n<blockquote>\n  <p>To learn about building custom Combine operators, take a look at my <a href=\"/2021/04/28/building-custom-combine-operators-in-swift/\">“Building custom Combine operators in Swift”</a> post.</p>\n</blockquote>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n<p>This week we learned about operators of the Combine framework, which allows us to build complex data pipelines by zipping and merging multiple publishers. I hope you enjoy the post. Feel free to follow me on <a href=\"https://twitter.com/mecid\">Twitter</a> and ask your questions related to this post. Thanks for reading, and see you next week!</p>",
      "summary": "I’ve already covered a few essential topics from the Combine framework story. We talked about handling errors and chaining operations, but today I want to talk about running multiple operations in parallel and handing results in a single place. This week we will learn how to use zip, merge and combine operators.",
      "date_published": "2021-05-12T00:00:00.000Z",
      "author": {
        "name": "Majid Jabrayilov"
      }
    },
    {
      "guid": "https://swiftwithmajid.com/2021/05/04/chaining-publishers-with-combine-framework-in-swift",
      "url": "https://swiftwithmajid.com/2021/05/04/chaining-publishers-with-combine-framework-in-swift/",
      "title": "Chaining publishers with Combine in Swift",
      "content_html": "<p>The Combine framework provides you a bunch of operators to map, filter, and chain asynchronous operations. This week I want to focus on the chaining asynchronous jobs using two main operators that the Combine framework provides us. We will learn how to use <em>flatMap</em> and <em>switchToLatest</em> operators to chain asynchronous tasks in a declarative way.</p>\n\n<div class=\"ads\">\n    <span>\n        Why don’t more iOS apps use voice? Machine learning for voice is hard, and using Siri is clunky and rigid. So we open-sourced an iOS library (also Android, Node, Python, &amp; React Native), and built a no-code web tool to make custom wake words, speech recognizers, and AI voices—for all devs! <a href=\"https://www.spokestack.io/?utm_source=swiftui_weekly&amp;utm_medium=email&amp;utm_campaign=maker_launch_PAID\">Try it for free.</a>\n    </span>\n</div>\n\n<h4 id=\"chaining-basics-with-the-flatmap-operator\">Chaining basics with the flatMap operator</h4>\n<p>The <em>flatMap</em> operator allows us to take the result of one publisher, pass it to another and run the second publisher. We can use it to chain two different publishers. Let’s take a look at how we can use it.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">GithubService</span> <span class=\"p\">{</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">session</span><span class=\"p\">:</span> <span class=\"kt\">URLSession</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">decoder</span><span class=\"p\">:</span> <span class=\"kt\">JSONDecoder</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">session</span><span class=\"p\">:</span> <span class=\"kt\">URLSession</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">shared</span><span class=\"p\">,</span> <span class=\"nv\">decoder</span><span class=\"p\">:</span> <span class=\"kt\">JSONDecoder</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">())</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">session</span>\n        <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">decoder</span> <span class=\"o\">=</span> <span class=\"n\">decoder</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">searchPublisher</span><span class=\"p\">(</span><span class=\"n\">matching</span> <span class=\"nv\">query</span><span class=\"p\">:</span> <span class=\"kt\">String</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">Repo</span><span class=\"p\">],</span> <span class=\"kt\">Error</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// some code here</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">SearchViewModel</span><span class=\"p\">:</span> <span class=\"kt\">ObservableObject</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">query</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"kd\">@Published</span> <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">repos</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Repo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">service</span> <span class=\"o\">=</span> <span class=\"kt\">GithubService</span><span class=\"p\">()</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"err\">$</span><span class=\"n\">query</span>\n            <span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"p\">{</span> \n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"nf\">searchPublisher</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"nf\">replaceError</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"p\">[])</span> \n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">receive</span><span class=\"p\">(</span><span class=\"nv\">on</span><span class=\"p\">:</span> <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">assign</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"err\">$</span><span class=\"n\">repos</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can see in the example above, we create the <em>SearchViewModel</em> class that conforms to <em>ObservableObject</em>. Here we define two properties query and repos. @<em>Published</em> property wrapper automatically provides a publisher for property and allows us to access it via projected value using <strong>$</strong> sign.</p>\n\n<blockquote>\n  <p>To learn more about designing API with Combine publishers, take a look at my <a href=\"/2021/04/07/designing-api-using-combine-framework/\">“Designing API using Combine framework”</a> post.</p>\n</blockquote>\n\n<p>In the <em>SearchViewModel</em> initializer, we use the <em>flatMap</em> operator to pass the value of query publisher and generate a new search publisher using the provided query. Then we use the <em>assign</em> operator to save the result of the search operation in the repos property.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">ContentView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@StateObject</span> <span class=\"k\">var</span> <span class=\"nv\">viewModel</span> <span class=\"o\">=</span> <span class=\"kt\">SearchViewModel</span><span class=\"p\">()</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">NavigationView</span> <span class=\"p\">{</span>\n            <span class=\"kt\">List</span> <span class=\"p\">{</span>\n                <span class=\"kt\">TextField</span><span class=\"p\">(</span><span class=\"s\">\"Query\"</span><span class=\"p\">,</span> <span class=\"nv\">text</span><span class=\"p\">:</span> <span class=\"err\">$</span><span class=\"n\">viewModel</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">)</span>\n                <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"n\">viewModel</span><span class=\"o\">.</span><span class=\"n\">repos</span><span class=\"p\">,</span> <span class=\"nv\">id</span><span class=\"p\">:</span> <span class=\"p\">\\</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">repo</span> <span class=\"k\">in</span>\n                    <span class=\"kt\">VStack</span><span class=\"p\">(</span><span class=\"nv\">alignment</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"n\">leading</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n                        <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                            <span class=\"o\">.</span><span class=\"nf\">font</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>\n                        <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">description</span> <span class=\"o\">=</span> <span class=\"n\">repo</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"p\">{</span>\n                            <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"p\">)</span>\n                                <span class=\"o\">.</span><span class=\"nf\">foregroundColor</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">secondary</span><span class=\"p\">)</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">navigationTitle</span><span class=\"p\">(</span><span class=\"s\">\"Search\"</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now we can use the <em>SearchViewModel</em> in our SwiftUI app to implement a GitHub repos search screen. Here we have a SwiftUI view that contains a text field for query terms and a list of results.</p>\n\n<p><em>SearchViewModel</em> will make a network request as soon as the user types something in the query text field. Every new character in the text field generates a new API request. Usually, we want to delay requests till user typing. We can achieve this behavior by using <em>debounce</em> operator on query publisher in the <em>SearchViewModel</em>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">SearchViewModel</span><span class=\"p\">:</span> <span class=\"kt\">ObservableObject</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">query</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"kd\">@Published</span> <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">repos</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Repo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">service</span> <span class=\"o\">=</span> <span class=\"kt\">GithubService</span><span class=\"p\">()</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"err\">$</span><span class=\"n\">query</span>\n            <span class=\"o\">.</span><span class=\"nf\">debounce</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"nv\">scheduler</span><span class=\"p\">:</span> <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"p\">{</span> \n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"nf\">searchPublisher</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"nf\">replaceError</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"p\">[])</span> \n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">receive</span><span class=\"p\">(</span><span class=\"nv\">on</span><span class=\"p\">:</span> <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">assign</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"err\">$</span><span class=\"n\">repos</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>The <em>debounce</em> operator blocks the chain for a time interval that you provide and doesn’t emit any values in that period of time. It emits the latest value after the timeout that you provide. We can significantly reduce the number of network requests we make using <em>debounce</em> operator.</p>\n\n<blockquote>\n  <p>To learn more about the set of operators that the Combine framework provides us, take a look at my <a href=\"/2020/04/22/catching-errors-in-combine/\">“Catching errors in Combine”</a> post.</p>\n</blockquote>\n\n<h4 id=\"advanced-chaining-with-switchtolatest-operator\">Advanced chaining with switchToLatest operator</h4>\n<p>Assume that you have a situation where a user types two queries in a sequence, but the network delays the first one, and the second one finishes earlier. The view represents the search result for the second request, but after a decent amount of time, the first query finishes, and the data appears on the screen by replacing the results of the second query.</p>\n\n<p>Usually, we want to present the results of the latest query and ignore the previous attempts. We can’t achieve that with the <em>flatMap</em> operator, and especially for this case, the Combine framework provides us the <em>switchToLatest</em> operator.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">SearchViewModel</span><span class=\"p\">:</span> <span class=\"kt\">ObservableObject</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@Published</span> <span class=\"k\">var</span> <span class=\"nv\">query</span><span class=\"p\">:</span> <span class=\"kt\">String</span> <span class=\"o\">=</span> <span class=\"s\">\"\"</span>\n    <span class=\"kd\">@Published</span> <span class=\"kd\">private(set)</span> <span class=\"k\">var</span> <span class=\"nv\">repos</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kt\">Repo</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">service</span> <span class=\"o\">=</span> <span class=\"kt\">GithubService</span><span class=\"p\">()</span>\n\n    <span class=\"nf\">init</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"err\">$</span><span class=\"n\">query</span>\n            <span class=\"o\">.</span><span class=\"nf\">debounce</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"nv\">scheduler</span><span class=\"p\">:</span> <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"n\">map</span> <span class=\"p\">{</span> \n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"nf\">searchPublisher</span><span class=\"p\">(</span><span class=\"nv\">matching</span><span class=\"p\">:</span> <span class=\"nv\">$0</span><span class=\"p\">)</span>\n                    <span class=\"o\">.</span><span class=\"nf\">replaceError</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"p\">[])</span>\n            <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">switchToLatest</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"nf\">receive</span><span class=\"p\">(</span><span class=\"nv\">on</span><span class=\"p\">:</span> <span class=\"kt\">DispatchQueue</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">assign</span><span class=\"p\">(</span><span class=\"nv\">to</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"err\">$</span><span class=\"n\">repos</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>In the example above, we refactored our <em>SearchViewModel</em> to use the <em>switchToLatest</em> operator. The <em>switchToLatest</em> operator is designed to work with a publisher that emits other publishers. That’s why we use the <em>map</em> operator to transform our publisher into the publisher that emits search publishers. Then we attach the <em>switchToLatest</em> operator flattening the stream of publishers and delivering results only from the latest one.</p>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n<p>This week we learned about two different ways of chaining asynchronous operations with the Combine framework. Usually, the <em>flatMap</em> operator is what you need to chain multiple operations. When you should do some work as a response to a user action, you should use the combination of <em>map</em> and <em>switchToLatest</em> operators to deliver the latest results. I hope you enjoy the post. Feel free to follow me on <a href=\"https://twitter.com/mecid\">Twitter</a> and ask your questions related to this post. Thanks for reading, and see you next week!</p>",
      "summary": "The Combine framework provides you a bunch of operators to map, filter, and chain asynchronous operations. This week I want to focus on the chaining asynchronous jobs using two main operators that the Combine framework provides us. We will learn how to use flatMap and switchToLatest operators to chain asynchronous tasks in a declarative way.",
      "date_published": "2021-05-04T00:00:00.000Z",
      "author": {
        "name": "Majid Jabrayilov"
      }
    },
    {
      "guid": "https://swiftwithmajid.com/2021/04/28/building-custom-combine-operators-in-swift",
      "url": "https://swiftwithmajid.com/2021/04/28/building-custom-combine-operators-in-swift/",
      "title": "Building custom Combine operators in Swift",
      "content_html": "<p>Combine looks like a very sophisticated framework and provides you all the needed things you might need to process your data. It comes with many valuable operators like map, filter, and reduce. This week we will learn how to build new operators that we might miss from the default package.</p>\n\n<div class=\"ads\">\n    <span>\n        Why don’t more iOS apps use voice? Machine learning for voice is hard, and using Siri is clunky and rigid. So we open-sourced an iOS library (also Android, Node, Python, &amp; React Native), and built a no-code web tool to make custom wake words, speech recognizers, and AI voices—for all devs! <a href=\"https://www.spokestack.io/?utm_source=swiftui_weekly&amp;utm_medium=email&amp;utm_campaign=maker_launch_PAID\">Try it for free.</a>\n    </span>\n</div>\n\n<p>Rather than implementing the <em>Publisher</em> protocol yourself, you can create your own operator using composition and several standard operators and publishers provided by the Combine framework. Let’s start with the simplest one.</p>\n\n<h4 id=\"replace-error-or-empty-with-value\">Replace error or empty with value</h4>\n<p>The Combine framework has <em>replaceEmpty</em> and <em>replaceError</em> operators that we can use to inject the value into an empty publisher or replace the error with a value. I need both of them very often, and instead of typing these two operators every time, we can create a new one that combines them.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">Publisher</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">replaceErrorOrEmpty</span><span class=\"p\">(</span><span class=\"n\">with</span> <span class=\"nv\">output</span><span class=\"p\">:</span> <span class=\"kt\">Output</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"kt\">Output</span><span class=\"p\">,</span> <span class=\"kt\">Never</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span>\n            <span class=\"o\">.</span><span class=\"nf\">replaceEmpty</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">output</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">replaceError</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"n\">output</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can see in the example above, we can create an extension for <em>Publisher</em> type in a straightforward way and add the functionality we need by composing other operators. Now we can use the new operator as we use standard ones.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">Reducer</span> <span class=\"p\">{</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">environment</span> <span class=\"k\">in</span>\n    <span class=\"k\">switch</span> <span class=\"n\">action</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">fetch</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">healthService</span>\n            <span class=\"o\">.</span><span class=\"nf\">authorize</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"nf\">replaceErrorOrEmpty</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"kt\">AppAction</span><span class=\"o\">.</span><span class=\"n\">setAuthStatus</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>To learn more about the set of operators that the Combine framework provides us, take a look at my <a href=\"/2020/04/22/catching-errors-in-combine/\">“Catching errors in Combine”</a> post.</p>\n</blockquote>\n\n<h4 id=\"finish-on-fail\">Finish on fail</h4>\n<p>Another helpful operator might be finish on fail. There are different circumstances where you don’t need to handle the failure and want to finish silently. There is not standard operator for that in the Combine framework, but we can quickly achieve it by using the <em>catch</em> operator and <em>Empty</em> publisher.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">Publisher</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">finishOnFail</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"kt\">Output</span><span class=\"p\">,</span> <span class=\"kt\">Never</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span>\n            <span class=\"o\">.</span><span class=\"k\">catch</span> <span class=\"p\">{</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"kt\">Empty</span><span class=\"p\">()</span> <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Here we have another extension on <em>Publisher</em> type that adds an opportunity to finish the publisher without emitting an error. I usually use the <em>finishOnFail</em> operator in conjunction with the <em>Merge</em> publisher. For example, on every app launch, I start a network request to fetch the latest data, but at the same time, I fetch and display locally cached data. In this case, I don’t worry if my network request fails or not because I have the data to show.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">func</span> <span class=\"nf\">newsReducer</span><span class=\"p\">(</span>\n    <span class=\"nv\">state</span><span class=\"p\">:</span> <span class=\"kt\">State</span><span class=\"p\">,</span>\n    <span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"kt\">Action</span><span class=\"p\">,</span>\n    <span class=\"nv\">environment</span><span class=\"p\">:</span> <span class=\"kt\">Environment</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"kt\">Action</span><span class=\"p\">,</span> <span class=\"kt\">Never</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"n\">action</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">fetch</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kt\">Publishers</span><span class=\"o\">.</span><span class=\"kt\">Merge</span><span class=\"p\">(</span>\n            <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">newsService</span><span class=\"o\">.</span><span class=\"nf\">fetchCachedNews</span><span class=\"p\">(),</span>\n            <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">newsService</span><span class=\"o\">.</span><span class=\"nf\">fetchRemoteNews</span><span class=\"p\">()</span>\n                <span class=\"o\">.</span><span class=\"nf\">finishOnFail</span><span class=\"p\">()</span>\n        <span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"kt\">Action</span><span class=\"o\">.</span><span class=\"n\">setNews</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"k\">default</span><span class=\"p\">:</span> \n        <span class=\"k\">return</span> <span class=\"kt\">Empty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"catch-result\">Catch result</h4>\n<p>OK, we know how to ignore errors, but we should at least handle them. In many cases, an error can be a part of the app state that why we should not ignore it. Instead, we have to store and display it correctly. Let’s first build an operator which we can use to wrap the value and error into a <em>Result</em> type that the publisher emits instead of plain value.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">extension</span> <span class=\"kt\">Publisher</span> <span class=\"p\">{</span>\n    <span class=\"kd\">func</span> <span class=\"nf\">catchResult</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"kt\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">Output</span><span class=\"p\">,</span> <span class=\"kt\">Failure</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"kt\">Never</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">self</span>\n            <span class=\"o\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"n\">success</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"k\">catch</span> <span class=\"p\">{</span> <span class=\"kt\">Just</span><span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"nv\">$0</span><span class=\"p\">))</span> <span class=\"p\">}</span>\n            <span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Assume that we have a single state container that stores the whole app state. There is a dedicated field defining the state of an authorization request as an instance of <em>Result</em> enum. Let’s see how it might look in code.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">State</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">auth</span><span class=\"p\">:</span> <span class=\"kt\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Error</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">enum</span> <span class=\"kt\">Action</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">fetchAuth</span>\n    <span class=\"k\">case</span> <span class=\"nf\">setAuth</span><span class=\"p\">(</span><span class=\"kt\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">authReducer</span><span class=\"p\">(</span>\n    <span class=\"nv\">state</span><span class=\"p\">:</span> <span class=\"k\">inout</span> <span class=\"kt\">State</span><span class=\"p\">,</span>\n    <span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"kt\">Action</span><span class=\"p\">,</span>\n    <span class=\"nv\">environment</span><span class=\"p\">:</span> <span class=\"kt\">Environment</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"kt\">Action</span><span class=\"p\">,</span> <span class=\"kt\">Never</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">switch</span> <span class=\"n\">action</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">fetchAuth</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">environment</span><span class=\"o\">.</span><span class=\"n\">service</span>\n            <span class=\"o\">.</span><span class=\"nf\">authorize</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"nf\">catchResult</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"kt\">Action</span><span class=\"o\">.</span><span class=\"n\">setAuth</span><span class=\"p\">)</span>\n            <span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nf\">setAuth</span><span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">result</span><span class=\"p\">):</span>\n        <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"n\">result</span>\n        <span class=\"k\">return</span> <span class=\"kt\">Empty</span><span class=\"p\">()</span>\n            <span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Side effects returned by reducers should never fail. Even if it fails under the hood, it should emit an action that defines a failure. It is a perfect use case for our new <em>catchResult</em> operator.</p>\n\n<blockquote>\n  <p>If you are not familiar with the concept of a single source of truth, take a look at my dedicated series of <a href=\"/2019/09/18/redux-like-state-container-in-swiftui/\">“Redux-like state container in SwiftUI”</a> posts.</p>\n</blockquote>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n<p>The Combine framework is a great tool to handle asynchronous operations in your app. It provides you with tons of operators to transform your data, but it is also effortless to extend it using the composition of standard operators that we learned today. I hope you enjoy the post. Feel free to follow me on <a href=\"https://twitter.com/mecid\">Twitter</a> and ask your questions related to this post. Thanks for reading, and see you next week!</p>",
      "summary": "Combine looks like a very sophisticated framework and provides you all the needed things you might need to process your data. It comes with many valuable operators like map, filter, and reduce. This week we will learn how to build new operators that we might miss from the default package.",
      "date_published": "2021-04-28T00:00:00.000Z",
      "author": {
        "name": "Majid Jabrayilov"
      }
    },
    {
      "guid": "https://swiftwithmajid.com/2021/04/15/accessibility-actions-in-swiftui",
      "url": "https://swiftwithmajid.com/2021/04/15/accessibility-actions-in-swiftui/",
      "title": "Accessibility actions in SwiftUI",
      "content_html": "<p>SwiftUI provides us accessible views out of the box, and usually, you don’t need to do anything to build an accessible app for your users. But there is always room for improvements and additional functionality that you can create using Accessibility API. This week we will learn how to provide custom accessibility actions for SwiftUI views.</p>\n\n<div class=\"ads\">\n    <span>\n        Why don’t more iOS apps use voice? Machine learning for voice is hard, and using Siri is clunky and rigid. So we open-sourced an iOS library (also Android, Node, Python, &amp; React Native), and built a no-code web tool to make custom wake words, speech recognizers, and AI voices—for all devs! <a href=\"https://www.spokestack.io/?utm_source=swiftui_weekly&amp;utm_medium=email&amp;utm_campaign=maker_launch_PAID\">Try it for free.</a>\n    </span>\n</div>\n\n<h4 id=\"adjustable-action\">Adjustable action</h4>\n<p>SwiftUI provides us an adjustable trait that VoiceOver uses to indicate the ability to adjust the view using swipes up or down. Assume that you are working on the <em>RatingView</em>. <em>RatingView</em> has to present the current 5-star rating and should provide the opportunity to change the rating. Let’s see how we can implement this view.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">RatingView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@Binding</span> <span class=\"k\">var</span> <span class=\"nv\">rating</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">HStack</span> <span class=\"p\">{</span>\n            <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..&lt;</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">index</span> <span class=\"k\">in</span>\n                <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"n\">index</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"n\">index</span> <span class=\"o\">&lt;=</span> <span class=\"n\">rating</span> <span class=\"p\">?</span> <span class=\"s\">\"star.fill\"</span> <span class=\"p\">:</span> <span class=\"s\">\"star\"</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can see in the example above, the implementation of the <em>RatingView</em> is pretty straightforward. The <em>RatingView</em> changes the value of rating using binding whenever you press the particular button. But what about accessibility? How does VoiceOver work with the <em>RatingView</em>?</p>\n\n<blockquote>\n  <p>To learn about the basics of accessibility in SwiftUI, take a look at my <a href=\"/2019/09/10/accessibility-in-swiftui/\">“Accessibility in SwiftUI”</a> post.</p>\n</blockquote>\n\n<p>Buttons are accessible out of the box, and VoiceOver will focus on the first button and pronounce the message: “star fill”. This is the default behavior, and it doesn’t make sense in this case. Fortunately, SwiftUI provides us a few modifiers to customize the user experience here.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">RatingView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@Binding</span> <span class=\"k\">var</span> <span class=\"nv\">rating</span><span class=\"p\">:</span> <span class=\"kt\">Int</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">HStack</span> <span class=\"p\">{</span>\n            <span class=\"kt\">ForEach</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">..&lt;</span><span class=\"mi\">6</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">index</span> <span class=\"k\">in</span>\n                <span class=\"kt\">Button</span><span class=\"p\">(</span><span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"n\">index</span> <span class=\"p\">})</span> <span class=\"p\">{</span>\n                    <span class=\"kt\">Image</span><span class=\"p\">(</span><span class=\"nv\">systemName</span><span class=\"p\">:</span> <span class=\"n\">index</span> <span class=\"o\">&lt;=</span> <span class=\"n\">rating</span> <span class=\"p\">?</span> <span class=\"s\">\"star.fill\"</span> <span class=\"p\">:</span> <span class=\"s\">\"star\"</span><span class=\"p\">)</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">.</span><span class=\"nf\">accessibilityElement</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"nf\">accessibilityLabel</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"rating\"</span><span class=\"p\">))</span>\n        <span class=\"o\">.</span><span class=\"nf\">accessibilityValue</span><span class=\"p\">(</span><span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">(</span><span class=\"n\">rating</span><span class=\"p\">)))</span>\n        <span class=\"o\">.</span><span class=\"n\">accessibilityAdjustableAction</span> <span class=\"p\">{</span> <span class=\"n\">direction</span> <span class=\"k\">in</span>\n            <span class=\"k\">switch</span> <span class=\"n\">direction</span> <span class=\"p\">{</span>\n            <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">increment</span><span class=\"p\">:</span>\n                <span class=\"k\">guard</span> <span class=\"n\">rating</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">break</span> <span class=\"p\">}</span>\n                <span class=\"n\">rating</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">decrement</span><span class=\"p\">:</span>\n                <span class=\"k\">guard</span> <span class=\"n\">rating</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"p\">{</span> <span class=\"k\">break</span> <span class=\"p\">}</span>\n                <span class=\"n\">rating</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n            <span class=\"kd\">@unknown</span> <span class=\"k\">default</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>By default, the <em>HStack</em> works as a transparent accessibility container for its children and exposes children’s information. We prevent the default behavior using <em>accessibilityElement</em> modifier that enables accessibility for <em>HStack</em> and ignores the children. We also provide the accessibility label and value.</p>\n\n<p>We use the <em>accessibilityAdjustableAction</em> modifier, which automatically adds the adjustable trait. We also have to provide a closure that handles the action. The only parameter of the closure is the instance of the <em>AccessibilityAdjustmentDirection</em> enum.</p>\n\n<p>Whenever the user navigates to the <em>RatingView</em>, VoiceOver focuses on the <em>HStack</em> itself and pronounces the message: “rating, 3. Adjustable”. Users can use swipe up and down gestures to change the value of the rating.</p>\n\n<blockquote>\n  <p>To learn about the adjustable views in UIKit, take a look at my <a href=\"/2018/07/09/make-your-app-accessible-for-everyone/\">“Make your app accessible for everyone”</a> post.</p>\n</blockquote>\n\n<h4 id=\"additional-actions\">Additional actions</h4>\n<p>VoiceOver supports additional actions which we can handle in our views. For example, there is a two-finger double-tap action called magic tap. Apple suggests us to use the magic tap for the main action in our view.</p>\n\n<p>There is two-finger scrub (move two fingers back and forth three times quickly, making a “z”) action that users do to go back in the navigation or dismiss the alert. You can handle this action in your view if it utilizes the custom navigation behavior.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">PlayerView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@ObservedObject</span> <span class=\"k\">var</span> <span class=\"nv\">viewModel</span><span class=\"p\">:</span> <span class=\"kt\">ViewModel</span>\n    <span class=\"kd\">@Environment</span><span class=\"p\">(\\</span><span class=\"o\">.</span><span class=\"n\">presentationMode</span><span class=\"p\">)</span> <span class=\"k\">var</span> <span class=\"nv\">presentation</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">HStack</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// Player content</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">.</span><span class=\"nf\">accessibilityAction</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">magicTap</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"n\">viewModel</span><span class=\"o\">.</span><span class=\"n\">isPlaying</span> <span class=\"p\">{</span>\n                <span class=\"n\">viewModel</span><span class=\"o\">.</span><span class=\"nf\">pause</span><span class=\"p\">()</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"n\">viewModel</span><span class=\"o\">.</span><span class=\"nf\">play</span><span class=\"p\">()</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">.</span><span class=\"nf\">accessibilityAction</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">viewModel</span><span class=\"o\">.</span><span class=\"nf\">pause</span><span class=\"p\">()</span>\n            <span class=\"n\">presentation</span><span class=\"o\">.</span><span class=\"n\">wrappedValue</span><span class=\"o\">.</span><span class=\"nf\">dismiss</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>You can also provide named actions in addition to the predefined actions.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">struct</span> <span class=\"kt\">PlayerView</span><span class=\"p\">:</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n    <span class=\"kd\">@ObservedObject</span> <span class=\"k\">var</span> <span class=\"nv\">viewModel</span><span class=\"p\">:</span> <span class=\"kt\">ViewModel</span>\n\n    <span class=\"k\">var</span> <span class=\"nv\">body</span><span class=\"p\">:</span> <span class=\"kd\">some</span> <span class=\"kt\">View</span> <span class=\"p\">{</span>\n        <span class=\"kt\">HStack</span> <span class=\"p\">{</span>\n            <span class=\"c1\">// Player content</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">.</span><span class=\"nf\">accessibilityAction</span><span class=\"p\">(</span><span class=\"nv\">named</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"skip\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"n\">viewModel</span><span class=\"o\">.</span><span class=\"nf\">skip</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n        <span class=\"o\">.</span><span class=\"nf\">accessibilityAction</span><span class=\"p\">(</span><span class=\"nv\">named</span><span class=\"p\">:</span> <span class=\"kt\">Text</span><span class=\"p\">(</span><span class=\"s\">\"repeat\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"n\">viewModel</span><span class=\"o\">.</span><span class=\"nf\">repeat</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n<p>This week we learned how to make our apps more accessible by adding VoiceOver-friendly actions. Remember that accessibility isn’t a feature or a “nice to have”. It’s a necessity. So let’s make your app accessible for everyone. I hope you enjoy the post. Feel free to follow me on <a href=\"https://twitter.com/mecid\">Twitter</a> and ask your questions related to this post. Thanks for reading, and see you next week!</p>",
      "summary": "SwiftUI provides us accessible views out of the box, and usually, you don’t need to do anything to build an accessible app for your users. But there is always room for improvements and additional functionality that you can create using Accessibility API. This week we will learn how to provide custom accessibility actions for SwiftUI views.",
      "date_published": "2021-04-15T00:00:00.000Z",
      "author": {
        "name": "Majid Jabrayilov"
      }
    },
    {
      "guid": "https://swiftwithmajid.com/2021/04/07/designing-api-using-combine-framework",
      "url": "https://swiftwithmajid.com/2021/04/07/designing-api-using-combine-framework/",
      "title": "Designing API using Combine framework",
      "content_html": "<p>Combine framework provides a declarative Swift API for processing values over time. It allows you to chain, transform and reduce multiple operations. This week we will learn how to design our APIs using the Combine framework to leverage all the data processing power that the framework provides us.</p>\n\n<div class=\"ads\">\n    <span>\n        Why don’t more iOS apps use voice? Machine learning for voice is hard, and using Siri is clunky and rigid. So we open-sourced an iOS library (also Android, Node, Python, &amp; React Native), and built a no-code web tool to make custom wake words, speech recognizers, and AI voices—for all devs! <a href=\"https://www.spokestack.io/?utm_source=swiftui_weekly&amp;utm_medium=email&amp;utm_campaign=maker_launch_PAID\">Try it for free.</a>\n    </span>\n</div>\n\n<h4 id=\"future-and-deferred-publishers\">Future and Deferred publishers</h4>\n<p>The easiest way to integrate your asynchronous API with the Combine framework is to use <em>Future</em> publisher. All you need to do is provide closure that calls the completion handler whenever it finishes the job. Let’s take a look at the simple example.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">HealthService</span> <span class=\"p\">{</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">store</span> <span class=\"o\">=</span> <span class=\"kt\">HKHealthStore</span><span class=\"p\">()</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">authorize</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Error</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Future</span> <span class=\"p\">{</span> <span class=\"n\">handler</span> <span class=\"k\">in</span>\n            <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"o\">.</span><span class=\"nf\">requestAuthorization</span><span class=\"p\">(</span>\n                <span class=\"nv\">toShare</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"n\">workout</span><span class=\"p\">],</span> \n                <span class=\"nv\">read</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"n\">hr</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"k\">in</span>\n                <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span> <span class=\"p\">{</span>\n                    <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">))</span>\n                <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                    <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">))</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can see in the example above, we wrap the old school HealthKit API with <em>Future</em> publisher. Inside the <em>Future</em> publisher, we call the asynchronous method of <em>HKHealthStore</em> to authorize the user. We deliver the result of the <em>HKHealthStore</em>’s authorize method using the handler of <em>Future</em> publisher.</p>\n\n<p>The <em>Future</em> publisher has a few downsides, and one of them is the publisher’s eager nature. It means Combine will run the publisher as soon as you create it.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">health</span> <span class=\"o\">=</span> <span class=\"kt\">HealthService</span><span class=\"p\">()</span>\n<span class=\"k\">let</span> <span class=\"nv\">authPublisher</span> <span class=\"o\">=</span> <span class=\"n\">health</span><span class=\"o\">.</span><span class=\"nf\">authorize</span><span class=\"p\">()</span>\n</code></pre></div></div>\n\n<p>In the example above, we create an instance of an authorization publisher but never subscribe to it. We expect that Combine will run the publisher later when we subscribe to it using a <em>sink</em> or <em>assign</em>, but it runs immediately. The Combine framework provides us the <em>Deferred</em> publisher that prevents these situations.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">HealthService</span> <span class=\"p\">{</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">store</span> <span class=\"o\">=</span> <span class=\"kt\">HKHealthStore</span><span class=\"p\">()</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">authorize</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"kt\">Bool</span><span class=\"p\">,</span> <span class=\"kt\">Error</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"kt\">Deferred</span> <span class=\"p\">{</span>\n            <span class=\"kt\">Future</span> <span class=\"p\">{</span> <span class=\"n\">handler</span> <span class=\"k\">in</span>\n                <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"o\">.</span><span class=\"nf\">requestAuthorization</span><span class=\"p\">(</span>\n                    <span class=\"nv\">toShare</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"n\">workout</span><span class=\"p\">],</span> \n                    <span class=\"nv\">read</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"o\">.</span><span class=\"n\">hr</span><span class=\"p\">]</span>\n                <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">success</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"k\">in</span>\n                    <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span> <span class=\"p\">{</span>\n                        <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">))</span>\n                    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                        <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"nf\">success</span><span class=\"p\">(</span><span class=\"n\">success</span><span class=\"p\">))</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>We can quickly wrap a <em>Future</em> publisher with a <em>Deferred</em> publisher to make it lazy. <em>Deferred</em> publisher runs only when we subscribe to it. Now we can use our new API and leverage all the power of declarative value processing.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">health</span> <span class=\"o\">=</span> <span class=\"kt\">HealthService</span><span class=\"p\">()</span>\n<span class=\"k\">var</span> <span class=\"nv\">cancellables</span><span class=\"p\">:</span> <span class=\"kt\">Set</span><span class=\"o\">&lt;</span><span class=\"kt\">AnyCancellable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">health</span>\n    <span class=\"o\">.</span><span class=\"nf\">authorize</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"nf\">retry</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"nf\">replaceError</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">sink</span> <span class=\"p\">{</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"user authorized: </span><span class=\"se\">\\(</span><span class=\"nv\">$0</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n    <span class=\"o\">.</span><span class=\"nf\">store</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"n\">cancellables</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>To learn more about the set of operators that the Combine framework provides us, take a look at my <a href=\"/2020/04/22/catching-errors-in-combine/\">“Catching errors in Combine”</a> post.</p>\n</blockquote>\n\n<h4 id=\"passthroughsubject\">PassthroughSubject</h4>\n<p><em>Future</em> publisher works excellent when you need to wrap the asynchronous task and deliver a single result. But what about the stream of values that we want to provide over time? We can’t do that with <em>Future</em> publisher because it finishes its work as soon as it delivers the first result. We can handle this case with <em>PassthroughSubject</em>.</p>\n\n<p><em>PassthroughSubject</em> is a publisher that you can use to inject values into a stream by calling its <em>send</em> method. We will use <em>PassthroughSubject</em> to design the APIs that provide values through time. For example, it might be user location or user heart rate. These values appear over time.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">final</span> <span class=\"kd\">class</span> <span class=\"kt\">HealthService1</span> <span class=\"p\">{</span>\n    <span class=\"kd\">private</span> <span class=\"k\">let</span> <span class=\"nv\">store</span> <span class=\"o\">=</span> <span class=\"kt\">HKHealthStore</span><span class=\"p\">()</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">heartRate</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">Double</span><span class=\"p\">],</span> <span class=\"kt\">Error</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n        <span class=\"k\">let</span> <span class=\"nv\">subject</span> <span class=\"o\">=</span> <span class=\"kt\">PassthroughSubject</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">Double</span><span class=\"p\">],</span> <span class=\"kt\">Error</span><span class=\"o\">&gt;</span><span class=\"p\">()</span>\n\n        <span class=\"k\">let</span> <span class=\"nv\">query</span> <span class=\"o\">=</span> <span class=\"kt\">HKAnchoredObjectQuery</span><span class=\"p\">(</span>\n            <span class=\"nv\">type</span><span class=\"p\">:</span> <span class=\"kt\">HKQuantityType</span><span class=\"o\">.</span><span class=\"n\">heartRate</span><span class=\"p\">,</span>\n            <span class=\"nv\">predicate</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n            <span class=\"nv\">anchor</span><span class=\"p\">:</span> <span class=\"kc\">nil</span><span class=\"p\">,</span>\n            <span class=\"nv\">limit</span><span class=\"p\">:</span> <span class=\"kt\">HKObjectQueryNoLimit</span>\n        <span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">newSamples</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"k\">in</span>\n            <span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span> <span class=\"p\">{</span>\n                <span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"nv\">completion</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">failure</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">))</span>\n            <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n                <span class=\"k\">let</span> <span class=\"nv\">newSamples</span> <span class=\"o\">=</span> <span class=\"n\">newSamples</span> <span class=\"k\">as?</span> <span class=\"p\">[</span><span class=\"kt\">HKQuantitySample</span><span class=\"p\">]</span> <span class=\"p\">??</span> <span class=\"p\">[]</span>\n                <span class=\"k\">let</span> <span class=\"nv\">hr</span> <span class=\"o\">=</span> <span class=\"n\">newSamples</span><span class=\"o\">.</span><span class=\"n\">compactMap</span> <span class=\"p\">{</span> <span class=\"nv\">$0</span><span class=\"o\">.</span><span class=\"n\">quantity</span><span class=\"o\">.</span><span class=\"nf\">doubleValue</span><span class=\"p\">(</span><span class=\"nv\">for</span><span class=\"p\">:</span> <span class=\"o\">.</span><span class=\"nf\">bpm</span><span class=\"p\">())</span> <span class=\"p\">}</span>\n                <span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"n\">hr</span><span class=\"p\">)</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"nf\">handleEvents</span><span class=\"p\">(</span>\n            <span class=\"nv\">receiveSubscription</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"n\">_</span> <span class=\"k\">in</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"o\">.</span><span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span> <span class=\"p\">},</span>\n            <span class=\"nv\">receiveCancel</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"k\">self</span><span class=\"o\">.</span><span class=\"n\">store</span><span class=\"o\">.</span><span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>As you can see, we use the subject’s <em>send</em> method to emit values that we obtain from a closure-based handler of <em>HKAnchoredObjectQuery</em>. <em>HKAnchoredObjectQuery</em> runs forever. That’s why we use the <em>handleEvents</em> operator to provide additional logic to handle the publisher’s lifecycle. We want to start the query only when we have a subscription and stop it immediately when the subscription is canceled.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">var</span> <span class=\"nv\">cancellables</span><span class=\"p\">:</span> <span class=\"kt\">Set</span><span class=\"o\">&lt;</span><span class=\"kt\">AnyCancellable</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"n\">health</span>\n    <span class=\"o\">.</span><span class=\"nf\">authorize</span><span class=\"p\">()</span>\n    <span class=\"o\">.</span><span class=\"nf\">retry</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">flatMap</span> <span class=\"p\">{</span> <span class=\"n\">authorized</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">AnyPublisher</span><span class=\"o\">&lt;</span><span class=\"p\">[</span><span class=\"kt\">Double</span><span class=\"p\">],</span> <span class=\"kt\">Error</span><span class=\"o\">&gt;</span> <span class=\"k\">in</span>\n        <span class=\"k\">if</span> <span class=\"n\">authorized</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"n\">health</span><span class=\"o\">.</span><span class=\"nf\">heartRate</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"k\">return</span> <span class=\"kt\">Empty</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">eraseToAnyPublisher</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">.</span><span class=\"nf\">replaceError</span><span class=\"p\">(</span><span class=\"nv\">with</span><span class=\"p\">:</span> <span class=\"p\">[])</span>\n    <span class=\"o\">.</span><span class=\"n\">sink</span> <span class=\"p\">{</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"user authorized: </span><span class=\"se\">\\(</span><span class=\"nv\">$0</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span> <span class=\"p\">}</span>\n    <span class=\"o\">.</span><span class=\"nf\">store</span><span class=\"p\">(</span><span class=\"nv\">in</span><span class=\"p\">:</span> <span class=\"o\">&amp;</span><span class=\"n\">cancellables</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n<p>Combine provides us a straightforward and friendly way to handle asynchronous operations. We need to design our own APIs using the Combine to leverage the powerful operators that it gives us. We can model complex operation chains using a declarative approach and tools like <em>Future</em> and <em>PassthroughSubject</em>. I hope you enjoy the post. Feel free to follow me on <a href=\"https://twitter.com/mecid\">Twitter</a> and ask your questions related to this post. Thanks for reading, and see you next week!</p>",
      "summary": "Combine framework provides a declarative Swift API for processing values over time. It allows you to chain, transform and reduce multiple operations. This week we will learn how to design our APIs using the Combine framework to leverage all the data processing power that the framework provides us.",
      "date_published": "2021-04-07T00:00:00.000Z",
      "author": {
        "name": "Majid Jabrayilov"
      }
    },
    {
      "guid": "https://swiftwithmajid.com/2021/04/01/writing-idiomatic-swift-code",
      "url": "https://swiftwithmajid.com/2021/04/01/writing-idiomatic-swift-code/",
      "title": "Writing idiomatic Swift code",
      "content_html": "<p>Today is a great day to start learning iOS development. iOS development evolves every year and brings us new things to learn. This post should be valuable for the people who move to Swift from another programming language. This week we will talk about Swift idioms and how to write idiomatic Swift code.</p>\n\n<div class=\"ads\">\n    <span>\n        Why don’t more iOS apps use voice? Machine learning for voice is hard, and using Siri is clunky and rigid. So we open-sourced an iOS library (also Android, Node, Python, &amp; React Native), and built a no-code web tool to make custom wake words, speech recognizers, and AI voices—for all devs! <a href=\"https://www.spokestack.io/?utm_source=swiftui_weekly&amp;utm_medium=email&amp;utm_campaign=maker_launch_PAID\">Try it for free.</a>\n    </span>\n</div>\n\n<p>Swift language encourages you to write safe, fast, and expressive code. It provides you all the needed programming language features to allow you to write safe and bug-free code.</p>\n\n<h4 id=\"reference-and-value-types\">Reference and Value types</h4>\n<p>Swift language provides you reference and value types. Reference types are classes and closures. Classes are fundamental building blocks in Object-Oriented Programming. Value types are structs and enums. The main difference between them is the lifecycle. Swift copies value for value types when you pass it around. On the other hand, Swift copies reference for reference types when you pass them.</p>\n\n<p>What does it mean for us? Classes allow us to share mutable states by sharing a reference to the data. For example, if you need to have a piece of data shared between different components and every component should have an opportunity to mutate the shared state, class is a way to go. For all other cases, value types are what you need.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">SharedState</span> <span class=\"p\">{</span>\n    <span class=\"k\">var</span> <span class=\"nv\">a</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"kd\">func</span> <span class=\"nf\">increment</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"n\">a</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"nv\">reference</span><span class=\"p\">:</span> <span class=\"kt\">SharedState</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"n\">reference</span><span class=\"o\">.</span><span class=\"nf\">increment</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">var</span> <span class=\"nv\">reference</span> <span class=\"o\">=</span> <span class=\"kt\">SharedState</span><span class=\"p\">()</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">reference</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>\n<span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"nv\">reference</span><span class=\"p\">:</span> <span class=\"n\">reference</span><span class=\"p\">)</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">reference</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Here we have a class called <em>SharedState</em>, and we pass it inside a function and mutate it, then we print it outside the function. We model <em>SharedState</em> as a class because we need a shared state that we can mutate. We can’t do the same with structs because value types encourage immutability.</p>\n\n<h4 id=\"enums\">Enums</h4>\n<p>Enum is a great way to model an exclusive piece of state. I love enums, and it is one of my favorite Swift language features that allow us to build a very type-safe code. Let’s take a look at the example that defines possible sorting options in my app.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">Sorting</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">price</span>\n    <span class=\"k\">case</span> <span class=\"n\">reviews</span>\n    <span class=\"k\">case</span> <span class=\"n\">date</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">sorting</span><span class=\"p\">:</span> <span class=\"kt\">Sorting</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">price</span>\n\n<span class=\"k\">switch</span> <span class=\"n\">sorting</span> <span class=\"p\">{</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">price</span><span class=\"p\">:</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"price\"</span><span class=\"p\">)</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">date</span><span class=\"p\">:</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"date\"</span><span class=\"p\">)</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">reviews</span><span class=\"p\">:</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"reviews\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">if</span> <span class=\"n\">sorting</span> <span class=\"o\">==</span> <span class=\"o\">.</span><span class=\"n\">date</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"date\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Enums are great and even more powerful with associated values for particular cases.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">enum</span> <span class=\"kt\">Action</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">updateTimeline</span>\n    <span class=\"k\">case</span> <span class=\"nf\">sharePost</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n    <span class=\"k\">case</span> <span class=\"nf\">deletePost</span><span class=\"p\">(</span><span class=\"kt\">UUID</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">action</span><span class=\"p\">:</span> <span class=\"kt\">Action</span> <span class=\"o\">=</span> <span class=\"o\">.</span><span class=\"n\">updateTimeline</span>\n\n<span class=\"k\">switch</span> <span class=\"n\">action</span> <span class=\"p\">{</span>\n<span class=\"k\">case</span> <span class=\"o\">.</span><span class=\"nv\">updateTimeline</span><span class=\"p\">:</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"update timeline...\"</span><span class=\"p\">)</span>\n<span class=\"k\">case</span> <span class=\"kd\">let</span> <span class=\"o\">.</span><span class=\"nf\">deletePost</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"deleting post: </span><span class=\"se\">\\(</span><span class=\"n\">id</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"k\">case</span> <span class=\"kd\">let</span> <span class=\"o\">.</span><span class=\"nf\">sharePost</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">):</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"sharing post with text: </span><span class=\"se\">\\(</span><span class=\"n\">content</span><span class=\"se\">)</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<p>Now we can use the <strong>switch</strong> with <strong>case let</strong> to extract the associated values for every case. But remember that we should use enums for mutually exclusive cases. You can always use structs with static fields for inclusive cases.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Bad</span>\n<span class=\"kd\">enum</span> <span class=\"kt\">Regex</span> <span class=\"p\">{</span>\n    <span class=\"k\">case</span> <span class=\"n\">email</span>\n    <span class=\"k\">case</span> <span class=\"n\">username</span>\n    <span class=\"k\">case</span> <span class=\"nf\">other</span><span class=\"p\">(</span><span class=\"kt\">String</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Good</span>\n<span class=\"kd\">struct</span> <span class=\"kt\">Regex</span> <span class=\"p\">{</span>\n    <span class=\"k\">let</span> <span class=\"nv\">pattern</span><span class=\"p\">:</span> <span class=\"kt\">String</span>\n\n    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">email</span> <span class=\"o\">=</span> <span class=\"kt\">Regex</span><span class=\"p\">(</span><span class=\"nv\">pattern</span><span class=\"p\">:</span> <span class=\"s\">\"regex for email\"</span><span class=\"p\">)</span>\n    <span class=\"kd\">static</span> <span class=\"k\">let</span> <span class=\"nv\">username</span> <span class=\"o\">=</span> <span class=\"kt\">Regex</span><span class=\"p\">(</span><span class=\"nv\">pattern</span><span class=\"p\">:</span> <span class=\"s\">\"regex for username\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">let</span> <span class=\"nv\">other</span> <span class=\"o\">=</span> <span class=\"kt\">Regex</span><span class=\"p\">(</span><span class=\"nv\">pattern</span><span class=\"p\">:</span> <span class=\"s\">\"another regex\"</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<h4 id=\"optionals\">Optionals</h4>\n<p>Another language feature that Swift provides us to write type-safe code is optionals. Swift types can’t be <em>nil</em> unless you define them as optional. In this case, the Swift compiler will require to handle all the usages where the value can be <em>nil</em>.</p>\n\n<div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">let</span> <span class=\"nv\">nonOptionalInteger</span><span class=\"p\">:</span> <span class=\"kt\">Int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"k\">let</span> <span class=\"nv\">optionalInteger</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">?</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"kd\">func</span> <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nv\">integer</span><span class=\"p\">:</span> <span class=\"kt\">Int</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"n\">integer</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nv\">integer</span><span class=\"p\">:</span> <span class=\"n\">optionalInteger</span> <span class=\"p\">??</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"k\">let</span> <span class=\"nv\">value</span> <span class=\"o\">=</span> <span class=\"n\">optionalInteger</span> <span class=\"p\">{</span>\n    <span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nv\">integer</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Compiler error</span>\n<span class=\"c1\">// Value of optional type 'Int?' must be unwrapped to a value of type 'Int'</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"nv\">integer</span><span class=\"p\">:</span> <span class=\"n\">optionalInteger</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>As you can see, we have to use <strong>?</strong> after the type name in case of optionals. We can use <strong>??</strong> operator to provide a default value whenever value is not available, or we can use <strong>if let</strong> expression to extract the optional value and use it inside the inner scope.</p>\n\n<h4 id=\"conclusion\">Conclusion</h4>\n<p>Swift programming language evolves very fast. The core team is constantly considering the feedback that developers provide and add new features to the Swift language. To write more idiomatic code, you should also learn about pattern matching, protocols, generics, and functional programming in Swift. I hope you enjoy the post. Feel free to follow me on <a href=\"https://twitter.com/mecid\">Twitter</a> and ask your questions related to this post. Thanks for reading, and see you next week!</p>\n\n<ol>\n  <li><a href=\"/2019/01/17/using-protocols-as-composable-extensions/\">Using protocols as composable extensions</a></li>\n  <li><a href=\"/2021/02/18/phantom-types-in-swift/\">Phantom types in Swift</a></li>\n  <li><a href=\"/2019/02/06/pattern-matching-with-case-let/\">Pattern Matching with case let</a></li>\n  <li><a href=\"/2020/01/08/building-networking-layer-using-functions/\">Building networking layer using functions</a></li>\n</ol>",
      "summary": "Today is a great day to start learning iOS development. iOS development evolves every year and brings us new things to learn. This post should be valuable for the people who move to Swift from another programming language. This week we will talk about Swift idioms and how to write idiomatic Swift code.",
      "date_published": "2021-04-01T00:00:00.000Z",
      "author": {
        "name": "Majid Jabrayilov"
      }
    }
  ]
}