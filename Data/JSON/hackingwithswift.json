{
  "version": "https://jsonfeed.org/version/1",
  "title": "Hacking with Swift",
  "home_page_url": "https://www.hackingwithswift.com/articles/rss",
  "description": "News, tips, and tutorials from Hacking with Swift",
  "items": [
    {
      "guid": "https://www.hackingwithswift.com/articles/239/wwdc21-wrap-up-and-recommended-talks",
      "url": "https://www.hackingwithswift.com/articles/239/wwdc21-wrap-up-and-recommended-talks",
      "title": "WWDC21: Wrap up and recommended talks",
      "content_html": "<p>Apple’s annual event is done and dusted for another 12 months, featuring a major raft of updates for all platforms, plus Swift, SwiftUI, UIKit, and more. But perhaps just as importantly, this year also featured a number of improvements to the conference format itself, and it seems increasingly clear that we cannot go back to the old WWDC format again.</p>\n<p>In this article I’ll go over how I thought the event went, pick out the talks I enjoyed the most and would recommend you watch, highlight some of my favorite community events, and put forward a handful of suggestions for how WWDC22 might look.</p>\n<h2>And away we code!</h2>\n<p>WWDC20 took place during a global pandemic, and WWDC21 also took place during a global pandemic. But this year Apple was <em>prepared</em> – perhaps they had some plans in place for an in-person WWDC just in case things had improved by the start of the year, but it seems clear this year a great deal of work had gone into making WWDC work better as an event for everyone.</p>\n<p>Even from the very first keynote video it was obvious this year Apple had doubled down on the production quality for their videos. Yes, Craig’s teleportation effect somewhat stole the show, but also we saw carefully orchestrated presenter handovers across a wide team and a variety of impressive CGI overlays that brought the launch day to life.</p>\n<p><img src=\"/uploads/articles/wwdc21-swift.gif\" alt=\"A woman talking in front of the Swift logo. This is Susan Prescott, introducing a segment on developer technologies.\" /></p>\n<p>But the keynote did a lot to set the stage for the week. Yes, Craig called developers “the heart and soul of WWDC” – I mean, it’s right there in the name – but things really kicked off when Ted Kremenek took over presenting. I can’t imagine I was alone in feeling my pulse pick up when that happened, because Apple only shows code during the keynote when they mean business. Unsurprisingly this segment focused on concurrency, and even if you’ve only managed to watch a few of the videos from WWDC21 you’ll almost ...</p>",
      "summary": "Packed sessions, digital lounges, and a look forward to 2022.",
      "date_published": "2021-06-20T21:39:38.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/238/how-to-document-your-project-with-docc",
      "url": "https://www.hackingwithswift.com/articles/238/how-to-document-your-project-with-docc",
      "title": "How to document your project with DocC",
      "content_html": "<p>DocC is Apple’s new tool for building beautiful, interactive, and native-feeling documentation right from your code, and it integrates smoothly into both Xcode and the web.</p>\n<p>In this article I’m going to walk you through the fundamentals of using it in two different ways: building documentation for a framework, and adding articles that provide more depth. Along the way, you’ll see some places where DocC works brilliantly, and also some places where it doesn’t really work like I’d expect at all. And that’s okay – it’s only the initial release, after all.</p>\n<p>Before I start, though, there are some basics:</p>\n<ul>\n<li>You need to have Xcode 13 installed in order to have access to DocC.</li>\n<li>It supports only Swift at this time. They have already received requests to add Objective-C support, and in the long term I hope they’ll add support for other languages too.</li>\n<li>In case you were curious, DocC is short for “Documentation Compiler”, and it’s pronounced with two equally stressed syllables – “Doc-See” as opposed to “doxy”.</li>\n<li>Xcode is packed with lots of major new features – it’s another real stand out year, and I hope the team are feeling really proud. You can find out more in my article <a href=\"https://www.hackingwithswift.com/articles/236/whats-new-in-xcode-13\">What’s new in Xcode 13</a>.</li>\n</ul>\n<p>Please keep in mind I’m using Xcode 13 beta 1, so it’s all early days at this point – I expect DocC to get polished up a lot before the final release later this year.</p>\n<!-- YOUTUBE: tKB4jS5yT3A -->\n<h2>First, what DoC is <em>not</em></h2>\n<p>The first thing I did when trying out DocC is what I expect most app developers would do: I opened up one of my projects to see what DocC would make of it. In my case, that was <a href=\"https://github.com/twostraws/unwrap\">Unwrap</a> – it’s a good size of project with various dependencies, and matches the kind of thing many app developers will be working with.</p>\n<p>If you want to try this in your own app project, just go to the Product menu and choose Build Documentation. It might take a minute or two to ...</p>",
      "summary": "Markdown-powered documentation is now just a click away.",
      "date_published": "2021-06-13T15:22:35.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/237/complete-guide-to-sf-symbols",
      "url": "https://www.hackingwithswift.com/articles/237/complete-guide-to-sf-symbols",
      "title": "The Complete Guide to SF Symbols",
      "content_html": "<p>SF Symbols allows us to render a huge and growing variety of icons inside our apps, and every year it gets bigger – not only do many more icons get added, but iOS 14 added the ability to render multicolor icons and iOS 15 added the ability to have complete control over individual layers.</p>\n<p>In this article I’m going to walk you how to use SF Symbols in your projects, providing code for both SwiftUI and UIKit. Let’s get into it…</p>\n<p><strong>Tip:</strong> The best way to browse the list of symbols is using Apple’s free <a href=\"https://developer.apple.com/sf-symbols/\">SF Symbols app</a>.</p>\n<h2>How to load an SF Symbol</h2>\n<p>The simplest thing you’re going to want to do is load a symbol. We’ll be using “star” here, but if you’re using the SF Symbols app you can right-click any symbol and choose Copy Name.</p>\n<p>In SwiftUI loading an image is done by placing an <code>Image</code> into your view hierarchy using its <code>systemName</code> initializer:</p>\n<pre><code>Image(systemName: \"star\")</code></pre>\n<p>In UIKit you need to use <code>UIImage</code> then place it in a <code>UIImageView</code>, like this:</p>\n<pre><code>let image = UIImage(systemName: \"star\")\nlet imageView = UIImageView(image: image)</code></pre>\n<h2>How to place SF Symbols next to text</h2>\n<p>SF Symbols work great when used inside text, particularly when they contain common symbols such as error crosses, check marks, calendars, and similar.</p>\n<p>In SwiftUI placing an image next to text is done like this:</p>\n<pre><code>Label(\"Please try again\", systemImage: \"xmark.circle\")</code></pre>\n<p>If you want to place it inside the text string, it’s better to use string interpolation with <code>Image</code>, like this:</p>\n<pre><code>Text(\"Please press the \\(Image(systemName: \"calendar\")) button\")</code></pre>\n<p>For UIKit the code is a little more complex because you need to use <code>NSAttributedString</code> and <code>NSTextAttachment</code> to render something into a <code>UILabel</code>, but the same code lets you place the images wherever you want them:</p>\n<pre><code>let attachment = NSTextAttachment()\nattachment.image = UIImage(systemName: \"xmark.circle\")\n\nlet imageString = NSMutableAttributedString(attachment: attach...</code></pre>",
      "summary": "Example code, tips, and techniques for both SwiftUI and UIKit",
      "date_published": "2021-06-13T08:06:10.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/236/whats-new-in-xcode-13",
      "url": "https://www.hackingwithswift.com/articles/236/whats-new-in-xcode-13",
      "title": "What’s new in Xcode 13?",
      "content_html": "<p>Xcode 13 arrived at WWDC21 and includes a huge range of new features, improvements, and performance enhancements. In this article I’m going to walk you through all the key changes, so you can get up to speed quickly, but before I start I need to make two things clear:</p>\n<p><strong>First, no, I don’t have beta access to Xcode Cloud or the new Swift Playgrounds.</strong> Trust me, I wish I did! Both of these things look likely to be significant upgrades for the Swift community, and I’m really keen to try them out at the earliest opportunity. </p>\n<p>And second, you might immediately note that Xcode hides your file extensions by default in the project navigator. This seems to mimic your Finder configuration, so if you’re suddenly confused where your file extensions have gone then you can bring them back With This One Weird Tip: go to Xcode’s preferences, select General, then change File Extensions to Show All. I’m going to try sticking with hidden extensions to see how I get on with it.</p>\n<p>Anyway, in this article I’ll be talking about the new workflow tools for teams, the new source control features, the new improvements to how we write code, and more – it’s a packed release, so let’s get straight to it.</p>\n<!-- YOUTUBE: j1LbQwIoRlg -->\n<h2>Source editor improvements</h2>\n<p>First let’s talk about the source editor, which is where we spend most of our time – this is just the way we type code into Xcode, as opposed to all the main IDE features around it. </p>\n<p>When I posted about some of these on Twitter, a bunch of folks replied back saying how Xcode sucks because their personal favorite IDE had these features years ago, and honestly just please pass me by with those kinds of comments – if I wanted to use your IDE I would already be doing so.</p>\n<p>So, let’s talk about some major changes to the way we write code in Xcode.</p>\n<p>First, if you use a type that isn’t currently available, Xcode can automatically import it for you. So, if you write code like this:</p>\n<pre><code>struct ExampleView: View</code></pre>\n<p>…then Xcode will...</p>",
      "summary": "Vim keybindings, integrated collaboration, faster version comparison, and more.",
      "date_published": "2021-06-10T20:22:54.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/235/whats-new-in-swiftui-for-ios-15",
      "url": "https://www.hackingwithswift.com/articles/235/whats-new-in-swiftui-for-ios-15",
      "title": "What’s new in SwiftUI for iOS 15",
      "content_html": "<p>Expectations were always going to be high for SwiftUI this year, but the team didn’t disappoint – they’ve shipped a massive collection of improvements and features, including a new <code>AsyncImage</code> view for loading remote images, swipe actions for list rows, pull to refresh, plus shorter, simpler APIs for common uses. Alongside huge improvements to Swift itself (see <a href=\"https://www.hackingwithswift.com/articles/233/whats-new-in-swift-5-5\">What's new in Swift 5.5</a> for more on that), this is another significant leap forward for SwiftUI and I’m really keen to dive in.</p>\n<p>Please keep in mind that these changes are very new – I'm pushing it as hard as I can, experimenting, refining, sharing, and learning all at the same time. If you have any feedback, please tweet me @twostraws.</p>\n<p>You can watch the video below, or scroll down for links to articles.</p>\n<!-- YOUTUBE: SQE5DZDqASA -->\n<h2>The big stuff</h2>\n<ul>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-enable-pull-to-refresh\">How to enable pull to refresh</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-a-search-bar-to-filter-your-data\">How to add a search bar to filter your data</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-custom-swipe-action-buttons-to-a-list-row\">How to add custom swipe action buttons to a List row</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-load-a-remote-image-from-a-url\">How to load a remote image from a URL</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-visual-effect-blurs\">How to add visual effect blurs</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-a-toolbar-to-the-keyboard\">How to add a toolbar to the keyboard</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-run-an-asynchronous-task-when-a-view-is-shown\">How to run an asynchronous task when a view is shown</a></li>\n</ul>\n<h2>More welcome improvements</h2>\n<ul>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-dismiss-the-keyboard-for-a-textfield\">How to dismiss the keyboard for a TextField</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-list-or-a-foreach-from-a-binding\">How to create a List or a ForEach from a binding</a></li>\n<li>[How to find which data change is causing a SwiftUI view to update](/quick-start/swiftui/how-to-find-which-data-change-i...</li>\n</ul>",
      "summary": "Visual effects, remote URLs, and cleaned up APIs galore.",
      "date_published": "2021-06-08T06:52:24.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/234/hacking-with-swift-plus-turns-1",
      "url": "https://www.hackingwithswift.com/articles/234/hacking-with-swift-plus-turns-1",
      "title": "Hacking with Swift+ turns 1!",
      "content_html": "<p>One year ago today I launched <a href=\"https://www.hackingwithswift.com/plus\">Hacking with Swift+</a>, and already I’ve released over 130 articles and videos covering advanced Swift, SwiftUI, special effects, algorithms, and so much more – it’s been incredible, and I’m really grateful for everyone who subscribed. But I’m not resting on my laurels. </p>\n<p>Six months ago I announced that everyone who subscribed for at least a year would get exclusive free gifts mailed to them wherever they lived in the world, and three months ago I added all the videos from Hacking with Swift Live 2020 as another bonus.</p>\n<p>Today I’m really pleased to reveal the next set of enhancements:</p>\n<ul>\n<li>All Hacking with Swift+ subscribers can now browse the whole site with no advertising – that means no sponsor text in the page, no fixed gray bar along the top of articles, and no “buy our books” sidebar on the right. Instead, every page on the site is wider and more streamlined for an optimized reading experience.</li>\n<li>There’s a <a href=\"https://www.hackingwithswift.com/forums/plus\">new private forum</a> exclusively for Hacking with Swift+ subscribers to ask question questions and chat.</li>\n<li>I’ve started the process of adding chapter markers to all the Hacking with Swift+ videos. This will take some time to complete, but work has already begun.</li>\n<li>All Hacking with Swift+ subscribers can enjoy a 20% discount on the download editions of my books and bundles, available year round.</li>\n</ul>\n<p>All that is on top of the existing benefits of subscribing.</p>\n<p><strong>But we can do better!</strong></p>\n<p>I’ve seen some other sites offer enhanced subscriptions that include online access to their books, charging a lot more for the privilege.</p>\n<p>That isn’t how I work.</p>\n<p>I realized some time ago that as long as I was making enough money to be happy, I didn’t need to earn more – that’s part of the reason I run so many charity events, give away books to folks who need them, and publish so much free content.</p>\n<p>So I set out to make a Hacking with Swift+ subscription that gave folks my books to read online without having to break the bank. Obv...</p>",
      "summary": "New features include ad-free browsing, online books, and more.",
      "date_published": "2021-06-01T22:21:42.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/233/whats-new-in-swift-5-5",
      "url": "https://www.hackingwithswift.com/articles/233/whats-new-in-swift-5-5",
      "title": "What's new in Swift 5.5?",
      "content_html": "<p>WWDC21 being less than two weeks away means the first Swift 5.5 beta is almost here, and it comes with a <em>massive</em> set of improvements – async/await, actors, throwing properties, and many more. For the first time it’s probably easier to ask “what <em>isn’t</em> new in Swift 5.5” because so much is changing.</p>\n<p>In this article I’m going to walk through each of the changes with code samples, so you can see how each of them work in practice. Before we start, there are two important warnings:</p>\n<ol>\n<li>This is the first time so many huge Swift Evolution proposals has been so tightly interlinked, so although I’ve tried to organize these changes in a cohesive flow some parts of the concurrency work only really make sense once you’ve read through several proposals.</li>\n<li>Some major parts of this are still going through Swift Evolution, and although they are currently available in the latest Swift 5.5 snapshots they might evolve further before and even <em>after</em> WWDC21. <strong>This article will almost certainly change as things settle.</strong></li>\n</ol>\n<ul>\n<li><strong>Tip:</strong> You can also <a href=\"https://github.com/twostraws/whats-new-in-swift-5-5\">download this as an Xcode playground</a> if you want to try the code samples yourself.</li>\n</ul>\n<!-- YOUTUBE: 6C0SFPEy_0Y -->\n<h2>Async/await</h2>\n<p><a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md\">SE-0296</a> introduces asynchronous (async) functions into Swift, allowing us to run complex asynchronous code almost is if it were synchronous. This is done in two steps: marking async functions with the new <code>async</code> keyword, then calling them using the <code>await</code> keyword, similar to other languages such as C# and JavaScript.</p>\n<p>To see how async/await helps the language, it’s helpful to look at how we solved the same problem previously. Completion handlers are commonly used in Swift code to allow us to send back values after a function returns, but they had tricky syntax  as you’ll see.</p>\n<p>For example, if we wanted to write code that fetched 100,000 weather records from a server, processes the...</p>",
      "summary": "Async/await, actors, throwing properties, and more!",
      "date_published": "2021-05-28T11:49:34.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/232/reimagining-hacking-with-swift",
      "url": "https://www.hackingwithswift.com/articles/232/reimagining-hacking-with-swift",
      "title": "Reimagining Hacking with Swift",
      "content_html": "<p>Yesterday I wrote a long article called <a href=\"https://www.hackingwithswift.com/articles/231/reimagining-apples-documentation\">Reimagining Apple’s documentation</a>, in which I wrote down a variety of ways I'd love to see Apple's developer documentation evolve and improve in the future. Although it was written with nothing but appreciation in mind, the article was effectively me telling other people how to do their job – other people, let's not forget, who are already working very hard to deliver the best they can for us.</p>\n<p>Anyway, in that article I said, “I need to acknowledge that there are a whole bunch of ways I could make my own site better,” before launching off into a long rant about Apple's site. Well, let’s focus on Hacking with Swift, because if I’m going to look at Apple’s documentation output in the cold light of day I should do the same for my own site.</p>\n<h2>Where my work is today</h2>\n<p>Hacking with Swift is visited by over 700,000 unique visitors every month, serving up over 5,000,000 page views – all at the same time as me running a <a href=\"https://www.youtube.com/channel/UCmJi5RdDLgzvkl3Ly0DRMlQ\">YouTube channel with almost 60,000 subscribers</a>, writing a <a href=\"http://gumroad.com/twostraws/follow\">newsletter with almost 40,000 readers</a>, and delivering talks at conferences. Every single day people get in touch to thank me for an article or video, to ask questions, to suggest new topics, and more, and I’ve lost track of how many people have said they got a job thanks to my work.</p>\n<p>I also work hard to make sure I use what platform I have to help people outside our community too, whether that’s through <a href=\"https://www.swiftforgood.com\">Swift for Good</a> raising money for Black Girls Code, <a href=\"https://www.hackingwithswift.com/live\">Hacking with Swift Live</a> raising money for Special Effect, <a href=\"https://youtu.be/aP-SQXTtWhY\">my SwiftUI birthday livestream</a> raising money for folks who are sleeping rough, my <a href=\"https://justgiving.com/fundraising/twostraws-accelerator\">iOS Accelerator workshop</a> raising money for my kids’ school, or other efforts.</p>\n<p>Honestly, that’s great. It’...</p>",
      "summary": "With your help things can get better.",
      "date_published": "2021-05-07T14:54:05.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/231/reimagining-apples-documentation",
      "url": "https://www.hackingwithswift.com/articles/231/reimagining-apples-documentation",
      "title": "Reimagining Apple’s documentation",
      "content_html": "<p>For a number of years my #1 WWDC wish was that Apple would do something to dramatically rethink its approach to developer documentation. I still hope WWDC21 will be The Year When Something Big Happens To Apple’s Documentation, but rather than just wave vaguely and say “I want better docs” I figured I’d write down some specific thoughts that have been rattling around in my head.</p>\n<p>I have a simple mental metaphor for what I want, which is this: what would happen if the hardware team who designed iPhones and iPads were asked to build developer documentation?</p>\n<p>I don’t mean “make them describe thousands of APIs,” but instead I mean their <em>mentality</em> – the primary reason most of us buy so many Apple devices is because they are loved down to the micron level. Every tiny part of my iPhone, my iPad, my Apple Watch, and more has been thought about and made as good as they can possibly make it, from the screen, to the audio, to the battery, and beyond. The result is that the finished devices just feel <em>fantastic</em> even many years after they were released.</p>\n<p>So I use that as my yardstick: what would <em>magical</em> documentation look like?</p>\n<p>I’m going to outline my answers below, but honestly the conclusions won’t surprise anyone: getting fantastic, world-leading developer documentation isn’t about fancy new approaches to tutorials or interactive experiences, but almost entirely about finding the fastest, simplest ways to solve developer problems effectively.</p>\n<h2>TL;DR</h2>\n<p>Short on time? Fine – here’s the bulleted list of what I wish would change:</p>\n<ul>\n<li>The top 500 most popular APIs (measured by page views) should have example code attached, ideally several examples with headers clearly marking what problem is being solved.</li>\n<li>The top 100 most popular APIs should get either a screenshot or a video showing exactly how it works and what the result is.</li>\n<li>Any place where header files have documentation comments and their matching online documentation is “No overview available” should have the hea...</li>\n</ul>",
      "summary": "Example code, faster navigation, and goodbye to No Overview Available.",
      "date_published": "2021-05-06T16:11:40.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/230/how-to-become-an-ios-developer",
      "url": "https://www.hackingwithswift.com/articles/230/how-to-become-an-ios-developer",
      "title": "How to Become an iOS Developer in 2021",
      "content_html": "<p>In this article I want to walk you through what I think it takes to become an iOS developer in 2021. I’m aiming this squarely at two groups of people: absolute beginners to Swift – folks who have never built anything for iOS before – and also so-called false beginners, who are folks who might have tried to learn Swift before but never really reached their goal of getting a full-time job.</p>\n<p>Regardless of what level you are right now, the goal here is the same: getting you in the right position to apply for a junior iOS developer role at a company.</p>\n<p>We’re going to look at the skills you should be learning, the courses you can take, how to get connected to the community, common mistakes folks make, and more, and best of all everything I’ll talk about will be completely free so you won’t need a penny to follow along.</p>\n<p>Seriously, too many people think spending a ton of money is the fast track to reaching their dream job, when really the most important things are determination and willpower. And here’s a hint for you: if you’re already thinking you want to skip ahead in this article, maybe you should consider working on your willpower!</p>\n<p>There are 7 sections to this article:</p>\n<ol>\n<li>Core skills you absolutely need to know to get a job.</li>\n<li>Extension skills that are nice to have – the ones that will set you apart from the pack, if you have the time to learn them</li>\n<li>Common mistakes people make when they are trying to learn.</li>\n<li>Resources you can use to learn Swift that are completely free.</li>\n<li>How you can connect to the iOS development community.</li>\n<li>An idea of how long it will take to reach your goal.</li>\n<li>Preparing to apply for your first job</li>\n</ol>\n<ul>\n<li>This article is also available as a video if you prefer. The content is the same, so use whichever is easiest for you.</li>\n</ul>\n<!-- YOUTUBE: HNXzcAwNqMc -->\n<h2>What are the core skills you need to be an iOS developer?</h2>\n<p>What is the absolute minimum set of skills you need to get a job in iOS development? I think there are five things in total:</p>\n<ol>\n<li>S...</li>\n</ol>",
      "summary": "The skills, resources, and networking that will get you to your goal",
      "date_published": "2021-03-31T20:37:46.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/229/24-quick-xcode-tips",
      "url": "https://www.hackingwithswift.com/articles/229/24-quick-xcode-tips",
      "title": "24 Quick Xcode Tips",
      "content_html": "<p>Xcode is a huge program, and if you can learn one or two new tips that help you work more effectively you can save hours of time every week.</p>\n<p>In this article I want to walk you through 24 quick Xcode tips that help you write code faster, build better tests, and navigate around large projects more efficiently – there’s something for everyone!</p>\n<ul>\n<li>This article is also available as a video if you prefer. The content is the same, so use whichever is easiest for you.</li>\n</ul>\n<!-- YOUTUBE: 8kiR_QsQNPc -->\n<h2>1. Generating class initializers</h2>\n<p>Swift can synthesize memberwise initializers for structs, but not for classes. Fortunately, Xcode can generate the code for us: select your class name, then go to the Editor menu and choose Refactor &gt; Generate Memberwise Initializer. Done!</p>\n<h2>2. Environment overrides</h2>\n<p>When building software, it’s important to make sure your app works for <em>everyone</em>. One great way to do that is with Xcode’s environment overrides panel, which lets you adjust Dynamic Type size, accessibility options, and appearance all in one place.</p>\n<h2>3. Selecting blocks of code</h2>\n<p>You probably already know that you can click after any open { or close } brace to have Xcode highlight its matching brace, but another useful tip is that you can double click a brace to select the entire block of code it contains.</p>\n<h2>4. Checking our spelling</h2>\n<p>Xcode can check if your spelling is correct, and it even understands that camelCaseNames should be treated as separate words. Go to the Edit menu and choose Format &gt; Spelling and Grammar &gt; Check Spelling While Typing, and Xcode will check your code for typos.</p>\n<h2>5. Fixing all issues</h2>\n<p>If you have a Swift file with many errors, you can use Xcode’s fix-its to try to correct them one by one. But a faster way is to go to the Editor menu and choose Fix All Issues to apply fix-its all at once. (Make sure and double-check which changes were made!)</p>\n<h2>6. Deleting search results</h2>\n<p>When you search using Xcode’s find navigator, you can click to v...</p>",
      "summary": "Write code faster, build better tests, and navigate around projects more efficiently.",
      "date_published": "2021-02-12T22:02:25.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/228/whats-new-in-swift-5-4",
      "url": "https://www.hackingwithswift.com/articles/228/whats-new-in-swift-5-4",
      "title": "What’s new in Swift 5.4?",
      "content_html": "<p>Swift 5.4 brings with it some huge compilation improvements, including better code completion in expressions with errors and big speed ups for incremental compilation. However, it also adds some important new features and refinements, so let’s dig into them here…</p>\n<ul>\n<li><strong>Tip:</strong> You can also <a href=\"https://github.com/twostraws/whats-new-in-swift-5-4\">download this as an Xcode playground</a> if you want to try the code samples yourself.</li>\n</ul>\n<h2>Improved implicit member syntax</h2>\n<p><a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0287-implicit-member-chains.md\">SE-0287</a> improves Swift’s ability to use implicit member expressions, so rather than just having support for exactly one single static member you can make chains of them.</p>\n<p>Swift has always had the ability to use implicit member syntax for simple expressions, for example if you wanted to color some text in SwiftUI you could use <code>.red</code> rather than <code>Color.red</code>:</p>\n<pre><code>struct ContentView1: View {\n    var body: some View {\n        Text(\"You're not my supervisor!\")\n            .foregroundColor(.red)\n    }\n}</code></pre>\n<p>Prior to Swift 5.4 this did not work with more complex expressions. For example, if you wanted your red color to be slightly transparent you would need to write this:</p>\n<pre><code>struct ContentView2: View {\n    var body: some View {\n        Text(\"You're not my supervisor!\")\n            .foregroundColor(Color.red.opacity(0.5))\n    }\n}</code></pre>\n<p>From Swift 5.4 onwards the compiler is able to understand multiple chained members, meaning that the <code>Color</code> type can be inferred:</p>\n<pre><code>struct ContentView3: View {\n    var body: some View {\n        Text(\"You're not my supervisor!\")\n            .foregroundColor(.red.opacity(0.5))\n    }\n}</code></pre>\n<h2>Multiple variadic parameters in functions</h2>\n<p><a href=\"https://github.com/apple/swift-evolution/blob/main/proposals/0284-multiple-variadic-parameters.md\">SE-0284</a> introduced the ability to have functions, subscripts, and initializers use multiple variadic paramete...</p>",
      "summary": "Multiple variadic parameters, improved implicit member syntax, result builders, and more!",
      "date_published": "2021-02-02T15:35:14.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/227/which-swiftui-property-wrapper",
      "url": "https://www.hackingwithswift.com/articles/227/which-swiftui-property-wrapper",
      "title": "Which SwiftUI property wrapper to choose in any situation",
      "content_html": "<p>SwiftUI uses property wrappers to understand how we create and store data in our views, but if you need helping choosing which property wrapper is right for you I've made a tool to help. To find the right property wrapper for you, answer the questions below 🚀</p>\n<p class=\"hws-decision\">1. Are you storing a struct, an enum, or a class?\n<details class=\"hws-decision\">\n    <summary>I want to store a struct or an enum.</summary>\n    <p class=\"hws-decision mt-2 ml-4\">2. Will the value change over time?</p>\n\n    <div class=\"ml-4 mb-5\">\n        <details>\n            <summary>Yes, it will change as my app runs.</summary>\n            <p class=\"hws-decision mt-2 ml-4\">3. Are you creating the value in your view, or will it be passed in from somewhere else?</p>\n\n            <div class=\"ml-4 mb-5\">\n                <details>\n                    <summary>I'll be creating the value locally in my view.</summary>\n                    <p class=\"hws-decision mt-2 ml-4\">4. Is the property being used to track an active user gesture?</p>\n\n                    <div class=\"ml-4 mb-5\">\n                        <details>\n                            <summary>Yes, this is for a gesture.</summary>\n                            <p>You should use the <code>@GestureState</code> property wrapper, like this:</p>\n                            <pre class=\"language-swift\"><code class=\"language-swift\">@GestureState private var dragAmount = CGSize.zero</code></pre>\n                            <p>Although you <em>could</em> also use <code>@State</code> for this purpose, <code>@GestureState</code> is significantly more efficient.</p>\n                            <p style=\"margin-bottom: 50px;\">You can learn more about the <code>@GestureState</code> property wrapper here: <a href=\"https://www.hackingwithswift.com/quick-start/swiftui/what-is-the-gesturestate-property-wrapper\" target=\"_blank\">What is the @GestureState property wrapper?</a></p>\n                        </details>\n\n                        <details>\n                            <summary>No, this is just a regular value.</summary>\n                            <p>You should use the <code>@State</code> property wrapper, like this:</p>\n                            <pre class=\"language-swift\"><code class=\"language-swift\">@State private var username = \"Taylor\"</code></pre>\n                            <p>Technically there's nothing stopping y...",
      "summary": "Decide which property wrapper is the right choice for your needs.",
      "date_published": "2021-01-27T17:51:44.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/226/5-steps-to-better-swiftui-views",
      "url": "https://www.hackingwithswift.com/articles/226/5-steps-to-better-swiftui-views",
      "title": "5 Steps to Better SwiftUI Views",
      "content_html": "<p>As SwiftUI projects grow more complex, it’s common to find your views get larger and larger as you cram more functionality into them. In this article I’ll walk you through the underlying problem, and demonstrate five steps you can take to make your views simpler, smaller, and smarter – all demonstrated using a real SwiftUI project, so you have actual code to follow along.</p>\n<p>You can get the project source code, including both before and after versions, <a href=\"https://www.hackingwithswift.com/samples/5-steps-to-better-swiftui-views.zip\">from this link</a>.</p>\n<ul>\n<li>This article is also available as a video if you prefer. The content is the same, so use whichever is easiest for you.</li>\n</ul>\n<!-- YOUTUBE: uC3X4FoielU -->\n<p>Still here? Okay, let’s get to it…</p>\n<h2>What’s the problem?</h2>\n<p>This is a really challenging time for SwiftUI because at this point we’re kind of past the novelty of SwiftUI itself – we’re used to the idea that we can build user interfaces really fast, we’re used to the idea of tracking state effectively, and we’re used to the idea that we can write layouts that work great on all of Apple’s platforms.</p>\n<p>However, although many people are already comfortable with the way SwiftUI works, we are still quite a long way from agreeing <em>best practices</em>. For example, if you have several different ways of solving a problem, we’re still in the process of figuring out which one makes most sense for a given situation.</p>\n<p>So, we’re at this strange position where many people are learning SwiftUI and writing lots of it, but the apps we build are growing in size and complexity and as a result are starting to suffer from very similar problems that we faced in UIKit in the early years.</p>\n<p>Previously it was common to tackle the long-standing UIKit curse of Massive View Controllers, but in SwiftUI we don’t have view controllers at all – in fact, many would say that the lack of view controllers is the best feature of SwiftUI!</p>\n<p>However, we do make a lot of <em>view</em> structs where we cram a lot of functionality. This created a wholl...</p>",
      "summary": "Learn to make your SwiftUI views smaller, simpler, and more reusable.",
      "date_published": "2021-01-27T11:57:00.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/225/year-in-review-2020",
      "url": "https://www.hackingwithswift.com/articles/225/year-in-review-2020",
      "title": "Year in review: 2020",
      "content_html": "<p>What the heck just happened? 😂</p>\n<p>Many people – myself included – had big plans for the year. I wanted to work more on my open source software (<a href=\"https://github.com/twostraws/Unwrap/\">Unwrap</a>, <a href=\"https://github.com/twostraws/ControlRoom\">Control Room</a>, <a href=\"https://github.com/twostraws/Sitrep\">Sitrep</a>, and more), I wanted to update a whole collection of books to be more focused on SwiftUI, I wanted to write new, shorter books to go alongside <a href=\"https://www.hackingwithswift.com/quick-start/swiftui\">SwiftUI By Example</a>, and more.</p>\n<p>And then COVID-19 happened.</p>\n<p>This meant my kids were home from school for many months, it meant I spent way too much time scrolling through depressing news rather than working, and honestly it meant a lot of the time I struggled to find the willpower to think about – never mind <em>write</em> about – anything.</p>\n<p>So, this year turned out quite different from what I had anticipated, but there were still a few highlights…</p>\n<p><strong>Advance warning:</strong> This is a hugely self-indulgent article talking about what went well – and not so well – in my Hacking with Swift work this year. Hopefully you don’t find it too dull, but I only do it once a year!</p>\n<h2>Updates, rewrites, and more</h2>\n<p>This year I published a new, free book called <a href=\"https://www.hackingwithswift.com/quick-start/understanding-swift\">Understanding Swift</a>, which was entirely unlike all the other books I’ve written previously because I wanted each chapter to answer one question. The goal here was to focus firmly on <em>why</em> Swift is the way it is, because there are lots of code samples out there for any given topic but not a great deal of explanation of why features and functionality exists in the first place.</p>\n<p>So, you’ll find chapters such as “What the heck are closures and why does Swift love them so much?”, “When should you write throwing functions?”, “How do Swift’s memberwise initializers work?”, and more – all questions that I was commonly asked by folks who were completing the <a href=\"https://www.hackingwithswift.com/100/swiftui\">100 Days of SwiftUI</a>.</p>\n<p>I also published [Swift on Sundays Volume 1](h...</p>",
      "summary": "A brief look back on another year of Hacking with Swift",
      "date_published": "2021-01-01T22:20:32.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/224/common-swiftui-mistakes-and-how-to-fix-them",
      "url": "https://www.hackingwithswift.com/articles/224/common-swiftui-mistakes-and-how-to-fix-them",
      "title": "8 Common SwiftUI Mistakes - and how to fix them",
      "content_html": "<p>SwiftUI is a big and complex framework, and although it’s great fun to work with there’s also a lot of scope for making mistakes. In this article I’m going to walk through eight common mistakes SwiftUI learners make, and how to fix them. </p>\n<p>Some of these mistakes are simple misunderstandings, and with SwiftUI being so big these are easy to make. Others are about getting a deeper understanding of how SwiftUI works, and still others are more a sign of legacy thinking – sometimes you spend a lot of time writing views and modifiers and don’t take the time to simplify the end result.</p>\n<p>Anyway, I’m not going to keep you in suspense about what these eight mistakes are, so here’s a brief summary before we dive into them:</p>\n<ol>\n<li>Adding views and modifiers where they aren’t needed</li>\n<li>Using @ObservedObject when they mean @StateObject</li>\n<li>Putting modifiers in the wrong order</li>\n<li>Attaching property observers to property wrappers</li>\n<li>Stroking shapes when they mean to stroke the border</li>\n<li>Using alerts and sheets with optionals</li>\n<li>Trying to get “behind” their SwiftUI view</li>\n<li>Creating dynamic views using invalid ranges</li>\n</ol>\n<p><strong>If you prefer to watch a video instead, I've got you covered!</strong></p>\n<!-- YOUTUBE: qkcKTJhDyLs -->\n<p>Still here? Okay, let’s get to it…</p>\n<h2>1. Adding views and modifiers where they aren’t needed</h2>\n<p>Let’s start with one of the most common, which is writing more SwiftUI code than you actually need. This is common partly because it’s often we write a lot of code as we’re figuring out a problem, but it’s easy to forget to clean up that code afterwards. It’s also sometimes a matter of slipping back into old habits, particular if you’ve come from UIKit or other user interface frameworks.</p>\n<p>As a starting example, how might you fill the screen with a red rectangle? You might write this:</p>\n<pre><code>Rectangle()\n    .fill(Color.red)</code></pre>\n<p>And honestly that works great – it gets the exact result you want. But half that code isn’t needed, because you can instead just say...</p>",
      "summary": "Write less code and get more done",
      "date_published": "2020-10-09T13:29:31.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/223/hacking-with-swift-live-2020-raises-38000-for-charity",
      "url": "https://www.hackingwithswift.com/articles/223/hacking-with-swift-live-2020-raises-38000-for-charity",
      "title": "Hacking with Swift Live 2020 raises $38,000 for charity",
      "content_html": "<p>Hacking with Swift Live 2020 just finished, delivering four days of packed tutorials and workshops walking through all the major new features for SwiftUI, UIKit, and more. Even better, because all our profits go to charity we were able to donate $38,000 to an incredible cause – folks made friends, learned lots of new Swift skills, and made a difference to the wider world.</p>\n<p>I’m hugely grateful to everyone who bought a ticket to the event, and the feedback so far has been really positive. Over four days we really got to know each other even though it was a remote event, and it’s amazing to see folks leaving with new friends. Thank you so much for coming!</p>\n<p>I’m also really grateful to our two sponsors: <a href=\"https://www.bitrise.io/\">Bitrise</a> came back for a second year as platinum sponsor, and several members of their team came along to the event. <a href=\"https://instabug.com/\">Instabug</a> also joined as silver sponsor for the first time, and it was great to have them on board.</p>\n<p>Both those companies could easily have used that money to show adverts on Google, Twitter, or other services, but they instead chose to make a significant charitable donation in order to support a community conference like this one. Thank you so much!</p>\n<p>Just like last year, we donated all our profits to <a href=\"https://www.specialeffect.org.uk/\">Special Effect</a>, who do remarkable work to help bring joy, laughter, creativity, and confidence into the lives of disabled children and adults. With the pandemic still raging many charities are having a hard time raising funds, so we’re glad to play a part in helping continue their awesome work.</p>\n<p>This event wouldn’t have been possible without the help of the organizing team: <a href=\"https://twitter.com/lofionic\">Chris Rivers</a>, <a href=\"https://twitter.com/sofaracing\">Daniel Leivers</a>, <a href=\"https://twitter.com/ian_lockett\">Ian Lockett</a>, and my wife <a href=\"https://twitter.com/mrstwostraws\">Ildiko</a>. We all work really hard to bring this event to you and don’t get paid a penny – we send everything we can to charity.</p>\n<p>So, ...</p>",
      "summary": "Make apps, make friends, make a difference",
      "date_published": "2020-07-16T16:55:11.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/222/wwdc20-wrap-up-and-recommended-talks",
      "url": "https://www.hackingwithswift.com/articles/222/wwdc20-wrap-up-and-recommended-talks",
      "title": "WWDC20: Wrap up and recommended talks",
      "content_html": "<p>WWDC20 was a packed event as always, with some incredible steps forward for macOS, SwiftUI, and more. Was it better than the regular event? Yes. Will it go back to how it was before? <em>That’s</em> harder to say.</p>\n<p>In this article I’ll go over how I thought the sessions and labs compared to an in-person WWDC event, pick out my favorite community events, cover the talks I enjoyed the most and the talks I think you should watch if you're short on time, and also look forward to what might happen next year.</p>\n<h2>Full stream ahead from Apple Park</h2>\n<p>Even from the very first minutes of the keynote it was clear these WWDC presentations were going to be like no other. First, the video quality was – predictably – stunning, and on a 4K TV it felt like you were in the room with Tim, Craig, and the others. Second, Apple Park was a key cast member: they jumped around from the Steve Jobs Theater to the health studio, to the “secret underwater lab” and it felt <em>amazing</em>.</p>\n<p><img src=\"/uploads/articles/wwdc20-lab.gif\" alt=\"A long camera shot that seems to take us from Steve Jobs Theater to a secret underwater lab.\" /></p>\n<p>None of this would have been possible in a regular WWDC20. You’d never get that close to the various senior Apple folks, and although I have a fondness for the McEnery Center it’s never going to come close to Apple Park.</p>\n<p>Throughout the week, the video production naturally became more practical and less glitzy as the topics became hands on, but the actual production quality was still very high. I can’t imagine how much time it must have taken to make each video, because each one was clearly stitched together from many takes.</p>\n<p>The remote format allows several things:</p>\n<ol>\n<li>Each video was only as long as it needed to be. Most previous WWDC talks aimed to be about 40 minutes so they could keep a fixed structure at the venue, but at WWDC20 I watched many that were under 15 minutes. These weren’t just “easy talks” either – [Advances in diffable data sources](<a href=\"https://developer.apple.com/videos/play/wwdc20\">https://developer.apple.com/videos/play/wwdc20</a>...</li>\n</ol>",
      "summary": "Packed Sessions, hands-on labs, and a look forward to next year",
      "date_published": "2020-06-28T14:30:24.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/221/whats-new-in-swiftui-for-ios-14",
      "url": "https://www.hackingwithswift.com/articles/221/whats-new-in-swiftui-for-ios-14",
      "title": "What’s new in SwiftUI for iOS 14",
      "content_html": "<p>SwiftUI was inevitably going to see big changes this year, and I’m really excited to experiment with them all – text views, color pickers, progress views, and even limited support for grids have all landed. Alongside massive improvements to Swift itself (see <a href=\"https://www.hackingwithswift.com/articles/218/whats-new-in-swift-5-3\">What's new in Swift 5.3</a> for more on that), this is a huge leap forward for SwiftUI – we can now make a much wider range of apps.</p>\n<p>Please keep in mind that these changes are very new – I'm pushing it as hard as I can, experimenting, refining, sharing, and learning all at the same time. If you have any feedback, please <a href=\"https://twitter.com/twostraws\">tweet me @twostraws</a>.</p>\n<p>You can watch the video below, or scroll down for links to articles.</p>\n<!-- YOUTUBE: -h8pk2pe7Xo -->\n<h2>The big stuff</h2>\n<ul>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-multi-line-editable-text-with-texteditor\">How to create multi-line editable text with TextEditor</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-position-views-in-a-grid-using-lazyvgrid-and-lazyhgrid\">How to position views in a grid using LazyVGrid and LazyHGrid</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-document-based-app-using-filedocument-and-documentgroup\">How to create a document-based app using FileDocument and DocumentGroup</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-lazy-load-views-using-lazyvstack-and-lazyhstack\">How to lazy load views using LazyVStack and LazyHStack</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-let-users-select-a-color-with-colorpicker\">How to let users select a color with ColorPicker</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-create-a-toolbar-and-add-buttons-to-it\">How to create a toolbar and add buttons to it</a></li>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-add-a-sidebar-for-ipados\">How to add a sidebar for iPadOS</a></li>\n</ul>\n<h2>More welcome improvements</h2>\n<ul>\n<li><a href=\"https://www.hackingwithswift.com/quick-start/swiftui/how-to-make-a-scroll-view-move-to-a-location-using-scrollviewreader\">How to make a scroll view move to a location using ScrollViewReader</a></li>\n<li>[How to show a map view](/quick-start/swift...</li>\n</ul>",
      "summary": "Text views, grids, color pickers, and more!",
      "date_published": "2020-06-22T22:27:42.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    },
    {
      "guid": "https://www.hackingwithswift.com/articles/220/introducing-hacking-with-swift-plus",
      "url": "https://www.hackingwithswift.com/articles/220/introducing-hacking-with-swift-plus",
      "title": "Introducing Hacking with Swift+",
      "content_html": "<p>Every day 40,000 people visit Hacking with Swift to learn Swift, solve a problem with their code, or get advice for their iOS career, reading 5,000,000 pages over the course of an average month.</p>\n<p>Serving the community I’m part of has always been important to me, which is why I try to give away as much free content as I can – free videos, free tutorials, free example code, free interview tests, and more, all to help people achieve their goals with Swift. </p>\n<p>I want to continue this work as long as I can, and help as many people as I can, which means I need a solution to financially support my work for the long term.</p>\n<p>Well, that solution is finally here: it’s called <a href=\"https://www.hackingwithswift.com/plus\">Hacking with Swift+</a>, and it’s my first ever subscription option for Swift content. The first articles are already published, with each one having 4K Ultra HD video attached, and there are many more to come.</p>\n<p>All articles posted there will come with video, so folks can read or watch depending on what they prefer, and three courses already have their first videos published: Advanced Swift, Custom SwiftUI Components, and High-Performance Apps – many more will come soon.</p>\n<p>I still plan to release as much free content as I can, but I’m hoping this subscription option will create a firm foundation for Hacking with Swift for years to come. I’m working on so many exciting things right now, and I can’t wait to share them!</p>\n<p><a href=\"https://www.hackingwithswift.com/plus\">To find out more or subscribe to Hacking with Swift+, click here.</a></p>",
      "summary": "A new subscription service to help deepen your knowledge of Swift",
      "date_published": "2020-06-04T14:53:44.000Z",
      "author": {
        "name": "Paul Hudson"
      }
    }
  ]
}